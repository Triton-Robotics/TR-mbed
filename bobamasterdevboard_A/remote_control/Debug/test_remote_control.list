
test_remote_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b34  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08005ce0  08005ce0  00015ce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d0c  08005d0c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005d0c  08005d0c  00015d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d14  08005d14  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d14  08005d14  00015d14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d18  08005d18  00015d18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005d1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000066c  2000000c  08005d28  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000678  08005d28  00020678  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a61b  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cc3  00000000  00000000  0003a657  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001380  00000000  00000000  0003d320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012a0  00000000  00000000  0003e6a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025141  00000000  00000000  0003f940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001710c  00000000  00000000  00064a81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e0611  00000000  00000000  0007bb8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015c19e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005348  00000000  00000000  0015c1f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08005cc8 	.word	0x08005cc8

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08005cc8 	.word	0x08005cc8

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96e 	b.w	80004e0 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468c      	mov	ip, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	f040 8083 	bne.w	8000332 <__udivmoddi4+0x116>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d947      	bls.n	80002c2 <__udivmoddi4+0xa6>
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	b142      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000238:	f1c2 0020 	rsb	r0, r2, #32
 800023c:	fa24 f000 	lsr.w	r0, r4, r0
 8000240:	4091      	lsls	r1, r2
 8000242:	4097      	lsls	r7, r2
 8000244:	ea40 0c01 	orr.w	ip, r0, r1
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbbc f6f8 	udiv	r6, ip, r8
 8000254:	fa1f fe87 	uxth.w	lr, r7
 8000258:	fb08 c116 	mls	r1, r8, r6, ip
 800025c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000260:	fb06 f10e 	mul.w	r1, r6, lr
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18fb      	adds	r3, r7, r3
 800026a:	f106 30ff 	add.w	r0, r6, #4294967295
 800026e:	f080 8119 	bcs.w	80004a4 <__udivmoddi4+0x288>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8116 	bls.w	80004a4 <__udivmoddi4+0x288>
 8000278:	3e02      	subs	r6, #2
 800027a:	443b      	add	r3, r7
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0f8 	udiv	r0, r3, r8
 8000284:	fb08 3310 	mls	r3, r8, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000290:	45a6      	cmp	lr, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	193c      	adds	r4, r7, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 8105 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 800029e:	45a6      	cmp	lr, r4
 80002a0:	f240 8102 	bls.w	80004a8 <__udivmoddi4+0x28c>
 80002a4:	3802      	subs	r0, #2
 80002a6:	443c      	add	r4, r7
 80002a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ac:	eba4 040e 	sub.w	r4, r4, lr
 80002b0:	2600      	movs	r6, #0
 80002b2:	b11d      	cbz	r5, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c5 4300 	strd	r4, r3, [r5]
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	b902      	cbnz	r2, 80002c6 <__udivmoddi4+0xaa>
 80002c4:	deff      	udf	#255	; 0xff
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	2a00      	cmp	r2, #0
 80002cc:	d150      	bne.n	8000370 <__udivmoddi4+0x154>
 80002ce:	1bcb      	subs	r3, r1, r7
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f f887 	uxth.w	r8, r7
 80002d8:	2601      	movs	r6, #1
 80002da:	fbb3 fcfe 	udiv	ip, r3, lr
 80002de:	0c21      	lsrs	r1, r4, #16
 80002e0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002e8:	fb08 f30c 	mul.w	r3, r8, ip
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d907      	bls.n	8000300 <__udivmoddi4+0xe4>
 80002f0:	1879      	adds	r1, r7, r1
 80002f2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0xe2>
 80002f8:	428b      	cmp	r3, r1
 80002fa:	f200 80e9 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 80002fe:	4684      	mov	ip, r0
 8000300:	1ac9      	subs	r1, r1, r3
 8000302:	b2a3      	uxth	r3, r4
 8000304:	fbb1 f0fe 	udiv	r0, r1, lr
 8000308:	fb0e 1110 	mls	r1, lr, r0, r1
 800030c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000310:	fb08 f800 	mul.w	r8, r8, r0
 8000314:	45a0      	cmp	r8, r4
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x10c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x10a>
 8000320:	45a0      	cmp	r8, r4
 8000322:	f200 80d9 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 8000326:	4618      	mov	r0, r3
 8000328:	eba4 0408 	sub.w	r4, r4, r8
 800032c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000330:	e7bf      	b.n	80002b2 <__udivmoddi4+0x96>
 8000332:	428b      	cmp	r3, r1
 8000334:	d909      	bls.n	800034a <__udivmoddi4+0x12e>
 8000336:	2d00      	cmp	r5, #0
 8000338:	f000 80b1 	beq.w	800049e <__udivmoddi4+0x282>
 800033c:	2600      	movs	r6, #0
 800033e:	e9c5 0100 	strd	r0, r1, [r5]
 8000342:	4630      	mov	r0, r6
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	fab3 f683 	clz	r6, r3
 800034e:	2e00      	cmp	r6, #0
 8000350:	d14a      	bne.n	80003e8 <__udivmoddi4+0x1cc>
 8000352:	428b      	cmp	r3, r1
 8000354:	d302      	bcc.n	800035c <__udivmoddi4+0x140>
 8000356:	4282      	cmp	r2, r0
 8000358:	f200 80b8 	bhi.w	80004cc <__udivmoddi4+0x2b0>
 800035c:	1a84      	subs	r4, r0, r2
 800035e:	eb61 0103 	sbc.w	r1, r1, r3
 8000362:	2001      	movs	r0, #1
 8000364:	468c      	mov	ip, r1
 8000366:	2d00      	cmp	r5, #0
 8000368:	d0a8      	beq.n	80002bc <__udivmoddi4+0xa0>
 800036a:	e9c5 4c00 	strd	r4, ip, [r5]
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0xa0>
 8000370:	f1c2 0320 	rsb	r3, r2, #32
 8000374:	fa20 f603 	lsr.w	r6, r0, r3
 8000378:	4097      	lsls	r7, r2
 800037a:	fa01 f002 	lsl.w	r0, r1, r2
 800037e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000382:	40d9      	lsrs	r1, r3
 8000384:	4330      	orrs	r0, r6
 8000386:	0c03      	lsrs	r3, r0, #16
 8000388:	fbb1 f6fe 	udiv	r6, r1, lr
 800038c:	fa1f f887 	uxth.w	r8, r7
 8000390:	fb0e 1116 	mls	r1, lr, r6, r1
 8000394:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000398:	fb06 f108 	mul.w	r1, r6, r8
 800039c:	4299      	cmp	r1, r3
 800039e:	fa04 f402 	lsl.w	r4, r4, r2
 80003a2:	d909      	bls.n	80003b8 <__udivmoddi4+0x19c>
 80003a4:	18fb      	adds	r3, r7, r3
 80003a6:	f106 3cff 	add.w	ip, r6, #4294967295
 80003aa:	f080 808d 	bcs.w	80004c8 <__udivmoddi4+0x2ac>
 80003ae:	4299      	cmp	r1, r3
 80003b0:	f240 808a 	bls.w	80004c8 <__udivmoddi4+0x2ac>
 80003b4:	3e02      	subs	r6, #2
 80003b6:	443b      	add	r3, r7
 80003b8:	1a5b      	subs	r3, r3, r1
 80003ba:	b281      	uxth	r1, r0
 80003bc:	fbb3 f0fe 	udiv	r0, r3, lr
 80003c0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003c8:	fb00 f308 	mul.w	r3, r0, r8
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x1c4>
 80003d0:	1879      	adds	r1, r7, r1
 80003d2:	f100 3cff 	add.w	ip, r0, #4294967295
 80003d6:	d273      	bcs.n	80004c0 <__udivmoddi4+0x2a4>
 80003d8:	428b      	cmp	r3, r1
 80003da:	d971      	bls.n	80004c0 <__udivmoddi4+0x2a4>
 80003dc:	3802      	subs	r0, #2
 80003de:	4439      	add	r1, r7
 80003e0:	1acb      	subs	r3, r1, r3
 80003e2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003e6:	e778      	b.n	80002da <__udivmoddi4+0xbe>
 80003e8:	f1c6 0c20 	rsb	ip, r6, #32
 80003ec:	fa03 f406 	lsl.w	r4, r3, r6
 80003f0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f4:	431c      	orrs	r4, r3
 80003f6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003fa:	fa01 f306 	lsl.w	r3, r1, r6
 80003fe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000402:	fa21 f10c 	lsr.w	r1, r1, ip
 8000406:	431f      	orrs	r7, r3
 8000408:	0c3b      	lsrs	r3, r7, #16
 800040a:	fbb1 f9fe 	udiv	r9, r1, lr
 800040e:	fa1f f884 	uxth.w	r8, r4
 8000412:	fb0e 1119 	mls	r1, lr, r9, r1
 8000416:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800041a:	fb09 fa08 	mul.w	sl, r9, r8
 800041e:	458a      	cmp	sl, r1
 8000420:	fa02 f206 	lsl.w	r2, r2, r6
 8000424:	fa00 f306 	lsl.w	r3, r0, r6
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x220>
 800042a:	1861      	adds	r1, r4, r1
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d248      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000432:	458a      	cmp	sl, r1
 8000434:	d946      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	4421      	add	r1, r4
 800043c:	eba1 010a 	sub.w	r1, r1, sl
 8000440:	b2bf      	uxth	r7, r7
 8000442:	fbb1 f0fe 	udiv	r0, r1, lr
 8000446:	fb0e 1110 	mls	r1, lr, r0, r1
 800044a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45b8      	cmp	r8, r7
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x24a>
 8000456:	19e7      	adds	r7, r4, r7
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d22e      	bcs.n	80004bc <__udivmoddi4+0x2a0>
 800045e:	45b8      	cmp	r8, r7
 8000460:	d92c      	bls.n	80004bc <__udivmoddi4+0x2a0>
 8000462:	3802      	subs	r0, #2
 8000464:	4427      	add	r7, r4
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba7 0708 	sub.w	r7, r7, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454f      	cmp	r7, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	4649      	mov	r1, r9
 8000478:	d31a      	bcc.n	80004b0 <__udivmoddi4+0x294>
 800047a:	d017      	beq.n	80004ac <__udivmoddi4+0x290>
 800047c:	b15d      	cbz	r5, 8000496 <__udivmoddi4+0x27a>
 800047e:	ebb3 020e 	subs.w	r2, r3, lr
 8000482:	eb67 0701 	sbc.w	r7, r7, r1
 8000486:	fa07 fc0c 	lsl.w	ip, r7, ip
 800048a:	40f2      	lsrs	r2, r6
 800048c:	ea4c 0202 	orr.w	r2, ip, r2
 8000490:	40f7      	lsrs	r7, r6
 8000492:	e9c5 2700 	strd	r2, r7, [r5]
 8000496:	2600      	movs	r6, #0
 8000498:	4631      	mov	r1, r6
 800049a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049e:	462e      	mov	r6, r5
 80004a0:	4628      	mov	r0, r5
 80004a2:	e70b      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a4:	4606      	mov	r6, r0
 80004a6:	e6e9      	b.n	800027c <__udivmoddi4+0x60>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e6fd      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004ac:	4543      	cmp	r3, r8
 80004ae:	d2e5      	bcs.n	800047c <__udivmoddi4+0x260>
 80004b0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b4:	eb69 0104 	sbc.w	r1, r9, r4
 80004b8:	3801      	subs	r0, #1
 80004ba:	e7df      	b.n	800047c <__udivmoddi4+0x260>
 80004bc:	4608      	mov	r0, r1
 80004be:	e7d2      	b.n	8000466 <__udivmoddi4+0x24a>
 80004c0:	4660      	mov	r0, ip
 80004c2:	e78d      	b.n	80003e0 <__udivmoddi4+0x1c4>
 80004c4:	4681      	mov	r9, r0
 80004c6:	e7b9      	b.n	800043c <__udivmoddi4+0x220>
 80004c8:	4666      	mov	r6, ip
 80004ca:	e775      	b.n	80003b8 <__udivmoddi4+0x19c>
 80004cc:	4630      	mov	r0, r6
 80004ce:	e74a      	b.n	8000366 <__udivmoddi4+0x14a>
 80004d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d4:	4439      	add	r1, r7
 80004d6:	e713      	b.n	8000300 <__udivmoddi4+0xe4>
 80004d8:	3802      	subs	r0, #2
 80004da:	443c      	add	r4, r7
 80004dc:	e724      	b.n	8000328 <__udivmoddi4+0x10c>
 80004de:	bf00      	nop

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <int16ToInt8s>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

char* int16ToInt8s(int16_t in){
 80004e4:	b480      	push	{r7}
 80004e6:	b085      	sub	sp, #20
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	4603      	mov	r3, r0
 80004ec:	80fb      	strh	r3, [r7, #6]
	char out[2] = {in>>8, in & 0xFF};
 80004ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80004f2:	121b      	asrs	r3, r3, #8
 80004f4:	b21b      	sxth	r3, r3
 80004f6:	b2db      	uxtb	r3, r3
 80004f8:	733b      	strb	r3, [r7, #12]
 80004fa:	88fb      	ldrh	r3, [r7, #6]
 80004fc:	b2db      	uxtb	r3, r3
 80004fe:	737b      	strb	r3, [r7, #13]
	return out;
 8000500:	2300      	movs	r3, #0
}
 8000502:	4618      	mov	r0, r3
 8000504:	3714      	adds	r7, #20
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr

0800050e <int2sToInt8>:
char int2sToInt8(int in1, int in2){
 800050e:	b480      	push	{r7}
 8000510:	b085      	sub	sp, #20
 8000512:	af00      	add	r7, sp, #0
 8000514:	6078      	str	r0, [r7, #4]
 8000516:	6039      	str	r1, [r7, #0]
	char out = in1 << 2 | in2;
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	009b      	lsls	r3, r3, #2
 800051c:	b25a      	sxtb	r2, r3
 800051e:	683b      	ldr	r3, [r7, #0]
 8000520:	b25b      	sxtb	r3, r3
 8000522:	4313      	orrs	r3, r2
 8000524:	b25b      	sxtb	r3, r3
 8000526:	73fb      	strb	r3, [r7, #15]
	return out;
 8000528:	7bfb      	ldrb	r3, [r7, #15]
}
 800052a:	4618      	mov	r0, r3
 800052c:	3714      	adds	r7, #20
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
	...

08000538 <getRCVals>:

void getRCVals() {
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
	leftJoyX = rc.ch3;
 800053c:	4b13      	ldr	r3, [pc, #76]	; (800058c <getRCVals+0x54>)
 800053e:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8000542:	4b13      	ldr	r3, [pc, #76]	; (8000590 <getRCVals+0x58>)
 8000544:	801a      	strh	r2, [r3, #0]
	leftJoyY = rc.ch4;
 8000546:	4b11      	ldr	r3, [pc, #68]	; (800058c <getRCVals+0x54>)
 8000548:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800054c:	4b11      	ldr	r3, [pc, #68]	; (8000594 <getRCVals+0x5c>)
 800054e:	801a      	strh	r2, [r3, #0]
	rightJoyX = rc.ch1;
 8000550:	4b0e      	ldr	r3, [pc, #56]	; (800058c <getRCVals+0x54>)
 8000552:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000556:	4b10      	ldr	r3, [pc, #64]	; (8000598 <getRCVals+0x60>)
 8000558:	801a      	strh	r2, [r3, #0]
	rightJoyY = rc.ch2;
 800055a:	4b0c      	ldr	r3, [pc, #48]	; (800058c <getRCVals+0x54>)
 800055c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8000560:	4b0e      	ldr	r3, [pc, #56]	; (800059c <getRCVals+0x64>)
 8000562:	801a      	strh	r2, [r3, #0]

	wheel = rc.wheel;
 8000564:	4b09      	ldr	r3, [pc, #36]	; (800058c <getRCVals+0x54>)
 8000566:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 800056a:	4b0d      	ldr	r3, [pc, #52]	; (80005a0 <getRCVals+0x68>)
 800056c:	801a      	strh	r2, [r3, #0]

	leftSwitch = rc.sw1;
 800056e:	4b07      	ldr	r3, [pc, #28]	; (800058c <getRCVals+0x54>)
 8000570:	7a9b      	ldrb	r3, [r3, #10]
 8000572:	b21a      	sxth	r2, r3
 8000574:	4b0b      	ldr	r3, [pc, #44]	; (80005a4 <getRCVals+0x6c>)
 8000576:	801a      	strh	r2, [r3, #0]
	rightSwitch = rc.sw2;
 8000578:	4b04      	ldr	r3, [pc, #16]	; (800058c <getRCVals+0x54>)
 800057a:	7adb      	ldrb	r3, [r3, #11]
 800057c:	b21a      	sxth	r2, r3
 800057e:	4b0a      	ldr	r3, [pc, #40]	; (80005a8 <getRCVals+0x70>)
 8000580:	801a      	strh	r2, [r3, #0]


}
 8000582:	bf00      	nop
 8000584:	46bd      	mov	sp, r7
 8000586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058a:	4770      	bx	lr
 800058c:	20000638 	.word	0x20000638
 8000590:	200001cc 	.word	0x200001cc
 8000594:	200001ca 	.word	0x200001ca
 8000598:	2000038c 	.word	0x2000038c
 800059c:	200001c8 	.word	0x200001c8
 80005a0:	2000002c 	.word	0x2000002c
 80005a4:	200001ce 	.word	0x200001ce
 80005a8:	20000598 	.word	0x20000598

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b088      	sub	sp, #32
 80005b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b2:	f001 fddd 	bl	8002170 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b6:	f000 f8a3 	bl	8000700 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ba:	f000 fcef 	bl	8000f9c <MX_GPIO_Init>
  MX_DMA_Init();
 80005be:	f000 fcaf 	bl	8000f20 <MX_DMA_Init>
  MX_CAN1_Init();
 80005c2:	f000 f907 	bl	80007d4 <MX_CAN1_Init>
  MX_CAN2_Init();
 80005c6:	f000 f93b 	bl	8000840 <MX_CAN2_Init>
  MX_SPI5_Init();
 80005ca:	f000 f9af 	bl	800092c <MX_SPI5_Init>
  MX_TIM2_Init();
 80005ce:	f000 f9e3 	bl	8000998 <MX_TIM2_Init>
  MX_TIM4_Init();
 80005d2:	f000 fa9f 	bl	8000b14 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 80005d6:	f000 fc23 	bl	8000e20 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80005da:	f000 fc4d 	bl	8000e78 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 80005de:	f000 fc75 	bl	8000ecc <MX_USART6_UART_Init>
  MX_TIM3_Init();
 80005e2:	f000 fa3d 	bl	8000a60 <MX_TIM3_Init>
  MX_TIM12_Init();
 80005e6:	f000 fb81 	bl	8000cec <MX_TIM12_Init>
  MX_TIM5_Init();
 80005ea:	f000 fb0f 	bl	8000c0c <MX_TIM5_Init>
  MX_I2C3_Init();
 80005ee:	f000 f95d 	bl	80008ac <MX_I2C3_Init>
  MX_UART4_Init();
 80005f2:	f000 fbc1 	bl	8000d78 <MX_UART4_Init>
  MX_UART7_Init();
 80005f6:	f000 fbe9 	bl	8000dcc <MX_UART7_Init>
  /* USER CODE BEGIN 2 */

  led_off();
 80005fa:	f000 fe13 	bl	8001224 <led_off>
  power_on();
 80005fe:	f000 fe25 	bl	800124c <power_on>
  dbus_uart_init();
 8000602:	f000 ffeb 	bl	80015dc <dbus_uart_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  getRCVals();
 8000606:	f7ff ff97 	bl	8000538 <getRCVals>
	  char sendString[11] = {0,0,0,0,0,0,0,0,0,0,0};
 800060a:	4a33      	ldr	r2, [pc, #204]	; (80006d8 <main+0x12c>)
 800060c:	463b      	mov	r3, r7
 800060e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000610:	c303      	stmia	r3!, {r0, r1}
 8000612:	801a      	strh	r2, [r3, #0]
 8000614:	3302      	adds	r3, #2
 8000616:	0c12      	lsrs	r2, r2, #16
 8000618:	701a      	strb	r2, [r3, #0]
	  char *lXC = int16ToInt8s(leftJoyX);
 800061a:	4b30      	ldr	r3, [pc, #192]	; (80006dc <main+0x130>)
 800061c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000620:	4618      	mov	r0, r3
 8000622:	f7ff ff5f 	bl	80004e4 <int16ToInt8s>
 8000626:	61f8      	str	r0, [r7, #28]
	  char *lYC = int16ToInt8s(leftJoyY);
 8000628:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <main+0x134>)
 800062a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800062e:	4618      	mov	r0, r3
 8000630:	f7ff ff58 	bl	80004e4 <int16ToInt8s>
 8000634:	61b8      	str	r0, [r7, #24]
	  char *rXC = int16ToInt8s(rightJoyX);
 8000636:	4b2b      	ldr	r3, [pc, #172]	; (80006e4 <main+0x138>)
 8000638:	f9b3 3000 	ldrsh.w	r3, [r3]
 800063c:	4618      	mov	r0, r3
 800063e:	f7ff ff51 	bl	80004e4 <int16ToInt8s>
 8000642:	6178      	str	r0, [r7, #20]
	  char *rYC = int16ToInt8s(rightJoyY);
 8000644:	4b28      	ldr	r3, [pc, #160]	; (80006e8 <main+0x13c>)
 8000646:	f9b3 3000 	ldrsh.w	r3, [r3]
 800064a:	4618      	mov	r0, r3
 800064c:	f7ff ff4a 	bl	80004e4 <int16ToInt8s>
 8000650:	6138      	str	r0, [r7, #16]
	  char *wC = int16ToInt8s(wheel);
 8000652:	4b26      	ldr	r3, [pc, #152]	; (80006ec <main+0x140>)
 8000654:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000658:	4618      	mov	r0, r3
 800065a:	f7ff ff43 	bl	80004e4 <int16ToInt8s>
 800065e:	60f8      	str	r0, [r7, #12]
	  sendString[0] = lXC[0];
 8000660:	69fb      	ldr	r3, [r7, #28]
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	703b      	strb	r3, [r7, #0]
	  sendString[1] = lXC[1];
 8000666:	69fb      	ldr	r3, [r7, #28]
 8000668:	785b      	ldrb	r3, [r3, #1]
 800066a:	707b      	strb	r3, [r7, #1]
	  sendString[2] = lYC[0];
 800066c:	69bb      	ldr	r3, [r7, #24]
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	70bb      	strb	r3, [r7, #2]
	  sendString[3] = lYC[1];
 8000672:	69bb      	ldr	r3, [r7, #24]
 8000674:	785b      	ldrb	r3, [r3, #1]
 8000676:	70fb      	strb	r3, [r7, #3]
	  sendString[4] = rXC[0];
 8000678:	697b      	ldr	r3, [r7, #20]
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	713b      	strb	r3, [r7, #4]
	  sendString[5] = rXC[1];
 800067e:	697b      	ldr	r3, [r7, #20]
 8000680:	785b      	ldrb	r3, [r3, #1]
 8000682:	717b      	strb	r3, [r7, #5]
	  sendString[6] = rYC[0];
 8000684:	693b      	ldr	r3, [r7, #16]
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	71bb      	strb	r3, [r7, #6]
	  sendString[7] = rYC[1];
 800068a:	693b      	ldr	r3, [r7, #16]
 800068c:	785b      	ldrb	r3, [r3, #1]
 800068e:	71fb      	strb	r3, [r7, #7]
	  sendString[8] = wC[0];
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	723b      	strb	r3, [r7, #8]
	  sendString[9] = wC[1];
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	785b      	ldrb	r3, [r3, #1]
 800069a:	727b      	strb	r3, [r7, #9]
	  sendString[10] = int2sToInt8(leftSwitch, rightSwitch);
 800069c:	4b14      	ldr	r3, [pc, #80]	; (80006f0 <main+0x144>)
 800069e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006a2:	461a      	mov	r2, r3
 80006a4:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <main+0x148>)
 80006a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006aa:	4619      	mov	r1, r3
 80006ac:	4610      	mov	r0, r2
 80006ae:	f7ff ff2e 	bl	800050e <int2sToInt8>
 80006b2:	4603      	mov	r3, r0
 80006b4:	72bb      	strb	r3, [r7, #10]
	  HAL_UART_Transmit(&huart7, sendString ,sizeof(sendString),HAL_MAX_DELAY);
 80006b6:	4639      	mov	r1, r7
 80006b8:	f04f 33ff 	mov.w	r3, #4294967295
 80006bc:	220b      	movs	r2, #11
 80006be:	480e      	ldr	r0, [pc, #56]	; (80006f8 <main+0x14c>)
 80006c0:	f004 fbbb 	bl	8004e3a <HAL_UART_Transmit>

	  HAL_Delay(1000);
 80006c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006c8:	f001 fdc4 	bl	8002254 <HAL_Delay>
	  HAL_GPIO_TogglePin (GPIOG, GPIO_PIN_1);
 80006cc:	2102      	movs	r1, #2
 80006ce:	480b      	ldr	r0, [pc, #44]	; (80006fc <main+0x150>)
 80006d0:	f003 f8dd 	bl	800388e <HAL_GPIO_TogglePin>
  {
 80006d4:	e797      	b.n	8000606 <main+0x5a>
 80006d6:	bf00      	nop
 80006d8:	08005ce0 	.word	0x08005ce0
 80006dc:	200001cc 	.word	0x200001cc
 80006e0:	200001ca 	.word	0x200001ca
 80006e4:	2000038c 	.word	0x2000038c
 80006e8:	200001c8 	.word	0x200001c8
 80006ec:	2000002c 	.word	0x2000002c
 80006f0:	200001ce 	.word	0x200001ce
 80006f4:	20000598 	.word	0x20000598
 80006f8:	200000e4 	.word	0x200000e4
 80006fc:	40021800 	.word	0x40021800

08000700 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b094      	sub	sp, #80	; 0x50
 8000704:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000706:	f107 0320 	add.w	r3, r7, #32
 800070a:	2230      	movs	r2, #48	; 0x30
 800070c:	2100      	movs	r1, #0
 800070e:	4618      	mov	r0, r3
 8000710:	f005 fad2 	bl	8005cb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000714:	f107 030c 	add.w	r3, r7, #12
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	605a      	str	r2, [r3, #4]
 800071e:	609a      	str	r2, [r3, #8]
 8000720:	60da      	str	r2, [r3, #12]
 8000722:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000724:	2300      	movs	r3, #0
 8000726:	60bb      	str	r3, [r7, #8]
 8000728:	4b28      	ldr	r3, [pc, #160]	; (80007cc <SystemClock_Config+0xcc>)
 800072a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800072c:	4a27      	ldr	r2, [pc, #156]	; (80007cc <SystemClock_Config+0xcc>)
 800072e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000732:	6413      	str	r3, [r2, #64]	; 0x40
 8000734:	4b25      	ldr	r3, [pc, #148]	; (80007cc <SystemClock_Config+0xcc>)
 8000736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000738:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800073c:	60bb      	str	r3, [r7, #8]
 800073e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000740:	2300      	movs	r3, #0
 8000742:	607b      	str	r3, [r7, #4]
 8000744:	4b22      	ldr	r3, [pc, #136]	; (80007d0 <SystemClock_Config+0xd0>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a21      	ldr	r2, [pc, #132]	; (80007d0 <SystemClock_Config+0xd0>)
 800074a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800074e:	6013      	str	r3, [r2, #0]
 8000750:	4b1f      	ldr	r3, [pc, #124]	; (80007d0 <SystemClock_Config+0xd0>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000758:	607b      	str	r3, [r7, #4]
 800075a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800075c:	2301      	movs	r3, #1
 800075e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000760:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000764:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000766:	2302      	movs	r3, #2
 8000768:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800076a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800076e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8000770:	2306      	movs	r3, #6
 8000772:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000774:	23a8      	movs	r3, #168	; 0xa8
 8000776:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000778:	2302      	movs	r3, #2
 800077a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800077c:	2304      	movs	r3, #4
 800077e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000780:	f107 0320 	add.w	r3, r7, #32
 8000784:	4618      	mov	r0, r3
 8000786:	f003 fa5d 	bl	8003c44 <HAL_RCC_OscConfig>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000790:	f000 fcde 	bl	8001150 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000794:	230f      	movs	r3, #15
 8000796:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000798:	2302      	movs	r3, #2
 800079a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800079c:	2300      	movs	r3, #0
 800079e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007a0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007ac:	f107 030c 	add.w	r3, r7, #12
 80007b0:	2105      	movs	r1, #5
 80007b2:	4618      	mov	r0, r3
 80007b4:	f003 fcbe 	bl	8004134 <HAL_RCC_ClockConfig>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007be:	f000 fcc7 	bl	8001150 <Error_Handler>
  }
}
 80007c2:	bf00      	nop
 80007c4:	3750      	adds	r7, #80	; 0x50
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	40023800 	.word	0x40023800
 80007d0:	40007000 	.word	0x40007000

080007d4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80007d8:	4b17      	ldr	r3, [pc, #92]	; (8000838 <MX_CAN1_Init+0x64>)
 80007da:	4a18      	ldr	r2, [pc, #96]	; (800083c <MX_CAN1_Init+0x68>)
 80007dc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 80007de:	4b16      	ldr	r3, [pc, #88]	; (8000838 <MX_CAN1_Init+0x64>)
 80007e0:	2203      	movs	r2, #3
 80007e2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80007e4:	4b14      	ldr	r3, [pc, #80]	; (8000838 <MX_CAN1_Init+0x64>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80007ea:	4b13      	ldr	r3, [pc, #76]	; (8000838 <MX_CAN1_Init+0x64>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_9TQ;
 80007f0:	4b11      	ldr	r3, [pc, #68]	; (8000838 <MX_CAN1_Init+0x64>)
 80007f2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80007f6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 80007f8:	4b0f      	ldr	r3, [pc, #60]	; (8000838 <MX_CAN1_Init+0x64>)
 80007fa:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80007fe:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000800:	4b0d      	ldr	r3, [pc, #52]	; (8000838 <MX_CAN1_Init+0x64>)
 8000802:	2200      	movs	r2, #0
 8000804:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000806:	4b0c      	ldr	r3, [pc, #48]	; (8000838 <MX_CAN1_Init+0x64>)
 8000808:	2200      	movs	r2, #0
 800080a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800080c:	4b0a      	ldr	r3, [pc, #40]	; (8000838 <MX_CAN1_Init+0x64>)
 800080e:	2200      	movs	r2, #0
 8000810:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000812:	4b09      	ldr	r3, [pc, #36]	; (8000838 <MX_CAN1_Init+0x64>)
 8000814:	2200      	movs	r2, #0
 8000816:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000818:	4b07      	ldr	r3, [pc, #28]	; (8000838 <MX_CAN1_Init+0x64>)
 800081a:	2200      	movs	r2, #0
 800081c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800081e:	4b06      	ldr	r3, [pc, #24]	; (8000838 <MX_CAN1_Init+0x64>)
 8000820:	2200      	movs	r2, #0
 8000822:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000824:	4804      	ldr	r0, [pc, #16]	; (8000838 <MX_CAN1_Init+0x64>)
 8000826:	f001 fd39 	bl	800229c <HAL_CAN_Init>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000830:	f000 fc8e 	bl	8001150 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000834:	bf00      	nop
 8000836:	bd80      	pop	{r7, pc}
 8000838:	20000570 	.word	0x20000570
 800083c:	40006400 	.word	0x40006400

08000840 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000844:	4b17      	ldr	r3, [pc, #92]	; (80008a4 <MX_CAN2_Init+0x64>)
 8000846:	4a18      	ldr	r2, [pc, #96]	; (80008a8 <MX_CAN2_Init+0x68>)
 8000848:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 800084a:	4b16      	ldr	r3, [pc, #88]	; (80008a4 <MX_CAN2_Init+0x64>)
 800084c:	2203      	movs	r2, #3
 800084e:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000850:	4b14      	ldr	r3, [pc, #80]	; (80008a4 <MX_CAN2_Init+0x64>)
 8000852:	2200      	movs	r2, #0
 8000854:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000856:	4b13      	ldr	r3, [pc, #76]	; (80008a4 <MX_CAN2_Init+0x64>)
 8000858:	2200      	movs	r2, #0
 800085a:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_9TQ;
 800085c:	4b11      	ldr	r3, [pc, #68]	; (80008a4 <MX_CAN2_Init+0x64>)
 800085e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000862:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000864:	4b0f      	ldr	r3, [pc, #60]	; (80008a4 <MX_CAN2_Init+0x64>)
 8000866:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 800086a:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 800086c:	4b0d      	ldr	r3, [pc, #52]	; (80008a4 <MX_CAN2_Init+0x64>)
 800086e:	2200      	movs	r2, #0
 8000870:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000872:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <MX_CAN2_Init+0x64>)
 8000874:	2200      	movs	r2, #0
 8000876:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000878:	4b0a      	ldr	r3, [pc, #40]	; (80008a4 <MX_CAN2_Init+0x64>)
 800087a:	2200      	movs	r2, #0
 800087c:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 800087e:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <MX_CAN2_Init+0x64>)
 8000880:	2200      	movs	r2, #0
 8000882:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000884:	4b07      	ldr	r3, [pc, #28]	; (80008a4 <MX_CAN2_Init+0x64>)
 8000886:	2200      	movs	r2, #0
 8000888:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 800088a:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <MX_CAN2_Init+0x64>)
 800088c:	2200      	movs	r2, #0
 800088e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000890:	4804      	ldr	r0, [pc, #16]	; (80008a4 <MX_CAN2_Init+0x64>)
 8000892:	f001 fd03 	bl	800229c <HAL_CAN_Init>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 800089c:	f000 fc58 	bl	8001150 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80008a0:	bf00      	nop
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	20000260 	.word	0x20000260
 80008a8:	40006800 	.word	0x40006800

080008ac <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80008b0:	4b1b      	ldr	r3, [pc, #108]	; (8000920 <MX_I2C3_Init+0x74>)
 80008b2:	4a1c      	ldr	r2, [pc, #112]	; (8000924 <MX_I2C3_Init+0x78>)
 80008b4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80008b6:	4b1a      	ldr	r3, [pc, #104]	; (8000920 <MX_I2C3_Init+0x74>)
 80008b8:	4a1b      	ldr	r2, [pc, #108]	; (8000928 <MX_I2C3_Init+0x7c>)
 80008ba:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008bc:	4b18      	ldr	r3, [pc, #96]	; (8000920 <MX_I2C3_Init+0x74>)
 80008be:	2200      	movs	r2, #0
 80008c0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80008c2:	4b17      	ldr	r3, [pc, #92]	; (8000920 <MX_I2C3_Init+0x74>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008c8:	4b15      	ldr	r3, [pc, #84]	; (8000920 <MX_I2C3_Init+0x74>)
 80008ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008ce:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008d0:	4b13      	ldr	r3, [pc, #76]	; (8000920 <MX_I2C3_Init+0x74>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80008d6:	4b12      	ldr	r3, [pc, #72]	; (8000920 <MX_I2C3_Init+0x74>)
 80008d8:	2200      	movs	r2, #0
 80008da:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008dc:	4b10      	ldr	r3, [pc, #64]	; (8000920 <MX_I2C3_Init+0x74>)
 80008de:	2200      	movs	r2, #0
 80008e0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008e2:	4b0f      	ldr	r3, [pc, #60]	; (8000920 <MX_I2C3_Init+0x74>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80008e8:	480d      	ldr	r0, [pc, #52]	; (8000920 <MX_I2C3_Init+0x74>)
 80008ea:	f002 ffeb 	bl	80038c4 <HAL_I2C_Init>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80008f4:	f000 fc2c 	bl	8001150 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008f8:	2100      	movs	r1, #0
 80008fa:	4809      	ldr	r0, [pc, #36]	; (8000920 <MX_I2C3_Init+0x74>)
 80008fc:	f003 f926 	bl	8003b4c <HAL_I2CEx_ConfigAnalogFilter>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000906:	f000 fc23 	bl	8001150 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800090a:	2100      	movs	r1, #0
 800090c:	4804      	ldr	r0, [pc, #16]	; (8000920 <MX_I2C3_Init+0x74>)
 800090e:	f003 f959 	bl	8003bc4 <HAL_I2CEx_ConfigDigitalFilter>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000918:	f000 fc1a 	bl	8001150 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800091c:	bf00      	nop
 800091e:	bd80      	pop	{r7, pc}
 8000920:	20000090 	.word	0x20000090
 8000924:	40005c00 	.word	0x40005c00
 8000928:	000186a0 	.word	0x000186a0

0800092c <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000930:	4b17      	ldr	r3, [pc, #92]	; (8000990 <MX_SPI5_Init+0x64>)
 8000932:	4a18      	ldr	r2, [pc, #96]	; (8000994 <MX_SPI5_Init+0x68>)
 8000934:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000936:	4b16      	ldr	r3, [pc, #88]	; (8000990 <MX_SPI5_Init+0x64>)
 8000938:	f44f 7282 	mov.w	r2, #260	; 0x104
 800093c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800093e:	4b14      	ldr	r3, [pc, #80]	; (8000990 <MX_SPI5_Init+0x64>)
 8000940:	2200      	movs	r2, #0
 8000942:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000944:	4b12      	ldr	r3, [pc, #72]	; (8000990 <MX_SPI5_Init+0x64>)
 8000946:	2200      	movs	r2, #0
 8000948:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800094a:	4b11      	ldr	r3, [pc, #68]	; (8000990 <MX_SPI5_Init+0x64>)
 800094c:	2200      	movs	r2, #0
 800094e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000950:	4b0f      	ldr	r3, [pc, #60]	; (8000990 <MX_SPI5_Init+0x64>)
 8000952:	2200      	movs	r2, #0
 8000954:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000956:	4b0e      	ldr	r3, [pc, #56]	; (8000990 <MX_SPI5_Init+0x64>)
 8000958:	f44f 7200 	mov.w	r2, #512	; 0x200
 800095c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800095e:	4b0c      	ldr	r3, [pc, #48]	; (8000990 <MX_SPI5_Init+0x64>)
 8000960:	2230      	movs	r2, #48	; 0x30
 8000962:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000964:	4b0a      	ldr	r3, [pc, #40]	; (8000990 <MX_SPI5_Init+0x64>)
 8000966:	2200      	movs	r2, #0
 8000968:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800096a:	4b09      	ldr	r3, [pc, #36]	; (8000990 <MX_SPI5_Init+0x64>)
 800096c:	2200      	movs	r2, #0
 800096e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000970:	4b07      	ldr	r3, [pc, #28]	; (8000990 <MX_SPI5_Init+0x64>)
 8000972:	2200      	movs	r2, #0
 8000974:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000976:	4b06      	ldr	r3, [pc, #24]	; (8000990 <MX_SPI5_Init+0x64>)
 8000978:	220a      	movs	r2, #10
 800097a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800097c:	4804      	ldr	r0, [pc, #16]	; (8000990 <MX_SPI5_Init+0x64>)
 800097e:	f003 fda9 	bl	80044d4 <HAL_SPI_Init>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000988:	f000 fbe2 	bl	8001150 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 800098c:	bf00      	nop
 800098e:	bd80      	pop	{r7, pc}
 8000990:	20000128 	.word	0x20000128
 8000994:	40015000 	.word	0x40015000

08000998 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b08a      	sub	sp, #40	; 0x28
 800099c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800099e:	f107 0320 	add.w	r3, r7, #32
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
 80009a6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009a8:	1d3b      	adds	r3, r7, #4
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]
 80009b0:	609a      	str	r2, [r3, #8]
 80009b2:	60da      	str	r2, [r3, #12]
 80009b4:	611a      	str	r2, [r3, #16]
 80009b6:	615a      	str	r2, [r3, #20]
 80009b8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009ba:	4b28      	ldr	r3, [pc, #160]	; (8000a5c <MX_TIM2_Init+0xc4>)
 80009bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009c0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = TIM_PSC_APB1;
 80009c2:	4b26      	ldr	r3, [pc, #152]	; (8000a5c <MX_TIM2_Init+0xc4>)
 80009c4:	22a7      	movs	r2, #167	; 0xa7
 80009c6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009c8:	4b24      	ldr	r3, [pc, #144]	; (8000a5c <MX_TIM2_Init+0xc4>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = PWM_RESOLUTION-1;
 80009ce:	4b23      	ldr	r3, [pc, #140]	; (8000a5c <MX_TIM2_Init+0xc4>)
 80009d0:	f242 720f 	movw	r2, #9999	; 0x270f
 80009d4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009d6:	4b21      	ldr	r3, [pc, #132]	; (8000a5c <MX_TIM2_Init+0xc4>)
 80009d8:	2200      	movs	r2, #0
 80009da:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009dc:	4b1f      	ldr	r3, [pc, #124]	; (8000a5c <MX_TIM2_Init+0xc4>)
 80009de:	2200      	movs	r2, #0
 80009e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80009e2:	481e      	ldr	r0, [pc, #120]	; (8000a5c <MX_TIM2_Init+0xc4>)
 80009e4:	f003 fdff 	bl	80045e6 <HAL_TIM_PWM_Init>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80009ee:	f000 fbaf 	bl	8001150 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009f2:	2300      	movs	r3, #0
 80009f4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009f6:	2300      	movs	r3, #0
 80009f8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009fa:	f107 0320 	add.w	r3, r7, #32
 80009fe:	4619      	mov	r1, r3
 8000a00:	4816      	ldr	r0, [pc, #88]	; (8000a5c <MX_TIM2_Init+0xc4>)
 8000a02:	f004 f951 	bl	8004ca8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000a0c:	f000 fba0 	bl	8001150 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a10:	2360      	movs	r3, #96	; 0x60
 8000a12:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = PWM_DEFAULT_DUTY;
 8000a14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a18:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a22:	1d3b      	adds	r3, r7, #4
 8000a24:	2208      	movs	r2, #8
 8000a26:	4619      	mov	r1, r3
 8000a28:	480c      	ldr	r0, [pc, #48]	; (8000a5c <MX_TIM2_Init+0xc4>)
 8000a2a:	f003 fe2b 	bl	8004684 <HAL_TIM_PWM_ConfigChannel>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000a34:	f000 fb8c 	bl	8001150 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a38:	1d3b      	adds	r3, r7, #4
 8000a3a:	220c      	movs	r2, #12
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4807      	ldr	r0, [pc, #28]	; (8000a5c <MX_TIM2_Init+0xc4>)
 8000a40:	f003 fe20 	bl	8004684 <HAL_TIM_PWM_ConfigChannel>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000a4a:	f000 fb81 	bl	8001150 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000a4e:	4803      	ldr	r0, [pc, #12]	; (8000a5c <MX_TIM2_Init+0xc4>)
 8000a50:	f000 fffa 	bl	8001a48 <HAL_TIM_MspPostInit>

}
 8000a54:	bf00      	nop
 8000a56:	3728      	adds	r7, #40	; 0x28
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	200004e4 	.word	0x200004e4

08000a60 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08a      	sub	sp, #40	; 0x28
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a66:	f107 0320 	add.w	r3, r7, #32
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a70:	1d3b      	adds	r3, r7, #4
 8000a72:	2200      	movs	r2, #0
 8000a74:	601a      	str	r2, [r3, #0]
 8000a76:	605a      	str	r2, [r3, #4]
 8000a78:	609a      	str	r2, [r3, #8]
 8000a7a:	60da      	str	r2, [r3, #12]
 8000a7c:	611a      	str	r2, [r3, #16]
 8000a7e:	615a      	str	r2, [r3, #20]
 8000a80:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a82:	4b22      	ldr	r3, [pc, #136]	; (8000b0c <MX_TIM3_Init+0xac>)
 8000a84:	4a22      	ldr	r2, [pc, #136]	; (8000b10 <MX_TIM3_Init+0xb0>)
 8000a86:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000a88:	4b20      	ldr	r3, [pc, #128]	; (8000b0c <MX_TIM3_Init+0xac>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a8e:	4b1f      	ldr	r3, [pc, #124]	; (8000b0c <MX_TIM3_Init+0xac>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4999;
 8000a94:	4b1d      	ldr	r3, [pc, #116]	; (8000b0c <MX_TIM3_Init+0xac>)
 8000a96:	f241 3287 	movw	r2, #4999	; 0x1387
 8000a9a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a9c:	4b1b      	ldr	r3, [pc, #108]	; (8000b0c <MX_TIM3_Init+0xac>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aa2:	4b1a      	ldr	r3, [pc, #104]	; (8000b0c <MX_TIM3_Init+0xac>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000aa8:	4818      	ldr	r0, [pc, #96]	; (8000b0c <MX_TIM3_Init+0xac>)
 8000aaa:	f003 fd9c 	bl	80045e6 <HAL_TIM_PWM_Init>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000ab4:	f000 fb4c 	bl	8001150 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000abc:	2300      	movs	r3, #0
 8000abe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ac0:	f107 0320 	add.w	r3, r7, #32
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4811      	ldr	r0, [pc, #68]	; (8000b0c <MX_TIM3_Init+0xac>)
 8000ac8:	f004 f8ee 	bl	8004ca8 <HAL_TIMEx_MasterConfigSynchronization>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000ad2:	f000 fb3d 	bl	8001150 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ad6:	2360      	movs	r3, #96	; 0x60
 8000ad8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000ada:	2300      	movs	r3, #0
 8000adc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ae6:	1d3b      	adds	r3, r7, #4
 8000ae8:	2204      	movs	r2, #4
 8000aea:	4619      	mov	r1, r3
 8000aec:	4807      	ldr	r0, [pc, #28]	; (8000b0c <MX_TIM3_Init+0xac>)
 8000aee:	f003 fdc9 	bl	8004684 <HAL_TIM_PWM_ConfigChannel>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000af8:	f000 fb2a 	bl	8001150 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000afc:	4803      	ldr	r0, [pc, #12]	; (8000b0c <MX_TIM3_Init+0xac>)
 8000afe:	f000 ffa3 	bl	8001a48 <HAL_TIM_MspPostInit>

}
 8000b02:	bf00      	nop
 8000b04:	3728      	adds	r7, #40	; 0x28
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	20000218 	.word	0x20000218
 8000b10:	40000400 	.word	0x40000400

08000b14 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b08a      	sub	sp, #40	; 0x28
 8000b18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b1a:	f107 0320 	add.w	r3, r7, #32
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b24:	1d3b      	adds	r3, r7, #4
 8000b26:	2200      	movs	r2, #0
 8000b28:	601a      	str	r2, [r3, #0]
 8000b2a:	605a      	str	r2, [r3, #4]
 8000b2c:	609a      	str	r2, [r3, #8]
 8000b2e:	60da      	str	r2, [r3, #12]
 8000b30:	611a      	str	r2, [r3, #16]
 8000b32:	615a      	str	r2, [r3, #20]
 8000b34:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000b36:	4b33      	ldr	r3, [pc, #204]	; (8000c04 <MX_TIM4_Init+0xf0>)
 8000b38:	4a33      	ldr	r2, [pc, #204]	; (8000c08 <MX_TIM4_Init+0xf4>)
 8000b3a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = TIM_PSC_APB1;
 8000b3c:	4b31      	ldr	r3, [pc, #196]	; (8000c04 <MX_TIM4_Init+0xf0>)
 8000b3e:	22a7      	movs	r2, #167	; 0xa7
 8000b40:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b42:	4b30      	ldr	r3, [pc, #192]	; (8000c04 <MX_TIM4_Init+0xf0>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = PWM_RESOLUTION-1;
 8000b48:	4b2e      	ldr	r3, [pc, #184]	; (8000c04 <MX_TIM4_Init+0xf0>)
 8000b4a:	f242 720f 	movw	r2, #9999	; 0x270f
 8000b4e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b50:	4b2c      	ldr	r3, [pc, #176]	; (8000c04 <MX_TIM4_Init+0xf0>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b56:	4b2b      	ldr	r3, [pc, #172]	; (8000c04 <MX_TIM4_Init+0xf0>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000b5c:	4829      	ldr	r0, [pc, #164]	; (8000c04 <MX_TIM4_Init+0xf0>)
 8000b5e:	f003 fd42 	bl	80045e6 <HAL_TIM_PWM_Init>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8000b68:	f000 faf2 	bl	8001150 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b70:	2300      	movs	r3, #0
 8000b72:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000b74:	f107 0320 	add.w	r3, r7, #32
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4822      	ldr	r0, [pc, #136]	; (8000c04 <MX_TIM4_Init+0xf0>)
 8000b7c:	f004 f894 	bl	8004ca8 <HAL_TIMEx_MasterConfigSynchronization>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8000b86:	f000 fae3 	bl	8001150 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b8a:	2360      	movs	r3, #96	; 0x60
 8000b8c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = PWM_DEFAULT_DUTY;
 8000b8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b92:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b94:	2300      	movs	r3, #0
 8000b96:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b9c:	1d3b      	adds	r3, r7, #4
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4818      	ldr	r0, [pc, #96]	; (8000c04 <MX_TIM4_Init+0xf0>)
 8000ba4:	f003 fd6e 	bl	8004684 <HAL_TIM_PWM_ConfigChannel>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000bae:	f000 facf 	bl	8001150 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000bb2:	1d3b      	adds	r3, r7, #4
 8000bb4:	2204      	movs	r2, #4
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4812      	ldr	r0, [pc, #72]	; (8000c04 <MX_TIM4_Init+0xf0>)
 8000bba:	f003 fd63 	bl	8004684 <HAL_TIM_PWM_ConfigChannel>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8000bc4:	f000 fac4 	bl	8001150 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000bc8:	1d3b      	adds	r3, r7, #4
 8000bca:	2208      	movs	r2, #8
 8000bcc:	4619      	mov	r1, r3
 8000bce:	480d      	ldr	r0, [pc, #52]	; (8000c04 <MX_TIM4_Init+0xf0>)
 8000bd0:	f003 fd58 	bl	8004684 <HAL_TIM_PWM_ConfigChannel>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 8000bda:	f000 fab9 	bl	8001150 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000bde:	1d3b      	adds	r3, r7, #4
 8000be0:	220c      	movs	r2, #12
 8000be2:	4619      	mov	r1, r3
 8000be4:	4807      	ldr	r0, [pc, #28]	; (8000c04 <MX_TIM4_Init+0xf0>)
 8000be6:	f003 fd4d 	bl	8004684 <HAL_TIM_PWM_ConfigChannel>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 8000bf0:	f000 faae 	bl	8001150 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000bf4:	4803      	ldr	r0, [pc, #12]	; (8000c04 <MX_TIM4_Init+0xf0>)
 8000bf6:	f000 ff27 	bl	8001a48 <HAL_TIM_MspPostInit>

}
 8000bfa:	bf00      	nop
 8000bfc:	3728      	adds	r7, #40	; 0x28
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	20000180 	.word	0x20000180
 8000c08:	40000800 	.word	0x40000800

08000c0c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b08a      	sub	sp, #40	; 0x28
 8000c10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c12:	f107 0320 	add.w	r3, r7, #32
 8000c16:	2200      	movs	r2, #0
 8000c18:	601a      	str	r2, [r3, #0]
 8000c1a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c1c:	1d3b      	adds	r3, r7, #4
 8000c1e:	2200      	movs	r2, #0
 8000c20:	601a      	str	r2, [r3, #0]
 8000c22:	605a      	str	r2, [r3, #4]
 8000c24:	609a      	str	r2, [r3, #8]
 8000c26:	60da      	str	r2, [r3, #12]
 8000c28:	611a      	str	r2, [r3, #16]
 8000c2a:	615a      	str	r2, [r3, #20]
 8000c2c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000c2e:	4b2d      	ldr	r3, [pc, #180]	; (8000ce4 <MX_TIM5_Init+0xd8>)
 8000c30:	4a2d      	ldr	r2, [pc, #180]	; (8000ce8 <MX_TIM5_Init+0xdc>)
 8000c32:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000c34:	4b2b      	ldr	r3, [pc, #172]	; (8000ce4 <MX_TIM5_Init+0xd8>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c3a:	4b2a      	ldr	r3, [pc, #168]	; (8000ce4 <MX_TIM5_Init+0xd8>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000c40:	4b28      	ldr	r3, [pc, #160]	; (8000ce4 <MX_TIM5_Init+0xd8>)
 8000c42:	f04f 32ff 	mov.w	r2, #4294967295
 8000c46:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c48:	4b26      	ldr	r3, [pc, #152]	; (8000ce4 <MX_TIM5_Init+0xd8>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c4e:	4b25      	ldr	r3, [pc, #148]	; (8000ce4 <MX_TIM5_Init+0xd8>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000c54:	4823      	ldr	r0, [pc, #140]	; (8000ce4 <MX_TIM5_Init+0xd8>)
 8000c56:	f003 fcc6 	bl	80045e6 <HAL_TIM_PWM_Init>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8000c60:	f000 fa76 	bl	8001150 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c64:	2300      	movs	r3, #0
 8000c66:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000c6c:	f107 0320 	add.w	r3, r7, #32
 8000c70:	4619      	mov	r1, r3
 8000c72:	481c      	ldr	r0, [pc, #112]	; (8000ce4 <MX_TIM5_Init+0xd8>)
 8000c74:	f004 f818 	bl	8004ca8 <HAL_TIMEx_MasterConfigSynchronization>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8000c7e:	f000 fa67 	bl	8001150 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c82:	2360      	movs	r3, #96	; 0x60
 8000c84:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000c86:	2300      	movs	r3, #0
 8000c88:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c92:	1d3b      	adds	r3, r7, #4
 8000c94:	2200      	movs	r2, #0
 8000c96:	4619      	mov	r1, r3
 8000c98:	4812      	ldr	r0, [pc, #72]	; (8000ce4 <MX_TIM5_Init+0xd8>)
 8000c9a:	f003 fcf3 	bl	8004684 <HAL_TIM_PWM_ConfigChannel>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8000ca4:	f000 fa54 	bl	8001150 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ca8:	1d3b      	adds	r3, r7, #4
 8000caa:	2204      	movs	r2, #4
 8000cac:	4619      	mov	r1, r3
 8000cae:	480d      	ldr	r0, [pc, #52]	; (8000ce4 <MX_TIM5_Init+0xd8>)
 8000cb0:	f003 fce8 	bl	8004684 <HAL_TIM_PWM_ConfigChannel>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8000cba:	f000 fa49 	bl	8001150 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000cbe:	1d3b      	adds	r3, r7, #4
 8000cc0:	2208      	movs	r2, #8
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4807      	ldr	r0, [pc, #28]	; (8000ce4 <MX_TIM5_Init+0xd8>)
 8000cc6:	f003 fcdd 	bl	8004684 <HAL_TIM_PWM_ConfigChannel>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_TIM5_Init+0xc8>
  {
    Error_Handler();
 8000cd0:	f000 fa3e 	bl	8001150 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000cd4:	4803      	ldr	r0, [pc, #12]	; (8000ce4 <MX_TIM5_Init+0xd8>)
 8000cd6:	f000 feb7 	bl	8001a48 <HAL_TIM_MspPostInit>

}
 8000cda:	bf00      	nop
 8000cdc:	3728      	adds	r7, #40	; 0x28
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	200001d0 	.word	0x200001d0
 8000ce8:	40000c00 	.word	0x40000c00

08000cec <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b088      	sub	sp, #32
 8000cf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cf2:	1d3b      	adds	r3, r7, #4
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	605a      	str	r2, [r3, #4]
 8000cfa:	609a      	str	r2, [r3, #8]
 8000cfc:	60da      	str	r2, [r3, #12]
 8000cfe:	611a      	str	r2, [r3, #16]
 8000d00:	615a      	str	r2, [r3, #20]
 8000d02:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8000d04:	4b1a      	ldr	r3, [pc, #104]	; (8000d70 <MX_TIM12_Init+0x84>)
 8000d06:	4a1b      	ldr	r2, [pc, #108]	; (8000d74 <MX_TIM12_Init+0x88>)
 8000d08:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 3;
 8000d0a:	4b19      	ldr	r3, [pc, #100]	; (8000d70 <MX_TIM12_Init+0x84>)
 8000d0c:	2203      	movs	r2, #3
 8000d0e:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d10:	4b17      	ldr	r3, [pc, #92]	; (8000d70 <MX_TIM12_Init+0x84>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 7777;
 8000d16:	4b16      	ldr	r3, [pc, #88]	; (8000d70 <MX_TIM12_Init+0x84>)
 8000d18:	f641 6261 	movw	r2, #7777	; 0x1e61
 8000d1c:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d1e:	4b14      	ldr	r3, [pc, #80]	; (8000d70 <MX_TIM12_Init+0x84>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d24:	4b12      	ldr	r3, [pc, #72]	; (8000d70 <MX_TIM12_Init+0x84>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8000d2a:	4811      	ldr	r0, [pc, #68]	; (8000d70 <MX_TIM12_Init+0x84>)
 8000d2c:	f003 fc5b 	bl	80045e6 <HAL_TIM_PWM_Init>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8000d36:	f000 fa0b 	bl	8001150 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d3a:	2360      	movs	r3, #96	; 0x60
 8000d3c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d42:	2300      	movs	r3, #0
 8000d44:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d46:	2300      	movs	r3, #0
 8000d48:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d4a:	1d3b      	adds	r3, r7, #4
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4807      	ldr	r0, [pc, #28]	; (8000d70 <MX_TIM12_Init+0x84>)
 8000d52:	f003 fc97 	bl	8004684 <HAL_TIM_PWM_ConfigChannel>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8000d5c:	f000 f9f8 	bl	8001150 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8000d60:	4803      	ldr	r0, [pc, #12]	; (8000d70 <MX_TIM12_Init+0x84>)
 8000d62:	f000 fe71 	bl	8001a48 <HAL_TIM_MspPostInit>

}
 8000d66:	bf00      	nop
 8000d68:	3720      	adds	r7, #32
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	2000059c 	.word	0x2000059c
 8000d74:	40001800 	.word	0x40001800

08000d78 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000d7c:	4b11      	ldr	r3, [pc, #68]	; (8000dc4 <MX_UART4_Init+0x4c>)
 8000d7e:	4a12      	ldr	r2, [pc, #72]	; (8000dc8 <MX_UART4_Init+0x50>)
 8000d80:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000d82:	4b10      	ldr	r3, [pc, #64]	; (8000dc4 <MX_UART4_Init+0x4c>)
 8000d84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d88:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000d8a:	4b0e      	ldr	r3, [pc, #56]	; (8000dc4 <MX_UART4_Init+0x4c>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000d90:	4b0c      	ldr	r3, [pc, #48]	; (8000dc4 <MX_UART4_Init+0x4c>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_EVEN;
 8000d96:	4b0b      	ldr	r3, [pc, #44]	; (8000dc4 <MX_UART4_Init+0x4c>)
 8000d98:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d9c:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000d9e:	4b09      	ldr	r3, [pc, #36]	; (8000dc4 <MX_UART4_Init+0x4c>)
 8000da0:	220c      	movs	r2, #12
 8000da2:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000da4:	4b07      	ldr	r3, [pc, #28]	; (8000dc4 <MX_UART4_Init+0x4c>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000daa:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <MX_UART4_Init+0x4c>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000db0:	4804      	ldr	r0, [pc, #16]	; (8000dc4 <MX_UART4_Init+0x4c>)
 8000db2:	f003 fff5 	bl	8004da0 <HAL_UART_Init>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_UART4_Init+0x48>
  {
    Error_Handler();
 8000dbc:	f000 f9c8 	bl	8001150 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000dc0:	bf00      	nop
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	200004a0 	.word	0x200004a0
 8000dc8:	40004c00 	.word	0x40004c00

08000dcc <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8000dd0:	4b11      	ldr	r3, [pc, #68]	; (8000e18 <MX_UART7_Init+0x4c>)
 8000dd2:	4a12      	ldr	r2, [pc, #72]	; (8000e1c <MX_UART7_Init+0x50>)
 8000dd4:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8000dd6:	4b10      	ldr	r3, [pc, #64]	; (8000e18 <MX_UART7_Init+0x4c>)
 8000dd8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ddc:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8000dde:	4b0e      	ldr	r3, [pc, #56]	; (8000e18 <MX_UART7_Init+0x4c>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8000de4:	4b0c      	ldr	r3, [pc, #48]	; (8000e18 <MX_UART7_Init+0x4c>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8000dea:	4b0b      	ldr	r3, [pc, #44]	; (8000e18 <MX_UART7_Init+0x4c>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8000df0:	4b09      	ldr	r3, [pc, #36]	; (8000e18 <MX_UART7_Init+0x4c>)
 8000df2:	220c      	movs	r2, #12
 8000df4:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000df6:	4b08      	ldr	r3, [pc, #32]	; (8000e18 <MX_UART7_Init+0x4c>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dfc:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <MX_UART7_Init+0x4c>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8000e02:	4805      	ldr	r0, [pc, #20]	; (8000e18 <MX_UART7_Init+0x4c>)
 8000e04:	f003 ffcc 	bl	8004da0 <HAL_UART_Init>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_UART7_Init+0x46>
  {
    Error_Handler();
 8000e0e:	f000 f99f 	bl	8001150 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	200000e4 	.word	0x200000e4
 8000e1c:	40007800 	.word	0x40007800

08000e20 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e24:	4b11      	ldr	r3, [pc, #68]	; (8000e6c <MX_USART1_UART_Init+0x4c>)
 8000e26:	4a12      	ldr	r2, [pc, #72]	; (8000e70 <MX_USART1_UART_Init+0x50>)
 8000e28:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 100000;
 8000e2a:	4b10      	ldr	r3, [pc, #64]	; (8000e6c <MX_USART1_UART_Init+0x4c>)
 8000e2c:	4a11      	ldr	r2, [pc, #68]	; (8000e74 <MX_USART1_UART_Init+0x54>)
 8000e2e:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e30:	4b0e      	ldr	r3, [pc, #56]	; (8000e6c <MX_USART1_UART_Init+0x4c>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e36:	4b0d      	ldr	r3, [pc, #52]	; (8000e6c <MX_USART1_UART_Init+0x4c>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8000e3c:	4b0b      	ldr	r3, [pc, #44]	; (8000e6c <MX_USART1_UART_Init+0x4c>)
 8000e3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e42:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e44:	4b09      	ldr	r3, [pc, #36]	; (8000e6c <MX_USART1_UART_Init+0x4c>)
 8000e46:	220c      	movs	r2, #12
 8000e48:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e4a:	4b08      	ldr	r3, [pc, #32]	; (8000e6c <MX_USART1_UART_Init+0x4c>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e50:	4b06      	ldr	r3, [pc, #24]	; (8000e6c <MX_USART1_UART_Init+0x4c>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e56:	4805      	ldr	r0, [pc, #20]	; (8000e6c <MX_USART1_UART_Init+0x4c>)
 8000e58:	f003 ffa2 	bl	8004da0 <HAL_UART_Init>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e62:	f000 f975 	bl	8001150 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e66:	bf00      	nop
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	20000348 	.word	0x20000348
 8000e70:	40011000 	.word	0x40011000
 8000e74:	000186a0 	.word	0x000186a0

08000e78 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e7c:	4b11      	ldr	r3, [pc, #68]	; (8000ec4 <MX_USART2_UART_Init+0x4c>)
 8000e7e:	4a12      	ldr	r2, [pc, #72]	; (8000ec8 <MX_USART2_UART_Init+0x50>)
 8000e80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e82:	4b10      	ldr	r3, [pc, #64]	; (8000ec4 <MX_USART2_UART_Init+0x4c>)
 8000e84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e8a:	4b0e      	ldr	r3, [pc, #56]	; (8000ec4 <MX_USART2_UART_Init+0x4c>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e90:	4b0c      	ldr	r3, [pc, #48]	; (8000ec4 <MX_USART2_UART_Init+0x4c>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e96:	4b0b      	ldr	r3, [pc, #44]	; (8000ec4 <MX_USART2_UART_Init+0x4c>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e9c:	4b09      	ldr	r3, [pc, #36]	; (8000ec4 <MX_USART2_UART_Init+0x4c>)
 8000e9e:	220c      	movs	r2, #12
 8000ea0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ea2:	4b08      	ldr	r3, [pc, #32]	; (8000ec4 <MX_USART2_UART_Init+0x4c>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ea8:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <MX_USART2_UART_Init+0x4c>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000eae:	4805      	ldr	r0, [pc, #20]	; (8000ec4 <MX_USART2_UART_Init+0x4c>)
 8000eb0:	f003 ff76 	bl	8004da0 <HAL_UART_Init>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000eba:	f000 f949 	bl	8001150 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	2000052c 	.word	0x2000052c
 8000ec8:	40004400 	.word	0x40004400

08000ecc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000ed0:	4b11      	ldr	r3, [pc, #68]	; (8000f18 <MX_USART6_UART_Init+0x4c>)
 8000ed2:	4a12      	ldr	r2, [pc, #72]	; (8000f1c <MX_USART6_UART_Init+0x50>)
 8000ed4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000ed6:	4b10      	ldr	r3, [pc, #64]	; (8000f18 <MX_USART6_UART_Init+0x4c>)
 8000ed8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000edc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000ede:	4b0e      	ldr	r3, [pc, #56]	; (8000f18 <MX_USART6_UART_Init+0x4c>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000ee4:	4b0c      	ldr	r3, [pc, #48]	; (8000f18 <MX_USART6_UART_Init+0x4c>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000eea:	4b0b      	ldr	r3, [pc, #44]	; (8000f18 <MX_USART6_UART_Init+0x4c>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000ef0:	4b09      	ldr	r3, [pc, #36]	; (8000f18 <MX_USART6_UART_Init+0x4c>)
 8000ef2:	220c      	movs	r2, #12
 8000ef4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ef6:	4b08      	ldr	r3, [pc, #32]	; (8000f18 <MX_USART6_UART_Init+0x4c>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000efc:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <MX_USART6_UART_Init+0x4c>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000f02:	4805      	ldr	r0, [pc, #20]	; (8000f18 <MX_USART6_UART_Init+0x4c>)
 8000f04:	f003 ff4c 	bl	8004da0 <HAL_UART_Init>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000f0e:	f000 f91f 	bl	8001150 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	20000394 	.word	0x20000394
 8000f1c:	40011400 	.word	0x40011400

08000f20 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	607b      	str	r3, [r7, #4]
 8000f2a:	4b1b      	ldr	r3, [pc, #108]	; (8000f98 <MX_DMA_Init+0x78>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	4a1a      	ldr	r2, [pc, #104]	; (8000f98 <MX_DMA_Init+0x78>)
 8000f30:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f34:	6313      	str	r3, [r2, #48]	; 0x30
 8000f36:	4b18      	ldr	r3, [pc, #96]	; (8000f98 <MX_DMA_Init+0x78>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f3e:	607b      	str	r3, [r7, #4]
 8000f40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f42:	2300      	movs	r3, #0
 8000f44:	603b      	str	r3, [r7, #0]
 8000f46:	4b14      	ldr	r3, [pc, #80]	; (8000f98 <MX_DMA_Init+0x78>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	4a13      	ldr	r2, [pc, #76]	; (8000f98 <MX_DMA_Init+0x78>)
 8000f4c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f50:	6313      	str	r3, [r2, #48]	; 0x30
 8000f52:	4b11      	ldr	r3, [pc, #68]	; (8000f98 <MX_DMA_Init+0x78>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f5a:	603b      	str	r3, [r7, #0]
 8000f5c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000f5e:	2200      	movs	r2, #0
 8000f60:	2100      	movs	r1, #0
 8000f62:	2010      	movs	r0, #16
 8000f64:	f001 feb1 	bl	8002cca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000f68:	2010      	movs	r0, #16
 8000f6a:	f001 feca 	bl	8002d02 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	2100      	movs	r1, #0
 8000f72:	2011      	movs	r0, #17
 8000f74:	f001 fea9 	bl	8002cca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000f78:	2011      	movs	r0, #17
 8000f7a:	f001 fec2 	bl	8002d02 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	2100      	movs	r1, #0
 8000f82:	203a      	movs	r0, #58	; 0x3a
 8000f84:	f001 fea1 	bl	8002cca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000f88:	203a      	movs	r0, #58	; 0x3a
 8000f8a:	f001 feba 	bl	8002d02 <HAL_NVIC_EnableIRQ>

}
 8000f8e:	bf00      	nop
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40023800 	.word	0x40023800

08000f9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b08c      	sub	sp, #48	; 0x30
 8000fa0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa2:	f107 031c 	add.w	r3, r7, #28
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]
 8000faa:	605a      	str	r2, [r3, #4]
 8000fac:	609a      	str	r2, [r3, #8]
 8000fae:	60da      	str	r2, [r3, #12]
 8000fb0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61bb      	str	r3, [r7, #24]
 8000fb6:	4b61      	ldr	r3, [pc, #388]	; (800113c <MX_GPIO_Init+0x1a0>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	4a60      	ldr	r2, [pc, #384]	; (800113c <MX_GPIO_Init+0x1a0>)
 8000fbc:	f043 0310 	orr.w	r3, r3, #16
 8000fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc2:	4b5e      	ldr	r3, [pc, #376]	; (800113c <MX_GPIO_Init+0x1a0>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	f003 0310 	and.w	r3, r3, #16
 8000fca:	61bb      	str	r3, [r7, #24]
 8000fcc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	617b      	str	r3, [r7, #20]
 8000fd2:	4b5a      	ldr	r3, [pc, #360]	; (800113c <MX_GPIO_Init+0x1a0>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	4a59      	ldr	r2, [pc, #356]	; (800113c <MX_GPIO_Init+0x1a0>)
 8000fd8:	f043 0302 	orr.w	r3, r3, #2
 8000fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fde:	4b57      	ldr	r3, [pc, #348]	; (800113c <MX_GPIO_Init+0x1a0>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	f003 0302 	and.w	r3, r3, #2
 8000fe6:	617b      	str	r3, [r7, #20]
 8000fe8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	613b      	str	r3, [r7, #16]
 8000fee:	4b53      	ldr	r3, [pc, #332]	; (800113c <MX_GPIO_Init+0x1a0>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	4a52      	ldr	r2, [pc, #328]	; (800113c <MX_GPIO_Init+0x1a0>)
 8000ff4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffa:	4b50      	ldr	r3, [pc, #320]	; (800113c <MX_GPIO_Init+0x1a0>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001002:	613b      	str	r3, [r7, #16]
 8001004:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	60fb      	str	r3, [r7, #12]
 800100a:	4b4c      	ldr	r3, [pc, #304]	; (800113c <MX_GPIO_Init+0x1a0>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	4a4b      	ldr	r2, [pc, #300]	; (800113c <MX_GPIO_Init+0x1a0>)
 8001010:	f043 0301 	orr.w	r3, r3, #1
 8001014:	6313      	str	r3, [r2, #48]	; 0x30
 8001016:	4b49      	ldr	r3, [pc, #292]	; (800113c <MX_GPIO_Init+0x1a0>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	f003 0301 	and.w	r3, r3, #1
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	60bb      	str	r3, [r7, #8]
 8001026:	4b45      	ldr	r3, [pc, #276]	; (800113c <MX_GPIO_Init+0x1a0>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	4a44      	ldr	r2, [pc, #272]	; (800113c <MX_GPIO_Init+0x1a0>)
 800102c:	f043 0308 	orr.w	r3, r3, #8
 8001030:	6313      	str	r3, [r2, #48]	; 0x30
 8001032:	4b42      	ldr	r3, [pc, #264]	; (800113c <MX_GPIO_Init+0x1a0>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	f003 0308 	and.w	r3, r3, #8
 800103a:	60bb      	str	r3, [r7, #8]
 800103c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	607b      	str	r3, [r7, #4]
 8001042:	4b3e      	ldr	r3, [pc, #248]	; (800113c <MX_GPIO_Init+0x1a0>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	4a3d      	ldr	r2, [pc, #244]	; (800113c <MX_GPIO_Init+0x1a0>)
 8001048:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800104c:	6313      	str	r3, [r2, #48]	; 0x30
 800104e:	4b3b      	ldr	r3, [pc, #236]	; (800113c <MX_GPIO_Init+0x1a0>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001056:	607b      	str	r3, [r7, #4]
 8001058:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	603b      	str	r3, [r7, #0]
 800105e:	4b37      	ldr	r3, [pc, #220]	; (800113c <MX_GPIO_Init+0x1a0>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	4a36      	ldr	r2, [pc, #216]	; (800113c <MX_GPIO_Init+0x1a0>)
 8001064:	f043 0320 	orr.w	r3, r3, #32
 8001068:	6313      	str	r3, [r2, #48]	; 0x30
 800106a:	4b34      	ldr	r3, [pc, #208]	; (800113c <MX_GPIO_Init+0x1a0>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	f003 0320 	and.w	r3, r3, #32
 8001072:	603b      	str	r3, [r7, #0]
 8001074:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, IST_INT_Pin|IST_RST_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8001076:	2200      	movs	r2, #0
 8001078:	f640 010c 	movw	r1, #2060	; 0x80c
 800107c:	4830      	ldr	r0, [pc, #192]	; (8001140 <MX_GPIO_Init+0x1a4>)
 800107e:	f002 fbed 	bl	800385c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001082:	2200      	movs	r2, #0
 8001084:	213c      	movs	r1, #60	; 0x3c
 8001086:	482f      	ldr	r0, [pc, #188]	; (8001144 <MX_GPIO_Init+0x1a8>)
 8001088:	f002 fbe8 	bl	800385c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6|LED_GREEN_Pin, GPIO_PIN_RESET);
 800108c:	2200      	movs	r2, #0
 800108e:	f244 0140 	movw	r1, #16448	; 0x4040
 8001092:	482d      	ldr	r0, [pc, #180]	; (8001148 <MX_GPIO_Init+0x1ac>)
 8001094:	f002 fbe2 	bl	800385c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, GPIO_PIN_RESET);
 8001098:	2200      	movs	r2, #0
 800109a:	2102      	movs	r1, #2
 800109c:	482b      	ldr	r0, [pc, #172]	; (800114c <MX_GPIO_Init+0x1b0>)
 800109e:	f002 fbdd 	bl	800385c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : IST_INT_Pin IST_RST_Pin */
  GPIO_InitStruct.Pin = IST_INT_Pin|IST_RST_Pin;
 80010a2:	230c      	movs	r3, #12
 80010a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a6:	2301      	movs	r3, #1
 80010a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010aa:	2300      	movs	r3, #0
 80010ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ae:	2303      	movs	r3, #3
 80010b0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010b2:	f107 031c 	add.w	r3, r7, #28
 80010b6:	4619      	mov	r1, r3
 80010b8:	4821      	ldr	r0, [pc, #132]	; (8001140 <MX_GPIO_Init+0x1a4>)
 80010ba:	f002 fa23 	bl	8003504 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH2 PH3 PH4 PH5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80010be:	233c      	movs	r3, #60	; 0x3c
 80010c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c2:	2301      	movs	r3, #1
 80010c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ca:	2300      	movs	r3, #0
 80010cc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80010ce:	f107 031c 	add.w	r3, r7, #28
 80010d2:	4619      	mov	r1, r3
 80010d4:	481b      	ldr	r0, [pc, #108]	; (8001144 <MX_GPIO_Init+0x1a8>)
 80010d6:	f002 fa15 	bl	8003504 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 LED_GREEN_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_6|LED_GREEN_Pin;
 80010da:	f244 0340 	movw	r3, #16448	; 0x4040
 80010de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e0:	2301      	movs	r3, #1
 80010e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e4:	2300      	movs	r3, #0
 80010e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e8:	2300      	movs	r3, #0
 80010ea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010ec:	f107 031c 	add.w	r3, r7, #28
 80010f0:	4619      	mov	r1, r3
 80010f2:	4815      	ldr	r0, [pc, #84]	; (8001148 <MX_GPIO_Init+0x1ac>)
 80010f4:	f002 fa06 	bl	8003504 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80010f8:	2302      	movs	r3, #2
 80010fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010fc:	2301      	movs	r3, #1
 80010fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001100:	2300      	movs	r3, #0
 8001102:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001104:	2300      	movs	r3, #0
 8001106:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001108:	f107 031c 	add.w	r3, r7, #28
 800110c:	4619      	mov	r1, r3
 800110e:	480f      	ldr	r0, [pc, #60]	; (800114c <MX_GPIO_Init+0x1b0>)
 8001110:	f002 f9f8 	bl	8003504 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8001114:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001118:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800111a:	2301      	movs	r3, #1
 800111c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111e:	2300      	movs	r3, #0
 8001120:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001122:	2300      	movs	r3, #0
 8001124:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8001126:	f107 031c 	add.w	r3, r7, #28
 800112a:	4619      	mov	r1, r3
 800112c:	4804      	ldr	r0, [pc, #16]	; (8001140 <MX_GPIO_Init+0x1a4>)
 800112e:	f002 f9e9 	bl	8003504 <HAL_GPIO_Init>

}
 8001132:	bf00      	nop
 8001134:	3730      	adds	r7, #48	; 0x30
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40023800 	.word	0x40023800
 8001140:	40021000 	.word	0x40021000
 8001144:	40021c00 	.word	0x40021c00
 8001148:	40021400 	.word	0x40021400
 800114c:	40021800 	.word	0x40021800

08001150 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001154:	bf00      	nop
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
	...

08001160 <HAL_CAN_RxFifo0MsgPendingCallback>:
    else
        while (HAL_CAN_IsTxMessagePending(hcan, pTxMailbox));
}


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001160:	b580      	push	{r7, lr}
 8001162:	b08c      	sub	sp, #48	; 0x30
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef rx_header;
    uint8_t rx_data[CAN_DATA_SIZE];

    HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, rx_data);
 8001168:	f107 0308 	add.w	r3, r7, #8
 800116c:	f107 0210 	add.w	r2, r7, #16
 8001170:	2100      	movs	r1, #0
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f001 f98d 	bl	8002492 <HAL_CAN_GetRxMessage>
    uint8_t idx = rx_header.StdId - CAN_RX_ID_START;
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	b2db      	uxtb	r3, r3
 800117c:	3b01      	subs	r3, #1
 800117e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    get_motor_measure(&motors[idx], rx_data);
 8001182:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001186:	4613      	mov	r3, r2
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	4413      	add	r3, r2
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	4a06      	ldr	r2, [pc, #24]	; (80011a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8001190:	4413      	add	r3, r2
 8001192:	f107 0208 	add.w	r2, r7, #8
 8001196:	4611      	mov	r1, r2
 8001198:	4618      	mov	r0, r3
 800119a:	f000 f807 	bl	80011ac <get_motor_measure>

}
 800119e:	bf00      	nop
 80011a0:	3730      	adds	r7, #48	; 0x30
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	200005e4 	.word	0x200005e4

080011ac <get_motor_measure>:

void get_motor_measure(motor_measure_t* m, uint8_t data[CAN_DATA_SIZE]){
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	6039      	str	r1, [r7, #0]
    (m)->last_ecd = (m)->ecd;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	881b      	ldrh	r3, [r3, #0]
 80011ba:	b21a      	sxth	r2, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	811a      	strh	r2, [r3, #8]
    (m)->ecd = (uint16_t)((data)[0] << 8 | (data)[1]);
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	021b      	lsls	r3, r3, #8
 80011c6:	b21a      	sxth	r2, r3
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	3301      	adds	r3, #1
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	b21b      	sxth	r3, r3
 80011d0:	4313      	orrs	r3, r2
 80011d2:	b21b      	sxth	r3, r3
 80011d4:	b29a      	uxth	r2, r3
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	801a      	strh	r2, [r3, #0]
    (m)->speed_rpm = (uint16_t)((data)[2] << 8 | (data)[3]);
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	3302      	adds	r3, #2
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	021b      	lsls	r3, r3, #8
 80011e2:	b21a      	sxth	r2, r3
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	3303      	adds	r3, #3
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	b21b      	sxth	r3, r3
 80011ec:	4313      	orrs	r3, r2
 80011ee:	b21a      	sxth	r2, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	805a      	strh	r2, [r3, #2]
    (m)->given_current = (uint16_t)((data)[4] << 8 | (data)[5]);
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	3304      	adds	r3, #4
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	021b      	lsls	r3, r3, #8
 80011fc:	b21a      	sxth	r2, r3
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	3305      	adds	r3, #5
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	b21b      	sxth	r3, r3
 8001206:	4313      	orrs	r3, r2
 8001208:	b21a      	sxth	r2, r3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	809a      	strh	r2, [r3, #4]
    (m)->temperature = (data)[6];
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	799a      	ldrb	r2, [r3, #6]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	719a      	strb	r2, [r3, #6]
}
 8001216:	bf00      	nop
 8001218:	370c      	adds	r7, #12
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
	...

08001224 <led_off>:
 */


#include "rm_gpio.h"

void led_off(void){
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8001228:	2201      	movs	r2, #1
 800122a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800122e:	4805      	ldr	r0, [pc, #20]	; (8001244 <led_off+0x20>)
 8001230:	f002 fb14 	bl	800385c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8001234:	2201      	movs	r2, #1
 8001236:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800123a:	4803      	ldr	r0, [pc, #12]	; (8001248 <led_off+0x24>)
 800123c:	f002 fb0e 	bl	800385c <HAL_GPIO_WritePin>
}
 8001240:	bf00      	nop
 8001242:	bd80      	pop	{r7, pc}
 8001244:	40021400 	.word	0x40021400
 8001248:	40021000 	.word	0x40021000

0800124c <power_on>:

void power_on(void){
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOH, GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5, GPIO_PIN_SET);
 8001250:	2201      	movs	r2, #1
 8001252:	213c      	movs	r1, #60	; 0x3c
 8001254:	4802      	ldr	r0, [pc, #8]	; (8001260 <power_on+0x14>)
 8001256:	f002 fb01 	bl	800385c <HAL_GPIO_WritePin>
}
 800125a:	bf00      	nop
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40021c00 	.word	0x40021c00

08001264 <uart_receive_dma_no_it>:
  * @param[in]  pData: receive buff
  * @param[in]  Size:  buff size
  * @retval     set success or fail
  */
static int uart_receive_dma_no_it(UART_HandleTypeDef* huart, uint8_t* pData, uint32_t Size)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b086      	sub	sp, #24
 8001268:	af00      	add	r7, sp, #0
 800126a:	60f8      	str	r0, [r7, #12]
 800126c:	60b9      	str	r1, [r7, #8]
 800126e:	607a      	str	r2, [r7, #4]
  uint32_t tmp1 = 0;
 8001270:	2300      	movs	r3, #0
 8001272:	617b      	str	r3, [r7, #20]

  tmp1 = huart->RxState;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800127a:	b2db      	uxtb	r3, r3
 800127c:	617b      	str	r3, [r7, #20]

	if (tmp1 == HAL_UART_STATE_READY)
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	2b20      	cmp	r3, #32
 8001282:	d125      	bne.n	80012d0 <uart_receive_dma_no_it+0x6c>
	{
		if ((pData == NULL) || (Size == 0))
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d002      	beq.n	8001290 <uart_receive_dma_no_it+0x2c>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d101      	bne.n	8001294 <uart_receive_dma_no_it+0x30>
		{
			return HAL_ERROR;
 8001290:	2301      	movs	r3, #1
 8001292:	e01e      	b.n	80012d2 <uart_receive_dma_no_it+0x6e>
		}

		huart->pRxBuffPtr = pData;
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	68ba      	ldr	r2, [r7, #8]
 8001298:	629a      	str	r2, [r3, #40]	; 0x28
		huart->RxXferSize = Size;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	b29a      	uxth	r2, r3
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	859a      	strh	r2, [r3, #44]	; 0x2c
		huart->ErrorCode  = HAL_UART_ERROR_NONE;
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	2200      	movs	r2, #0
 80012a6:	641a      	str	r2, [r3, #64]	; 0x40

		/* Enable the DMA Stream */
		HAL_DMA_Start(huart->hdmarx, (uint32_t)&huart->Instance->DR, (uint32_t)pData, Size);
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	3304      	adds	r3, #4
 80012b2:	4619      	mov	r1, r3
 80012b4:	68ba      	ldr	r2, [r7, #8]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	f001 fdec 	bl	8002e94 <HAL_DMA_Start>

		/*
		 * Enable the DMA transfer for the receiver request by setting the DMAR bit
		 * in the UART CR3 register
		 */
		SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	695a      	ldr	r2, [r3, #20]
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80012ca:	615a      	str	r2, [r3, #20]

		return HAL_OK;
 80012cc:	2300      	movs	r3, #0
 80012ce:	e000      	b.n	80012d2 <uart_receive_dma_no_it+0x6e>
	}
	else
	{
		return HAL_BUSY;
 80012d0:	2302      	movs	r3, #2
	}
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3718      	adds	r7, #24
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <dma_current_data_counter>:
  * @param[in]  dma_stream: where y can be 1 or 2 to select the DMA and x can be 0
  *             to 7 to select the DMA Stream.
  * @retval     The number of remaining data units in the current DMAy Streamx transfer.
  */
uint16_t dma_current_data_counter(DMA_Stream_TypeDef *dma_stream)
{
 80012da:	b480      	push	{r7}
 80012dc:	b083      	sub	sp, #12
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
  /* Return the number of remaining data units for DMAy Streamx */
  return ((uint16_t)(dma_stream->NDTR));
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	b29b      	uxth	r3, r3
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <rc_callback_handler>:
  * @param[out]  rc:   structure to save handled rc data
  * @param[in]   buff: the buff which saved raw rc data
  * @retval
  */
void rc_callback_handler(rc_info_t *rc, uint8_t *buff)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	6039      	str	r1, [r7, #0]
  rc->ch1 = (buff[0] | buff[1] << 8) & 0x07FF;
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	b21a      	sxth	r2, r3
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	3301      	adds	r3, #1
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	021b      	lsls	r3, r3, #8
 800130c:	b21b      	sxth	r3, r3
 800130e:	4313      	orrs	r3, r2
 8001310:	b21b      	sxth	r3, r3
 8001312:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001316:	b21a      	sxth	r2, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	801a      	strh	r2, [r3, #0]
  rc->ch1 -= 1024;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001322:	b29b      	uxth	r3, r3
 8001324:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001328:	b29b      	uxth	r3, r3
 800132a:	b21a      	sxth	r2, r3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	801a      	strh	r2, [r3, #0]
  rc->ch2 = (buff[1] >> 3 | buff[2] << 5) & 0x07FF;
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	3301      	adds	r3, #1
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	08db      	lsrs	r3, r3, #3
 8001338:	b2db      	uxtb	r3, r3
 800133a:	b21a      	sxth	r2, r3
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	3302      	adds	r3, #2
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	015b      	lsls	r3, r3, #5
 8001344:	b21b      	sxth	r3, r3
 8001346:	4313      	orrs	r3, r2
 8001348:	b21b      	sxth	r3, r3
 800134a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800134e:	b21a      	sxth	r2, r3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	805a      	strh	r2, [r3, #2]
  rc->ch2 -= 1024;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800135a:	b29b      	uxth	r3, r3
 800135c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001360:	b29b      	uxth	r3, r3
 8001362:	b21a      	sxth	r2, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	805a      	strh	r2, [r3, #2]
  rc->ch3 = (buff[2] >> 6 | buff[3] << 2 | buff[4] << 10) & 0x07FF;
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	3302      	adds	r3, #2
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	099b      	lsrs	r3, r3, #6
 8001370:	b2db      	uxtb	r3, r3
 8001372:	b21a      	sxth	r2, r3
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	3303      	adds	r3, #3
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	b21b      	sxth	r3, r3
 800137e:	4313      	orrs	r3, r2
 8001380:	b21a      	sxth	r2, r3
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	3304      	adds	r3, #4
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	029b      	lsls	r3, r3, #10
 800138a:	b21b      	sxth	r3, r3
 800138c:	4313      	orrs	r3, r2
 800138e:	b21b      	sxth	r3, r3
 8001390:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001394:	b21a      	sxth	r2, r3
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	809a      	strh	r2, [r3, #4]
  rc->ch3 -= 1024;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80013a6:	b29b      	uxth	r3, r3
 80013a8:	b21a      	sxth	r2, r3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	809a      	strh	r2, [r3, #4]
  rc->ch4 = (buff[4] >> 1 | buff[5] << 7) & 0x07FF;
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	3304      	adds	r3, #4
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	085b      	lsrs	r3, r3, #1
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	b21a      	sxth	r2, r3
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	3305      	adds	r3, #5
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	01db      	lsls	r3, r3, #7
 80013c2:	b21b      	sxth	r3, r3
 80013c4:	4313      	orrs	r3, r2
 80013c6:	b21b      	sxth	r3, r3
 80013c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013cc:	b21a      	sxth	r2, r3
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	80da      	strh	r2, [r3, #6]
  rc->ch4 -= 1024;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80013d8:	b29b      	uxth	r3, r3
 80013da:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80013de:	b29b      	uxth	r3, r3
 80013e0:	b21a      	sxth	r2, r3
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	80da      	strh	r2, [r3, #6]

  rc->sw1 = ((buff[5] >> 4) & 0x000C) >> 2;
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	3305      	adds	r3, #5
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	091b      	lsrs	r3, r3, #4
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	109b      	asrs	r3, r3, #2
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	f003 0303 	and.w	r3, r3, #3
 80013f8:	b2da      	uxtb	r2, r3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	729a      	strb	r2, [r3, #10]
  rc->sw2 = (buff[5] >> 4) & 0x0003;
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	3305      	adds	r3, #5
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	091b      	lsrs	r3, r3, #4
 8001406:	b2db      	uxtb	r3, r3
 8001408:	f003 0303 	and.w	r3, r3, #3
 800140c:	b2da      	uxtb	r2, r3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	72da      	strb	r2, [r3, #11]

  if ((abs(rc->ch1) > 660) || \
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001418:	2b00      	cmp	r3, #0
 800141a:	bfb8      	it	lt
 800141c:	425b      	neglt	r3, r3
 800141e:	b29b      	uxth	r3, r3
 8001420:	f5b3 7f25 	cmp.w	r3, #660	; 0x294
 8001424:	d81d      	bhi.n	8001462 <rc_callback_handler+0x16e>
      (abs(rc->ch2) > 660) || \
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800142c:	2b00      	cmp	r3, #0
 800142e:	bfb8      	it	lt
 8001430:	425b      	neglt	r3, r3
 8001432:	b29b      	uxth	r3, r3
  if ((abs(rc->ch1) > 660) || \
 8001434:	f5b3 7f25 	cmp.w	r3, #660	; 0x294
 8001438:	d813      	bhi.n	8001462 <rc_callback_handler+0x16e>
      (abs(rc->ch3) > 660) || \
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001440:	2b00      	cmp	r3, #0
 8001442:	bfb8      	it	lt
 8001444:	425b      	neglt	r3, r3
 8001446:	b29b      	uxth	r3, r3
      (abs(rc->ch2) > 660) || \
 8001448:	f5b3 7f25 	cmp.w	r3, #660	; 0x294
 800144c:	d809      	bhi.n	8001462 <rc_callback_handler+0x16e>
      (abs(rc->ch4) > 660))
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001454:	2b00      	cmp	r3, #0
 8001456:	bfb8      	it	lt
 8001458:	425b      	neglt	r3, r3
 800145a:	b29b      	uxth	r3, r3
      (abs(rc->ch3) > 660) || \
 800145c:	f5b3 7f25 	cmp.w	r3, #660	; 0x294
 8001460:	d904      	bls.n	800146c <rc_callback_handler+0x178>
  {
    memset(rc, 0, sizeof(rc_info_t));
 8001462:	2216      	movs	r2, #22
 8001464:	2100      	movs	r1, #0
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f004 fc26 	bl	8005cb8 <memset>
  }

  rc->mouse.x = buff[6] | (buff[7] << 8);                    //!< Mouse X axis
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	3306      	adds	r3, #6
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	b21a      	sxth	r2, r3
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	3307      	adds	r3, #7
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	021b      	lsls	r3, r3, #8
 800147c:	b21b      	sxth	r3, r3
 800147e:	4313      	orrs	r3, r2
 8001480:	b21a      	sxth	r2, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	819a      	strh	r2, [r3, #12]
  rc->mouse.y = buff[8] | (buff[9] << 8);                    //!< Mouse Y axis
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	3308      	adds	r3, #8
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	b21a      	sxth	r2, r3
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	3309      	adds	r3, #9
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	021b      	lsls	r3, r3, #8
 8001496:	b21b      	sxth	r3, r3
 8001498:	4313      	orrs	r3, r2
 800149a:	b21a      	sxth	r2, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	81da      	strh	r2, [r3, #14]
  rc->mouse.z = buff[10] | (buff[11] << 8);                  //!< Mouse Z axis
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	330a      	adds	r3, #10
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	b21a      	sxth	r2, r3
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	330b      	adds	r3, #11
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	021b      	lsls	r3, r3, #8
 80014b0:	b21b      	sxth	r3, r3
 80014b2:	4313      	orrs	r3, r2
 80014b4:	b21a      	sxth	r2, r3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	821a      	strh	r2, [r3, #16]
  rc->mouse.l = buff[12];                                  //!< Mouse Left Is Press ?
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	7b1a      	ldrb	r2, [r3, #12]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	749a      	strb	r2, [r3, #18]
  rc->mouse.r = buff[13];                                  //!< Mouse Right Is Press ?
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	7b5a      	ldrb	r2, [r3, #13]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	74da      	strb	r2, [r3, #19]
  rc->kb.key_code = buff[14] | (buff[15] << 8);                    //!< KeyBoard value
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	330e      	adds	r3, #14
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	b21a      	sxth	r2, r3
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	330f      	adds	r3, #15
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	021b      	lsls	r3, r3, #8
 80014da:	b21b      	sxth	r3, r3
 80014dc:	4313      	orrs	r3, r2
 80014de:	b21b      	sxth	r3, r3
 80014e0:	b29a      	uxth	r2, r3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	829a      	strh	r2, [r3, #20]
  rc->wheel = buff[16] | ( buff[17] << 8);
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	3310      	adds	r3, #16
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	b21a      	sxth	r2, r3
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	3311      	adds	r3, #17
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	021b      	lsls	r3, r3, #8
 80014f6:	b21b      	sxth	r3, r3
 80014f8:	4313      	orrs	r3, r2
 80014fa:	b21a      	sxth	r2, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	811a      	strh	r2, [r3, #8]
  rc->wheel -= 1024;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001506:	b29b      	uxth	r3, r3
 8001508:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800150c:	b29b      	uxth	r3, r3
 800150e:	b21a      	sxth	r2, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	811a      	strh	r2, [r3, #8]
}
 8001514:	bf00      	nop
 8001516:	3708      	adds	r7, #8
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}

0800151c <uart_rx_idle_callback>:
  * @brief      clear idle it flag after uart receive a frame data
  * @param[in]  huart: uart IRQHandler id
  * @retval
  */
static void uart_rx_idle_callback(UART_HandleTypeDef* huart)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
	/* clear idle it flag avoid idle interrupt all the time */
	__HAL_UART_CLEAR_IDLEFLAG(huart);
 8001524:	2300      	movs	r3, #0
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	60fb      	str	r3, [r7, #12]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	68fb      	ldr	r3, [r7, #12]

	/* handle received data in idle interrupt */
	if (huart == &DBUS_HUART)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4a17      	ldr	r2, [pc, #92]	; (800159c <uart_rx_idle_callback+0x80>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d127      	bne.n	8001592 <uart_rx_idle_callback+0x76>
	{
		/* clear DMA transfer complete flag */
		__HAL_DMA_DISABLE(huart->hdmarx);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f022 0201 	bic.w	r2, r2, #1
 8001554:	601a      	str	r2, [r3, #0]

		/* handle dbus data dbus_buf from DMA */
		if ((DBUS_MAX_LEN - dma_current_data_counter(huart->hdmarx->Instance)) == DBUS_BUFLEN)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff febc 	bl	80012da <dma_current_data_counter>
 8001562:	4603      	mov	r3, r0
 8001564:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
 8001568:	2b12      	cmp	r3, #18
 800156a:	d103      	bne.n	8001574 <uart_rx_idle_callback+0x58>
		{
			rc_callback_handler(&rc, dbus_buf);
 800156c:	490c      	ldr	r1, [pc, #48]	; (80015a0 <uart_rx_idle_callback+0x84>)
 800156e:	480d      	ldr	r0, [pc, #52]	; (80015a4 <uart_rx_idle_callback+0x88>)
 8001570:	f7ff fec0 	bl	80012f4 <rc_callback_handler>
		}

		/* restart dma transmission */
		__HAL_DMA_SET_COUNTER(huart->hdmarx, DBUS_MAX_LEN);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2224      	movs	r2, #36	; 0x24
 800157c:	605a      	str	r2, [r3, #4]
		__HAL_DMA_ENABLE(huart->hdmarx);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f042 0201 	orr.w	r2, r2, #1
 8001590:	601a      	str	r2, [r3, #0]
	}
}
 8001592:	bf00      	nop
 8001594:	3710      	adds	r7, #16
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	20000348 	.word	0x20000348
 80015a0:	20000650 	.word	0x20000650
 80015a4:	20000638 	.word	0x20000638

080015a8 <uart_receive_handler>:
  * @brief      callback this function when uart interrupt
  * @param[in]  huart: uart IRQHandler id
  * @retval
  */
void uart_receive_handler(UART_HandleTypeDef *huart)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
	if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) &&
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0310 	and.w	r3, r3, #16
 80015ba:	2b10      	cmp	r3, #16
 80015bc:	d109      	bne.n	80015d2 <uart_receive_handler+0x2a>
			__HAL_UART_GET_IT_SOURCE(huart, UART_IT_IDLE))
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	f003 0310 	and.w	r3, r3, #16
	if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) &&
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d002      	beq.n	80015d2 <uart_receive_handler+0x2a>
	{
		uart_rx_idle_callback(huart);
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f7ff ffa5 	bl	800151c <uart_rx_idle_callback>
	}
}
 80015d2:	bf00      	nop
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
	...

080015dc <dbus_uart_init>:
  * @brief   initialize dbus uart device
  * @param
  * @retval
  */
void dbus_uart_init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
	/* open uart idle it */
	__HAL_UART_CLEAR_IDLEFLAG(&DBUS_HUART);
 80015e2:	2300      	movs	r3, #0
 80015e4:	607b      	str	r3, [r7, #4]
 80015e6:	4b0d      	ldr	r3, [pc, #52]	; (800161c <dbus_uart_init+0x40>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	607b      	str	r3, [r7, #4]
 80015ee:	4b0b      	ldr	r3, [pc, #44]	; (800161c <dbus_uart_init+0x40>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	607b      	str	r3, [r7, #4]
 80015f6:	687b      	ldr	r3, [r7, #4]
	__HAL_UART_ENABLE_IT(&DBUS_HUART, UART_IT_IDLE);
 80015f8:	4b08      	ldr	r3, [pc, #32]	; (800161c <dbus_uart_init+0x40>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	68da      	ldr	r2, [r3, #12]
 80015fe:	4b07      	ldr	r3, [pc, #28]	; (800161c <dbus_uart_init+0x40>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f042 0210 	orr.w	r2, r2, #16
 8001606:	60da      	str	r2, [r3, #12]

	uart_receive_dma_no_it(&DBUS_HUART, dbus_buf, DBUS_MAX_LEN);
 8001608:	2224      	movs	r2, #36	; 0x24
 800160a:	4905      	ldr	r1, [pc, #20]	; (8001620 <dbus_uart_init+0x44>)
 800160c:	4803      	ldr	r0, [pc, #12]	; (800161c <dbus_uart_init+0x40>)
 800160e:	f7ff fe29 	bl	8001264 <uart_receive_dma_no_it>
}
 8001612:	bf00      	nop
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	20000348 	.word	0x20000348
 8001620:	20000650 	.word	0x20000650

08001624 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800162a:	2300      	movs	r3, #0
 800162c:	607b      	str	r3, [r7, #4]
 800162e:	4b10      	ldr	r3, [pc, #64]	; (8001670 <HAL_MspInit+0x4c>)
 8001630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001632:	4a0f      	ldr	r2, [pc, #60]	; (8001670 <HAL_MspInit+0x4c>)
 8001634:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001638:	6453      	str	r3, [r2, #68]	; 0x44
 800163a:	4b0d      	ldr	r3, [pc, #52]	; (8001670 <HAL_MspInit+0x4c>)
 800163c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001642:	607b      	str	r3, [r7, #4]
 8001644:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	603b      	str	r3, [r7, #0]
 800164a:	4b09      	ldr	r3, [pc, #36]	; (8001670 <HAL_MspInit+0x4c>)
 800164c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164e:	4a08      	ldr	r2, [pc, #32]	; (8001670 <HAL_MspInit+0x4c>)
 8001650:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001654:	6413      	str	r3, [r2, #64]	; 0x40
 8001656:	4b06      	ldr	r3, [pc, #24]	; (8001670 <HAL_MspInit+0x4c>)
 8001658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800165e:	603b      	str	r3, [r7, #0]
 8001660:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001662:	bf00      	nop
 8001664:	370c      	adds	r7, #12
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	40023800 	.word	0x40023800

08001674 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b08c      	sub	sp, #48	; 0x30
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800167c:	f107 031c 	add.w	r3, r7, #28
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	605a      	str	r2, [r3, #4]
 8001686:	609a      	str	r2, [r3, #8]
 8001688:	60da      	str	r2, [r3, #12]
 800168a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a52      	ldr	r2, [pc, #328]	; (80017dc <HAL_CAN_MspInit+0x168>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d145      	bne.n	8001722 <HAL_CAN_MspInit+0xae>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001696:	4b52      	ldr	r3, [pc, #328]	; (80017e0 <HAL_CAN_MspInit+0x16c>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	3301      	adds	r3, #1
 800169c:	4a50      	ldr	r2, [pc, #320]	; (80017e0 <HAL_CAN_MspInit+0x16c>)
 800169e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80016a0:	4b4f      	ldr	r3, [pc, #316]	; (80017e0 <HAL_CAN_MspInit+0x16c>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d10d      	bne.n	80016c4 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80016a8:	2300      	movs	r3, #0
 80016aa:	61bb      	str	r3, [r7, #24]
 80016ac:	4b4d      	ldr	r3, [pc, #308]	; (80017e4 <HAL_CAN_MspInit+0x170>)
 80016ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b0:	4a4c      	ldr	r2, [pc, #304]	; (80017e4 <HAL_CAN_MspInit+0x170>)
 80016b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016b6:	6413      	str	r3, [r2, #64]	; 0x40
 80016b8:	4b4a      	ldr	r3, [pc, #296]	; (80017e4 <HAL_CAN_MspInit+0x170>)
 80016ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016c0:	61bb      	str	r3, [r7, #24]
 80016c2:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016c4:	2300      	movs	r3, #0
 80016c6:	617b      	str	r3, [r7, #20]
 80016c8:	4b46      	ldr	r3, [pc, #280]	; (80017e4 <HAL_CAN_MspInit+0x170>)
 80016ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016cc:	4a45      	ldr	r2, [pc, #276]	; (80017e4 <HAL_CAN_MspInit+0x170>)
 80016ce:	f043 0308 	orr.w	r3, r3, #8
 80016d2:	6313      	str	r3, [r2, #48]	; 0x30
 80016d4:	4b43      	ldr	r3, [pc, #268]	; (80017e4 <HAL_CAN_MspInit+0x170>)
 80016d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d8:	f003 0308 	and.w	r3, r3, #8
 80016dc:	617b      	str	r3, [r7, #20]
 80016de:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80016e0:	2303      	movs	r3, #3
 80016e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e4:	2302      	movs	r3, #2
 80016e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e8:	2300      	movs	r3, #0
 80016ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ec:	2303      	movs	r3, #3
 80016ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80016f0:	2309      	movs	r3, #9
 80016f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016f4:	f107 031c 	add.w	r3, r7, #28
 80016f8:	4619      	mov	r1, r3
 80016fa:	483b      	ldr	r0, [pc, #236]	; (80017e8 <HAL_CAN_MspInit+0x174>)
 80016fc:	f001 ff02 	bl	8003504 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8001700:	2200      	movs	r2, #0
 8001702:	2100      	movs	r1, #0
 8001704:	2013      	movs	r0, #19
 8001706:	f001 fae0 	bl	8002cca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 800170a:	2013      	movs	r0, #19
 800170c:	f001 faf9 	bl	8002d02 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001710:	2200      	movs	r2, #0
 8001712:	2100      	movs	r1, #0
 8001714:	2014      	movs	r0, #20
 8001716:	f001 fad8 	bl	8002cca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800171a:	2014      	movs	r0, #20
 800171c:	f001 faf1 	bl	8002d02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8001720:	e058      	b.n	80017d4 <HAL_CAN_MspInit+0x160>
  else if(hcan->Instance==CAN2)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a31      	ldr	r2, [pc, #196]	; (80017ec <HAL_CAN_MspInit+0x178>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d153      	bne.n	80017d4 <HAL_CAN_MspInit+0x160>
    __HAL_RCC_CAN2_CLK_ENABLE();
 800172c:	2300      	movs	r3, #0
 800172e:	613b      	str	r3, [r7, #16]
 8001730:	4b2c      	ldr	r3, [pc, #176]	; (80017e4 <HAL_CAN_MspInit+0x170>)
 8001732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001734:	4a2b      	ldr	r2, [pc, #172]	; (80017e4 <HAL_CAN_MspInit+0x170>)
 8001736:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800173a:	6413      	str	r3, [r2, #64]	; 0x40
 800173c:	4b29      	ldr	r3, [pc, #164]	; (80017e4 <HAL_CAN_MspInit+0x170>)
 800173e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001740:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001744:	613b      	str	r3, [r7, #16]
 8001746:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001748:	4b25      	ldr	r3, [pc, #148]	; (80017e0 <HAL_CAN_MspInit+0x16c>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	3301      	adds	r3, #1
 800174e:	4a24      	ldr	r2, [pc, #144]	; (80017e0 <HAL_CAN_MspInit+0x16c>)
 8001750:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001752:	4b23      	ldr	r3, [pc, #140]	; (80017e0 <HAL_CAN_MspInit+0x16c>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	2b01      	cmp	r3, #1
 8001758:	d10d      	bne.n	8001776 <HAL_CAN_MspInit+0x102>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800175a:	2300      	movs	r3, #0
 800175c:	60fb      	str	r3, [r7, #12]
 800175e:	4b21      	ldr	r3, [pc, #132]	; (80017e4 <HAL_CAN_MspInit+0x170>)
 8001760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001762:	4a20      	ldr	r2, [pc, #128]	; (80017e4 <HAL_CAN_MspInit+0x170>)
 8001764:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001768:	6413      	str	r3, [r2, #64]	; 0x40
 800176a:	4b1e      	ldr	r3, [pc, #120]	; (80017e4 <HAL_CAN_MspInit+0x170>)
 800176c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001772:	60fb      	str	r3, [r7, #12]
 8001774:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	60bb      	str	r3, [r7, #8]
 800177a:	4b1a      	ldr	r3, [pc, #104]	; (80017e4 <HAL_CAN_MspInit+0x170>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177e:	4a19      	ldr	r2, [pc, #100]	; (80017e4 <HAL_CAN_MspInit+0x170>)
 8001780:	f043 0302 	orr.w	r3, r3, #2
 8001784:	6313      	str	r3, [r2, #48]	; 0x30
 8001786:	4b17      	ldr	r3, [pc, #92]	; (80017e4 <HAL_CAN_MspInit+0x170>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	f003 0302 	and.w	r3, r3, #2
 800178e:	60bb      	str	r3, [r7, #8]
 8001790:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001792:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001796:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001798:	2302      	movs	r3, #2
 800179a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179c:	2300      	movs	r3, #0
 800179e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a0:	2303      	movs	r3, #3
 80017a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80017a4:	2309      	movs	r3, #9
 80017a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017a8:	f107 031c 	add.w	r3, r7, #28
 80017ac:	4619      	mov	r1, r3
 80017ae:	4810      	ldr	r0, [pc, #64]	; (80017f0 <HAL_CAN_MspInit+0x17c>)
 80017b0:	f001 fea8 	bl	8003504 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 0, 0);
 80017b4:	2200      	movs	r2, #0
 80017b6:	2100      	movs	r1, #0
 80017b8:	203f      	movs	r0, #63	; 0x3f
 80017ba:	f001 fa86 	bl	8002cca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 80017be:	203f      	movs	r0, #63	; 0x3f
 80017c0:	f001 fa9f 	bl	8002d02 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 80017c4:	2200      	movs	r2, #0
 80017c6:	2100      	movs	r1, #0
 80017c8:	2040      	movs	r0, #64	; 0x40
 80017ca:	f001 fa7e 	bl	8002cca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 80017ce:	2040      	movs	r0, #64	; 0x40
 80017d0:	f001 fa97 	bl	8002d02 <HAL_NVIC_EnableIRQ>
}
 80017d4:	bf00      	nop
 80017d6:	3730      	adds	r7, #48	; 0x30
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	40006400 	.word	0x40006400
 80017e0:	20000028 	.word	0x20000028
 80017e4:	40023800 	.word	0x40023800
 80017e8:	40020c00 	.word	0x40020c00
 80017ec:	40006800 	.word	0x40006800
 80017f0:	40020400 	.word	0x40020400

080017f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b08a      	sub	sp, #40	; 0x28
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017fc:	f107 0314 	add.w	r3, r7, #20
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	605a      	str	r2, [r3, #4]
 8001806:	609a      	str	r2, [r3, #8]
 8001808:	60da      	str	r2, [r3, #12]
 800180a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a29      	ldr	r2, [pc, #164]	; (80018b8 <HAL_I2C_MspInit+0xc4>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d14b      	bne.n	80018ae <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001816:	2300      	movs	r3, #0
 8001818:	613b      	str	r3, [r7, #16]
 800181a:	4b28      	ldr	r3, [pc, #160]	; (80018bc <HAL_I2C_MspInit+0xc8>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	4a27      	ldr	r2, [pc, #156]	; (80018bc <HAL_I2C_MspInit+0xc8>)
 8001820:	f043 0301 	orr.w	r3, r3, #1
 8001824:	6313      	str	r3, [r2, #48]	; 0x30
 8001826:	4b25      	ldr	r3, [pc, #148]	; (80018bc <HAL_I2C_MspInit+0xc8>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	613b      	str	r3, [r7, #16]
 8001830:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001832:	2300      	movs	r3, #0
 8001834:	60fb      	str	r3, [r7, #12]
 8001836:	4b21      	ldr	r3, [pc, #132]	; (80018bc <HAL_I2C_MspInit+0xc8>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	4a20      	ldr	r2, [pc, #128]	; (80018bc <HAL_I2C_MspInit+0xc8>)
 800183c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001840:	6313      	str	r3, [r2, #48]	; 0x30
 8001842:	4b1e      	ldr	r3, [pc, #120]	; (80018bc <HAL_I2C_MspInit+0xc8>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800184a:	60fb      	str	r3, [r7, #12]
 800184c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PA9     ------> I2C3_SMBA
    PA8     ------> I2C3_SCL
    PH8     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 800184e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001852:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001854:	2312      	movs	r3, #18
 8001856:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001858:	2300      	movs	r3, #0
 800185a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800185c:	2303      	movs	r3, #3
 800185e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001860:	2304      	movs	r3, #4
 8001862:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001864:	f107 0314 	add.w	r3, r7, #20
 8001868:	4619      	mov	r1, r3
 800186a:	4815      	ldr	r0, [pc, #84]	; (80018c0 <HAL_I2C_MspInit+0xcc>)
 800186c:	f001 fe4a 	bl	8003504 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001870:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001874:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001876:	2312      	movs	r3, #18
 8001878:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187a:	2300      	movs	r3, #0
 800187c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800187e:	2303      	movs	r3, #3
 8001880:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001882:	2304      	movs	r3, #4
 8001884:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001886:	f107 0314 	add.w	r3, r7, #20
 800188a:	4619      	mov	r1, r3
 800188c:	480d      	ldr	r0, [pc, #52]	; (80018c4 <HAL_I2C_MspInit+0xd0>)
 800188e:	f001 fe39 	bl	8003504 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001892:	2300      	movs	r3, #0
 8001894:	60bb      	str	r3, [r7, #8]
 8001896:	4b09      	ldr	r3, [pc, #36]	; (80018bc <HAL_I2C_MspInit+0xc8>)
 8001898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189a:	4a08      	ldr	r2, [pc, #32]	; (80018bc <HAL_I2C_MspInit+0xc8>)
 800189c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80018a0:	6413      	str	r3, [r2, #64]	; 0x40
 80018a2:	4b06      	ldr	r3, [pc, #24]	; (80018bc <HAL_I2C_MspInit+0xc8>)
 80018a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80018aa:	60bb      	str	r3, [r7, #8]
 80018ac:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80018ae:	bf00      	nop
 80018b0:	3728      	adds	r7, #40	; 0x28
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	40005c00 	.word	0x40005c00
 80018bc:	40023800 	.word	0x40023800
 80018c0:	40020000 	.word	0x40020000
 80018c4:	40021c00 	.word	0x40021c00

080018c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b08a      	sub	sp, #40	; 0x28
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d0:	f107 0314 	add.w	r3, r7, #20
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	605a      	str	r2, [r3, #4]
 80018da:	609a      	str	r2, [r3, #8]
 80018dc:	60da      	str	r2, [r3, #12]
 80018de:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a19      	ldr	r2, [pc, #100]	; (800194c <HAL_SPI_MspInit+0x84>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d12c      	bne.n	8001944 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	613b      	str	r3, [r7, #16]
 80018ee:	4b18      	ldr	r3, [pc, #96]	; (8001950 <HAL_SPI_MspInit+0x88>)
 80018f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f2:	4a17      	ldr	r2, [pc, #92]	; (8001950 <HAL_SPI_MspInit+0x88>)
 80018f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80018f8:	6453      	str	r3, [r2, #68]	; 0x44
 80018fa:	4b15      	ldr	r3, [pc, #84]	; (8001950 <HAL_SPI_MspInit+0x88>)
 80018fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001902:	613b      	str	r3, [r7, #16]
 8001904:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	60fb      	str	r3, [r7, #12]
 800190a:	4b11      	ldr	r3, [pc, #68]	; (8001950 <HAL_SPI_MspInit+0x88>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	4a10      	ldr	r2, [pc, #64]	; (8001950 <HAL_SPI_MspInit+0x88>)
 8001910:	f043 0320 	orr.w	r3, r3, #32
 8001914:	6313      	str	r3, [r2, #48]	; 0x30
 8001916:	4b0e      	ldr	r3, [pc, #56]	; (8001950 <HAL_SPI_MspInit+0x88>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	f003 0320 	and.w	r3, r3, #32
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF9     ------> SPI5_MOSI
    PF8     ------> SPI5_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_8;
 8001922:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001926:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001928:	2302      	movs	r3, #2
 800192a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192c:	2300      	movs	r3, #0
 800192e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001930:	2303      	movs	r3, #3
 8001932:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001934:	2305      	movs	r3, #5
 8001936:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001938:	f107 0314 	add.w	r3, r7, #20
 800193c:	4619      	mov	r1, r3
 800193e:	4805      	ldr	r0, [pc, #20]	; (8001954 <HAL_SPI_MspInit+0x8c>)
 8001940:	f001 fde0 	bl	8003504 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001944:	bf00      	nop
 8001946:	3728      	adds	r7, #40	; 0x28
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	40015000 	.word	0x40015000
 8001950:	40023800 	.word	0x40023800
 8001954:	40021400 	.word	0x40021400

08001958 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001958:	b480      	push	{r7}
 800195a:	b089      	sub	sp, #36	; 0x24
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001968:	d10e      	bne.n	8001988 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800196a:	2300      	movs	r3, #0
 800196c:	61fb      	str	r3, [r7, #28]
 800196e:	4b31      	ldr	r3, [pc, #196]	; (8001a34 <HAL_TIM_PWM_MspInit+0xdc>)
 8001970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001972:	4a30      	ldr	r2, [pc, #192]	; (8001a34 <HAL_TIM_PWM_MspInit+0xdc>)
 8001974:	f043 0301 	orr.w	r3, r3, #1
 8001978:	6413      	str	r3, [r2, #64]	; 0x40
 800197a:	4b2e      	ldr	r3, [pc, #184]	; (8001a34 <HAL_TIM_PWM_MspInit+0xdc>)
 800197c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	61fb      	str	r3, [r7, #28]
 8001984:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8001986:	e04e      	b.n	8001a26 <HAL_TIM_PWM_MspInit+0xce>
  else if(htim_pwm->Instance==TIM3)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a2a      	ldr	r2, [pc, #168]	; (8001a38 <HAL_TIM_PWM_MspInit+0xe0>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d10e      	bne.n	80019b0 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	61bb      	str	r3, [r7, #24]
 8001996:	4b27      	ldr	r3, [pc, #156]	; (8001a34 <HAL_TIM_PWM_MspInit+0xdc>)
 8001998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199a:	4a26      	ldr	r2, [pc, #152]	; (8001a34 <HAL_TIM_PWM_MspInit+0xdc>)
 800199c:	f043 0302 	orr.w	r3, r3, #2
 80019a0:	6413      	str	r3, [r2, #64]	; 0x40
 80019a2:	4b24      	ldr	r3, [pc, #144]	; (8001a34 <HAL_TIM_PWM_MspInit+0xdc>)
 80019a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a6:	f003 0302 	and.w	r3, r3, #2
 80019aa:	61bb      	str	r3, [r7, #24]
 80019ac:	69bb      	ldr	r3, [r7, #24]
}
 80019ae:	e03a      	b.n	8001a26 <HAL_TIM_PWM_MspInit+0xce>
  else if(htim_pwm->Instance==TIM4)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a21      	ldr	r2, [pc, #132]	; (8001a3c <HAL_TIM_PWM_MspInit+0xe4>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d10e      	bne.n	80019d8 <HAL_TIM_PWM_MspInit+0x80>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80019ba:	2300      	movs	r3, #0
 80019bc:	617b      	str	r3, [r7, #20]
 80019be:	4b1d      	ldr	r3, [pc, #116]	; (8001a34 <HAL_TIM_PWM_MspInit+0xdc>)
 80019c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c2:	4a1c      	ldr	r2, [pc, #112]	; (8001a34 <HAL_TIM_PWM_MspInit+0xdc>)
 80019c4:	f043 0304 	orr.w	r3, r3, #4
 80019c8:	6413      	str	r3, [r2, #64]	; 0x40
 80019ca:	4b1a      	ldr	r3, [pc, #104]	; (8001a34 <HAL_TIM_PWM_MspInit+0xdc>)
 80019cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ce:	f003 0304 	and.w	r3, r3, #4
 80019d2:	617b      	str	r3, [r7, #20]
 80019d4:	697b      	ldr	r3, [r7, #20]
}
 80019d6:	e026      	b.n	8001a26 <HAL_TIM_PWM_MspInit+0xce>
  else if(htim_pwm->Instance==TIM5)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a18      	ldr	r2, [pc, #96]	; (8001a40 <HAL_TIM_PWM_MspInit+0xe8>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d10e      	bne.n	8001a00 <HAL_TIM_PWM_MspInit+0xa8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80019e2:	2300      	movs	r3, #0
 80019e4:	613b      	str	r3, [r7, #16]
 80019e6:	4b13      	ldr	r3, [pc, #76]	; (8001a34 <HAL_TIM_PWM_MspInit+0xdc>)
 80019e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ea:	4a12      	ldr	r2, [pc, #72]	; (8001a34 <HAL_TIM_PWM_MspInit+0xdc>)
 80019ec:	f043 0308 	orr.w	r3, r3, #8
 80019f0:	6413      	str	r3, [r2, #64]	; 0x40
 80019f2:	4b10      	ldr	r3, [pc, #64]	; (8001a34 <HAL_TIM_PWM_MspInit+0xdc>)
 80019f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f6:	f003 0308 	and.w	r3, r3, #8
 80019fa:	613b      	str	r3, [r7, #16]
 80019fc:	693b      	ldr	r3, [r7, #16]
}
 80019fe:	e012      	b.n	8001a26 <HAL_TIM_PWM_MspInit+0xce>
  else if(htim_pwm->Instance==TIM12)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a0f      	ldr	r2, [pc, #60]	; (8001a44 <HAL_TIM_PWM_MspInit+0xec>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d10d      	bne.n	8001a26 <HAL_TIM_PWM_MspInit+0xce>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	60fb      	str	r3, [r7, #12]
 8001a0e:	4b09      	ldr	r3, [pc, #36]	; (8001a34 <HAL_TIM_PWM_MspInit+0xdc>)
 8001a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a12:	4a08      	ldr	r2, [pc, #32]	; (8001a34 <HAL_TIM_PWM_MspInit+0xdc>)
 8001a14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a18:	6413      	str	r3, [r2, #64]	; 0x40
 8001a1a:	4b06      	ldr	r3, [pc, #24]	; (8001a34 <HAL_TIM_PWM_MspInit+0xdc>)
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	68fb      	ldr	r3, [r7, #12]
}
 8001a26:	bf00      	nop
 8001a28:	3724      	adds	r7, #36	; 0x24
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	40023800 	.word	0x40023800
 8001a38:	40000400 	.word	0x40000400
 8001a3c:	40000800 	.word	0x40000800
 8001a40:	40000c00 	.word	0x40000c00
 8001a44:	40001800 	.word	0x40001800

08001a48 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b08c      	sub	sp, #48	; 0x30
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a50:	f107 031c 	add.w	r3, r7, #28
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	605a      	str	r2, [r3, #4]
 8001a5a:	609a      	str	r2, [r3, #8]
 8001a5c:	60da      	str	r2, [r3, #12]
 8001a5e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a68:	d11e      	bne.n	8001aa8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	61bb      	str	r3, [r7, #24]
 8001a6e:	4b59      	ldr	r3, [pc, #356]	; (8001bd4 <HAL_TIM_MspPostInit+0x18c>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	4a58      	ldr	r2, [pc, #352]	; (8001bd4 <HAL_TIM_MspPostInit+0x18c>)
 8001a74:	f043 0301 	orr.w	r3, r3, #1
 8001a78:	6313      	str	r3, [r2, #48]	; 0x30
 8001a7a:	4b56      	ldr	r3, [pc, #344]	; (8001bd4 <HAL_TIM_MspPostInit+0x18c>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	61bb      	str	r3, [r7, #24]
 8001a84:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001a86:	230c      	movs	r3, #12
 8001a88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a92:	2300      	movs	r3, #0
 8001a94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a96:	2301      	movs	r3, #1
 8001a98:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a9a:	f107 031c 	add.w	r3, r7, #28
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	484d      	ldr	r0, [pc, #308]	; (8001bd8 <HAL_TIM_MspPostInit+0x190>)
 8001aa2:	f001 fd2f 	bl	8003504 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8001aa6:	e090      	b.n	8001bca <HAL_TIM_MspPostInit+0x182>
  else if(htim->Instance==TIM3)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a4b      	ldr	r2, [pc, #300]	; (8001bdc <HAL_TIM_MspPostInit+0x194>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d11e      	bne.n	8001af0 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	617b      	str	r3, [r7, #20]
 8001ab6:	4b47      	ldr	r3, [pc, #284]	; (8001bd4 <HAL_TIM_MspPostInit+0x18c>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aba:	4a46      	ldr	r2, [pc, #280]	; (8001bd4 <HAL_TIM_MspPostInit+0x18c>)
 8001abc:	f043 0302 	orr.w	r3, r3, #2
 8001ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac2:	4b44      	ldr	r3, [pc, #272]	; (8001bd4 <HAL_TIM_MspPostInit+0x18c>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac6:	f003 0302 	and.w	r3, r3, #2
 8001aca:	617b      	str	r3, [r7, #20]
 8001acc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001ace:	2320      	movs	r3, #32
 8001ad0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ada:	2300      	movs	r3, #0
 8001adc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ade:	2302      	movs	r3, #2
 8001ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ae2:	f107 031c 	add.w	r3, r7, #28
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	483d      	ldr	r0, [pc, #244]	; (8001be0 <HAL_TIM_MspPostInit+0x198>)
 8001aea:	f001 fd0b 	bl	8003504 <HAL_GPIO_Init>
}
 8001aee:	e06c      	b.n	8001bca <HAL_TIM_MspPostInit+0x182>
  else if(htim->Instance==TIM4)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a3b      	ldr	r2, [pc, #236]	; (8001be4 <HAL_TIM_MspPostInit+0x19c>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d11f      	bne.n	8001b3a <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001afa:	2300      	movs	r3, #0
 8001afc:	613b      	str	r3, [r7, #16]
 8001afe:	4b35      	ldr	r3, [pc, #212]	; (8001bd4 <HAL_TIM_MspPostInit+0x18c>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b02:	4a34      	ldr	r2, [pc, #208]	; (8001bd4 <HAL_TIM_MspPostInit+0x18c>)
 8001b04:	f043 0308 	orr.w	r3, r3, #8
 8001b08:	6313      	str	r3, [r2, #48]	; 0x30
 8001b0a:	4b32      	ldr	r3, [pc, #200]	; (8001bd4 <HAL_TIM_MspPostInit+0x18c>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0e:	f003 0308 	and.w	r3, r3, #8
 8001b12:	613b      	str	r3, [r7, #16]
 8001b14:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12;
 8001b16:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001b1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b20:	2300      	movs	r3, #0
 8001b22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b24:	2300      	movs	r3, #0
 8001b26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001b28:	2302      	movs	r3, #2
 8001b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b2c:	f107 031c 	add.w	r3, r7, #28
 8001b30:	4619      	mov	r1, r3
 8001b32:	482d      	ldr	r0, [pc, #180]	; (8001be8 <HAL_TIM_MspPostInit+0x1a0>)
 8001b34:	f001 fce6 	bl	8003504 <HAL_GPIO_Init>
}
 8001b38:	e047      	b.n	8001bca <HAL_TIM_MspPostInit+0x182>
  else if(htim->Instance==TIM5)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a2b      	ldr	r2, [pc, #172]	; (8001bec <HAL_TIM_MspPostInit+0x1a4>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d11f      	bne.n	8001b84 <HAL_TIM_MspPostInit+0x13c>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b44:	2300      	movs	r3, #0
 8001b46:	60fb      	str	r3, [r7, #12]
 8001b48:	4b22      	ldr	r3, [pc, #136]	; (8001bd4 <HAL_TIM_MspPostInit+0x18c>)
 8001b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4c:	4a21      	ldr	r2, [pc, #132]	; (8001bd4 <HAL_TIM_MspPostInit+0x18c>)
 8001b4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b52:	6313      	str	r3, [r2, #48]	; 0x30
 8001b54:	4b1f      	ldr	r3, [pc, #124]	; (8001bd4 <HAL_TIM_MspPostInit+0x18c>)
 8001b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b5c:	60fb      	str	r3, [r7, #12]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10;
 8001b60:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001b64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b66:	2302      	movs	r3, #2
 8001b68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001b72:	2302      	movs	r3, #2
 8001b74:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001b76:	f107 031c 	add.w	r3, r7, #28
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	481c      	ldr	r0, [pc, #112]	; (8001bf0 <HAL_TIM_MspPostInit+0x1a8>)
 8001b7e:	f001 fcc1 	bl	8003504 <HAL_GPIO_Init>
}
 8001b82:	e022      	b.n	8001bca <HAL_TIM_MspPostInit+0x182>
  else if(htim->Instance==TIM12)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a1a      	ldr	r2, [pc, #104]	; (8001bf4 <HAL_TIM_MspPostInit+0x1ac>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d11d      	bne.n	8001bca <HAL_TIM_MspPostInit+0x182>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b8e:	2300      	movs	r3, #0
 8001b90:	60bb      	str	r3, [r7, #8]
 8001b92:	4b10      	ldr	r3, [pc, #64]	; (8001bd4 <HAL_TIM_MspPostInit+0x18c>)
 8001b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b96:	4a0f      	ldr	r2, [pc, #60]	; (8001bd4 <HAL_TIM_MspPostInit+0x18c>)
 8001b98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b9e:	4b0d      	ldr	r3, [pc, #52]	; (8001bd4 <HAL_TIM_MspPostInit+0x18c>)
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ba6:	60bb      	str	r3, [r7, #8]
 8001ba8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001baa:	2340      	movs	r3, #64	; 0x40
 8001bac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bae:	2302      	movs	r3, #2
 8001bb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001bba:	2309      	movs	r3, #9
 8001bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001bbe:	f107 031c 	add.w	r3, r7, #28
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	480a      	ldr	r0, [pc, #40]	; (8001bf0 <HAL_TIM_MspPostInit+0x1a8>)
 8001bc6:	f001 fc9d 	bl	8003504 <HAL_GPIO_Init>
}
 8001bca:	bf00      	nop
 8001bcc:	3730      	adds	r7, #48	; 0x30
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	40023800 	.word	0x40023800
 8001bd8:	40020000 	.word	0x40020000
 8001bdc:	40000400 	.word	0x40000400
 8001be0:	40020400 	.word	0x40020400
 8001be4:	40000800 	.word	0x40000800
 8001be8:	40020c00 	.word	0x40020c00
 8001bec:	40000c00 	.word	0x40000c00
 8001bf0:	40021c00 	.word	0x40021c00
 8001bf4:	40001800 	.word	0x40001800

08001bf8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b092      	sub	sp, #72	; 0x48
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c00:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	605a      	str	r2, [r3, #4]
 8001c0a:	609a      	str	r2, [r3, #8]
 8001c0c:	60da      	str	r2, [r3, #12]
 8001c0e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a6a      	ldr	r2, [pc, #424]	; (8001dc0 <HAL_UART_MspInit+0x1c8>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d134      	bne.n	8001c84 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	633b      	str	r3, [r7, #48]	; 0x30
 8001c1e:	4b69      	ldr	r3, [pc, #420]	; (8001dc4 <HAL_UART_MspInit+0x1cc>)
 8001c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c22:	4a68      	ldr	r2, [pc, #416]	; (8001dc4 <HAL_UART_MspInit+0x1cc>)
 8001c24:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001c28:	6413      	str	r3, [r2, #64]	; 0x40
 8001c2a:	4b66      	ldr	r3, [pc, #408]	; (8001dc4 <HAL_UART_MspInit+0x1cc>)
 8001c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c32:	633b      	str	r3, [r7, #48]	; 0x30
 8001c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c36:	2300      	movs	r3, #0
 8001c38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c3a:	4b62      	ldr	r3, [pc, #392]	; (8001dc4 <HAL_UART_MspInit+0x1cc>)
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3e:	4a61      	ldr	r2, [pc, #388]	; (8001dc4 <HAL_UART_MspInit+0x1cc>)
 8001c40:	f043 0301 	orr.w	r3, r3, #1
 8001c44:	6313      	str	r3, [r2, #48]	; 0x30
 8001c46:	4b5f      	ldr	r3, [pc, #380]	; (8001dc4 <HAL_UART_MspInit+0x1cc>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4a:	f003 0301 	and.w	r3, r3, #1
 8001c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART4 GPIO Configuration
    PA1     ------> UART4_RX
    PA0/WKUP     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8001c52:	2303      	movs	r3, #3
 8001c54:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c56:	2302      	movs	r3, #2
 8001c58:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001c62:	2308      	movs	r3, #8
 8001c64:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c66:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	4856      	ldr	r0, [pc, #344]	; (8001dc8 <HAL_UART_MspInit+0x1d0>)
 8001c6e:	f001 fc49 	bl	8003504 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001c72:	2200      	movs	r2, #0
 8001c74:	2100      	movs	r1, #0
 8001c76:	2034      	movs	r0, #52	; 0x34
 8001c78:	f001 f827 	bl	8002cca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001c7c:	2034      	movs	r0, #52	; 0x34
 8001c7e:	f001 f840 	bl	8002d02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001c82:	e180      	b.n	8001f86 <HAL_UART_MspInit+0x38e>
  else if(huart->Instance==UART7)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a50      	ldr	r2, [pc, #320]	; (8001dcc <HAL_UART_MspInit+0x1d4>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d12d      	bne.n	8001cea <HAL_UART_MspInit+0xf2>
    __HAL_RCC_UART7_CLK_ENABLE();
 8001c8e:	2300      	movs	r3, #0
 8001c90:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c92:	4b4c      	ldr	r3, [pc, #304]	; (8001dc4 <HAL_UART_MspInit+0x1cc>)
 8001c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c96:	4a4b      	ldr	r2, [pc, #300]	; (8001dc4 <HAL_UART_MspInit+0x1cc>)
 8001c98:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001c9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c9e:	4b49      	ldr	r3, [pc, #292]	; (8001dc4 <HAL_UART_MspInit+0x1cc>)
 8001ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001ca6:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001caa:	2300      	movs	r3, #0
 8001cac:	627b      	str	r3, [r7, #36]	; 0x24
 8001cae:	4b45      	ldr	r3, [pc, #276]	; (8001dc4 <HAL_UART_MspInit+0x1cc>)
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb2:	4a44      	ldr	r2, [pc, #272]	; (8001dc4 <HAL_UART_MspInit+0x1cc>)
 8001cb4:	f043 0310 	orr.w	r3, r3, #16
 8001cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cba:	4b42      	ldr	r3, [pc, #264]	; (8001dc4 <HAL_UART_MspInit+0x1cc>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbe:	f003 0310 	and.w	r3, r3, #16
 8001cc2:	627b      	str	r3, [r7, #36]	; 0x24
 8001cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7;
 8001cc6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001cca:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ccc:	2302      	movs	r3, #2
 8001cce:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8001cd8:	2308      	movs	r3, #8
 8001cda:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cdc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	483b      	ldr	r0, [pc, #236]	; (8001dd0 <HAL_UART_MspInit+0x1d8>)
 8001ce4:	f001 fc0e 	bl	8003504 <HAL_GPIO_Init>
}
 8001ce8:	e14d      	b.n	8001f86 <HAL_UART_MspInit+0x38e>
  else if(huart->Instance==USART1)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a39      	ldr	r2, [pc, #228]	; (8001dd4 <HAL_UART_MspInit+0x1dc>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d177      	bne.n	8001de4 <HAL_UART_MspInit+0x1ec>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	623b      	str	r3, [r7, #32]
 8001cf8:	4b32      	ldr	r3, [pc, #200]	; (8001dc4 <HAL_UART_MspInit+0x1cc>)
 8001cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cfc:	4a31      	ldr	r2, [pc, #196]	; (8001dc4 <HAL_UART_MspInit+0x1cc>)
 8001cfe:	f043 0310 	orr.w	r3, r3, #16
 8001d02:	6453      	str	r3, [r2, #68]	; 0x44
 8001d04:	4b2f      	ldr	r3, [pc, #188]	; (8001dc4 <HAL_UART_MspInit+0x1cc>)
 8001d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d08:	f003 0310 	and.w	r3, r3, #16
 8001d0c:	623b      	str	r3, [r7, #32]
 8001d0e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d10:	2300      	movs	r3, #0
 8001d12:	61fb      	str	r3, [r7, #28]
 8001d14:	4b2b      	ldr	r3, [pc, #172]	; (8001dc4 <HAL_UART_MspInit+0x1cc>)
 8001d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d18:	4a2a      	ldr	r2, [pc, #168]	; (8001dc4 <HAL_UART_MspInit+0x1cc>)
 8001d1a:	f043 0302 	orr.w	r3, r3, #2
 8001d1e:	6313      	str	r3, [r2, #48]	; 0x30
 8001d20:	4b28      	ldr	r3, [pc, #160]	; (8001dc4 <HAL_UART_MspInit+0x1cc>)
 8001d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d24:	f003 0302 	and.w	r3, r3, #2
 8001d28:	61fb      	str	r3, [r7, #28]
 8001d2a:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8001d2c:	23c0      	movs	r3, #192	; 0xc0
 8001d2e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d30:	2302      	movs	r3, #2
 8001d32:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d34:	2300      	movs	r3, #0
 8001d36:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d3c:	2307      	movs	r3, #7
 8001d3e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d40:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d44:	4619      	mov	r1, r3
 8001d46:	4824      	ldr	r0, [pc, #144]	; (8001dd8 <HAL_UART_MspInit+0x1e0>)
 8001d48:	f001 fbdc 	bl	8003504 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001d4c:	4b23      	ldr	r3, [pc, #140]	; (8001ddc <HAL_UART_MspInit+0x1e4>)
 8001d4e:	4a24      	ldr	r2, [pc, #144]	; (8001de0 <HAL_UART_MspInit+0x1e8>)
 8001d50:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001d52:	4b22      	ldr	r3, [pc, #136]	; (8001ddc <HAL_UART_MspInit+0x1e4>)
 8001d54:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d58:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d5a:	4b20      	ldr	r3, [pc, #128]	; (8001ddc <HAL_UART_MspInit+0x1e4>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d60:	4b1e      	ldr	r3, [pc, #120]	; (8001ddc <HAL_UART_MspInit+0x1e4>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d66:	4b1d      	ldr	r3, [pc, #116]	; (8001ddc <HAL_UART_MspInit+0x1e4>)
 8001d68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d6c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d6e:	4b1b      	ldr	r3, [pc, #108]	; (8001ddc <HAL_UART_MspInit+0x1e4>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d74:	4b19      	ldr	r3, [pc, #100]	; (8001ddc <HAL_UART_MspInit+0x1e4>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001d7a:	4b18      	ldr	r3, [pc, #96]	; (8001ddc <HAL_UART_MspInit+0x1e4>)
 8001d7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d80:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001d82:	4b16      	ldr	r3, [pc, #88]	; (8001ddc <HAL_UART_MspInit+0x1e4>)
 8001d84:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001d88:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d8a:	4b14      	ldr	r3, [pc, #80]	; (8001ddc <HAL_UART_MspInit+0x1e4>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001d90:	4812      	ldr	r0, [pc, #72]	; (8001ddc <HAL_UART_MspInit+0x1e4>)
 8001d92:	f000 ffd1 	bl	8002d38 <HAL_DMA_Init>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <HAL_UART_MspInit+0x1a8>
      Error_Handler();
 8001d9c:	f7ff f9d8 	bl	8001150 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	4a0e      	ldr	r2, [pc, #56]	; (8001ddc <HAL_UART_MspInit+0x1e4>)
 8001da4:	639a      	str	r2, [r3, #56]	; 0x38
 8001da6:	4a0d      	ldr	r2, [pc, #52]	; (8001ddc <HAL_UART_MspInit+0x1e4>)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001dac:	2200      	movs	r2, #0
 8001dae:	2100      	movs	r1, #0
 8001db0:	2025      	movs	r0, #37	; 0x25
 8001db2:	f000 ff8a 	bl	8002cca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001db6:	2025      	movs	r0, #37	; 0x25
 8001db8:	f000 ffa3 	bl	8002d02 <HAL_NVIC_EnableIRQ>
}
 8001dbc:	e0e3      	b.n	8001f86 <HAL_UART_MspInit+0x38e>
 8001dbe:	bf00      	nop
 8001dc0:	40004c00 	.word	0x40004c00
 8001dc4:	40023800 	.word	0x40023800
 8001dc8:	40020000 	.word	0x40020000
 8001dcc:	40007800 	.word	0x40007800
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	40011000 	.word	0x40011000
 8001dd8:	40020400 	.word	0x40020400
 8001ddc:	20000288 	.word	0x20000288
 8001de0:	40026440 	.word	0x40026440
  else if(huart->Instance==USART2)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a69      	ldr	r2, [pc, #420]	; (8001f90 <HAL_UART_MspInit+0x398>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	f040 8091 	bne.w	8001f12 <HAL_UART_MspInit+0x31a>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001df0:	2300      	movs	r3, #0
 8001df2:	61bb      	str	r3, [r7, #24]
 8001df4:	4b67      	ldr	r3, [pc, #412]	; (8001f94 <HAL_UART_MspInit+0x39c>)
 8001df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df8:	4a66      	ldr	r2, [pc, #408]	; (8001f94 <HAL_UART_MspInit+0x39c>)
 8001dfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dfe:	6413      	str	r3, [r2, #64]	; 0x40
 8001e00:	4b64      	ldr	r3, [pc, #400]	; (8001f94 <HAL_UART_MspInit+0x39c>)
 8001e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e08:	61bb      	str	r3, [r7, #24]
 8001e0a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	617b      	str	r3, [r7, #20]
 8001e10:	4b60      	ldr	r3, [pc, #384]	; (8001f94 <HAL_UART_MspInit+0x39c>)
 8001e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e14:	4a5f      	ldr	r2, [pc, #380]	; (8001f94 <HAL_UART_MspInit+0x39c>)
 8001e16:	f043 0308 	orr.w	r3, r3, #8
 8001e1a:	6313      	str	r3, [r2, #48]	; 0x30
 8001e1c:	4b5d      	ldr	r3, [pc, #372]	; (8001f94 <HAL_UART_MspInit+0x39c>)
 8001e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e20:	f003 0308 	and.w	r3, r3, #8
 8001e24:	617b      	str	r3, [r7, #20]
 8001e26:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5;
 8001e28:	2360      	movs	r3, #96	; 0x60
 8001e2a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e30:	2300      	movs	r3, #0
 8001e32:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e34:	2303      	movs	r3, #3
 8001e36:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e38:	2307      	movs	r3, #7
 8001e3a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e3c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001e40:	4619      	mov	r1, r3
 8001e42:	4855      	ldr	r0, [pc, #340]	; (8001f98 <HAL_UART_MspInit+0x3a0>)
 8001e44:	f001 fb5e 	bl	8003504 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001e48:	4b54      	ldr	r3, [pc, #336]	; (8001f9c <HAL_UART_MspInit+0x3a4>)
 8001e4a:	4a55      	ldr	r2, [pc, #340]	; (8001fa0 <HAL_UART_MspInit+0x3a8>)
 8001e4c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001e4e:	4b53      	ldr	r3, [pc, #332]	; (8001f9c <HAL_UART_MspInit+0x3a4>)
 8001e50:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e54:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e56:	4b51      	ldr	r3, [pc, #324]	; (8001f9c <HAL_UART_MspInit+0x3a4>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e5c:	4b4f      	ldr	r3, [pc, #316]	; (8001f9c <HAL_UART_MspInit+0x3a4>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e62:	4b4e      	ldr	r3, [pc, #312]	; (8001f9c <HAL_UART_MspInit+0x3a4>)
 8001e64:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e68:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e6a:	4b4c      	ldr	r3, [pc, #304]	; (8001f9c <HAL_UART_MspInit+0x3a4>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e70:	4b4a      	ldr	r3, [pc, #296]	; (8001f9c <HAL_UART_MspInit+0x3a4>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001e76:	4b49      	ldr	r3, [pc, #292]	; (8001f9c <HAL_UART_MspInit+0x3a4>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e7c:	4b47      	ldr	r3, [pc, #284]	; (8001f9c <HAL_UART_MspInit+0x3a4>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e82:	4b46      	ldr	r3, [pc, #280]	; (8001f9c <HAL_UART_MspInit+0x3a4>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001e88:	4844      	ldr	r0, [pc, #272]	; (8001f9c <HAL_UART_MspInit+0x3a4>)
 8001e8a:	f000 ff55 	bl	8002d38 <HAL_DMA_Init>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <HAL_UART_MspInit+0x2a0>
      Error_Handler();
 8001e94:	f7ff f95c 	bl	8001150 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	4a40      	ldr	r2, [pc, #256]	; (8001f9c <HAL_UART_MspInit+0x3a4>)
 8001e9c:	639a      	str	r2, [r3, #56]	; 0x38
 8001e9e:	4a3f      	ldr	r2, [pc, #252]	; (8001f9c <HAL_UART_MspInit+0x3a4>)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001ea4:	4b3f      	ldr	r3, [pc, #252]	; (8001fa4 <HAL_UART_MspInit+0x3ac>)
 8001ea6:	4a40      	ldr	r2, [pc, #256]	; (8001fa8 <HAL_UART_MspInit+0x3b0>)
 8001ea8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001eaa:	4b3e      	ldr	r3, [pc, #248]	; (8001fa4 <HAL_UART_MspInit+0x3ac>)
 8001eac:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001eb0:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001eb2:	4b3c      	ldr	r3, [pc, #240]	; (8001fa4 <HAL_UART_MspInit+0x3ac>)
 8001eb4:	2240      	movs	r2, #64	; 0x40
 8001eb6:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001eb8:	4b3a      	ldr	r3, [pc, #232]	; (8001fa4 <HAL_UART_MspInit+0x3ac>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ebe:	4b39      	ldr	r3, [pc, #228]	; (8001fa4 <HAL_UART_MspInit+0x3ac>)
 8001ec0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ec4:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ec6:	4b37      	ldr	r3, [pc, #220]	; (8001fa4 <HAL_UART_MspInit+0x3ac>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ecc:	4b35      	ldr	r3, [pc, #212]	; (8001fa4 <HAL_UART_MspInit+0x3ac>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001ed2:	4b34      	ldr	r3, [pc, #208]	; (8001fa4 <HAL_UART_MspInit+0x3ac>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001ed8:	4b32      	ldr	r3, [pc, #200]	; (8001fa4 <HAL_UART_MspInit+0x3ac>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ede:	4b31      	ldr	r3, [pc, #196]	; (8001fa4 <HAL_UART_MspInit+0x3ac>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001ee4:	482f      	ldr	r0, [pc, #188]	; (8001fa4 <HAL_UART_MspInit+0x3ac>)
 8001ee6:	f000 ff27 	bl	8002d38 <HAL_DMA_Init>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d001      	beq.n	8001ef4 <HAL_UART_MspInit+0x2fc>
      Error_Handler();
 8001ef0:	f7ff f92e 	bl	8001150 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	4a2b      	ldr	r2, [pc, #172]	; (8001fa4 <HAL_UART_MspInit+0x3ac>)
 8001ef8:	635a      	str	r2, [r3, #52]	; 0x34
 8001efa:	4a2a      	ldr	r2, [pc, #168]	; (8001fa4 <HAL_UART_MspInit+0x3ac>)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001f00:	2200      	movs	r2, #0
 8001f02:	2100      	movs	r1, #0
 8001f04:	2026      	movs	r0, #38	; 0x26
 8001f06:	f000 fee0 	bl	8002cca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001f0a:	2026      	movs	r0, #38	; 0x26
 8001f0c:	f000 fef9 	bl	8002d02 <HAL_NVIC_EnableIRQ>
}
 8001f10:	e039      	b.n	8001f86 <HAL_UART_MspInit+0x38e>
  else if(huart->Instance==USART6)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a25      	ldr	r2, [pc, #148]	; (8001fac <HAL_UART_MspInit+0x3b4>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d134      	bne.n	8001f86 <HAL_UART_MspInit+0x38e>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	613b      	str	r3, [r7, #16]
 8001f20:	4b1c      	ldr	r3, [pc, #112]	; (8001f94 <HAL_UART_MspInit+0x39c>)
 8001f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f24:	4a1b      	ldr	r2, [pc, #108]	; (8001f94 <HAL_UART_MspInit+0x39c>)
 8001f26:	f043 0320 	orr.w	r3, r3, #32
 8001f2a:	6453      	str	r3, [r2, #68]	; 0x44
 8001f2c:	4b19      	ldr	r3, [pc, #100]	; (8001f94 <HAL_UART_MspInit+0x39c>)
 8001f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f30:	f003 0320 	and.w	r3, r3, #32
 8001f34:	613b      	str	r3, [r7, #16]
 8001f36:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f38:	2300      	movs	r3, #0
 8001f3a:	60fb      	str	r3, [r7, #12]
 8001f3c:	4b15      	ldr	r3, [pc, #84]	; (8001f94 <HAL_UART_MspInit+0x39c>)
 8001f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f40:	4a14      	ldr	r2, [pc, #80]	; (8001f94 <HAL_UART_MspInit+0x39c>)
 8001f42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f46:	6313      	str	r3, [r2, #48]	; 0x30
 8001f48:	4b12      	ldr	r3, [pc, #72]	; (8001f94 <HAL_UART_MspInit+0x39c>)
 8001f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f50:	60fb      	str	r3, [r7, #12]
 8001f52:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 8001f54:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8001f58:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f62:	2303      	movs	r3, #3
 8001f64:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001f66:	2308      	movs	r3, #8
 8001f68:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f6a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001f6e:	4619      	mov	r1, r3
 8001f70:	480f      	ldr	r0, [pc, #60]	; (8001fb0 <HAL_UART_MspInit+0x3b8>)
 8001f72:	f001 fac7 	bl	8003504 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001f76:	2200      	movs	r2, #0
 8001f78:	2100      	movs	r1, #0
 8001f7a:	2047      	movs	r0, #71	; 0x47
 8001f7c:	f000 fea5 	bl	8002cca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001f80:	2047      	movs	r0, #71	; 0x47
 8001f82:	f000 febe 	bl	8002d02 <HAL_NVIC_EnableIRQ>
}
 8001f86:	bf00      	nop
 8001f88:	3748      	adds	r7, #72	; 0x48
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	40004400 	.word	0x40004400
 8001f94:	40023800 	.word	0x40023800
 8001f98:	40020c00 	.word	0x40020c00
 8001f9c:	20000030 	.word	0x20000030
 8001fa0:	40026088 	.word	0x40026088
 8001fa4:	200002e8 	.word	0x200002e8
 8001fa8:	400260a0 	.word	0x400260a0
 8001fac:	40011400 	.word	0x40011400
 8001fb0:	40021800 	.word	0x40021800

08001fb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001fb8:	bf00      	nop
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr

08001fc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fc6:	e7fe      	b.n	8001fc6 <HardFault_Handler+0x4>

08001fc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fcc:	e7fe      	b.n	8001fcc <MemManage_Handler+0x4>

08001fce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fce:	b480      	push	{r7}
 8001fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fd2:	e7fe      	b.n	8001fd2 <BusFault_Handler+0x4>

08001fd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fd8:	e7fe      	b.n	8001fd8 <UsageFault_Handler+0x4>

08001fda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fda:	b480      	push	{r7}
 8001fdc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fde:	bf00      	nop
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fec:	bf00      	nop
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr

08001ff6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ff6:	b480      	push	{r7}
 8001ff8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ffa:	bf00      	nop
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002008:	f000 f904 	bl	8002214 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800200c:	bf00      	nop
 800200e:	bd80      	pop	{r7, pc}

08002010 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002014:	4802      	ldr	r0, [pc, #8]	; (8002020 <DMA1_Stream5_IRQHandler+0x10>)
 8002016:	f001 f80b 	bl	8003030 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800201a:	bf00      	nop
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	20000030 	.word	0x20000030

08002024 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002028:	4802      	ldr	r0, [pc, #8]	; (8002034 <DMA1_Stream6_IRQHandler+0x10>)
 800202a:	f001 f801 	bl	8003030 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800202e:	bf00      	nop
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	200002e8 	.word	0x200002e8

08002038 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800203c:	4802      	ldr	r0, [pc, #8]	; (8002048 <CAN1_TX_IRQHandler+0x10>)
 800203e:	f000 fb3a 	bl	80026b6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8002042:	bf00      	nop
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	20000570 	.word	0x20000570

0800204c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002050:	4802      	ldr	r0, [pc, #8]	; (800205c <CAN1_RX0_IRQHandler+0x10>)
 8002052:	f000 fb30 	bl	80026b6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002056:	bf00      	nop
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	20000570 	.word	0x20000570

08002060 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  uart_receive_handler(&huart1);
 8002064:	4803      	ldr	r0, [pc, #12]	; (8002074 <USART1_IRQHandler+0x14>)
 8002066:	f7ff fa9f 	bl	80015a8 <uart_receive_handler>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800206a:	4802      	ldr	r0, [pc, #8]	; (8002074 <USART1_IRQHandler+0x14>)
 800206c:	f002 ff78 	bl	8004f60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002070:	bf00      	nop
 8002072:	bd80      	pop	{r7, pc}
 8002074:	20000348 	.word	0x20000348

08002078 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800207c:	4802      	ldr	r0, [pc, #8]	; (8002088 <USART2_IRQHandler+0x10>)
 800207e:	f002 ff6f 	bl	8004f60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002082:	bf00      	nop
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	2000052c 	.word	0x2000052c

0800208c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002090:	4802      	ldr	r0, [pc, #8]	; (800209c <UART4_IRQHandler+0x10>)
 8002092:	f002 ff65 	bl	8004f60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002096:	bf00      	nop
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	200004a0 	.word	0x200004a0

080020a0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80020a4:	4802      	ldr	r0, [pc, #8]	; (80020b0 <DMA2_Stream2_IRQHandler+0x10>)
 80020a6:	f000 ffc3 	bl	8003030 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80020aa:	bf00      	nop
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	20000288 	.word	0x20000288

080020b4 <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupts.
  */
void CAN2_TX_IRQHandler(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80020b8:	4802      	ldr	r0, [pc, #8]	; (80020c4 <CAN2_TX_IRQHandler+0x10>)
 80020ba:	f000 fafc 	bl	80026b6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 80020be:	bf00      	nop
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	20000260 	.word	0x20000260

080020c8 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80020cc:	4802      	ldr	r0, [pc, #8]	; (80020d8 <CAN2_RX0_IRQHandler+0x10>)
 80020ce:	f000 faf2 	bl	80026b6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 80020d2:	bf00      	nop
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	20000260 	.word	0x20000260

080020dc <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80020e0:	4802      	ldr	r0, [pc, #8]	; (80020ec <USART6_IRQHandler+0x10>)
 80020e2:	f002 ff3d 	bl	8004f60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80020e6:	bf00      	nop
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	20000394 	.word	0x20000394

080020f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020f4:	4b08      	ldr	r3, [pc, #32]	; (8002118 <SystemInit+0x28>)
 80020f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020fa:	4a07      	ldr	r2, [pc, #28]	; (8002118 <SystemInit+0x28>)
 80020fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002100:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002104:	4b04      	ldr	r3, [pc, #16]	; (8002118 <SystemInit+0x28>)
 8002106:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800210a:	609a      	str	r2, [r3, #8]
#endif
}
 800210c:	bf00      	nop
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	e000ed00 	.word	0xe000ed00

0800211c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800211c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002154 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002120:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002122:	e003      	b.n	800212c <LoopCopyDataInit>

08002124 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002124:	4b0c      	ldr	r3, [pc, #48]	; (8002158 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002126:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002128:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800212a:	3104      	adds	r1, #4

0800212c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800212c:	480b      	ldr	r0, [pc, #44]	; (800215c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800212e:	4b0c      	ldr	r3, [pc, #48]	; (8002160 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002130:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002132:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002134:	d3f6      	bcc.n	8002124 <CopyDataInit>
  ldr  r2, =_sbss
 8002136:	4a0b      	ldr	r2, [pc, #44]	; (8002164 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002138:	e002      	b.n	8002140 <LoopFillZerobss>

0800213a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800213a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800213c:	f842 3b04 	str.w	r3, [r2], #4

08002140 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002140:	4b09      	ldr	r3, [pc, #36]	; (8002168 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002142:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002144:	d3f9      	bcc.n	800213a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002146:	f7ff ffd3 	bl	80020f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800214a:	f003 fd91 	bl	8005c70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800214e:	f7fe fa2d 	bl	80005ac <main>
  bx  lr    
 8002152:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002154:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002158:	08005d1c 	.word	0x08005d1c
  ldr  r0, =_sdata
 800215c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002160:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8002164:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8002168:	20000678 	.word	0x20000678

0800216c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800216c:	e7fe      	b.n	800216c <ADC_IRQHandler>
	...

08002170 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002174:	4b0e      	ldr	r3, [pc, #56]	; (80021b0 <HAL_Init+0x40>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a0d      	ldr	r2, [pc, #52]	; (80021b0 <HAL_Init+0x40>)
 800217a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800217e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002180:	4b0b      	ldr	r3, [pc, #44]	; (80021b0 <HAL_Init+0x40>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a0a      	ldr	r2, [pc, #40]	; (80021b0 <HAL_Init+0x40>)
 8002186:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800218a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800218c:	4b08      	ldr	r3, [pc, #32]	; (80021b0 <HAL_Init+0x40>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a07      	ldr	r2, [pc, #28]	; (80021b0 <HAL_Init+0x40>)
 8002192:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002196:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002198:	2003      	movs	r0, #3
 800219a:	f000 fd8b 	bl	8002cb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800219e:	2000      	movs	r0, #0
 80021a0:	f000 f808 	bl	80021b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021a4:	f7ff fa3e 	bl	8001624 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	40023c00 	.word	0x40023c00

080021b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021bc:	4b12      	ldr	r3, [pc, #72]	; (8002208 <HAL_InitTick+0x54>)
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	4b12      	ldr	r3, [pc, #72]	; (800220c <HAL_InitTick+0x58>)
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	4619      	mov	r1, r3
 80021c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80021ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80021d2:	4618      	mov	r0, r3
 80021d4:	f000 fda3 	bl	8002d1e <HAL_SYSTICK_Config>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e00e      	b.n	8002200 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2b0f      	cmp	r3, #15
 80021e6:	d80a      	bhi.n	80021fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021e8:	2200      	movs	r2, #0
 80021ea:	6879      	ldr	r1, [r7, #4]
 80021ec:	f04f 30ff 	mov.w	r0, #4294967295
 80021f0:	f000 fd6b 	bl	8002cca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021f4:	4a06      	ldr	r2, [pc, #24]	; (8002210 <HAL_InitTick+0x5c>)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021fa:	2300      	movs	r3, #0
 80021fc:	e000      	b.n	8002200 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
}
 8002200:	4618      	mov	r0, r3
 8002202:	3708      	adds	r7, #8
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	20000000 	.word	0x20000000
 800220c:	20000008 	.word	0x20000008
 8002210:	20000004 	.word	0x20000004

08002214 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002218:	4b06      	ldr	r3, [pc, #24]	; (8002234 <HAL_IncTick+0x20>)
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	461a      	mov	r2, r3
 800221e:	4b06      	ldr	r3, [pc, #24]	; (8002238 <HAL_IncTick+0x24>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4413      	add	r3, r2
 8002224:	4a04      	ldr	r2, [pc, #16]	; (8002238 <HAL_IncTick+0x24>)
 8002226:	6013      	str	r3, [r2, #0]
}
 8002228:	bf00      	nop
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	20000008 	.word	0x20000008
 8002238:	20000674 	.word	0x20000674

0800223c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  return uwTick;
 8002240:	4b03      	ldr	r3, [pc, #12]	; (8002250 <HAL_GetTick+0x14>)
 8002242:	681b      	ldr	r3, [r3, #0]
}
 8002244:	4618      	mov	r0, r3
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	20000674 	.word	0x20000674

08002254 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800225c:	f7ff ffee 	bl	800223c <HAL_GetTick>
 8002260:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800226c:	d005      	beq.n	800227a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800226e:	4b0a      	ldr	r3, [pc, #40]	; (8002298 <HAL_Delay+0x44>)
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	461a      	mov	r2, r3
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	4413      	add	r3, r2
 8002278:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800227a:	bf00      	nop
 800227c:	f7ff ffde 	bl	800223c <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	68fa      	ldr	r2, [r7, #12]
 8002288:	429a      	cmp	r2, r3
 800228a:	d8f7      	bhi.n	800227c <HAL_Delay+0x28>
  {
  }
}
 800228c:	bf00      	nop
 800228e:	bf00      	nop
 8002290:	3710      	adds	r7, #16
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	20000008 	.word	0x20000008

0800229c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d101      	bne.n	80022ae <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e0ed      	b.n	800248a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d102      	bne.n	80022c0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f7ff f9da 	bl	8001674 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f042 0201 	orr.w	r2, r2, #1
 80022ce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80022d0:	f7ff ffb4 	bl	800223c <HAL_GetTick>
 80022d4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80022d6:	e012      	b.n	80022fe <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80022d8:	f7ff ffb0 	bl	800223c <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	2b0a      	cmp	r3, #10
 80022e4:	d90b      	bls.n	80022fe <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ea:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2205      	movs	r2, #5
 80022f6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e0c5      	b.n	800248a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f003 0301 	and.w	r3, r3, #1
 8002308:	2b00      	cmp	r3, #0
 800230a:	d0e5      	beq.n	80022d8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f022 0202 	bic.w	r2, r2, #2
 800231a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800231c:	f7ff ff8e 	bl	800223c <HAL_GetTick>
 8002320:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002322:	e012      	b.n	800234a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002324:	f7ff ff8a 	bl	800223c <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	2b0a      	cmp	r3, #10
 8002330:	d90b      	bls.n	800234a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002336:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2205      	movs	r2, #5
 8002342:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e09f      	b.n	800248a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f003 0302 	and.w	r3, r3, #2
 8002354:	2b00      	cmp	r3, #0
 8002356:	d1e5      	bne.n	8002324 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	7e1b      	ldrb	r3, [r3, #24]
 800235c:	2b01      	cmp	r3, #1
 800235e:	d108      	bne.n	8002372 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800236e:	601a      	str	r2, [r3, #0]
 8002370:	e007      	b.n	8002382 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002380:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	7e5b      	ldrb	r3, [r3, #25]
 8002386:	2b01      	cmp	r3, #1
 8002388:	d108      	bne.n	800239c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002398:	601a      	str	r2, [r3, #0]
 800239a:	e007      	b.n	80023ac <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023aa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	7e9b      	ldrb	r3, [r3, #26]
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d108      	bne.n	80023c6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f042 0220 	orr.w	r2, r2, #32
 80023c2:	601a      	str	r2, [r3, #0]
 80023c4:	e007      	b.n	80023d6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f022 0220 	bic.w	r2, r2, #32
 80023d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	7edb      	ldrb	r3, [r3, #27]
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d108      	bne.n	80023f0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f022 0210 	bic.w	r2, r2, #16
 80023ec:	601a      	str	r2, [r3, #0]
 80023ee:	e007      	b.n	8002400 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f042 0210 	orr.w	r2, r2, #16
 80023fe:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	7f1b      	ldrb	r3, [r3, #28]
 8002404:	2b01      	cmp	r3, #1
 8002406:	d108      	bne.n	800241a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f042 0208 	orr.w	r2, r2, #8
 8002416:	601a      	str	r2, [r3, #0]
 8002418:	e007      	b.n	800242a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f022 0208 	bic.w	r2, r2, #8
 8002428:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	7f5b      	ldrb	r3, [r3, #29]
 800242e:	2b01      	cmp	r3, #1
 8002430:	d108      	bne.n	8002444 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f042 0204 	orr.w	r2, r2, #4
 8002440:	601a      	str	r2, [r3, #0]
 8002442:	e007      	b.n	8002454 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f022 0204 	bic.w	r2, r2, #4
 8002452:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	689a      	ldr	r2, [r3, #8]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	431a      	orrs	r2, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	431a      	orrs	r2, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	695b      	ldr	r3, [r3, #20]
 8002468:	ea42 0103 	orr.w	r1, r2, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	1e5a      	subs	r2, r3, #1
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	430a      	orrs	r2, r1
 8002478:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2201      	movs	r2, #1
 8002484:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002488:	2300      	movs	r3, #0
}
 800248a:	4618      	mov	r0, r3
 800248c:	3710      	adds	r7, #16
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}

08002492 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002492:	b480      	push	{r7}
 8002494:	b087      	sub	sp, #28
 8002496:	af00      	add	r7, sp, #0
 8002498:	60f8      	str	r0, [r7, #12]
 800249a:	60b9      	str	r1, [r7, #8]
 800249c:	607a      	str	r2, [r7, #4]
 800249e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024a6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80024a8:	7dfb      	ldrb	r3, [r7, #23]
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d003      	beq.n	80024b6 <HAL_CAN_GetRxMessage+0x24>
 80024ae:	7dfb      	ldrb	r3, [r7, #23]
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	f040 80f3 	bne.w	800269c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d10e      	bne.n	80024da <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	f003 0303 	and.w	r3, r3, #3
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d116      	bne.n	80024f8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ce:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e0e7      	b.n	80026aa <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	691b      	ldr	r3, [r3, #16]
 80024e0:	f003 0303 	and.w	r3, r3, #3
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d107      	bne.n	80024f8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ec:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e0d8      	b.n	80026aa <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	331b      	adds	r3, #27
 8002500:	011b      	lsls	r3, r3, #4
 8002502:	4413      	add	r3, r2
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0204 	and.w	r2, r3, #4
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d10c      	bne.n	8002530 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	331b      	adds	r3, #27
 800251e:	011b      	lsls	r3, r3, #4
 8002520:	4413      	add	r3, r2
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	0d5b      	lsrs	r3, r3, #21
 8002526:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	601a      	str	r2, [r3, #0]
 800252e:	e00b      	b.n	8002548 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	331b      	adds	r3, #27
 8002538:	011b      	lsls	r3, r3, #4
 800253a:	4413      	add	r3, r2
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	08db      	lsrs	r3, r3, #3
 8002540:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	331b      	adds	r3, #27
 8002550:	011b      	lsls	r3, r3, #4
 8002552:	4413      	add	r3, r2
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0202 	and.w	r2, r3, #2
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	331b      	adds	r3, #27
 8002566:	011b      	lsls	r3, r3, #4
 8002568:	4413      	add	r3, r2
 800256a:	3304      	adds	r3, #4
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 020f 	and.w	r2, r3, #15
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	331b      	adds	r3, #27
 800257e:	011b      	lsls	r3, r3, #4
 8002580:	4413      	add	r3, r2
 8002582:	3304      	adds	r3, #4
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	0a1b      	lsrs	r3, r3, #8
 8002588:	b2da      	uxtb	r2, r3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	331b      	adds	r3, #27
 8002596:	011b      	lsls	r3, r3, #4
 8002598:	4413      	add	r3, r2
 800259a:	3304      	adds	r3, #4
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	0c1b      	lsrs	r3, r3, #16
 80025a0:	b29a      	uxth	r2, r3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	011b      	lsls	r3, r3, #4
 80025ae:	4413      	add	r3, r2
 80025b0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	b2da      	uxtb	r2, r3
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	011b      	lsls	r3, r3, #4
 80025c4:	4413      	add	r3, r2
 80025c6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	0a1a      	lsrs	r2, r3, #8
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	3301      	adds	r3, #1
 80025d2:	b2d2      	uxtb	r2, r2
 80025d4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	011b      	lsls	r3, r3, #4
 80025de:	4413      	add	r3, r2
 80025e0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	0c1a      	lsrs	r2, r3, #16
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	3302      	adds	r3, #2
 80025ec:	b2d2      	uxtb	r2, r2
 80025ee:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	011b      	lsls	r3, r3, #4
 80025f8:	4413      	add	r3, r2
 80025fa:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	0e1a      	lsrs	r2, r3, #24
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	3303      	adds	r3, #3
 8002606:	b2d2      	uxtb	r2, r2
 8002608:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	011b      	lsls	r3, r3, #4
 8002612:	4413      	add	r3, r2
 8002614:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	3304      	adds	r3, #4
 800261e:	b2d2      	uxtb	r2, r2
 8002620:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	011b      	lsls	r3, r3, #4
 800262a:	4413      	add	r3, r2
 800262c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	0a1a      	lsrs	r2, r3, #8
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	3305      	adds	r3, #5
 8002638:	b2d2      	uxtb	r2, r2
 800263a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	011b      	lsls	r3, r3, #4
 8002644:	4413      	add	r3, r2
 8002646:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	0c1a      	lsrs	r2, r3, #16
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	3306      	adds	r3, #6
 8002652:	b2d2      	uxtb	r2, r2
 8002654:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	011b      	lsls	r3, r3, #4
 800265e:	4413      	add	r3, r2
 8002660:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	0e1a      	lsrs	r2, r3, #24
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	3307      	adds	r3, #7
 800266c:	b2d2      	uxtb	r2, r2
 800266e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d108      	bne.n	8002688 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	68da      	ldr	r2, [r3, #12]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f042 0220 	orr.w	r2, r2, #32
 8002684:	60da      	str	r2, [r3, #12]
 8002686:	e007      	b.n	8002698 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	691a      	ldr	r2, [r3, #16]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f042 0220 	orr.w	r2, r2, #32
 8002696:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002698:	2300      	movs	r3, #0
 800269a:	e006      	b.n	80026aa <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
  }
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	371c      	adds	r7, #28
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr

080026b6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80026b6:	b580      	push	{r7, lr}
 80026b8:	b08a      	sub	sp, #40	; 0x28
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80026be:	2300      	movs	r3, #0
 80026c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	695b      	ldr	r3, [r3, #20]
 80026c8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	691b      	ldr	r3, [r3, #16]
 80026e8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	699b      	ldr	r3, [r3, #24]
 80026f0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80026f2:	6a3b      	ldr	r3, [r7, #32]
 80026f4:	f003 0301 	and.w	r3, r3, #1
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d07c      	beq.n	80027f6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	2b00      	cmp	r3, #0
 8002704:	d023      	beq.n	800274e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	2201      	movs	r2, #1
 800270c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	f003 0302 	and.w	r3, r3, #2
 8002714:	2b00      	cmp	r3, #0
 8002716:	d003      	beq.n	8002720 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f000 f983 	bl	8002a24 <HAL_CAN_TxMailbox0CompleteCallback>
 800271e:	e016      	b.n	800274e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	f003 0304 	and.w	r3, r3, #4
 8002726:	2b00      	cmp	r3, #0
 8002728:	d004      	beq.n	8002734 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800272a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002730:	627b      	str	r3, [r7, #36]	; 0x24
 8002732:	e00c      	b.n	800274e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	f003 0308 	and.w	r3, r3, #8
 800273a:	2b00      	cmp	r3, #0
 800273c:	d004      	beq.n	8002748 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800273e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002740:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002744:	627b      	str	r3, [r7, #36]	; 0x24
 8002746:	e002      	b.n	800274e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	f000 f989 	bl	8002a60 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002754:	2b00      	cmp	r3, #0
 8002756:	d024      	beq.n	80027a2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002760:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002768:	2b00      	cmp	r3, #0
 800276a:	d003      	beq.n	8002774 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f000 f963 	bl	8002a38 <HAL_CAN_TxMailbox1CompleteCallback>
 8002772:	e016      	b.n	80027a2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800277a:	2b00      	cmp	r3, #0
 800277c:	d004      	beq.n	8002788 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800277e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002780:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002784:	627b      	str	r3, [r7, #36]	; 0x24
 8002786:	e00c      	b.n	80027a2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800278e:	2b00      	cmp	r3, #0
 8002790:	d004      	beq.n	800279c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002794:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002798:	627b      	str	r3, [r7, #36]	; 0x24
 800279a:	e002      	b.n	80027a2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f000 f969 	bl	8002a74 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80027a2:	69bb      	ldr	r3, [r7, #24]
 80027a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d024      	beq.n	80027f6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80027b4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d003      	beq.n	80027c8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f000 f943 	bl	8002a4c <HAL_CAN_TxMailbox2CompleteCallback>
 80027c6:	e016      	b.n	80027f6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d004      	beq.n	80027dc <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80027d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027d8:	627b      	str	r3, [r7, #36]	; 0x24
 80027da:	e00c      	b.n	80027f6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d004      	beq.n	80027f0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80027e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027ec:	627b      	str	r3, [r7, #36]	; 0x24
 80027ee:	e002      	b.n	80027f6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f000 f949 	bl	8002a88 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80027f6:	6a3b      	ldr	r3, [r7, #32]
 80027f8:	f003 0308 	and.w	r3, r3, #8
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d00c      	beq.n	800281a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	f003 0310 	and.w	r3, r3, #16
 8002806:	2b00      	cmp	r3, #0
 8002808:	d007      	beq.n	800281a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800280a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002810:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	2210      	movs	r2, #16
 8002818:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800281a:	6a3b      	ldr	r3, [r7, #32]
 800281c:	f003 0304 	and.w	r3, r3, #4
 8002820:	2b00      	cmp	r3, #0
 8002822:	d00b      	beq.n	800283c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	f003 0308 	and.w	r3, r3, #8
 800282a:	2b00      	cmp	r3, #0
 800282c:	d006      	beq.n	800283c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2208      	movs	r2, #8
 8002834:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f000 f930 	bl	8002a9c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800283c:	6a3b      	ldr	r3, [r7, #32]
 800283e:	f003 0302 	and.w	r3, r3, #2
 8002842:	2b00      	cmp	r3, #0
 8002844:	d009      	beq.n	800285a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	f003 0303 	and.w	r3, r3, #3
 8002850:	2b00      	cmp	r3, #0
 8002852:	d002      	beq.n	800285a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f7fe fc83 	bl	8001160 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800285a:	6a3b      	ldr	r3, [r7, #32]
 800285c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002860:	2b00      	cmp	r3, #0
 8002862:	d00c      	beq.n	800287e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	f003 0310 	and.w	r3, r3, #16
 800286a:	2b00      	cmp	r3, #0
 800286c:	d007      	beq.n	800287e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800286e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002870:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002874:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2210      	movs	r2, #16
 800287c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800287e:	6a3b      	ldr	r3, [r7, #32]
 8002880:	f003 0320 	and.w	r3, r3, #32
 8002884:	2b00      	cmp	r3, #0
 8002886:	d00b      	beq.n	80028a0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	f003 0308 	and.w	r3, r3, #8
 800288e:	2b00      	cmp	r3, #0
 8002890:	d006      	beq.n	80028a0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	2208      	movs	r2, #8
 8002898:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f000 f912 	bl	8002ac4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80028a0:	6a3b      	ldr	r3, [r7, #32]
 80028a2:	f003 0310 	and.w	r3, r3, #16
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d009      	beq.n	80028be <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	691b      	ldr	r3, [r3, #16]
 80028b0:	f003 0303 	and.w	r3, r3, #3
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d002      	beq.n	80028be <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f000 f8f9 	bl	8002ab0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80028be:	6a3b      	ldr	r3, [r7, #32]
 80028c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d00b      	beq.n	80028e0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	f003 0310 	and.w	r3, r3, #16
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d006      	beq.n	80028e0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2210      	movs	r2, #16
 80028d8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f000 f8fc 	bl	8002ad8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80028e0:	6a3b      	ldr	r3, [r7, #32]
 80028e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d00b      	beq.n	8002902 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	f003 0308 	and.w	r3, r3, #8
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d006      	beq.n	8002902 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2208      	movs	r2, #8
 80028fa:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f000 f8f5 	bl	8002aec <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002902:	6a3b      	ldr	r3, [r7, #32]
 8002904:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d07b      	beq.n	8002a04 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	f003 0304 	and.w	r3, r3, #4
 8002912:	2b00      	cmp	r3, #0
 8002914:	d072      	beq.n	80029fc <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002916:	6a3b      	ldr	r3, [r7, #32]
 8002918:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800291c:	2b00      	cmp	r3, #0
 800291e:	d008      	beq.n	8002932 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002926:	2b00      	cmp	r3, #0
 8002928:	d003      	beq.n	8002932 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800292a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292c:	f043 0301 	orr.w	r3, r3, #1
 8002930:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002932:	6a3b      	ldr	r3, [r7, #32]
 8002934:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002938:	2b00      	cmp	r3, #0
 800293a:	d008      	beq.n	800294e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002942:	2b00      	cmp	r3, #0
 8002944:	d003      	beq.n	800294e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002948:	f043 0302 	orr.w	r3, r3, #2
 800294c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800294e:	6a3b      	ldr	r3, [r7, #32]
 8002950:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002954:	2b00      	cmp	r3, #0
 8002956:	d008      	beq.n	800296a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800295e:	2b00      	cmp	r3, #0
 8002960:	d003      	beq.n	800296a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002964:	f043 0304 	orr.w	r3, r3, #4
 8002968:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800296a:	6a3b      	ldr	r3, [r7, #32]
 800296c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002970:	2b00      	cmp	r3, #0
 8002972:	d043      	beq.n	80029fc <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800297a:	2b00      	cmp	r3, #0
 800297c:	d03e      	beq.n	80029fc <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002984:	2b60      	cmp	r3, #96	; 0x60
 8002986:	d02b      	beq.n	80029e0 <HAL_CAN_IRQHandler+0x32a>
 8002988:	2b60      	cmp	r3, #96	; 0x60
 800298a:	d82e      	bhi.n	80029ea <HAL_CAN_IRQHandler+0x334>
 800298c:	2b50      	cmp	r3, #80	; 0x50
 800298e:	d022      	beq.n	80029d6 <HAL_CAN_IRQHandler+0x320>
 8002990:	2b50      	cmp	r3, #80	; 0x50
 8002992:	d82a      	bhi.n	80029ea <HAL_CAN_IRQHandler+0x334>
 8002994:	2b40      	cmp	r3, #64	; 0x40
 8002996:	d019      	beq.n	80029cc <HAL_CAN_IRQHandler+0x316>
 8002998:	2b40      	cmp	r3, #64	; 0x40
 800299a:	d826      	bhi.n	80029ea <HAL_CAN_IRQHandler+0x334>
 800299c:	2b30      	cmp	r3, #48	; 0x30
 800299e:	d010      	beq.n	80029c2 <HAL_CAN_IRQHandler+0x30c>
 80029a0:	2b30      	cmp	r3, #48	; 0x30
 80029a2:	d822      	bhi.n	80029ea <HAL_CAN_IRQHandler+0x334>
 80029a4:	2b10      	cmp	r3, #16
 80029a6:	d002      	beq.n	80029ae <HAL_CAN_IRQHandler+0x2f8>
 80029a8:	2b20      	cmp	r3, #32
 80029aa:	d005      	beq.n	80029b8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80029ac:	e01d      	b.n	80029ea <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80029ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b0:	f043 0308 	orr.w	r3, r3, #8
 80029b4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80029b6:	e019      	b.n	80029ec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80029b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ba:	f043 0310 	orr.w	r3, r3, #16
 80029be:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80029c0:	e014      	b.n	80029ec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80029c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c4:	f043 0320 	orr.w	r3, r3, #32
 80029c8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80029ca:	e00f      	b.n	80029ec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80029cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029d2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80029d4:	e00a      	b.n	80029ec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80029d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029dc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80029de:	e005      	b.n	80029ec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80029e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029e6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80029e8:	e000      	b.n	80029ec <HAL_CAN_IRQHandler+0x336>
            break;
 80029ea:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	699a      	ldr	r2, [r3, #24]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80029fa:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2204      	movs	r2, #4
 8002a02:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d008      	beq.n	8002a1c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a10:	431a      	orrs	r2, r3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f000 f872 	bl	8002b00 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002a1c:	bf00      	nop
 8002a1e:	3728      	adds	r7, #40	; 0x28
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002a2c:	bf00      	nop
 8002a2e:	370c      	adds	r7, #12
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr

08002a38 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002a40:	bf00      	nop
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002a54:	bf00      	nop
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002a68:	bf00      	nop
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002a7c:	bf00      	nop
 8002a7e:	370c      	adds	r7, #12
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr

08002a88 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002a90:	bf00      	nop
 8002a92:	370c      	adds	r7, #12
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr

08002a9c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002aa4:	bf00      	nop
 8002aa6:	370c      	adds	r7, #12
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr

08002ab0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002ab8:	bf00      	nop
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr

08002ac4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002acc:	bf00      	nop
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002ae0:	bf00      	nop
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002af4:	bf00      	nop
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr

08002b00 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002b08:	bf00      	nop
 8002b0a:	370c      	adds	r7, #12
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr

08002b14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b085      	sub	sp, #20
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f003 0307 	and.w	r3, r3, #7
 8002b22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b24:	4b0c      	ldr	r3, [pc, #48]	; (8002b58 <__NVIC_SetPriorityGrouping+0x44>)
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b2a:	68ba      	ldr	r2, [r7, #8]
 8002b2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b30:	4013      	ands	r3, r2
 8002b32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b46:	4a04      	ldr	r2, [pc, #16]	; (8002b58 <__NVIC_SetPriorityGrouping+0x44>)
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	60d3      	str	r3, [r2, #12]
}
 8002b4c:	bf00      	nop
 8002b4e:	3714      	adds	r7, #20
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr
 8002b58:	e000ed00 	.word	0xe000ed00

08002b5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b60:	4b04      	ldr	r3, [pc, #16]	; (8002b74 <__NVIC_GetPriorityGrouping+0x18>)
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	0a1b      	lsrs	r3, r3, #8
 8002b66:	f003 0307 	and.w	r3, r3, #7
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr
 8002b74:	e000ed00 	.word	0xe000ed00

08002b78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	4603      	mov	r3, r0
 8002b80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	db0b      	blt.n	8002ba2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b8a:	79fb      	ldrb	r3, [r7, #7]
 8002b8c:	f003 021f 	and.w	r2, r3, #31
 8002b90:	4907      	ldr	r1, [pc, #28]	; (8002bb0 <__NVIC_EnableIRQ+0x38>)
 8002b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b96:	095b      	lsrs	r3, r3, #5
 8002b98:	2001      	movs	r0, #1
 8002b9a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ba2:	bf00      	nop
 8002ba4:	370c      	adds	r7, #12
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	e000e100 	.word	0xe000e100

08002bb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	4603      	mov	r3, r0
 8002bbc:	6039      	str	r1, [r7, #0]
 8002bbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	db0a      	blt.n	8002bde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	b2da      	uxtb	r2, r3
 8002bcc:	490c      	ldr	r1, [pc, #48]	; (8002c00 <__NVIC_SetPriority+0x4c>)
 8002bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bd2:	0112      	lsls	r2, r2, #4
 8002bd4:	b2d2      	uxtb	r2, r2
 8002bd6:	440b      	add	r3, r1
 8002bd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bdc:	e00a      	b.n	8002bf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	b2da      	uxtb	r2, r3
 8002be2:	4908      	ldr	r1, [pc, #32]	; (8002c04 <__NVIC_SetPriority+0x50>)
 8002be4:	79fb      	ldrb	r3, [r7, #7]
 8002be6:	f003 030f 	and.w	r3, r3, #15
 8002bea:	3b04      	subs	r3, #4
 8002bec:	0112      	lsls	r2, r2, #4
 8002bee:	b2d2      	uxtb	r2, r2
 8002bf0:	440b      	add	r3, r1
 8002bf2:	761a      	strb	r2, [r3, #24]
}
 8002bf4:	bf00      	nop
 8002bf6:	370c      	adds	r7, #12
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr
 8002c00:	e000e100 	.word	0xe000e100
 8002c04:	e000ed00 	.word	0xe000ed00

08002c08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b089      	sub	sp, #36	; 0x24
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f003 0307 	and.w	r3, r3, #7
 8002c1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	f1c3 0307 	rsb	r3, r3, #7
 8002c22:	2b04      	cmp	r3, #4
 8002c24:	bf28      	it	cs
 8002c26:	2304      	movcs	r3, #4
 8002c28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	3304      	adds	r3, #4
 8002c2e:	2b06      	cmp	r3, #6
 8002c30:	d902      	bls.n	8002c38 <NVIC_EncodePriority+0x30>
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	3b03      	subs	r3, #3
 8002c36:	e000      	b.n	8002c3a <NVIC_EncodePriority+0x32>
 8002c38:	2300      	movs	r3, #0
 8002c3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c3c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c40:	69bb      	ldr	r3, [r7, #24]
 8002c42:	fa02 f303 	lsl.w	r3, r2, r3
 8002c46:	43da      	mvns	r2, r3
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	401a      	ands	r2, r3
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c50:	f04f 31ff 	mov.w	r1, #4294967295
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	fa01 f303 	lsl.w	r3, r1, r3
 8002c5a:	43d9      	mvns	r1, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c60:	4313      	orrs	r3, r2
         );
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3724      	adds	r7, #36	; 0x24
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
	...

08002c70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	3b01      	subs	r3, #1
 8002c7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c80:	d301      	bcc.n	8002c86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c82:	2301      	movs	r3, #1
 8002c84:	e00f      	b.n	8002ca6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c86:	4a0a      	ldr	r2, [pc, #40]	; (8002cb0 <SysTick_Config+0x40>)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	3b01      	subs	r3, #1
 8002c8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c8e:	210f      	movs	r1, #15
 8002c90:	f04f 30ff 	mov.w	r0, #4294967295
 8002c94:	f7ff ff8e 	bl	8002bb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c98:	4b05      	ldr	r3, [pc, #20]	; (8002cb0 <SysTick_Config+0x40>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c9e:	4b04      	ldr	r3, [pc, #16]	; (8002cb0 <SysTick_Config+0x40>)
 8002ca0:	2207      	movs	r2, #7
 8002ca2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3708      	adds	r7, #8
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	e000e010 	.word	0xe000e010

08002cb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b082      	sub	sp, #8
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	f7ff ff29 	bl	8002b14 <__NVIC_SetPriorityGrouping>
}
 8002cc2:	bf00      	nop
 8002cc4:	3708      	adds	r7, #8
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}

08002cca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	b086      	sub	sp, #24
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	60b9      	str	r1, [r7, #8]
 8002cd4:	607a      	str	r2, [r7, #4]
 8002cd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cdc:	f7ff ff3e 	bl	8002b5c <__NVIC_GetPriorityGrouping>
 8002ce0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	68b9      	ldr	r1, [r7, #8]
 8002ce6:	6978      	ldr	r0, [r7, #20]
 8002ce8:	f7ff ff8e 	bl	8002c08 <NVIC_EncodePriority>
 8002cec:	4602      	mov	r2, r0
 8002cee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cf2:	4611      	mov	r1, r2
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f7ff ff5d 	bl	8002bb4 <__NVIC_SetPriority>
}
 8002cfa:	bf00      	nop
 8002cfc:	3718      	adds	r7, #24
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}

08002d02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d02:	b580      	push	{r7, lr}
 8002d04:	b082      	sub	sp, #8
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	4603      	mov	r3, r0
 8002d0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d10:	4618      	mov	r0, r3
 8002d12:	f7ff ff31 	bl	8002b78 <__NVIC_EnableIRQ>
}
 8002d16:	bf00      	nop
 8002d18:	3708      	adds	r7, #8
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}

08002d1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d1e:	b580      	push	{r7, lr}
 8002d20:	b082      	sub	sp, #8
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f7ff ffa2 	bl	8002c70 <SysTick_Config>
 8002d2c:	4603      	mov	r3, r0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3708      	adds	r7, #8
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
	...

08002d38 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b086      	sub	sp, #24
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002d40:	2300      	movs	r3, #0
 8002d42:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002d44:	f7ff fa7a 	bl	800223c <HAL_GetTick>
 8002d48:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d101      	bne.n	8002d54 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e099      	b.n	8002e88 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2202      	movs	r2, #2
 8002d58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f022 0201 	bic.w	r2, r2, #1
 8002d72:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d74:	e00f      	b.n	8002d96 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d76:	f7ff fa61 	bl	800223c <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	2b05      	cmp	r3, #5
 8002d82:	d908      	bls.n	8002d96 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2220      	movs	r2, #32
 8002d88:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2203      	movs	r2, #3
 8002d8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e078      	b.n	8002e88 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0301 	and.w	r3, r3, #1
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d1e8      	bne.n	8002d76 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002dac:	697a      	ldr	r2, [r7, #20]
 8002dae:	4b38      	ldr	r3, [pc, #224]	; (8002e90 <HAL_DMA_Init+0x158>)
 8002db0:	4013      	ands	r3, r2
 8002db2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	685a      	ldr	r2, [r3, #4]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002dc2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	691b      	ldr	r3, [r3, #16]
 8002dc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	699b      	ldr	r3, [r3, #24]
 8002dd4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dda:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6a1b      	ldr	r3, [r3, #32]
 8002de0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002de2:	697a      	ldr	r2, [r7, #20]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dec:	2b04      	cmp	r3, #4
 8002dee:	d107      	bne.n	8002e00 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	697a      	ldr	r2, [r7, #20]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	697a      	ldr	r2, [r7, #20]
 8002e06:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	695b      	ldr	r3, [r3, #20]
 8002e0e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	f023 0307 	bic.w	r3, r3, #7
 8002e16:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1c:	697a      	ldr	r2, [r7, #20]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e26:	2b04      	cmp	r3, #4
 8002e28:	d117      	bne.n	8002e5a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e2e:	697a      	ldr	r2, [r7, #20]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d00e      	beq.n	8002e5a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f000 fae5 	bl	800340c <DMA_CheckFifoParam>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d008      	beq.n	8002e5a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2240      	movs	r2, #64	; 0x40
 8002e4c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2201      	movs	r2, #1
 8002e52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002e56:	2301      	movs	r3, #1
 8002e58:	e016      	b.n	8002e88 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	697a      	ldr	r2, [r7, #20]
 8002e60:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f000 fa9c 	bl	80033a0 <DMA_CalcBaseAndBitshift>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e70:	223f      	movs	r2, #63	; 0x3f
 8002e72:	409a      	lsls	r2, r3
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2201      	movs	r2, #1
 8002e82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002e86:	2300      	movs	r3, #0
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3718      	adds	r7, #24
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	f010803f 	.word	0xf010803f

08002e94 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b086      	sub	sp, #24
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	60f8      	str	r0, [r7, #12]
 8002e9c:	60b9      	str	r1, [r7, #8]
 8002e9e:	607a      	str	r2, [r7, #4]
 8002ea0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d101      	bne.n	8002eb4 <HAL_DMA_Start+0x20>
 8002eb0:	2302      	movs	r3, #2
 8002eb2:	e026      	b.n	8002f02 <HAL_DMA_Start+0x6e>
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d115      	bne.n	8002ef4 <HAL_DMA_Start+0x60>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2202      	movs	r2, #2
 8002ecc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	68b9      	ldr	r1, [r7, #8]
 8002edc:	68f8      	ldr	r0, [r7, #12]
 8002ede:	f000 fa31 	bl	8003344 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f042 0201 	orr.w	r2, r2, #1
 8002ef0:	601a      	str	r2, [r3, #0]
 8002ef2:	e005      	b.n	8002f00 <HAL_DMA_Start+0x6c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002efc:	2302      	movs	r3, #2
 8002efe:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
 8002f00:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3718      	adds	r7, #24
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}

08002f0a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f0a:	b580      	push	{r7, lr}
 8002f0c:	b084      	sub	sp, #16
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f16:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002f18:	f7ff f990 	bl	800223c <HAL_GetTick>
 8002f1c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d008      	beq.n	8002f3c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2280      	movs	r2, #128	; 0x80
 8002f2e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e052      	b.n	8002fe2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f022 0216 	bic.w	r2, r2, #22
 8002f4a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	695a      	ldr	r2, [r3, #20]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f5a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d103      	bne.n	8002f6c <HAL_DMA_Abort+0x62>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d007      	beq.n	8002f7c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f022 0208 	bic.w	r2, r2, #8
 8002f7a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f022 0201 	bic.w	r2, r2, #1
 8002f8a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f8c:	e013      	b.n	8002fb6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f8e:	f7ff f955 	bl	800223c <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	2b05      	cmp	r3, #5
 8002f9a:	d90c      	bls.n	8002fb6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2220      	movs	r2, #32
 8002fa0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2203      	movs	r2, #3
 8002fa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e015      	b.n	8002fe2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0301 	and.w	r3, r3, #1
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d1e4      	bne.n	8002f8e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fc8:	223f      	movs	r2, #63	; 0x3f
 8002fca:	409a      	lsls	r2, r3
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3710      	adds	r7, #16
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}

08002fea <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002fea:	b480      	push	{r7}
 8002fec:	b083      	sub	sp, #12
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d004      	beq.n	8003008 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2280      	movs	r2, #128	; 0x80
 8003002:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e00c      	b.n	8003022 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2205      	movs	r2, #5
 800300c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f022 0201 	bic.w	r2, r2, #1
 800301e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003020:	2300      	movs	r3, #0
}
 8003022:	4618      	mov	r0, r3
 8003024:	370c      	adds	r7, #12
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr
	...

08003030 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b086      	sub	sp, #24
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003038:	2300      	movs	r3, #0
 800303a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800303c:	4b92      	ldr	r3, [pc, #584]	; (8003288 <HAL_DMA_IRQHandler+0x258>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a92      	ldr	r2, [pc, #584]	; (800328c <HAL_DMA_IRQHandler+0x25c>)
 8003042:	fba2 2303 	umull	r2, r3, r2, r3
 8003046:	0a9b      	lsrs	r3, r3, #10
 8003048:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800304e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800305a:	2208      	movs	r2, #8
 800305c:	409a      	lsls	r2, r3
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	4013      	ands	r3, r2
 8003062:	2b00      	cmp	r3, #0
 8003064:	d01a      	beq.n	800309c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0304 	and.w	r3, r3, #4
 8003070:	2b00      	cmp	r3, #0
 8003072:	d013      	beq.n	800309c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f022 0204 	bic.w	r2, r2, #4
 8003082:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003088:	2208      	movs	r2, #8
 800308a:	409a      	lsls	r2, r3
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003094:	f043 0201 	orr.w	r2, r3, #1
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030a0:	2201      	movs	r2, #1
 80030a2:	409a      	lsls	r2, r3
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	4013      	ands	r3, r2
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d012      	beq.n	80030d2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	695b      	ldr	r3, [r3, #20]
 80030b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d00b      	beq.n	80030d2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030be:	2201      	movs	r2, #1
 80030c0:	409a      	lsls	r2, r3
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ca:	f043 0202 	orr.w	r2, r3, #2
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030d6:	2204      	movs	r2, #4
 80030d8:	409a      	lsls	r2, r3
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	4013      	ands	r3, r2
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d012      	beq.n	8003108 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0302 	and.w	r3, r3, #2
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d00b      	beq.n	8003108 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030f4:	2204      	movs	r2, #4
 80030f6:	409a      	lsls	r2, r3
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003100:	f043 0204 	orr.w	r2, r3, #4
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800310c:	2210      	movs	r2, #16
 800310e:	409a      	lsls	r2, r3
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	4013      	ands	r3, r2
 8003114:	2b00      	cmp	r3, #0
 8003116:	d043      	beq.n	80031a0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0308 	and.w	r3, r3, #8
 8003122:	2b00      	cmp	r3, #0
 8003124:	d03c      	beq.n	80031a0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800312a:	2210      	movs	r2, #16
 800312c:	409a      	lsls	r2, r3
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800313c:	2b00      	cmp	r3, #0
 800313e:	d018      	beq.n	8003172 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d108      	bne.n	8003160 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003152:	2b00      	cmp	r3, #0
 8003154:	d024      	beq.n	80031a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	4798      	blx	r3
 800315e:	e01f      	b.n	80031a0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003164:	2b00      	cmp	r3, #0
 8003166:	d01b      	beq.n	80031a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	4798      	blx	r3
 8003170:	e016      	b.n	80031a0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800317c:	2b00      	cmp	r3, #0
 800317e:	d107      	bne.n	8003190 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f022 0208 	bic.w	r2, r2, #8
 800318e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003194:	2b00      	cmp	r3, #0
 8003196:	d003      	beq.n	80031a0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031a4:	2220      	movs	r2, #32
 80031a6:	409a      	lsls	r2, r3
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	4013      	ands	r3, r2
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	f000 808e 	beq.w	80032ce <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0310 	and.w	r3, r3, #16
 80031bc:	2b00      	cmp	r3, #0
 80031be:	f000 8086 	beq.w	80032ce <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031c6:	2220      	movs	r2, #32
 80031c8:	409a      	lsls	r2, r3
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	2b05      	cmp	r3, #5
 80031d8:	d136      	bne.n	8003248 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f022 0216 	bic.w	r2, r2, #22
 80031e8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	695a      	ldr	r2, [r3, #20]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031f8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d103      	bne.n	800320a <HAL_DMA_IRQHandler+0x1da>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003206:	2b00      	cmp	r3, #0
 8003208:	d007      	beq.n	800321a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f022 0208 	bic.w	r2, r2, #8
 8003218:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800321e:	223f      	movs	r2, #63	; 0x3f
 8003220:	409a      	lsls	r2, r3
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2201      	movs	r2, #1
 800322a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800323a:	2b00      	cmp	r3, #0
 800323c:	d07d      	beq.n	800333a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	4798      	blx	r3
        }
        return;
 8003246:	e078      	b.n	800333a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d01c      	beq.n	8003290 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d108      	bne.n	8003276 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003268:	2b00      	cmp	r3, #0
 800326a:	d030      	beq.n	80032ce <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	4798      	blx	r3
 8003274:	e02b      	b.n	80032ce <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800327a:	2b00      	cmp	r3, #0
 800327c:	d027      	beq.n	80032ce <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	4798      	blx	r3
 8003286:	e022      	b.n	80032ce <HAL_DMA_IRQHandler+0x29e>
 8003288:	20000000 	.word	0x20000000
 800328c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800329a:	2b00      	cmp	r3, #0
 800329c:	d10f      	bne.n	80032be <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f022 0210 	bic.w	r2, r2, #16
 80032ac:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2201      	movs	r2, #1
 80032b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d003      	beq.n	80032ce <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d032      	beq.n	800333c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032da:	f003 0301 	and.w	r3, r3, #1
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d022      	beq.n	8003328 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2205      	movs	r2, #5
 80032e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f022 0201 	bic.w	r2, r2, #1
 80032f8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	3301      	adds	r3, #1
 80032fe:	60bb      	str	r3, [r7, #8]
 8003300:	697a      	ldr	r2, [r7, #20]
 8003302:	429a      	cmp	r2, r3
 8003304:	d307      	bcc.n	8003316 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0301 	and.w	r3, r3, #1
 8003310:	2b00      	cmp	r3, #0
 8003312:	d1f2      	bne.n	80032fa <HAL_DMA_IRQHandler+0x2ca>
 8003314:	e000      	b.n	8003318 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003316:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2201      	movs	r2, #1
 800331c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800332c:	2b00      	cmp	r3, #0
 800332e:	d005      	beq.n	800333c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	4798      	blx	r3
 8003338:	e000      	b.n	800333c <HAL_DMA_IRQHandler+0x30c>
        return;
 800333a:	bf00      	nop
    }
  }
}
 800333c:	3718      	adds	r7, #24
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop

08003344 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003344:	b480      	push	{r7}
 8003346:	b085      	sub	sp, #20
 8003348:	af00      	add	r7, sp, #0
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	60b9      	str	r1, [r7, #8]
 800334e:	607a      	str	r2, [r7, #4]
 8003350:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003360:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	683a      	ldr	r2, [r7, #0]
 8003368:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	2b40      	cmp	r3, #64	; 0x40
 8003370:	d108      	bne.n	8003384 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	68ba      	ldr	r2, [r7, #8]
 8003380:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003382:	e007      	b.n	8003394 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	68ba      	ldr	r2, [r7, #8]
 800338a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	60da      	str	r2, [r3, #12]
}
 8003394:	bf00      	nop
 8003396:	3714      	adds	r7, #20
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr

080033a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b085      	sub	sp, #20
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	3b10      	subs	r3, #16
 80033b0:	4a14      	ldr	r2, [pc, #80]	; (8003404 <DMA_CalcBaseAndBitshift+0x64>)
 80033b2:	fba2 2303 	umull	r2, r3, r2, r3
 80033b6:	091b      	lsrs	r3, r3, #4
 80033b8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80033ba:	4a13      	ldr	r2, [pc, #76]	; (8003408 <DMA_CalcBaseAndBitshift+0x68>)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	4413      	add	r3, r2
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	461a      	mov	r2, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2b03      	cmp	r3, #3
 80033cc:	d909      	bls.n	80033e2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80033d6:	f023 0303 	bic.w	r3, r3, #3
 80033da:	1d1a      	adds	r2, r3, #4
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	659a      	str	r2, [r3, #88]	; 0x58
 80033e0:	e007      	b.n	80033f2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80033ea:	f023 0303 	bic.w	r3, r3, #3
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3714      	adds	r7, #20
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr
 8003402:	bf00      	nop
 8003404:	aaaaaaab 	.word	0xaaaaaaab
 8003408:	08005d04 	.word	0x08005d04

0800340c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800340c:	b480      	push	{r7}
 800340e:	b085      	sub	sp, #20
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003414:	2300      	movs	r3, #0
 8003416:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800341c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	699b      	ldr	r3, [r3, #24]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d11f      	bne.n	8003466 <DMA_CheckFifoParam+0x5a>
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	2b03      	cmp	r3, #3
 800342a:	d856      	bhi.n	80034da <DMA_CheckFifoParam+0xce>
 800342c:	a201      	add	r2, pc, #4	; (adr r2, 8003434 <DMA_CheckFifoParam+0x28>)
 800342e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003432:	bf00      	nop
 8003434:	08003445 	.word	0x08003445
 8003438:	08003457 	.word	0x08003457
 800343c:	08003445 	.word	0x08003445
 8003440:	080034db 	.word	0x080034db
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003448:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d046      	beq.n	80034de <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003454:	e043      	b.n	80034de <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800345a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800345e:	d140      	bne.n	80034e2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003464:	e03d      	b.n	80034e2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	699b      	ldr	r3, [r3, #24]
 800346a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800346e:	d121      	bne.n	80034b4 <DMA_CheckFifoParam+0xa8>
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	2b03      	cmp	r3, #3
 8003474:	d837      	bhi.n	80034e6 <DMA_CheckFifoParam+0xda>
 8003476:	a201      	add	r2, pc, #4	; (adr r2, 800347c <DMA_CheckFifoParam+0x70>)
 8003478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800347c:	0800348d 	.word	0x0800348d
 8003480:	08003493 	.word	0x08003493
 8003484:	0800348d 	.word	0x0800348d
 8003488:	080034a5 	.word	0x080034a5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	73fb      	strb	r3, [r7, #15]
      break;
 8003490:	e030      	b.n	80034f4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003496:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d025      	beq.n	80034ea <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034a2:	e022      	b.n	80034ea <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80034ac:	d11f      	bne.n	80034ee <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80034b2:	e01c      	b.n	80034ee <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d903      	bls.n	80034c2 <DMA_CheckFifoParam+0xb6>
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	2b03      	cmp	r3, #3
 80034be:	d003      	beq.n	80034c8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80034c0:	e018      	b.n	80034f4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	73fb      	strb	r3, [r7, #15]
      break;
 80034c6:	e015      	b.n	80034f4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d00e      	beq.n	80034f2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	73fb      	strb	r3, [r7, #15]
      break;
 80034d8:	e00b      	b.n	80034f2 <DMA_CheckFifoParam+0xe6>
      break;
 80034da:	bf00      	nop
 80034dc:	e00a      	b.n	80034f4 <DMA_CheckFifoParam+0xe8>
      break;
 80034de:	bf00      	nop
 80034e0:	e008      	b.n	80034f4 <DMA_CheckFifoParam+0xe8>
      break;
 80034e2:	bf00      	nop
 80034e4:	e006      	b.n	80034f4 <DMA_CheckFifoParam+0xe8>
      break;
 80034e6:	bf00      	nop
 80034e8:	e004      	b.n	80034f4 <DMA_CheckFifoParam+0xe8>
      break;
 80034ea:	bf00      	nop
 80034ec:	e002      	b.n	80034f4 <DMA_CheckFifoParam+0xe8>
      break;   
 80034ee:	bf00      	nop
 80034f0:	e000      	b.n	80034f4 <DMA_CheckFifoParam+0xe8>
      break;
 80034f2:	bf00      	nop
    }
  } 
  
  return status; 
 80034f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3714      	adds	r7, #20
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
 8003502:	bf00      	nop

08003504 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003504:	b480      	push	{r7}
 8003506:	b089      	sub	sp, #36	; 0x24
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800350e:	2300      	movs	r3, #0
 8003510:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003512:	2300      	movs	r3, #0
 8003514:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003516:	2300      	movs	r3, #0
 8003518:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800351a:	2300      	movs	r3, #0
 800351c:	61fb      	str	r3, [r7, #28]
 800351e:	e177      	b.n	8003810 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003520:	2201      	movs	r2, #1
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	fa02 f303 	lsl.w	r3, r2, r3
 8003528:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	697a      	ldr	r2, [r7, #20]
 8003530:	4013      	ands	r3, r2
 8003532:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003534:	693a      	ldr	r2, [r7, #16]
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	429a      	cmp	r2, r3
 800353a:	f040 8166 	bne.w	800380a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f003 0303 	and.w	r3, r3, #3
 8003546:	2b01      	cmp	r3, #1
 8003548:	d005      	beq.n	8003556 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003552:	2b02      	cmp	r3, #2
 8003554:	d130      	bne.n	80035b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	005b      	lsls	r3, r3, #1
 8003560:	2203      	movs	r2, #3
 8003562:	fa02 f303 	lsl.w	r3, r2, r3
 8003566:	43db      	mvns	r3, r3
 8003568:	69ba      	ldr	r2, [r7, #24]
 800356a:	4013      	ands	r3, r2
 800356c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	68da      	ldr	r2, [r3, #12]
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	005b      	lsls	r3, r3, #1
 8003576:	fa02 f303 	lsl.w	r3, r2, r3
 800357a:	69ba      	ldr	r2, [r7, #24]
 800357c:	4313      	orrs	r3, r2
 800357e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	69ba      	ldr	r2, [r7, #24]
 8003584:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800358c:	2201      	movs	r2, #1
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	fa02 f303 	lsl.w	r3, r2, r3
 8003594:	43db      	mvns	r3, r3
 8003596:	69ba      	ldr	r2, [r7, #24]
 8003598:	4013      	ands	r3, r2
 800359a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	091b      	lsrs	r3, r3, #4
 80035a2:	f003 0201 	and.w	r2, r3, #1
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	fa02 f303 	lsl.w	r3, r2, r3
 80035ac:	69ba      	ldr	r2, [r7, #24]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	69ba      	ldr	r2, [r7, #24]
 80035b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f003 0303 	and.w	r3, r3, #3
 80035c0:	2b03      	cmp	r3, #3
 80035c2:	d017      	beq.n	80035f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	005b      	lsls	r3, r3, #1
 80035ce:	2203      	movs	r2, #3
 80035d0:	fa02 f303 	lsl.w	r3, r2, r3
 80035d4:	43db      	mvns	r3, r3
 80035d6:	69ba      	ldr	r2, [r7, #24]
 80035d8:	4013      	ands	r3, r2
 80035da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	689a      	ldr	r2, [r3, #8]
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	005b      	lsls	r3, r3, #1
 80035e4:	fa02 f303 	lsl.w	r3, r2, r3
 80035e8:	69ba      	ldr	r2, [r7, #24]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	69ba      	ldr	r2, [r7, #24]
 80035f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f003 0303 	and.w	r3, r3, #3
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d123      	bne.n	8003648 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	08da      	lsrs	r2, r3, #3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	3208      	adds	r2, #8
 8003608:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800360c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	f003 0307 	and.w	r3, r3, #7
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	220f      	movs	r2, #15
 8003618:	fa02 f303 	lsl.w	r3, r2, r3
 800361c:	43db      	mvns	r3, r3
 800361e:	69ba      	ldr	r2, [r7, #24]
 8003620:	4013      	ands	r3, r2
 8003622:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	691a      	ldr	r2, [r3, #16]
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	f003 0307 	and.w	r3, r3, #7
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	fa02 f303 	lsl.w	r3, r2, r3
 8003634:	69ba      	ldr	r2, [r7, #24]
 8003636:	4313      	orrs	r3, r2
 8003638:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	08da      	lsrs	r2, r3, #3
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	3208      	adds	r2, #8
 8003642:	69b9      	ldr	r1, [r7, #24]
 8003644:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	005b      	lsls	r3, r3, #1
 8003652:	2203      	movs	r2, #3
 8003654:	fa02 f303 	lsl.w	r3, r2, r3
 8003658:	43db      	mvns	r3, r3
 800365a:	69ba      	ldr	r2, [r7, #24]
 800365c:	4013      	ands	r3, r2
 800365e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f003 0203 	and.w	r2, r3, #3
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	005b      	lsls	r3, r3, #1
 800366c:	fa02 f303 	lsl.w	r3, r2, r3
 8003670:	69ba      	ldr	r2, [r7, #24]
 8003672:	4313      	orrs	r3, r2
 8003674:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	69ba      	ldr	r2, [r7, #24]
 800367a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003684:	2b00      	cmp	r3, #0
 8003686:	f000 80c0 	beq.w	800380a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800368a:	2300      	movs	r3, #0
 800368c:	60fb      	str	r3, [r7, #12]
 800368e:	4b66      	ldr	r3, [pc, #408]	; (8003828 <HAL_GPIO_Init+0x324>)
 8003690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003692:	4a65      	ldr	r2, [pc, #404]	; (8003828 <HAL_GPIO_Init+0x324>)
 8003694:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003698:	6453      	str	r3, [r2, #68]	; 0x44
 800369a:	4b63      	ldr	r3, [pc, #396]	; (8003828 <HAL_GPIO_Init+0x324>)
 800369c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800369e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036a2:	60fb      	str	r3, [r7, #12]
 80036a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80036a6:	4a61      	ldr	r2, [pc, #388]	; (800382c <HAL_GPIO_Init+0x328>)
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	089b      	lsrs	r3, r3, #2
 80036ac:	3302      	adds	r3, #2
 80036ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80036b4:	69fb      	ldr	r3, [r7, #28]
 80036b6:	f003 0303 	and.w	r3, r3, #3
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	220f      	movs	r2, #15
 80036be:	fa02 f303 	lsl.w	r3, r2, r3
 80036c2:	43db      	mvns	r3, r3
 80036c4:	69ba      	ldr	r2, [r7, #24]
 80036c6:	4013      	ands	r3, r2
 80036c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a58      	ldr	r2, [pc, #352]	; (8003830 <HAL_GPIO_Init+0x32c>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d037      	beq.n	8003742 <HAL_GPIO_Init+0x23e>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a57      	ldr	r2, [pc, #348]	; (8003834 <HAL_GPIO_Init+0x330>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d031      	beq.n	800373e <HAL_GPIO_Init+0x23a>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a56      	ldr	r2, [pc, #344]	; (8003838 <HAL_GPIO_Init+0x334>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d02b      	beq.n	800373a <HAL_GPIO_Init+0x236>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a55      	ldr	r2, [pc, #340]	; (800383c <HAL_GPIO_Init+0x338>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d025      	beq.n	8003736 <HAL_GPIO_Init+0x232>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a54      	ldr	r2, [pc, #336]	; (8003840 <HAL_GPIO_Init+0x33c>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d01f      	beq.n	8003732 <HAL_GPIO_Init+0x22e>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a53      	ldr	r2, [pc, #332]	; (8003844 <HAL_GPIO_Init+0x340>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d019      	beq.n	800372e <HAL_GPIO_Init+0x22a>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a52      	ldr	r2, [pc, #328]	; (8003848 <HAL_GPIO_Init+0x344>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d013      	beq.n	800372a <HAL_GPIO_Init+0x226>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a51      	ldr	r2, [pc, #324]	; (800384c <HAL_GPIO_Init+0x348>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d00d      	beq.n	8003726 <HAL_GPIO_Init+0x222>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a50      	ldr	r2, [pc, #320]	; (8003850 <HAL_GPIO_Init+0x34c>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d007      	beq.n	8003722 <HAL_GPIO_Init+0x21e>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a4f      	ldr	r2, [pc, #316]	; (8003854 <HAL_GPIO_Init+0x350>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d101      	bne.n	800371e <HAL_GPIO_Init+0x21a>
 800371a:	2309      	movs	r3, #9
 800371c:	e012      	b.n	8003744 <HAL_GPIO_Init+0x240>
 800371e:	230a      	movs	r3, #10
 8003720:	e010      	b.n	8003744 <HAL_GPIO_Init+0x240>
 8003722:	2308      	movs	r3, #8
 8003724:	e00e      	b.n	8003744 <HAL_GPIO_Init+0x240>
 8003726:	2307      	movs	r3, #7
 8003728:	e00c      	b.n	8003744 <HAL_GPIO_Init+0x240>
 800372a:	2306      	movs	r3, #6
 800372c:	e00a      	b.n	8003744 <HAL_GPIO_Init+0x240>
 800372e:	2305      	movs	r3, #5
 8003730:	e008      	b.n	8003744 <HAL_GPIO_Init+0x240>
 8003732:	2304      	movs	r3, #4
 8003734:	e006      	b.n	8003744 <HAL_GPIO_Init+0x240>
 8003736:	2303      	movs	r3, #3
 8003738:	e004      	b.n	8003744 <HAL_GPIO_Init+0x240>
 800373a:	2302      	movs	r3, #2
 800373c:	e002      	b.n	8003744 <HAL_GPIO_Init+0x240>
 800373e:	2301      	movs	r3, #1
 8003740:	e000      	b.n	8003744 <HAL_GPIO_Init+0x240>
 8003742:	2300      	movs	r3, #0
 8003744:	69fa      	ldr	r2, [r7, #28]
 8003746:	f002 0203 	and.w	r2, r2, #3
 800374a:	0092      	lsls	r2, r2, #2
 800374c:	4093      	lsls	r3, r2
 800374e:	69ba      	ldr	r2, [r7, #24]
 8003750:	4313      	orrs	r3, r2
 8003752:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003754:	4935      	ldr	r1, [pc, #212]	; (800382c <HAL_GPIO_Init+0x328>)
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	089b      	lsrs	r3, r3, #2
 800375a:	3302      	adds	r3, #2
 800375c:	69ba      	ldr	r2, [r7, #24]
 800375e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003762:	4b3d      	ldr	r3, [pc, #244]	; (8003858 <HAL_GPIO_Init+0x354>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	43db      	mvns	r3, r3
 800376c:	69ba      	ldr	r2, [r7, #24]
 800376e:	4013      	ands	r3, r2
 8003770:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d003      	beq.n	8003786 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800377e:	69ba      	ldr	r2, [r7, #24]
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	4313      	orrs	r3, r2
 8003784:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003786:	4a34      	ldr	r2, [pc, #208]	; (8003858 <HAL_GPIO_Init+0x354>)
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800378c:	4b32      	ldr	r3, [pc, #200]	; (8003858 <HAL_GPIO_Init+0x354>)
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	43db      	mvns	r3, r3
 8003796:	69ba      	ldr	r2, [r7, #24]
 8003798:	4013      	ands	r3, r2
 800379a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d003      	beq.n	80037b0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80037a8:	69ba      	ldr	r2, [r7, #24]
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80037b0:	4a29      	ldr	r2, [pc, #164]	; (8003858 <HAL_GPIO_Init+0x354>)
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037b6:	4b28      	ldr	r3, [pc, #160]	; (8003858 <HAL_GPIO_Init+0x354>)
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	43db      	mvns	r3, r3
 80037c0:	69ba      	ldr	r2, [r7, #24]
 80037c2:	4013      	ands	r3, r2
 80037c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d003      	beq.n	80037da <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80037d2:	69ba      	ldr	r2, [r7, #24]
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80037da:	4a1f      	ldr	r2, [pc, #124]	; (8003858 <HAL_GPIO_Init+0x354>)
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80037e0:	4b1d      	ldr	r3, [pc, #116]	; (8003858 <HAL_GPIO_Init+0x354>)
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	43db      	mvns	r3, r3
 80037ea:	69ba      	ldr	r2, [r7, #24]
 80037ec:	4013      	ands	r3, r2
 80037ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d003      	beq.n	8003804 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80037fc:	69ba      	ldr	r2, [r7, #24]
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	4313      	orrs	r3, r2
 8003802:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003804:	4a14      	ldr	r2, [pc, #80]	; (8003858 <HAL_GPIO_Init+0x354>)
 8003806:	69bb      	ldr	r3, [r7, #24]
 8003808:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	3301      	adds	r3, #1
 800380e:	61fb      	str	r3, [r7, #28]
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	2b0f      	cmp	r3, #15
 8003814:	f67f ae84 	bls.w	8003520 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003818:	bf00      	nop
 800381a:	bf00      	nop
 800381c:	3724      	adds	r7, #36	; 0x24
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop
 8003828:	40023800 	.word	0x40023800
 800382c:	40013800 	.word	0x40013800
 8003830:	40020000 	.word	0x40020000
 8003834:	40020400 	.word	0x40020400
 8003838:	40020800 	.word	0x40020800
 800383c:	40020c00 	.word	0x40020c00
 8003840:	40021000 	.word	0x40021000
 8003844:	40021400 	.word	0x40021400
 8003848:	40021800 	.word	0x40021800
 800384c:	40021c00 	.word	0x40021c00
 8003850:	40022000 	.word	0x40022000
 8003854:	40022400 	.word	0x40022400
 8003858:	40013c00 	.word	0x40013c00

0800385c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	460b      	mov	r3, r1
 8003866:	807b      	strh	r3, [r7, #2]
 8003868:	4613      	mov	r3, r2
 800386a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800386c:	787b      	ldrb	r3, [r7, #1]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d003      	beq.n	800387a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003872:	887a      	ldrh	r2, [r7, #2]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003878:	e003      	b.n	8003882 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800387a:	887b      	ldrh	r3, [r7, #2]
 800387c:	041a      	lsls	r2, r3, #16
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	619a      	str	r2, [r3, #24]
}
 8003882:	bf00      	nop
 8003884:	370c      	adds	r7, #12
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr

0800388e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800388e:	b480      	push	{r7}
 8003890:	b085      	sub	sp, #20
 8003892:	af00      	add	r7, sp, #0
 8003894:	6078      	str	r0, [r7, #4]
 8003896:	460b      	mov	r3, r1
 8003898:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	695b      	ldr	r3, [r3, #20]
 800389e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80038a0:	887a      	ldrh	r2, [r7, #2]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	4013      	ands	r3, r2
 80038a6:	041a      	lsls	r2, r3, #16
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	43d9      	mvns	r1, r3
 80038ac:	887b      	ldrh	r3, [r7, #2]
 80038ae:	400b      	ands	r3, r1
 80038b0:	431a      	orrs	r2, r3
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	619a      	str	r2, [r3, #24]
}
 80038b6:	bf00      	nop
 80038b8:	3714      	adds	r7, #20
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
	...

080038c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d101      	bne.n	80038d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e12b      	b.n	8003b2e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d106      	bne.n	80038f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f7fd ff82 	bl	80017f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2224      	movs	r2, #36	; 0x24
 80038f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f022 0201 	bic.w	r2, r2, #1
 8003906:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003916:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003926:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003928:	f000 fdac 	bl	8004484 <HAL_RCC_GetPCLK1Freq>
 800392c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	4a81      	ldr	r2, [pc, #516]	; (8003b38 <HAL_I2C_Init+0x274>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d807      	bhi.n	8003948 <HAL_I2C_Init+0x84>
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	4a80      	ldr	r2, [pc, #512]	; (8003b3c <HAL_I2C_Init+0x278>)
 800393c:	4293      	cmp	r3, r2
 800393e:	bf94      	ite	ls
 8003940:	2301      	movls	r3, #1
 8003942:	2300      	movhi	r3, #0
 8003944:	b2db      	uxtb	r3, r3
 8003946:	e006      	b.n	8003956 <HAL_I2C_Init+0x92>
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	4a7d      	ldr	r2, [pc, #500]	; (8003b40 <HAL_I2C_Init+0x27c>)
 800394c:	4293      	cmp	r3, r2
 800394e:	bf94      	ite	ls
 8003950:	2301      	movls	r3, #1
 8003952:	2300      	movhi	r3, #0
 8003954:	b2db      	uxtb	r3, r3
 8003956:	2b00      	cmp	r3, #0
 8003958:	d001      	beq.n	800395e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e0e7      	b.n	8003b2e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	4a78      	ldr	r2, [pc, #480]	; (8003b44 <HAL_I2C_Init+0x280>)
 8003962:	fba2 2303 	umull	r2, r3, r2, r3
 8003966:	0c9b      	lsrs	r3, r3, #18
 8003968:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	68ba      	ldr	r2, [r7, #8]
 800397a:	430a      	orrs	r2, r1
 800397c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	6a1b      	ldr	r3, [r3, #32]
 8003984:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	4a6a      	ldr	r2, [pc, #424]	; (8003b38 <HAL_I2C_Init+0x274>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d802      	bhi.n	8003998 <HAL_I2C_Init+0xd4>
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	3301      	adds	r3, #1
 8003996:	e009      	b.n	80039ac <HAL_I2C_Init+0xe8>
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800399e:	fb02 f303 	mul.w	r3, r2, r3
 80039a2:	4a69      	ldr	r2, [pc, #420]	; (8003b48 <HAL_I2C_Init+0x284>)
 80039a4:	fba2 2303 	umull	r2, r3, r2, r3
 80039a8:	099b      	lsrs	r3, r3, #6
 80039aa:	3301      	adds	r3, #1
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	6812      	ldr	r2, [r2, #0]
 80039b0:	430b      	orrs	r3, r1
 80039b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	69db      	ldr	r3, [r3, #28]
 80039ba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80039be:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	495c      	ldr	r1, [pc, #368]	; (8003b38 <HAL_I2C_Init+0x274>)
 80039c8:	428b      	cmp	r3, r1
 80039ca:	d819      	bhi.n	8003a00 <HAL_I2C_Init+0x13c>
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	1e59      	subs	r1, r3, #1
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	005b      	lsls	r3, r3, #1
 80039d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80039da:	1c59      	adds	r1, r3, #1
 80039dc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80039e0:	400b      	ands	r3, r1
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d00a      	beq.n	80039fc <HAL_I2C_Init+0x138>
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	1e59      	subs	r1, r3, #1
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	005b      	lsls	r3, r3, #1
 80039f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80039f4:	3301      	adds	r3, #1
 80039f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039fa:	e051      	b.n	8003aa0 <HAL_I2C_Init+0x1dc>
 80039fc:	2304      	movs	r3, #4
 80039fe:	e04f      	b.n	8003aa0 <HAL_I2C_Init+0x1dc>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d111      	bne.n	8003a2c <HAL_I2C_Init+0x168>
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	1e58      	subs	r0, r3, #1
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6859      	ldr	r1, [r3, #4]
 8003a10:	460b      	mov	r3, r1
 8003a12:	005b      	lsls	r3, r3, #1
 8003a14:	440b      	add	r3, r1
 8003a16:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a1a:	3301      	adds	r3, #1
 8003a1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	bf0c      	ite	eq
 8003a24:	2301      	moveq	r3, #1
 8003a26:	2300      	movne	r3, #0
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	e012      	b.n	8003a52 <HAL_I2C_Init+0x18e>
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	1e58      	subs	r0, r3, #1
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6859      	ldr	r1, [r3, #4]
 8003a34:	460b      	mov	r3, r1
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	440b      	add	r3, r1
 8003a3a:	0099      	lsls	r1, r3, #2
 8003a3c:	440b      	add	r3, r1
 8003a3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a42:	3301      	adds	r3, #1
 8003a44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	bf0c      	ite	eq
 8003a4c:	2301      	moveq	r3, #1
 8003a4e:	2300      	movne	r3, #0
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d001      	beq.n	8003a5a <HAL_I2C_Init+0x196>
 8003a56:	2301      	movs	r3, #1
 8003a58:	e022      	b.n	8003aa0 <HAL_I2C_Init+0x1dc>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d10e      	bne.n	8003a80 <HAL_I2C_Init+0x1bc>
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	1e58      	subs	r0, r3, #1
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6859      	ldr	r1, [r3, #4]
 8003a6a:	460b      	mov	r3, r1
 8003a6c:	005b      	lsls	r3, r3, #1
 8003a6e:	440b      	add	r3, r1
 8003a70:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a74:	3301      	adds	r3, #1
 8003a76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a7e:	e00f      	b.n	8003aa0 <HAL_I2C_Init+0x1dc>
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	1e58      	subs	r0, r3, #1
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6859      	ldr	r1, [r3, #4]
 8003a88:	460b      	mov	r3, r1
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	440b      	add	r3, r1
 8003a8e:	0099      	lsls	r1, r3, #2
 8003a90:	440b      	add	r3, r1
 8003a92:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a96:	3301      	adds	r3, #1
 8003a98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a9c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003aa0:	6879      	ldr	r1, [r7, #4]
 8003aa2:	6809      	ldr	r1, [r1, #0]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	69da      	ldr	r2, [r3, #28]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a1b      	ldr	r3, [r3, #32]
 8003aba:	431a      	orrs	r2, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	430a      	orrs	r2, r1
 8003ac2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003ace:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	6911      	ldr	r1, [r2, #16]
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	68d2      	ldr	r2, [r2, #12]
 8003ada:	4311      	orrs	r1, r2
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	6812      	ldr	r2, [r2, #0]
 8003ae0:	430b      	orrs	r3, r1
 8003ae2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	695a      	ldr	r2, [r3, #20]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	699b      	ldr	r3, [r3, #24]
 8003af6:	431a      	orrs	r2, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	430a      	orrs	r2, r1
 8003afe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f042 0201 	orr.w	r2, r2, #1
 8003b0e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2220      	movs	r2, #32
 8003b1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3710      	adds	r7, #16
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	000186a0 	.word	0x000186a0
 8003b3c:	001e847f 	.word	0x001e847f
 8003b40:	003d08ff 	.word	0x003d08ff
 8003b44:	431bde83 	.word	0x431bde83
 8003b48:	10624dd3 	.word	0x10624dd3

08003b4c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	2b20      	cmp	r3, #32
 8003b60:	d129      	bne.n	8003bb6 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2224      	movs	r2, #36	; 0x24
 8003b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f022 0201 	bic.w	r2, r2, #1
 8003b78:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f022 0210 	bic.w	r2, r2, #16
 8003b88:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	683a      	ldr	r2, [r7, #0]
 8003b96:	430a      	orrs	r2, r1
 8003b98:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f042 0201 	orr.w	r2, r2, #1
 8003ba8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2220      	movs	r2, #32
 8003bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	e000      	b.n	8003bb8 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003bb6:	2302      	movs	r3, #2
  }
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b085      	sub	sp, #20
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	2b20      	cmp	r3, #32
 8003bdc:	d12a      	bne.n	8003c34 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2224      	movs	r2, #36	; 0x24
 8003be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f022 0201 	bic.w	r2, r2, #1
 8003bf4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfc:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003bfe:	89fb      	ldrh	r3, [r7, #14]
 8003c00:	f023 030f 	bic.w	r3, r3, #15
 8003c04:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	b29a      	uxth	r2, r3
 8003c0a:	89fb      	ldrh	r3, [r7, #14]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	89fa      	ldrh	r2, [r7, #14]
 8003c16:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f042 0201 	orr.w	r2, r2, #1
 8003c26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2220      	movs	r2, #32
 8003c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003c30:	2300      	movs	r3, #0
 8003c32:	e000      	b.n	8003c36 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003c34:	2302      	movs	r3, #2
  }
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3714      	adds	r7, #20
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr
	...

08003c44 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b086      	sub	sp, #24
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d101      	bne.n	8003c56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e264      	b.n	8004120 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0301 	and.w	r3, r3, #1
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d075      	beq.n	8003d4e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c62:	4ba3      	ldr	r3, [pc, #652]	; (8003ef0 <HAL_RCC_OscConfig+0x2ac>)
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	f003 030c 	and.w	r3, r3, #12
 8003c6a:	2b04      	cmp	r3, #4
 8003c6c:	d00c      	beq.n	8003c88 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c6e:	4ba0      	ldr	r3, [pc, #640]	; (8003ef0 <HAL_RCC_OscConfig+0x2ac>)
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c76:	2b08      	cmp	r3, #8
 8003c78:	d112      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c7a:	4b9d      	ldr	r3, [pc, #628]	; (8003ef0 <HAL_RCC_OscConfig+0x2ac>)
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c86:	d10b      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c88:	4b99      	ldr	r3, [pc, #612]	; (8003ef0 <HAL_RCC_OscConfig+0x2ac>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d05b      	beq.n	8003d4c <HAL_RCC_OscConfig+0x108>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d157      	bne.n	8003d4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e23f      	b.n	8004120 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ca8:	d106      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x74>
 8003caa:	4b91      	ldr	r3, [pc, #580]	; (8003ef0 <HAL_RCC_OscConfig+0x2ac>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a90      	ldr	r2, [pc, #576]	; (8003ef0 <HAL_RCC_OscConfig+0x2ac>)
 8003cb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cb4:	6013      	str	r3, [r2, #0]
 8003cb6:	e01d      	b.n	8003cf4 <HAL_RCC_OscConfig+0xb0>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cc0:	d10c      	bne.n	8003cdc <HAL_RCC_OscConfig+0x98>
 8003cc2:	4b8b      	ldr	r3, [pc, #556]	; (8003ef0 <HAL_RCC_OscConfig+0x2ac>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a8a      	ldr	r2, [pc, #552]	; (8003ef0 <HAL_RCC_OscConfig+0x2ac>)
 8003cc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ccc:	6013      	str	r3, [r2, #0]
 8003cce:	4b88      	ldr	r3, [pc, #544]	; (8003ef0 <HAL_RCC_OscConfig+0x2ac>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a87      	ldr	r2, [pc, #540]	; (8003ef0 <HAL_RCC_OscConfig+0x2ac>)
 8003cd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cd8:	6013      	str	r3, [r2, #0]
 8003cda:	e00b      	b.n	8003cf4 <HAL_RCC_OscConfig+0xb0>
 8003cdc:	4b84      	ldr	r3, [pc, #528]	; (8003ef0 <HAL_RCC_OscConfig+0x2ac>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a83      	ldr	r2, [pc, #524]	; (8003ef0 <HAL_RCC_OscConfig+0x2ac>)
 8003ce2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ce6:	6013      	str	r3, [r2, #0]
 8003ce8:	4b81      	ldr	r3, [pc, #516]	; (8003ef0 <HAL_RCC_OscConfig+0x2ac>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a80      	ldr	r2, [pc, #512]	; (8003ef0 <HAL_RCC_OscConfig+0x2ac>)
 8003cee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cf2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d013      	beq.n	8003d24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cfc:	f7fe fa9e 	bl	800223c <HAL_GetTick>
 8003d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d02:	e008      	b.n	8003d16 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d04:	f7fe fa9a 	bl	800223c <HAL_GetTick>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	2b64      	cmp	r3, #100	; 0x64
 8003d10:	d901      	bls.n	8003d16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e204      	b.n	8004120 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d16:	4b76      	ldr	r3, [pc, #472]	; (8003ef0 <HAL_RCC_OscConfig+0x2ac>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d0f0      	beq.n	8003d04 <HAL_RCC_OscConfig+0xc0>
 8003d22:	e014      	b.n	8003d4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d24:	f7fe fa8a 	bl	800223c <HAL_GetTick>
 8003d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d2a:	e008      	b.n	8003d3e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d2c:	f7fe fa86 	bl	800223c <HAL_GetTick>
 8003d30:	4602      	mov	r2, r0
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	2b64      	cmp	r3, #100	; 0x64
 8003d38:	d901      	bls.n	8003d3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	e1f0      	b.n	8004120 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d3e:	4b6c      	ldr	r3, [pc, #432]	; (8003ef0 <HAL_RCC_OscConfig+0x2ac>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d1f0      	bne.n	8003d2c <HAL_RCC_OscConfig+0xe8>
 8003d4a:	e000      	b.n	8003d4e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0302 	and.w	r3, r3, #2
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d063      	beq.n	8003e22 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d5a:	4b65      	ldr	r3, [pc, #404]	; (8003ef0 <HAL_RCC_OscConfig+0x2ac>)
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	f003 030c 	and.w	r3, r3, #12
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d00b      	beq.n	8003d7e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d66:	4b62      	ldr	r3, [pc, #392]	; (8003ef0 <HAL_RCC_OscConfig+0x2ac>)
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d6e:	2b08      	cmp	r3, #8
 8003d70:	d11c      	bne.n	8003dac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d72:	4b5f      	ldr	r3, [pc, #380]	; (8003ef0 <HAL_RCC_OscConfig+0x2ac>)
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d116      	bne.n	8003dac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d7e:	4b5c      	ldr	r3, [pc, #368]	; (8003ef0 <HAL_RCC_OscConfig+0x2ac>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0302 	and.w	r3, r3, #2
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d005      	beq.n	8003d96 <HAL_RCC_OscConfig+0x152>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	68db      	ldr	r3, [r3, #12]
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d001      	beq.n	8003d96 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e1c4      	b.n	8004120 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d96:	4b56      	ldr	r3, [pc, #344]	; (8003ef0 <HAL_RCC_OscConfig+0x2ac>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	691b      	ldr	r3, [r3, #16]
 8003da2:	00db      	lsls	r3, r3, #3
 8003da4:	4952      	ldr	r1, [pc, #328]	; (8003ef0 <HAL_RCC_OscConfig+0x2ac>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003daa:	e03a      	b.n	8003e22 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d020      	beq.n	8003df6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003db4:	4b4f      	ldr	r3, [pc, #316]	; (8003ef4 <HAL_RCC_OscConfig+0x2b0>)
 8003db6:	2201      	movs	r2, #1
 8003db8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dba:	f7fe fa3f 	bl	800223c <HAL_GetTick>
 8003dbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dc0:	e008      	b.n	8003dd4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dc2:	f7fe fa3b 	bl	800223c <HAL_GetTick>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	d901      	bls.n	8003dd4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	e1a5      	b.n	8004120 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dd4:	4b46      	ldr	r3, [pc, #280]	; (8003ef0 <HAL_RCC_OscConfig+0x2ac>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0302 	and.w	r3, r3, #2
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d0f0      	beq.n	8003dc2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003de0:	4b43      	ldr	r3, [pc, #268]	; (8003ef0 <HAL_RCC_OscConfig+0x2ac>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	691b      	ldr	r3, [r3, #16]
 8003dec:	00db      	lsls	r3, r3, #3
 8003dee:	4940      	ldr	r1, [pc, #256]	; (8003ef0 <HAL_RCC_OscConfig+0x2ac>)
 8003df0:	4313      	orrs	r3, r2
 8003df2:	600b      	str	r3, [r1, #0]
 8003df4:	e015      	b.n	8003e22 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003df6:	4b3f      	ldr	r3, [pc, #252]	; (8003ef4 <HAL_RCC_OscConfig+0x2b0>)
 8003df8:	2200      	movs	r2, #0
 8003dfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dfc:	f7fe fa1e 	bl	800223c <HAL_GetTick>
 8003e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e02:	e008      	b.n	8003e16 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e04:	f7fe fa1a 	bl	800223c <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	2b02      	cmp	r3, #2
 8003e10:	d901      	bls.n	8003e16 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	e184      	b.n	8004120 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e16:	4b36      	ldr	r3, [pc, #216]	; (8003ef0 <HAL_RCC_OscConfig+0x2ac>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0302 	and.w	r3, r3, #2
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d1f0      	bne.n	8003e04 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0308 	and.w	r3, r3, #8
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d030      	beq.n	8003e90 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	695b      	ldr	r3, [r3, #20]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d016      	beq.n	8003e64 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e36:	4b30      	ldr	r3, [pc, #192]	; (8003ef8 <HAL_RCC_OscConfig+0x2b4>)
 8003e38:	2201      	movs	r2, #1
 8003e3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e3c:	f7fe f9fe 	bl	800223c <HAL_GetTick>
 8003e40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e42:	e008      	b.n	8003e56 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e44:	f7fe f9fa 	bl	800223c <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d901      	bls.n	8003e56 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	e164      	b.n	8004120 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e56:	4b26      	ldr	r3, [pc, #152]	; (8003ef0 <HAL_RCC_OscConfig+0x2ac>)
 8003e58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e5a:	f003 0302 	and.w	r3, r3, #2
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d0f0      	beq.n	8003e44 <HAL_RCC_OscConfig+0x200>
 8003e62:	e015      	b.n	8003e90 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e64:	4b24      	ldr	r3, [pc, #144]	; (8003ef8 <HAL_RCC_OscConfig+0x2b4>)
 8003e66:	2200      	movs	r2, #0
 8003e68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e6a:	f7fe f9e7 	bl	800223c <HAL_GetTick>
 8003e6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e70:	e008      	b.n	8003e84 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e72:	f7fe f9e3 	bl	800223c <HAL_GetTick>
 8003e76:	4602      	mov	r2, r0
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	1ad3      	subs	r3, r2, r3
 8003e7c:	2b02      	cmp	r3, #2
 8003e7e:	d901      	bls.n	8003e84 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003e80:	2303      	movs	r3, #3
 8003e82:	e14d      	b.n	8004120 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e84:	4b1a      	ldr	r3, [pc, #104]	; (8003ef0 <HAL_RCC_OscConfig+0x2ac>)
 8003e86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e88:	f003 0302 	and.w	r3, r3, #2
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d1f0      	bne.n	8003e72 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 0304 	and.w	r3, r3, #4
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	f000 80a0 	beq.w	8003fde <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ea2:	4b13      	ldr	r3, [pc, #76]	; (8003ef0 <HAL_RCC_OscConfig+0x2ac>)
 8003ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d10f      	bne.n	8003ece <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003eae:	2300      	movs	r3, #0
 8003eb0:	60bb      	str	r3, [r7, #8]
 8003eb2:	4b0f      	ldr	r3, [pc, #60]	; (8003ef0 <HAL_RCC_OscConfig+0x2ac>)
 8003eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb6:	4a0e      	ldr	r2, [pc, #56]	; (8003ef0 <HAL_RCC_OscConfig+0x2ac>)
 8003eb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ebc:	6413      	str	r3, [r2, #64]	; 0x40
 8003ebe:	4b0c      	ldr	r3, [pc, #48]	; (8003ef0 <HAL_RCC_OscConfig+0x2ac>)
 8003ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ec6:	60bb      	str	r3, [r7, #8]
 8003ec8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ece:	4b0b      	ldr	r3, [pc, #44]	; (8003efc <HAL_RCC_OscConfig+0x2b8>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d121      	bne.n	8003f1e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003eda:	4b08      	ldr	r3, [pc, #32]	; (8003efc <HAL_RCC_OscConfig+0x2b8>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a07      	ldr	r2, [pc, #28]	; (8003efc <HAL_RCC_OscConfig+0x2b8>)
 8003ee0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ee4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ee6:	f7fe f9a9 	bl	800223c <HAL_GetTick>
 8003eea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eec:	e011      	b.n	8003f12 <HAL_RCC_OscConfig+0x2ce>
 8003eee:	bf00      	nop
 8003ef0:	40023800 	.word	0x40023800
 8003ef4:	42470000 	.word	0x42470000
 8003ef8:	42470e80 	.word	0x42470e80
 8003efc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f00:	f7fe f99c 	bl	800223c <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d901      	bls.n	8003f12 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e106      	b.n	8004120 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f12:	4b85      	ldr	r3, [pc, #532]	; (8004128 <HAL_RCC_OscConfig+0x4e4>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d0f0      	beq.n	8003f00 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d106      	bne.n	8003f34 <HAL_RCC_OscConfig+0x2f0>
 8003f26:	4b81      	ldr	r3, [pc, #516]	; (800412c <HAL_RCC_OscConfig+0x4e8>)
 8003f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f2a:	4a80      	ldr	r2, [pc, #512]	; (800412c <HAL_RCC_OscConfig+0x4e8>)
 8003f2c:	f043 0301 	orr.w	r3, r3, #1
 8003f30:	6713      	str	r3, [r2, #112]	; 0x70
 8003f32:	e01c      	b.n	8003f6e <HAL_RCC_OscConfig+0x32a>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	2b05      	cmp	r3, #5
 8003f3a:	d10c      	bne.n	8003f56 <HAL_RCC_OscConfig+0x312>
 8003f3c:	4b7b      	ldr	r3, [pc, #492]	; (800412c <HAL_RCC_OscConfig+0x4e8>)
 8003f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f40:	4a7a      	ldr	r2, [pc, #488]	; (800412c <HAL_RCC_OscConfig+0x4e8>)
 8003f42:	f043 0304 	orr.w	r3, r3, #4
 8003f46:	6713      	str	r3, [r2, #112]	; 0x70
 8003f48:	4b78      	ldr	r3, [pc, #480]	; (800412c <HAL_RCC_OscConfig+0x4e8>)
 8003f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f4c:	4a77      	ldr	r2, [pc, #476]	; (800412c <HAL_RCC_OscConfig+0x4e8>)
 8003f4e:	f043 0301 	orr.w	r3, r3, #1
 8003f52:	6713      	str	r3, [r2, #112]	; 0x70
 8003f54:	e00b      	b.n	8003f6e <HAL_RCC_OscConfig+0x32a>
 8003f56:	4b75      	ldr	r3, [pc, #468]	; (800412c <HAL_RCC_OscConfig+0x4e8>)
 8003f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f5a:	4a74      	ldr	r2, [pc, #464]	; (800412c <HAL_RCC_OscConfig+0x4e8>)
 8003f5c:	f023 0301 	bic.w	r3, r3, #1
 8003f60:	6713      	str	r3, [r2, #112]	; 0x70
 8003f62:	4b72      	ldr	r3, [pc, #456]	; (800412c <HAL_RCC_OscConfig+0x4e8>)
 8003f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f66:	4a71      	ldr	r2, [pc, #452]	; (800412c <HAL_RCC_OscConfig+0x4e8>)
 8003f68:	f023 0304 	bic.w	r3, r3, #4
 8003f6c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d015      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f76:	f7fe f961 	bl	800223c <HAL_GetTick>
 8003f7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f7c:	e00a      	b.n	8003f94 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f7e:	f7fe f95d 	bl	800223c <HAL_GetTick>
 8003f82:	4602      	mov	r2, r0
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d901      	bls.n	8003f94 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003f90:	2303      	movs	r3, #3
 8003f92:	e0c5      	b.n	8004120 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f94:	4b65      	ldr	r3, [pc, #404]	; (800412c <HAL_RCC_OscConfig+0x4e8>)
 8003f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f98:	f003 0302 	and.w	r3, r3, #2
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d0ee      	beq.n	8003f7e <HAL_RCC_OscConfig+0x33a>
 8003fa0:	e014      	b.n	8003fcc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fa2:	f7fe f94b 	bl	800223c <HAL_GetTick>
 8003fa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fa8:	e00a      	b.n	8003fc0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003faa:	f7fe f947 	bl	800223c <HAL_GetTick>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d901      	bls.n	8003fc0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003fbc:	2303      	movs	r3, #3
 8003fbe:	e0af      	b.n	8004120 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fc0:	4b5a      	ldr	r3, [pc, #360]	; (800412c <HAL_RCC_OscConfig+0x4e8>)
 8003fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fc4:	f003 0302 	and.w	r3, r3, #2
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d1ee      	bne.n	8003faa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003fcc:	7dfb      	ldrb	r3, [r7, #23]
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d105      	bne.n	8003fde <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fd2:	4b56      	ldr	r3, [pc, #344]	; (800412c <HAL_RCC_OscConfig+0x4e8>)
 8003fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd6:	4a55      	ldr	r2, [pc, #340]	; (800412c <HAL_RCC_OscConfig+0x4e8>)
 8003fd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fdc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	699b      	ldr	r3, [r3, #24]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	f000 809b 	beq.w	800411e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003fe8:	4b50      	ldr	r3, [pc, #320]	; (800412c <HAL_RCC_OscConfig+0x4e8>)
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	f003 030c 	and.w	r3, r3, #12
 8003ff0:	2b08      	cmp	r3, #8
 8003ff2:	d05c      	beq.n	80040ae <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	699b      	ldr	r3, [r3, #24]
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	d141      	bne.n	8004080 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ffc:	4b4c      	ldr	r3, [pc, #304]	; (8004130 <HAL_RCC_OscConfig+0x4ec>)
 8003ffe:	2200      	movs	r2, #0
 8004000:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004002:	f7fe f91b 	bl	800223c <HAL_GetTick>
 8004006:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004008:	e008      	b.n	800401c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800400a:	f7fe f917 	bl	800223c <HAL_GetTick>
 800400e:	4602      	mov	r2, r0
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	2b02      	cmp	r3, #2
 8004016:	d901      	bls.n	800401c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004018:	2303      	movs	r3, #3
 800401a:	e081      	b.n	8004120 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800401c:	4b43      	ldr	r3, [pc, #268]	; (800412c <HAL_RCC_OscConfig+0x4e8>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004024:	2b00      	cmp	r3, #0
 8004026:	d1f0      	bne.n	800400a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	69da      	ldr	r2, [r3, #28]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6a1b      	ldr	r3, [r3, #32]
 8004030:	431a      	orrs	r2, r3
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004036:	019b      	lsls	r3, r3, #6
 8004038:	431a      	orrs	r2, r3
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800403e:	085b      	lsrs	r3, r3, #1
 8004040:	3b01      	subs	r3, #1
 8004042:	041b      	lsls	r3, r3, #16
 8004044:	431a      	orrs	r2, r3
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800404a:	061b      	lsls	r3, r3, #24
 800404c:	4937      	ldr	r1, [pc, #220]	; (800412c <HAL_RCC_OscConfig+0x4e8>)
 800404e:	4313      	orrs	r3, r2
 8004050:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004052:	4b37      	ldr	r3, [pc, #220]	; (8004130 <HAL_RCC_OscConfig+0x4ec>)
 8004054:	2201      	movs	r2, #1
 8004056:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004058:	f7fe f8f0 	bl	800223c <HAL_GetTick>
 800405c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800405e:	e008      	b.n	8004072 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004060:	f7fe f8ec 	bl	800223c <HAL_GetTick>
 8004064:	4602      	mov	r2, r0
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	2b02      	cmp	r3, #2
 800406c:	d901      	bls.n	8004072 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e056      	b.n	8004120 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004072:	4b2e      	ldr	r3, [pc, #184]	; (800412c <HAL_RCC_OscConfig+0x4e8>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d0f0      	beq.n	8004060 <HAL_RCC_OscConfig+0x41c>
 800407e:	e04e      	b.n	800411e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004080:	4b2b      	ldr	r3, [pc, #172]	; (8004130 <HAL_RCC_OscConfig+0x4ec>)
 8004082:	2200      	movs	r2, #0
 8004084:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004086:	f7fe f8d9 	bl	800223c <HAL_GetTick>
 800408a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800408c:	e008      	b.n	80040a0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800408e:	f7fe f8d5 	bl	800223c <HAL_GetTick>
 8004092:	4602      	mov	r2, r0
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	1ad3      	subs	r3, r2, r3
 8004098:	2b02      	cmp	r3, #2
 800409a:	d901      	bls.n	80040a0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800409c:	2303      	movs	r3, #3
 800409e:	e03f      	b.n	8004120 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040a0:	4b22      	ldr	r3, [pc, #136]	; (800412c <HAL_RCC_OscConfig+0x4e8>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d1f0      	bne.n	800408e <HAL_RCC_OscConfig+0x44a>
 80040ac:	e037      	b.n	800411e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	699b      	ldr	r3, [r3, #24]
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d101      	bne.n	80040ba <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e032      	b.n	8004120 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80040ba:	4b1c      	ldr	r3, [pc, #112]	; (800412c <HAL_RCC_OscConfig+0x4e8>)
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	699b      	ldr	r3, [r3, #24]
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d028      	beq.n	800411a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d121      	bne.n	800411a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d11a      	bne.n	800411a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040e4:	68fa      	ldr	r2, [r7, #12]
 80040e6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80040ea:	4013      	ands	r3, r2
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80040f0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d111      	bne.n	800411a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004100:	085b      	lsrs	r3, r3, #1
 8004102:	3b01      	subs	r3, #1
 8004104:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004106:	429a      	cmp	r2, r3
 8004108:	d107      	bne.n	800411a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004114:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004116:	429a      	cmp	r2, r3
 8004118:	d001      	beq.n	800411e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e000      	b.n	8004120 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800411e:	2300      	movs	r3, #0
}
 8004120:	4618      	mov	r0, r3
 8004122:	3718      	adds	r7, #24
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}
 8004128:	40007000 	.word	0x40007000
 800412c:	40023800 	.word	0x40023800
 8004130:	42470060 	.word	0x42470060

08004134 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b084      	sub	sp, #16
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d101      	bne.n	8004148 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e0cc      	b.n	80042e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004148:	4b68      	ldr	r3, [pc, #416]	; (80042ec <HAL_RCC_ClockConfig+0x1b8>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 030f 	and.w	r3, r3, #15
 8004150:	683a      	ldr	r2, [r7, #0]
 8004152:	429a      	cmp	r2, r3
 8004154:	d90c      	bls.n	8004170 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004156:	4b65      	ldr	r3, [pc, #404]	; (80042ec <HAL_RCC_ClockConfig+0x1b8>)
 8004158:	683a      	ldr	r2, [r7, #0]
 800415a:	b2d2      	uxtb	r2, r2
 800415c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800415e:	4b63      	ldr	r3, [pc, #396]	; (80042ec <HAL_RCC_ClockConfig+0x1b8>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 030f 	and.w	r3, r3, #15
 8004166:	683a      	ldr	r2, [r7, #0]
 8004168:	429a      	cmp	r2, r3
 800416a:	d001      	beq.n	8004170 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e0b8      	b.n	80042e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0302 	and.w	r3, r3, #2
 8004178:	2b00      	cmp	r3, #0
 800417a:	d020      	beq.n	80041be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0304 	and.w	r3, r3, #4
 8004184:	2b00      	cmp	r3, #0
 8004186:	d005      	beq.n	8004194 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004188:	4b59      	ldr	r3, [pc, #356]	; (80042f0 <HAL_RCC_ClockConfig+0x1bc>)
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	4a58      	ldr	r2, [pc, #352]	; (80042f0 <HAL_RCC_ClockConfig+0x1bc>)
 800418e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004192:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0308 	and.w	r3, r3, #8
 800419c:	2b00      	cmp	r3, #0
 800419e:	d005      	beq.n	80041ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041a0:	4b53      	ldr	r3, [pc, #332]	; (80042f0 <HAL_RCC_ClockConfig+0x1bc>)
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	4a52      	ldr	r2, [pc, #328]	; (80042f0 <HAL_RCC_ClockConfig+0x1bc>)
 80041a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80041aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041ac:	4b50      	ldr	r3, [pc, #320]	; (80042f0 <HAL_RCC_ClockConfig+0x1bc>)
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	494d      	ldr	r1, [pc, #308]	; (80042f0 <HAL_RCC_ClockConfig+0x1bc>)
 80041ba:	4313      	orrs	r3, r2
 80041bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0301 	and.w	r3, r3, #1
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d044      	beq.n	8004254 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d107      	bne.n	80041e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041d2:	4b47      	ldr	r3, [pc, #284]	; (80042f0 <HAL_RCC_ClockConfig+0x1bc>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d119      	bne.n	8004212 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e07f      	b.n	80042e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	d003      	beq.n	80041f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041ee:	2b03      	cmp	r3, #3
 80041f0:	d107      	bne.n	8004202 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041f2:	4b3f      	ldr	r3, [pc, #252]	; (80042f0 <HAL_RCC_ClockConfig+0x1bc>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d109      	bne.n	8004212 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e06f      	b.n	80042e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004202:	4b3b      	ldr	r3, [pc, #236]	; (80042f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0302 	and.w	r3, r3, #2
 800420a:	2b00      	cmp	r3, #0
 800420c:	d101      	bne.n	8004212 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e067      	b.n	80042e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004212:	4b37      	ldr	r3, [pc, #220]	; (80042f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	f023 0203 	bic.w	r2, r3, #3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	4934      	ldr	r1, [pc, #208]	; (80042f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004220:	4313      	orrs	r3, r2
 8004222:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004224:	f7fe f80a 	bl	800223c <HAL_GetTick>
 8004228:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800422a:	e00a      	b.n	8004242 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800422c:	f7fe f806 	bl	800223c <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	f241 3288 	movw	r2, #5000	; 0x1388
 800423a:	4293      	cmp	r3, r2
 800423c:	d901      	bls.n	8004242 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e04f      	b.n	80042e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004242:	4b2b      	ldr	r3, [pc, #172]	; (80042f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	f003 020c 	and.w	r2, r3, #12
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	429a      	cmp	r2, r3
 8004252:	d1eb      	bne.n	800422c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004254:	4b25      	ldr	r3, [pc, #148]	; (80042ec <HAL_RCC_ClockConfig+0x1b8>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 030f 	and.w	r3, r3, #15
 800425c:	683a      	ldr	r2, [r7, #0]
 800425e:	429a      	cmp	r2, r3
 8004260:	d20c      	bcs.n	800427c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004262:	4b22      	ldr	r3, [pc, #136]	; (80042ec <HAL_RCC_ClockConfig+0x1b8>)
 8004264:	683a      	ldr	r2, [r7, #0]
 8004266:	b2d2      	uxtb	r2, r2
 8004268:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800426a:	4b20      	ldr	r3, [pc, #128]	; (80042ec <HAL_RCC_ClockConfig+0x1b8>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 030f 	and.w	r3, r3, #15
 8004272:	683a      	ldr	r2, [r7, #0]
 8004274:	429a      	cmp	r2, r3
 8004276:	d001      	beq.n	800427c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	e032      	b.n	80042e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 0304 	and.w	r3, r3, #4
 8004284:	2b00      	cmp	r3, #0
 8004286:	d008      	beq.n	800429a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004288:	4b19      	ldr	r3, [pc, #100]	; (80042f0 <HAL_RCC_ClockConfig+0x1bc>)
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	4916      	ldr	r1, [pc, #88]	; (80042f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004296:	4313      	orrs	r3, r2
 8004298:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0308 	and.w	r3, r3, #8
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d009      	beq.n	80042ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042a6:	4b12      	ldr	r3, [pc, #72]	; (80042f0 <HAL_RCC_ClockConfig+0x1bc>)
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	691b      	ldr	r3, [r3, #16]
 80042b2:	00db      	lsls	r3, r3, #3
 80042b4:	490e      	ldr	r1, [pc, #56]	; (80042f0 <HAL_RCC_ClockConfig+0x1bc>)
 80042b6:	4313      	orrs	r3, r2
 80042b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80042ba:	f000 f821 	bl	8004300 <HAL_RCC_GetSysClockFreq>
 80042be:	4602      	mov	r2, r0
 80042c0:	4b0b      	ldr	r3, [pc, #44]	; (80042f0 <HAL_RCC_ClockConfig+0x1bc>)
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	091b      	lsrs	r3, r3, #4
 80042c6:	f003 030f 	and.w	r3, r3, #15
 80042ca:	490a      	ldr	r1, [pc, #40]	; (80042f4 <HAL_RCC_ClockConfig+0x1c0>)
 80042cc:	5ccb      	ldrb	r3, [r1, r3]
 80042ce:	fa22 f303 	lsr.w	r3, r2, r3
 80042d2:	4a09      	ldr	r2, [pc, #36]	; (80042f8 <HAL_RCC_ClockConfig+0x1c4>)
 80042d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80042d6:	4b09      	ldr	r3, [pc, #36]	; (80042fc <HAL_RCC_ClockConfig+0x1c8>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4618      	mov	r0, r3
 80042dc:	f7fd ff6a 	bl	80021b4 <HAL_InitTick>

  return HAL_OK;
 80042e0:	2300      	movs	r3, #0
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3710      	adds	r7, #16
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	40023c00 	.word	0x40023c00
 80042f0:	40023800 	.word	0x40023800
 80042f4:	08005cec 	.word	0x08005cec
 80042f8:	20000000 	.word	0x20000000
 80042fc:	20000004 	.word	0x20000004

08004300 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004300:	b5b0      	push	{r4, r5, r7, lr}
 8004302:	b084      	sub	sp, #16
 8004304:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004306:	2100      	movs	r1, #0
 8004308:	6079      	str	r1, [r7, #4]
 800430a:	2100      	movs	r1, #0
 800430c:	60f9      	str	r1, [r7, #12]
 800430e:	2100      	movs	r1, #0
 8004310:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004312:	2100      	movs	r1, #0
 8004314:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004316:	4952      	ldr	r1, [pc, #328]	; (8004460 <HAL_RCC_GetSysClockFreq+0x160>)
 8004318:	6889      	ldr	r1, [r1, #8]
 800431a:	f001 010c 	and.w	r1, r1, #12
 800431e:	2908      	cmp	r1, #8
 8004320:	d00d      	beq.n	800433e <HAL_RCC_GetSysClockFreq+0x3e>
 8004322:	2908      	cmp	r1, #8
 8004324:	f200 8094 	bhi.w	8004450 <HAL_RCC_GetSysClockFreq+0x150>
 8004328:	2900      	cmp	r1, #0
 800432a:	d002      	beq.n	8004332 <HAL_RCC_GetSysClockFreq+0x32>
 800432c:	2904      	cmp	r1, #4
 800432e:	d003      	beq.n	8004338 <HAL_RCC_GetSysClockFreq+0x38>
 8004330:	e08e      	b.n	8004450 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004332:	4b4c      	ldr	r3, [pc, #304]	; (8004464 <HAL_RCC_GetSysClockFreq+0x164>)
 8004334:	60bb      	str	r3, [r7, #8]
       break;
 8004336:	e08e      	b.n	8004456 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004338:	4b4b      	ldr	r3, [pc, #300]	; (8004468 <HAL_RCC_GetSysClockFreq+0x168>)
 800433a:	60bb      	str	r3, [r7, #8]
      break;
 800433c:	e08b      	b.n	8004456 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800433e:	4948      	ldr	r1, [pc, #288]	; (8004460 <HAL_RCC_GetSysClockFreq+0x160>)
 8004340:	6849      	ldr	r1, [r1, #4]
 8004342:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8004346:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004348:	4945      	ldr	r1, [pc, #276]	; (8004460 <HAL_RCC_GetSysClockFreq+0x160>)
 800434a:	6849      	ldr	r1, [r1, #4]
 800434c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004350:	2900      	cmp	r1, #0
 8004352:	d024      	beq.n	800439e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004354:	4942      	ldr	r1, [pc, #264]	; (8004460 <HAL_RCC_GetSysClockFreq+0x160>)
 8004356:	6849      	ldr	r1, [r1, #4]
 8004358:	0989      	lsrs	r1, r1, #6
 800435a:	4608      	mov	r0, r1
 800435c:	f04f 0100 	mov.w	r1, #0
 8004360:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004364:	f04f 0500 	mov.w	r5, #0
 8004368:	ea00 0204 	and.w	r2, r0, r4
 800436c:	ea01 0305 	and.w	r3, r1, r5
 8004370:	493d      	ldr	r1, [pc, #244]	; (8004468 <HAL_RCC_GetSysClockFreq+0x168>)
 8004372:	fb01 f003 	mul.w	r0, r1, r3
 8004376:	2100      	movs	r1, #0
 8004378:	fb01 f102 	mul.w	r1, r1, r2
 800437c:	1844      	adds	r4, r0, r1
 800437e:	493a      	ldr	r1, [pc, #232]	; (8004468 <HAL_RCC_GetSysClockFreq+0x168>)
 8004380:	fba2 0101 	umull	r0, r1, r2, r1
 8004384:	1863      	adds	r3, r4, r1
 8004386:	4619      	mov	r1, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	461a      	mov	r2, r3
 800438c:	f04f 0300 	mov.w	r3, #0
 8004390:	f7fb ff2c 	bl	80001ec <__aeabi_uldivmod>
 8004394:	4602      	mov	r2, r0
 8004396:	460b      	mov	r3, r1
 8004398:	4613      	mov	r3, r2
 800439a:	60fb      	str	r3, [r7, #12]
 800439c:	e04a      	b.n	8004434 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800439e:	4b30      	ldr	r3, [pc, #192]	; (8004460 <HAL_RCC_GetSysClockFreq+0x160>)
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	099b      	lsrs	r3, r3, #6
 80043a4:	461a      	mov	r2, r3
 80043a6:	f04f 0300 	mov.w	r3, #0
 80043aa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80043ae:	f04f 0100 	mov.w	r1, #0
 80043b2:	ea02 0400 	and.w	r4, r2, r0
 80043b6:	ea03 0501 	and.w	r5, r3, r1
 80043ba:	4620      	mov	r0, r4
 80043bc:	4629      	mov	r1, r5
 80043be:	f04f 0200 	mov.w	r2, #0
 80043c2:	f04f 0300 	mov.w	r3, #0
 80043c6:	014b      	lsls	r3, r1, #5
 80043c8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80043cc:	0142      	lsls	r2, r0, #5
 80043ce:	4610      	mov	r0, r2
 80043d0:	4619      	mov	r1, r3
 80043d2:	1b00      	subs	r0, r0, r4
 80043d4:	eb61 0105 	sbc.w	r1, r1, r5
 80043d8:	f04f 0200 	mov.w	r2, #0
 80043dc:	f04f 0300 	mov.w	r3, #0
 80043e0:	018b      	lsls	r3, r1, #6
 80043e2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80043e6:	0182      	lsls	r2, r0, #6
 80043e8:	1a12      	subs	r2, r2, r0
 80043ea:	eb63 0301 	sbc.w	r3, r3, r1
 80043ee:	f04f 0000 	mov.w	r0, #0
 80043f2:	f04f 0100 	mov.w	r1, #0
 80043f6:	00d9      	lsls	r1, r3, #3
 80043f8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80043fc:	00d0      	lsls	r0, r2, #3
 80043fe:	4602      	mov	r2, r0
 8004400:	460b      	mov	r3, r1
 8004402:	1912      	adds	r2, r2, r4
 8004404:	eb45 0303 	adc.w	r3, r5, r3
 8004408:	f04f 0000 	mov.w	r0, #0
 800440c:	f04f 0100 	mov.w	r1, #0
 8004410:	0299      	lsls	r1, r3, #10
 8004412:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004416:	0290      	lsls	r0, r2, #10
 8004418:	4602      	mov	r2, r0
 800441a:	460b      	mov	r3, r1
 800441c:	4610      	mov	r0, r2
 800441e:	4619      	mov	r1, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	461a      	mov	r2, r3
 8004424:	f04f 0300 	mov.w	r3, #0
 8004428:	f7fb fee0 	bl	80001ec <__aeabi_uldivmod>
 800442c:	4602      	mov	r2, r0
 800442e:	460b      	mov	r3, r1
 8004430:	4613      	mov	r3, r2
 8004432:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004434:	4b0a      	ldr	r3, [pc, #40]	; (8004460 <HAL_RCC_GetSysClockFreq+0x160>)
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	0c1b      	lsrs	r3, r3, #16
 800443a:	f003 0303 	and.w	r3, r3, #3
 800443e:	3301      	adds	r3, #1
 8004440:	005b      	lsls	r3, r3, #1
 8004442:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004444:	68fa      	ldr	r2, [r7, #12]
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	fbb2 f3f3 	udiv	r3, r2, r3
 800444c:	60bb      	str	r3, [r7, #8]
      break;
 800444e:	e002      	b.n	8004456 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004450:	4b04      	ldr	r3, [pc, #16]	; (8004464 <HAL_RCC_GetSysClockFreq+0x164>)
 8004452:	60bb      	str	r3, [r7, #8]
      break;
 8004454:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004456:	68bb      	ldr	r3, [r7, #8]
}
 8004458:	4618      	mov	r0, r3
 800445a:	3710      	adds	r7, #16
 800445c:	46bd      	mov	sp, r7
 800445e:	bdb0      	pop	{r4, r5, r7, pc}
 8004460:	40023800 	.word	0x40023800
 8004464:	00f42400 	.word	0x00f42400
 8004468:	00b71b00 	.word	0x00b71b00

0800446c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800446c:	b480      	push	{r7}
 800446e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004470:	4b03      	ldr	r3, [pc, #12]	; (8004480 <HAL_RCC_GetHCLKFreq+0x14>)
 8004472:	681b      	ldr	r3, [r3, #0]
}
 8004474:	4618      	mov	r0, r3
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr
 800447e:	bf00      	nop
 8004480:	20000000 	.word	0x20000000

08004484 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004488:	f7ff fff0 	bl	800446c <HAL_RCC_GetHCLKFreq>
 800448c:	4602      	mov	r2, r0
 800448e:	4b05      	ldr	r3, [pc, #20]	; (80044a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	0a9b      	lsrs	r3, r3, #10
 8004494:	f003 0307 	and.w	r3, r3, #7
 8004498:	4903      	ldr	r1, [pc, #12]	; (80044a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800449a:	5ccb      	ldrb	r3, [r1, r3]
 800449c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	bd80      	pop	{r7, pc}
 80044a4:	40023800 	.word	0x40023800
 80044a8:	08005cfc 	.word	0x08005cfc

080044ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80044b0:	f7ff ffdc 	bl	800446c <HAL_RCC_GetHCLKFreq>
 80044b4:	4602      	mov	r2, r0
 80044b6:	4b05      	ldr	r3, [pc, #20]	; (80044cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	0b5b      	lsrs	r3, r3, #13
 80044bc:	f003 0307 	and.w	r3, r3, #7
 80044c0:	4903      	ldr	r1, [pc, #12]	; (80044d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80044c2:	5ccb      	ldrb	r3, [r1, r3]
 80044c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	bd80      	pop	{r7, pc}
 80044cc:	40023800 	.word	0x40023800
 80044d0:	08005cfc 	.word	0x08005cfc

080044d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b082      	sub	sp, #8
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d101      	bne.n	80044e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e07b      	b.n	80045de <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d108      	bne.n	8004500 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044f6:	d009      	beq.n	800450c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	61da      	str	r2, [r3, #28]
 80044fe:	e005      	b.n	800450c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004518:	b2db      	uxtb	r3, r3
 800451a:	2b00      	cmp	r3, #0
 800451c:	d106      	bne.n	800452c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f7fd f9ce 	bl	80018c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2202      	movs	r2, #2
 8004530:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004542:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004554:	431a      	orrs	r2, r3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	68db      	ldr	r3, [r3, #12]
 800455a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800455e:	431a      	orrs	r2, r3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	691b      	ldr	r3, [r3, #16]
 8004564:	f003 0302 	and.w	r3, r3, #2
 8004568:	431a      	orrs	r2, r3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	695b      	ldr	r3, [r3, #20]
 800456e:	f003 0301 	and.w	r3, r3, #1
 8004572:	431a      	orrs	r2, r3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	699b      	ldr	r3, [r3, #24]
 8004578:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800457c:	431a      	orrs	r2, r3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	69db      	ldr	r3, [r3, #28]
 8004582:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004586:	431a      	orrs	r2, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a1b      	ldr	r3, [r3, #32]
 800458c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004590:	ea42 0103 	orr.w	r1, r2, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004598:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	430a      	orrs	r2, r1
 80045a2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	699b      	ldr	r3, [r3, #24]
 80045a8:	0c1b      	lsrs	r3, r3, #16
 80045aa:	f003 0104 	and.w	r1, r3, #4
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b2:	f003 0210 	and.w	r2, r3, #16
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	430a      	orrs	r2, r1
 80045bc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	69da      	ldr	r2, [r3, #28]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045cc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80045dc:	2300      	movs	r3, #0
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3708      	adds	r7, #8
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}

080045e6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80045e6:	b580      	push	{r7, lr}
 80045e8:	b082      	sub	sp, #8
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d101      	bne.n	80045f8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	e041      	b.n	800467c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	2b00      	cmp	r3, #0
 8004602:	d106      	bne.n	8004612 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f7fd f9a3 	bl	8001958 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2202      	movs	r2, #2
 8004616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	3304      	adds	r3, #4
 8004622:	4619      	mov	r1, r3
 8004624:	4610      	mov	r0, r2
 8004626:	f000 f8ef 	bl	8004808 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2201      	movs	r2, #1
 800462e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2201      	movs	r2, #1
 8004636:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2201      	movs	r2, #1
 800463e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2201      	movs	r2, #1
 8004646:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2201      	movs	r2, #1
 800464e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2201      	movs	r2, #1
 8004656:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2201      	movs	r2, #1
 800465e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2201      	movs	r2, #1
 8004666:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2201      	movs	r2, #1
 800466e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2201      	movs	r2, #1
 8004676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800467a:	2300      	movs	r3, #0
}
 800467c:	4618      	mov	r0, r3
 800467e:	3708      	adds	r7, #8
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}

08004684 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b086      	sub	sp, #24
 8004688:	af00      	add	r7, sp, #0
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004690:	2300      	movs	r3, #0
 8004692:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800469a:	2b01      	cmp	r3, #1
 800469c:	d101      	bne.n	80046a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800469e:	2302      	movs	r3, #2
 80046a0:	e0ae      	b.n	8004800 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2201      	movs	r2, #1
 80046a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2b0c      	cmp	r3, #12
 80046ae:	f200 809f 	bhi.w	80047f0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80046b2:	a201      	add	r2, pc, #4	; (adr r2, 80046b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80046b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046b8:	080046ed 	.word	0x080046ed
 80046bc:	080047f1 	.word	0x080047f1
 80046c0:	080047f1 	.word	0x080047f1
 80046c4:	080047f1 	.word	0x080047f1
 80046c8:	0800472d 	.word	0x0800472d
 80046cc:	080047f1 	.word	0x080047f1
 80046d0:	080047f1 	.word	0x080047f1
 80046d4:	080047f1 	.word	0x080047f1
 80046d8:	0800476f 	.word	0x0800476f
 80046dc:	080047f1 	.word	0x080047f1
 80046e0:	080047f1 	.word	0x080047f1
 80046e4:	080047f1 	.word	0x080047f1
 80046e8:	080047af 	.word	0x080047af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	68b9      	ldr	r1, [r7, #8]
 80046f2:	4618      	mov	r0, r3
 80046f4:	f000 f928 	bl	8004948 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	699a      	ldr	r2, [r3, #24]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f042 0208 	orr.w	r2, r2, #8
 8004706:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	699a      	ldr	r2, [r3, #24]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f022 0204 	bic.w	r2, r2, #4
 8004716:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	6999      	ldr	r1, [r3, #24]
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	691a      	ldr	r2, [r3, #16]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	430a      	orrs	r2, r1
 8004728:	619a      	str	r2, [r3, #24]
      break;
 800472a:	e064      	b.n	80047f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	68b9      	ldr	r1, [r7, #8]
 8004732:	4618      	mov	r0, r3
 8004734:	f000 f978 	bl	8004a28 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	699a      	ldr	r2, [r3, #24]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004746:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	699a      	ldr	r2, [r3, #24]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004756:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	6999      	ldr	r1, [r3, #24]
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	691b      	ldr	r3, [r3, #16]
 8004762:	021a      	lsls	r2, r3, #8
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	430a      	orrs	r2, r1
 800476a:	619a      	str	r2, [r3, #24]
      break;
 800476c:	e043      	b.n	80047f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	68b9      	ldr	r1, [r7, #8]
 8004774:	4618      	mov	r0, r3
 8004776:	f000 f9cd 	bl	8004b14 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	69da      	ldr	r2, [r3, #28]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f042 0208 	orr.w	r2, r2, #8
 8004788:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	69da      	ldr	r2, [r3, #28]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f022 0204 	bic.w	r2, r2, #4
 8004798:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	69d9      	ldr	r1, [r3, #28]
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	691a      	ldr	r2, [r3, #16]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	430a      	orrs	r2, r1
 80047aa:	61da      	str	r2, [r3, #28]
      break;
 80047ac:	e023      	b.n	80047f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	68b9      	ldr	r1, [r7, #8]
 80047b4:	4618      	mov	r0, r3
 80047b6:	f000 fa21 	bl	8004bfc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	69da      	ldr	r2, [r3, #28]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	69da      	ldr	r2, [r3, #28]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	69d9      	ldr	r1, [r3, #28]
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	691b      	ldr	r3, [r3, #16]
 80047e4:	021a      	lsls	r2, r3, #8
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	430a      	orrs	r2, r1
 80047ec:	61da      	str	r2, [r3, #28]
      break;
 80047ee:	e002      	b.n	80047f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	75fb      	strb	r3, [r7, #23]
      break;
 80047f4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80047fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004800:	4618      	mov	r0, r3
 8004802:	3718      	adds	r7, #24
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}

08004808 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004808:	b480      	push	{r7}
 800480a:	b085      	sub	sp, #20
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	4a40      	ldr	r2, [pc, #256]	; (800491c <TIM_Base_SetConfig+0x114>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d013      	beq.n	8004848 <TIM_Base_SetConfig+0x40>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004826:	d00f      	beq.n	8004848 <TIM_Base_SetConfig+0x40>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4a3d      	ldr	r2, [pc, #244]	; (8004920 <TIM_Base_SetConfig+0x118>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d00b      	beq.n	8004848 <TIM_Base_SetConfig+0x40>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	4a3c      	ldr	r2, [pc, #240]	; (8004924 <TIM_Base_SetConfig+0x11c>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d007      	beq.n	8004848 <TIM_Base_SetConfig+0x40>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4a3b      	ldr	r2, [pc, #236]	; (8004928 <TIM_Base_SetConfig+0x120>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d003      	beq.n	8004848 <TIM_Base_SetConfig+0x40>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4a3a      	ldr	r2, [pc, #232]	; (800492c <TIM_Base_SetConfig+0x124>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d108      	bne.n	800485a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800484e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	68fa      	ldr	r2, [r7, #12]
 8004856:	4313      	orrs	r3, r2
 8004858:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a2f      	ldr	r2, [pc, #188]	; (800491c <TIM_Base_SetConfig+0x114>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d02b      	beq.n	80048ba <TIM_Base_SetConfig+0xb2>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004868:	d027      	beq.n	80048ba <TIM_Base_SetConfig+0xb2>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a2c      	ldr	r2, [pc, #176]	; (8004920 <TIM_Base_SetConfig+0x118>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d023      	beq.n	80048ba <TIM_Base_SetConfig+0xb2>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4a2b      	ldr	r2, [pc, #172]	; (8004924 <TIM_Base_SetConfig+0x11c>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d01f      	beq.n	80048ba <TIM_Base_SetConfig+0xb2>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a2a      	ldr	r2, [pc, #168]	; (8004928 <TIM_Base_SetConfig+0x120>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d01b      	beq.n	80048ba <TIM_Base_SetConfig+0xb2>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a29      	ldr	r2, [pc, #164]	; (800492c <TIM_Base_SetConfig+0x124>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d017      	beq.n	80048ba <TIM_Base_SetConfig+0xb2>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4a28      	ldr	r2, [pc, #160]	; (8004930 <TIM_Base_SetConfig+0x128>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d013      	beq.n	80048ba <TIM_Base_SetConfig+0xb2>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a27      	ldr	r2, [pc, #156]	; (8004934 <TIM_Base_SetConfig+0x12c>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d00f      	beq.n	80048ba <TIM_Base_SetConfig+0xb2>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a26      	ldr	r2, [pc, #152]	; (8004938 <TIM_Base_SetConfig+0x130>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d00b      	beq.n	80048ba <TIM_Base_SetConfig+0xb2>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a25      	ldr	r2, [pc, #148]	; (800493c <TIM_Base_SetConfig+0x134>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d007      	beq.n	80048ba <TIM_Base_SetConfig+0xb2>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a24      	ldr	r2, [pc, #144]	; (8004940 <TIM_Base_SetConfig+0x138>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d003      	beq.n	80048ba <TIM_Base_SetConfig+0xb2>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4a23      	ldr	r2, [pc, #140]	; (8004944 <TIM_Base_SetConfig+0x13c>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d108      	bne.n	80048cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	68db      	ldr	r3, [r3, #12]
 80048c6:	68fa      	ldr	r2, [r7, #12]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	695b      	ldr	r3, [r3, #20]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	68fa      	ldr	r2, [r7, #12]
 80048de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	689a      	ldr	r2, [r3, #8]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	4a0a      	ldr	r2, [pc, #40]	; (800491c <TIM_Base_SetConfig+0x114>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d003      	beq.n	8004900 <TIM_Base_SetConfig+0xf8>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	4a0c      	ldr	r2, [pc, #48]	; (800492c <TIM_Base_SetConfig+0x124>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d103      	bne.n	8004908 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	691a      	ldr	r2, [r3, #16]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	615a      	str	r2, [r3, #20]
}
 800490e:	bf00      	nop
 8004910:	3714      	adds	r7, #20
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr
 800491a:	bf00      	nop
 800491c:	40010000 	.word	0x40010000
 8004920:	40000400 	.word	0x40000400
 8004924:	40000800 	.word	0x40000800
 8004928:	40000c00 	.word	0x40000c00
 800492c:	40010400 	.word	0x40010400
 8004930:	40014000 	.word	0x40014000
 8004934:	40014400 	.word	0x40014400
 8004938:	40014800 	.word	0x40014800
 800493c:	40001800 	.word	0x40001800
 8004940:	40001c00 	.word	0x40001c00
 8004944:	40002000 	.word	0x40002000

08004948 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004948:	b480      	push	{r7}
 800494a:	b087      	sub	sp, #28
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6a1b      	ldr	r3, [r3, #32]
 8004956:	f023 0201 	bic.w	r2, r3, #1
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6a1b      	ldr	r3, [r3, #32]
 8004962:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	699b      	ldr	r3, [r3, #24]
 800496e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004976:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f023 0303 	bic.w	r3, r3, #3
 800497e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	68fa      	ldr	r2, [r7, #12]
 8004986:	4313      	orrs	r3, r2
 8004988:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	f023 0302 	bic.w	r3, r3, #2
 8004990:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	697a      	ldr	r2, [r7, #20]
 8004998:	4313      	orrs	r3, r2
 800499a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	4a20      	ldr	r2, [pc, #128]	; (8004a20 <TIM_OC1_SetConfig+0xd8>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d003      	beq.n	80049ac <TIM_OC1_SetConfig+0x64>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4a1f      	ldr	r2, [pc, #124]	; (8004a24 <TIM_OC1_SetConfig+0xdc>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d10c      	bne.n	80049c6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	f023 0308 	bic.w	r3, r3, #8
 80049b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	697a      	ldr	r2, [r7, #20]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	f023 0304 	bic.w	r3, r3, #4
 80049c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	4a15      	ldr	r2, [pc, #84]	; (8004a20 <TIM_OC1_SetConfig+0xd8>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d003      	beq.n	80049d6 <TIM_OC1_SetConfig+0x8e>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a14      	ldr	r2, [pc, #80]	; (8004a24 <TIM_OC1_SetConfig+0xdc>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d111      	bne.n	80049fa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80049e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	695b      	ldr	r3, [r3, #20]
 80049ea:	693a      	ldr	r2, [r7, #16]
 80049ec:	4313      	orrs	r3, r2
 80049ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	699b      	ldr	r3, [r3, #24]
 80049f4:	693a      	ldr	r2, [r7, #16]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	693a      	ldr	r2, [r7, #16]
 80049fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	68fa      	ldr	r2, [r7, #12]
 8004a04:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	685a      	ldr	r2, [r3, #4]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	697a      	ldr	r2, [r7, #20]
 8004a12:	621a      	str	r2, [r3, #32]
}
 8004a14:	bf00      	nop
 8004a16:	371c      	adds	r7, #28
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr
 8004a20:	40010000 	.word	0x40010000
 8004a24:	40010400 	.word	0x40010400

08004a28 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b087      	sub	sp, #28
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6a1b      	ldr	r3, [r3, #32]
 8004a36:	f023 0210 	bic.w	r2, r3, #16
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a1b      	ldr	r3, [r3, #32]
 8004a42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	699b      	ldr	r3, [r3, #24]
 8004a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	021b      	lsls	r3, r3, #8
 8004a66:	68fa      	ldr	r2, [r7, #12]
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	f023 0320 	bic.w	r3, r3, #32
 8004a72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	011b      	lsls	r3, r3, #4
 8004a7a:	697a      	ldr	r2, [r7, #20]
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	4a22      	ldr	r2, [pc, #136]	; (8004b0c <TIM_OC2_SetConfig+0xe4>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d003      	beq.n	8004a90 <TIM_OC2_SetConfig+0x68>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	4a21      	ldr	r2, [pc, #132]	; (8004b10 <TIM_OC2_SetConfig+0xe8>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d10d      	bne.n	8004aac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	011b      	lsls	r3, r3, #4
 8004a9e:	697a      	ldr	r2, [r7, #20]
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004aaa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	4a17      	ldr	r2, [pc, #92]	; (8004b0c <TIM_OC2_SetConfig+0xe4>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d003      	beq.n	8004abc <TIM_OC2_SetConfig+0x94>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	4a16      	ldr	r2, [pc, #88]	; (8004b10 <TIM_OC2_SetConfig+0xe8>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d113      	bne.n	8004ae4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ac2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004aca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	695b      	ldr	r3, [r3, #20]
 8004ad0:	009b      	lsls	r3, r3, #2
 8004ad2:	693a      	ldr	r2, [r7, #16]
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	699b      	ldr	r3, [r3, #24]
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	693a      	ldr	r2, [r7, #16]
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	693a      	ldr	r2, [r7, #16]
 8004ae8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	68fa      	ldr	r2, [r7, #12]
 8004aee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	685a      	ldr	r2, [r3, #4]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	697a      	ldr	r2, [r7, #20]
 8004afc:	621a      	str	r2, [r3, #32]
}
 8004afe:	bf00      	nop
 8004b00:	371c      	adds	r7, #28
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr
 8004b0a:	bf00      	nop
 8004b0c:	40010000 	.word	0x40010000
 8004b10:	40010400 	.word	0x40010400

08004b14 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b087      	sub	sp, #28
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a1b      	ldr	r3, [r3, #32]
 8004b22:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6a1b      	ldr	r3, [r3, #32]
 8004b2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	69db      	ldr	r3, [r3, #28]
 8004b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f023 0303 	bic.w	r3, r3, #3
 8004b4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	68fa      	ldr	r2, [r7, #12]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	021b      	lsls	r3, r3, #8
 8004b64:	697a      	ldr	r2, [r7, #20]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4a21      	ldr	r2, [pc, #132]	; (8004bf4 <TIM_OC3_SetConfig+0xe0>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d003      	beq.n	8004b7a <TIM_OC3_SetConfig+0x66>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	4a20      	ldr	r2, [pc, #128]	; (8004bf8 <TIM_OC3_SetConfig+0xe4>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d10d      	bne.n	8004b96 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	021b      	lsls	r3, r3, #8
 8004b88:	697a      	ldr	r2, [r7, #20]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	4a16      	ldr	r2, [pc, #88]	; (8004bf4 <TIM_OC3_SetConfig+0xe0>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d003      	beq.n	8004ba6 <TIM_OC3_SetConfig+0x92>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4a15      	ldr	r2, [pc, #84]	; (8004bf8 <TIM_OC3_SetConfig+0xe4>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d113      	bne.n	8004bce <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004bac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004bb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	695b      	ldr	r3, [r3, #20]
 8004bba:	011b      	lsls	r3, r3, #4
 8004bbc:	693a      	ldr	r2, [r7, #16]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	699b      	ldr	r3, [r3, #24]
 8004bc6:	011b      	lsls	r3, r3, #4
 8004bc8:	693a      	ldr	r2, [r7, #16]
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	693a      	ldr	r2, [r7, #16]
 8004bd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	68fa      	ldr	r2, [r7, #12]
 8004bd8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	685a      	ldr	r2, [r3, #4]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	697a      	ldr	r2, [r7, #20]
 8004be6:	621a      	str	r2, [r3, #32]
}
 8004be8:	bf00      	nop
 8004bea:	371c      	adds	r7, #28
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr
 8004bf4:	40010000 	.word	0x40010000
 8004bf8:	40010400 	.word	0x40010400

08004bfc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b087      	sub	sp, #28
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6a1b      	ldr	r3, [r3, #32]
 8004c0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a1b      	ldr	r3, [r3, #32]
 8004c16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	69db      	ldr	r3, [r3, #28]
 8004c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	021b      	lsls	r3, r3, #8
 8004c3a:	68fa      	ldr	r2, [r7, #12]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	031b      	lsls	r3, r3, #12
 8004c4e:	693a      	ldr	r2, [r7, #16]
 8004c50:	4313      	orrs	r3, r2
 8004c52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4a12      	ldr	r2, [pc, #72]	; (8004ca0 <TIM_OC4_SetConfig+0xa4>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d003      	beq.n	8004c64 <TIM_OC4_SetConfig+0x68>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	4a11      	ldr	r2, [pc, #68]	; (8004ca4 <TIM_OC4_SetConfig+0xa8>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d109      	bne.n	8004c78 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c6a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	695b      	ldr	r3, [r3, #20]
 8004c70:	019b      	lsls	r3, r3, #6
 8004c72:	697a      	ldr	r2, [r7, #20]
 8004c74:	4313      	orrs	r3, r2
 8004c76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	697a      	ldr	r2, [r7, #20]
 8004c7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	68fa      	ldr	r2, [r7, #12]
 8004c82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	685a      	ldr	r2, [r3, #4]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	693a      	ldr	r2, [r7, #16]
 8004c90:	621a      	str	r2, [r3, #32]
}
 8004c92:	bf00      	nop
 8004c94:	371c      	adds	r7, #28
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr
 8004c9e:	bf00      	nop
 8004ca0:	40010000 	.word	0x40010000
 8004ca4:	40010400 	.word	0x40010400

08004ca8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b085      	sub	sp, #20
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d101      	bne.n	8004cc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004cbc:	2302      	movs	r3, #2
 8004cbe:	e05a      	b.n	8004d76 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2202      	movs	r2, #2
 8004ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ce6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	68fa      	ldr	r2, [r7, #12]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	68fa      	ldr	r2, [r7, #12]
 8004cf8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a21      	ldr	r2, [pc, #132]	; (8004d84 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d022      	beq.n	8004d4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d0c:	d01d      	beq.n	8004d4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a1d      	ldr	r2, [pc, #116]	; (8004d88 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d018      	beq.n	8004d4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a1b      	ldr	r2, [pc, #108]	; (8004d8c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d013      	beq.n	8004d4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a1a      	ldr	r2, [pc, #104]	; (8004d90 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d00e      	beq.n	8004d4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a18      	ldr	r2, [pc, #96]	; (8004d94 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d009      	beq.n	8004d4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a17      	ldr	r2, [pc, #92]	; (8004d98 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d004      	beq.n	8004d4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a15      	ldr	r2, [pc, #84]	; (8004d9c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d10c      	bne.n	8004d64 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	68ba      	ldr	r2, [r7, #8]
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	68ba      	ldr	r2, [r7, #8]
 8004d62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2201      	movs	r2, #1
 8004d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d74:	2300      	movs	r3, #0
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3714      	adds	r7, #20
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr
 8004d82:	bf00      	nop
 8004d84:	40010000 	.word	0x40010000
 8004d88:	40000400 	.word	0x40000400
 8004d8c:	40000800 	.word	0x40000800
 8004d90:	40000c00 	.word	0x40000c00
 8004d94:	40010400 	.word	0x40010400
 8004d98:	40014000 	.word	0x40014000
 8004d9c:	40001800 	.word	0x40001800

08004da0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b082      	sub	sp, #8
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d101      	bne.n	8004db2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e03f      	b.n	8004e32 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d106      	bne.n	8004dcc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f7fc ff16 	bl	8001bf8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2224      	movs	r2, #36	; 0x24
 8004dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	68da      	ldr	r2, [r3, #12]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004de2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f000 fd7b 	bl	80058e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	691a      	ldr	r2, [r3, #16]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004df8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	695a      	ldr	r2, [r3, #20]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	68da      	ldr	r2, [r3, #12]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2220      	movs	r2, #32
 8004e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2220      	movs	r2, #32
 8004e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004e30:	2300      	movs	r3, #0
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3708      	adds	r7, #8
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}

08004e3a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e3a:	b580      	push	{r7, lr}
 8004e3c:	b08a      	sub	sp, #40	; 0x28
 8004e3e:	af02      	add	r7, sp, #8
 8004e40:	60f8      	str	r0, [r7, #12]
 8004e42:	60b9      	str	r1, [r7, #8]
 8004e44:	603b      	str	r3, [r7, #0]
 8004e46:	4613      	mov	r3, r2
 8004e48:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	2b20      	cmp	r3, #32
 8004e58:	d17c      	bne.n	8004f54 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d002      	beq.n	8004e66 <HAL_UART_Transmit+0x2c>
 8004e60:	88fb      	ldrh	r3, [r7, #6]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d101      	bne.n	8004e6a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e075      	b.n	8004f56 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d101      	bne.n	8004e78 <HAL_UART_Transmit+0x3e>
 8004e74:	2302      	movs	r3, #2
 8004e76:	e06e      	b.n	8004f56 <HAL_UART_Transmit+0x11c>
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2200      	movs	r2, #0
 8004e84:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2221      	movs	r2, #33	; 0x21
 8004e8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e8e:	f7fd f9d5 	bl	800223c <HAL_GetTick>
 8004e92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	88fa      	ldrh	r2, [r7, #6]
 8004e98:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	88fa      	ldrh	r2, [r7, #6]
 8004e9e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ea8:	d108      	bne.n	8004ebc <HAL_UART_Transmit+0x82>
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	691b      	ldr	r3, [r3, #16]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d104      	bne.n	8004ebc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	61bb      	str	r3, [r7, #24]
 8004eba:	e003      	b.n	8004ec4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004ecc:	e02a      	b.n	8004f24 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	9300      	str	r3, [sp, #0]
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	2180      	movs	r1, #128	; 0x80
 8004ed8:	68f8      	ldr	r0, [r7, #12]
 8004eda:	f000 faf9 	bl	80054d0 <UART_WaitOnFlagUntilTimeout>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d001      	beq.n	8004ee8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004ee4:	2303      	movs	r3, #3
 8004ee6:	e036      	b.n	8004f56 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004ee8:	69fb      	ldr	r3, [r7, #28]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d10b      	bne.n	8004f06 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004eee:	69bb      	ldr	r3, [r7, #24]
 8004ef0:	881b      	ldrh	r3, [r3, #0]
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004efc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004efe:	69bb      	ldr	r3, [r7, #24]
 8004f00:	3302      	adds	r3, #2
 8004f02:	61bb      	str	r3, [r7, #24]
 8004f04:	e007      	b.n	8004f16 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	781a      	ldrb	r2, [r3, #0]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004f10:	69fb      	ldr	r3, [r7, #28]
 8004f12:	3301      	adds	r3, #1
 8004f14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	3b01      	subs	r3, #1
 8004f1e:	b29a      	uxth	r2, r3
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d1cf      	bne.n	8004ece <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	9300      	str	r3, [sp, #0]
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	2200      	movs	r2, #0
 8004f36:	2140      	movs	r1, #64	; 0x40
 8004f38:	68f8      	ldr	r0, [r7, #12]
 8004f3a:	f000 fac9 	bl	80054d0 <UART_WaitOnFlagUntilTimeout>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d001      	beq.n	8004f48 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004f44:	2303      	movs	r3, #3
 8004f46:	e006      	b.n	8004f56 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2220      	movs	r2, #32
 8004f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004f50:	2300      	movs	r3, #0
 8004f52:	e000      	b.n	8004f56 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004f54:	2302      	movs	r3, #2
  }
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3720      	adds	r7, #32
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}
	...

08004f60 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b0ba      	sub	sp, #232	; 0xe8
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	695b      	ldr	r3, [r3, #20]
 8004f82:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004f86:	2300      	movs	r3, #0
 8004f88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004f92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f96:	f003 030f 	and.w	r3, r3, #15
 8004f9a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004f9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d10f      	bne.n	8004fc6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004fa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004faa:	f003 0320 	and.w	r3, r3, #32
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d009      	beq.n	8004fc6 <HAL_UART_IRQHandler+0x66>
 8004fb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fb6:	f003 0320 	and.w	r3, r3, #32
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d003      	beq.n	8004fc6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f000 fbd3 	bl	800576a <UART_Receive_IT>
      return;
 8004fc4:	e256      	b.n	8005474 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004fc6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	f000 80de 	beq.w	800518c <HAL_UART_IRQHandler+0x22c>
 8004fd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004fd4:	f003 0301 	and.w	r3, r3, #1
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d106      	bne.n	8004fea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004fdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fe0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	f000 80d1 	beq.w	800518c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004fea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fee:	f003 0301 	and.w	r3, r3, #1
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d00b      	beq.n	800500e <HAL_UART_IRQHandler+0xae>
 8004ff6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d005      	beq.n	800500e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005006:	f043 0201 	orr.w	r2, r3, #1
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800500e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005012:	f003 0304 	and.w	r3, r3, #4
 8005016:	2b00      	cmp	r3, #0
 8005018:	d00b      	beq.n	8005032 <HAL_UART_IRQHandler+0xd2>
 800501a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800501e:	f003 0301 	and.w	r3, r3, #1
 8005022:	2b00      	cmp	r3, #0
 8005024:	d005      	beq.n	8005032 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800502a:	f043 0202 	orr.w	r2, r3, #2
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005032:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005036:	f003 0302 	and.w	r3, r3, #2
 800503a:	2b00      	cmp	r3, #0
 800503c:	d00b      	beq.n	8005056 <HAL_UART_IRQHandler+0xf6>
 800503e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005042:	f003 0301 	and.w	r3, r3, #1
 8005046:	2b00      	cmp	r3, #0
 8005048:	d005      	beq.n	8005056 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800504e:	f043 0204 	orr.w	r2, r3, #4
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005056:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800505a:	f003 0308 	and.w	r3, r3, #8
 800505e:	2b00      	cmp	r3, #0
 8005060:	d011      	beq.n	8005086 <HAL_UART_IRQHandler+0x126>
 8005062:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005066:	f003 0320 	and.w	r3, r3, #32
 800506a:	2b00      	cmp	r3, #0
 800506c:	d105      	bne.n	800507a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800506e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005072:	f003 0301 	and.w	r3, r3, #1
 8005076:	2b00      	cmp	r3, #0
 8005078:	d005      	beq.n	8005086 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800507e:	f043 0208 	orr.w	r2, r3, #8
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508a:	2b00      	cmp	r3, #0
 800508c:	f000 81ed 	beq.w	800546a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005090:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005094:	f003 0320 	and.w	r3, r3, #32
 8005098:	2b00      	cmp	r3, #0
 800509a:	d008      	beq.n	80050ae <HAL_UART_IRQHandler+0x14e>
 800509c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050a0:	f003 0320 	and.w	r3, r3, #32
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d002      	beq.n	80050ae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f000 fb5e 	bl	800576a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	695b      	ldr	r3, [r3, #20]
 80050b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050b8:	2b40      	cmp	r3, #64	; 0x40
 80050ba:	bf0c      	ite	eq
 80050bc:	2301      	moveq	r3, #1
 80050be:	2300      	movne	r3, #0
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ca:	f003 0308 	and.w	r3, r3, #8
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d103      	bne.n	80050da <HAL_UART_IRQHandler+0x17a>
 80050d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d04f      	beq.n	800517a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f000 fa66 	bl	80055ac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	695b      	ldr	r3, [r3, #20]
 80050e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ea:	2b40      	cmp	r3, #64	; 0x40
 80050ec:	d141      	bne.n	8005172 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	3314      	adds	r3, #20
 80050f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80050fc:	e853 3f00 	ldrex	r3, [r3]
 8005100:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005104:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005108:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800510c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	3314      	adds	r3, #20
 8005116:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800511a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800511e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005122:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005126:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800512a:	e841 2300 	strex	r3, r2, [r1]
 800512e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005132:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005136:	2b00      	cmp	r3, #0
 8005138:	d1d9      	bne.n	80050ee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800513e:	2b00      	cmp	r3, #0
 8005140:	d013      	beq.n	800516a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005146:	4a7d      	ldr	r2, [pc, #500]	; (800533c <HAL_UART_IRQHandler+0x3dc>)
 8005148:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800514e:	4618      	mov	r0, r3
 8005150:	f7fd ff4b 	bl	8002fea <HAL_DMA_Abort_IT>
 8005154:	4603      	mov	r3, r0
 8005156:	2b00      	cmp	r3, #0
 8005158:	d016      	beq.n	8005188 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800515e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005164:	4610      	mov	r0, r2
 8005166:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005168:	e00e      	b.n	8005188 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f000 f99a 	bl	80054a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005170:	e00a      	b.n	8005188 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f000 f996 	bl	80054a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005178:	e006      	b.n	8005188 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 f992 	bl	80054a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2200      	movs	r2, #0
 8005184:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005186:	e170      	b.n	800546a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005188:	bf00      	nop
    return;
 800518a:	e16e      	b.n	800546a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005190:	2b01      	cmp	r3, #1
 8005192:	f040 814a 	bne.w	800542a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005196:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800519a:	f003 0310 	and.w	r3, r3, #16
 800519e:	2b00      	cmp	r3, #0
 80051a0:	f000 8143 	beq.w	800542a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80051a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051a8:	f003 0310 	and.w	r3, r3, #16
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	f000 813c 	beq.w	800542a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80051b2:	2300      	movs	r3, #0
 80051b4:	60bb      	str	r3, [r7, #8]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	60bb      	str	r3, [r7, #8]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	60bb      	str	r3, [r7, #8]
 80051c6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	695b      	ldr	r3, [r3, #20]
 80051ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051d2:	2b40      	cmp	r3, #64	; 0x40
 80051d4:	f040 80b4 	bne.w	8005340 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80051e4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	f000 8140 	beq.w	800546e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80051f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80051f6:	429a      	cmp	r2, r3
 80051f8:	f080 8139 	bcs.w	800546e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005202:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005208:	69db      	ldr	r3, [r3, #28]
 800520a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800520e:	f000 8088 	beq.w	8005322 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	330c      	adds	r3, #12
 8005218:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800521c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005220:	e853 3f00 	ldrex	r3, [r3]
 8005224:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005228:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800522c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005230:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	330c      	adds	r3, #12
 800523a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800523e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005242:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005246:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800524a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800524e:	e841 2300 	strex	r3, r2, [r1]
 8005252:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005256:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800525a:	2b00      	cmp	r3, #0
 800525c:	d1d9      	bne.n	8005212 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	3314      	adds	r3, #20
 8005264:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005266:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005268:	e853 3f00 	ldrex	r3, [r3]
 800526c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800526e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005270:	f023 0301 	bic.w	r3, r3, #1
 8005274:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	3314      	adds	r3, #20
 800527e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005282:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005286:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005288:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800528a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800528e:	e841 2300 	strex	r3, r2, [r1]
 8005292:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005294:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005296:	2b00      	cmp	r3, #0
 8005298:	d1e1      	bne.n	800525e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	3314      	adds	r3, #20
 80052a0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80052a4:	e853 3f00 	ldrex	r3, [r3]
 80052a8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80052aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	3314      	adds	r3, #20
 80052ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80052be:	66fa      	str	r2, [r7, #108]	; 0x6c
 80052c0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052c2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80052c4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80052c6:	e841 2300 	strex	r3, r2, [r1]
 80052ca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80052cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d1e3      	bne.n	800529a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2220      	movs	r2, #32
 80052d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	330c      	adds	r3, #12
 80052e6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052ea:	e853 3f00 	ldrex	r3, [r3]
 80052ee:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80052f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052f2:	f023 0310 	bic.w	r3, r3, #16
 80052f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	330c      	adds	r3, #12
 8005300:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005304:	65ba      	str	r2, [r7, #88]	; 0x58
 8005306:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005308:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800530a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800530c:	e841 2300 	strex	r3, r2, [r1]
 8005310:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005312:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005314:	2b00      	cmp	r3, #0
 8005316:	d1e3      	bne.n	80052e0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800531c:	4618      	mov	r0, r3
 800531e:	f7fd fdf4 	bl	8002f0a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800532a:	b29b      	uxth	r3, r3
 800532c:	1ad3      	subs	r3, r2, r3
 800532e:	b29b      	uxth	r3, r3
 8005330:	4619      	mov	r1, r3
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 f8c0 	bl	80054b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005338:	e099      	b.n	800546e <HAL_UART_IRQHandler+0x50e>
 800533a:	bf00      	nop
 800533c:	08005673 	.word	0x08005673
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005348:	b29b      	uxth	r3, r3
 800534a:	1ad3      	subs	r3, r2, r3
 800534c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005354:	b29b      	uxth	r3, r3
 8005356:	2b00      	cmp	r3, #0
 8005358:	f000 808b 	beq.w	8005472 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800535c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005360:	2b00      	cmp	r3, #0
 8005362:	f000 8086 	beq.w	8005472 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	330c      	adds	r3, #12
 800536c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800536e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005370:	e853 3f00 	ldrex	r3, [r3]
 8005374:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005378:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800537c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	330c      	adds	r3, #12
 8005386:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800538a:	647a      	str	r2, [r7, #68]	; 0x44
 800538c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800538e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005390:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005392:	e841 2300 	strex	r3, r2, [r1]
 8005396:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005398:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800539a:	2b00      	cmp	r3, #0
 800539c:	d1e3      	bne.n	8005366 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	3314      	adds	r3, #20
 80053a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a8:	e853 3f00 	ldrex	r3, [r3]
 80053ac:	623b      	str	r3, [r7, #32]
   return(result);
 80053ae:	6a3b      	ldr	r3, [r7, #32]
 80053b0:	f023 0301 	bic.w	r3, r3, #1
 80053b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	3314      	adds	r3, #20
 80053be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80053c2:	633a      	str	r2, [r7, #48]	; 0x30
 80053c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80053c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053ca:	e841 2300 	strex	r3, r2, [r1]
 80053ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80053d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d1e3      	bne.n	800539e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2220      	movs	r2, #32
 80053da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2200      	movs	r2, #0
 80053e2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	330c      	adds	r3, #12
 80053ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	e853 3f00 	ldrex	r3, [r3]
 80053f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f023 0310 	bic.w	r3, r3, #16
 80053fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	330c      	adds	r3, #12
 8005404:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005408:	61fa      	str	r2, [r7, #28]
 800540a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800540c:	69b9      	ldr	r1, [r7, #24]
 800540e:	69fa      	ldr	r2, [r7, #28]
 8005410:	e841 2300 	strex	r3, r2, [r1]
 8005414:	617b      	str	r3, [r7, #20]
   return(result);
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d1e3      	bne.n	80053e4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800541c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005420:	4619      	mov	r1, r3
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f000 f848 	bl	80054b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005428:	e023      	b.n	8005472 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800542a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800542e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005432:	2b00      	cmp	r3, #0
 8005434:	d009      	beq.n	800544a <HAL_UART_IRQHandler+0x4ea>
 8005436:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800543a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800543e:	2b00      	cmp	r3, #0
 8005440:	d003      	beq.n	800544a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f000 f929 	bl	800569a <UART_Transmit_IT>
    return;
 8005448:	e014      	b.n	8005474 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800544a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800544e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005452:	2b00      	cmp	r3, #0
 8005454:	d00e      	beq.n	8005474 <HAL_UART_IRQHandler+0x514>
 8005456:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800545a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800545e:	2b00      	cmp	r3, #0
 8005460:	d008      	beq.n	8005474 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f000 f969 	bl	800573a <UART_EndTransmit_IT>
    return;
 8005468:	e004      	b.n	8005474 <HAL_UART_IRQHandler+0x514>
    return;
 800546a:	bf00      	nop
 800546c:	e002      	b.n	8005474 <HAL_UART_IRQHandler+0x514>
      return;
 800546e:	bf00      	nop
 8005470:	e000      	b.n	8005474 <HAL_UART_IRQHandler+0x514>
      return;
 8005472:	bf00      	nop
  }
}
 8005474:	37e8      	adds	r7, #232	; 0xe8
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
 800547a:	bf00      	nop

0800547c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800547c:	b480      	push	{r7}
 800547e:	b083      	sub	sp, #12
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005484:	bf00      	nop
 8005486:	370c      	adds	r7, #12
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr

08005490 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005490:	b480      	push	{r7}
 8005492:	b083      	sub	sp, #12
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005498:	bf00      	nop
 800549a:	370c      	adds	r7, #12
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr

080054a4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b083      	sub	sp, #12
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80054ac:	bf00      	nop
 80054ae:	370c      	adds	r7, #12
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr

080054b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b083      	sub	sp, #12
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	460b      	mov	r3, r1
 80054c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80054c4:	bf00      	nop
 80054c6:	370c      	adds	r7, #12
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr

080054d0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b090      	sub	sp, #64	; 0x40
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	60f8      	str	r0, [r7, #12]
 80054d8:	60b9      	str	r1, [r7, #8]
 80054da:	603b      	str	r3, [r7, #0]
 80054dc:	4613      	mov	r3, r2
 80054de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054e0:	e050      	b.n	8005584 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054e8:	d04c      	beq.n	8005584 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80054ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d007      	beq.n	8005500 <UART_WaitOnFlagUntilTimeout+0x30>
 80054f0:	f7fc fea4 	bl	800223c <HAL_GetTick>
 80054f4:	4602      	mov	r2, r0
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	1ad3      	subs	r3, r2, r3
 80054fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d241      	bcs.n	8005584 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	330c      	adds	r3, #12
 8005506:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800550a:	e853 3f00 	ldrex	r3, [r3]
 800550e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005512:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005516:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	330c      	adds	r3, #12
 800551e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005520:	637a      	str	r2, [r7, #52]	; 0x34
 8005522:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005524:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005526:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005528:	e841 2300 	strex	r3, r2, [r1]
 800552c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800552e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005530:	2b00      	cmp	r3, #0
 8005532:	d1e5      	bne.n	8005500 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	3314      	adds	r3, #20
 800553a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	e853 3f00 	ldrex	r3, [r3]
 8005542:	613b      	str	r3, [r7, #16]
   return(result);
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	f023 0301 	bic.w	r3, r3, #1
 800554a:	63bb      	str	r3, [r7, #56]	; 0x38
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	3314      	adds	r3, #20
 8005552:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005554:	623a      	str	r2, [r7, #32]
 8005556:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005558:	69f9      	ldr	r1, [r7, #28]
 800555a:	6a3a      	ldr	r2, [r7, #32]
 800555c:	e841 2300 	strex	r3, r2, [r1]
 8005560:	61bb      	str	r3, [r7, #24]
   return(result);
 8005562:	69bb      	ldr	r3, [r7, #24]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d1e5      	bne.n	8005534 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2220      	movs	r2, #32
 800556c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2220      	movs	r2, #32
 8005574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2200      	movs	r2, #0
 800557c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005580:	2303      	movs	r3, #3
 8005582:	e00f      	b.n	80055a4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	4013      	ands	r3, r2
 800558e:	68ba      	ldr	r2, [r7, #8]
 8005590:	429a      	cmp	r2, r3
 8005592:	bf0c      	ite	eq
 8005594:	2301      	moveq	r3, #1
 8005596:	2300      	movne	r3, #0
 8005598:	b2db      	uxtb	r3, r3
 800559a:	461a      	mov	r2, r3
 800559c:	79fb      	ldrb	r3, [r7, #7]
 800559e:	429a      	cmp	r2, r3
 80055a0:	d09f      	beq.n	80054e2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80055a2:	2300      	movs	r3, #0
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3740      	adds	r7, #64	; 0x40
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}

080055ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b095      	sub	sp, #84	; 0x54
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	330c      	adds	r3, #12
 80055ba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055be:	e853 3f00 	ldrex	r3, [r3]
 80055c2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80055c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80055ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	330c      	adds	r3, #12
 80055d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80055d4:	643a      	str	r2, [r7, #64]	; 0x40
 80055d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80055da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80055dc:	e841 2300 	strex	r3, r2, [r1]
 80055e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80055e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d1e5      	bne.n	80055b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	3314      	adds	r3, #20
 80055ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055f0:	6a3b      	ldr	r3, [r7, #32]
 80055f2:	e853 3f00 	ldrex	r3, [r3]
 80055f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80055f8:	69fb      	ldr	r3, [r7, #28]
 80055fa:	f023 0301 	bic.w	r3, r3, #1
 80055fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	3314      	adds	r3, #20
 8005606:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005608:	62fa      	str	r2, [r7, #44]	; 0x2c
 800560a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800560c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800560e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005610:	e841 2300 	strex	r3, r2, [r1]
 8005614:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005618:	2b00      	cmp	r3, #0
 800561a:	d1e5      	bne.n	80055e8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005620:	2b01      	cmp	r3, #1
 8005622:	d119      	bne.n	8005658 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	330c      	adds	r3, #12
 800562a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	e853 3f00 	ldrex	r3, [r3]
 8005632:	60bb      	str	r3, [r7, #8]
   return(result);
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	f023 0310 	bic.w	r3, r3, #16
 800563a:	647b      	str	r3, [r7, #68]	; 0x44
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	330c      	adds	r3, #12
 8005642:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005644:	61ba      	str	r2, [r7, #24]
 8005646:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005648:	6979      	ldr	r1, [r7, #20]
 800564a:	69ba      	ldr	r2, [r7, #24]
 800564c:	e841 2300 	strex	r3, r2, [r1]
 8005650:	613b      	str	r3, [r7, #16]
   return(result);
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d1e5      	bne.n	8005624 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2220      	movs	r2, #32
 800565c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2200      	movs	r2, #0
 8005664:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005666:	bf00      	nop
 8005668:	3754      	adds	r7, #84	; 0x54
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr

08005672 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005672:	b580      	push	{r7, lr}
 8005674:	b084      	sub	sp, #16
 8005676:	af00      	add	r7, sp, #0
 8005678:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800567e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2200      	movs	r2, #0
 8005684:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2200      	movs	r2, #0
 800568a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800568c:	68f8      	ldr	r0, [r7, #12]
 800568e:	f7ff ff09 	bl	80054a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005692:	bf00      	nop
 8005694:	3710      	adds	r7, #16
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}

0800569a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800569a:	b480      	push	{r7}
 800569c:	b085      	sub	sp, #20
 800569e:	af00      	add	r7, sp, #0
 80056a0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056a8:	b2db      	uxtb	r3, r3
 80056aa:	2b21      	cmp	r3, #33	; 0x21
 80056ac:	d13e      	bne.n	800572c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056b6:	d114      	bne.n	80056e2 <UART_Transmit_IT+0x48>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	691b      	ldr	r3, [r3, #16]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d110      	bne.n	80056e2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6a1b      	ldr	r3, [r3, #32]
 80056c4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	881b      	ldrh	r3, [r3, #0]
 80056ca:	461a      	mov	r2, r3
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056d4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6a1b      	ldr	r3, [r3, #32]
 80056da:	1c9a      	adds	r2, r3, #2
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	621a      	str	r2, [r3, #32]
 80056e0:	e008      	b.n	80056f4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6a1b      	ldr	r3, [r3, #32]
 80056e6:	1c59      	adds	r1, r3, #1
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	6211      	str	r1, [r2, #32]
 80056ec:	781a      	ldrb	r2, [r3, #0]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	3b01      	subs	r3, #1
 80056fc:	b29b      	uxth	r3, r3
 80056fe:	687a      	ldr	r2, [r7, #4]
 8005700:	4619      	mov	r1, r3
 8005702:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005704:	2b00      	cmp	r3, #0
 8005706:	d10f      	bne.n	8005728 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	68da      	ldr	r2, [r3, #12]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005716:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	68da      	ldr	r2, [r3, #12]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005726:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005728:	2300      	movs	r3, #0
 800572a:	e000      	b.n	800572e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800572c:	2302      	movs	r3, #2
  }
}
 800572e:	4618      	mov	r0, r3
 8005730:	3714      	adds	r7, #20
 8005732:	46bd      	mov	sp, r7
 8005734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005738:	4770      	bx	lr

0800573a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800573a:	b580      	push	{r7, lr}
 800573c:	b082      	sub	sp, #8
 800573e:	af00      	add	r7, sp, #0
 8005740:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	68da      	ldr	r2, [r3, #12]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005750:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2220      	movs	r2, #32
 8005756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f7ff fe8e 	bl	800547c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005760:	2300      	movs	r3, #0
}
 8005762:	4618      	mov	r0, r3
 8005764:	3708      	adds	r7, #8
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}

0800576a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800576a:	b580      	push	{r7, lr}
 800576c:	b08c      	sub	sp, #48	; 0x30
 800576e:	af00      	add	r7, sp, #0
 8005770:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005778:	b2db      	uxtb	r3, r3
 800577a:	2b22      	cmp	r3, #34	; 0x22
 800577c:	f040 80ab 	bne.w	80058d6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005788:	d117      	bne.n	80057ba <UART_Receive_IT+0x50>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	691b      	ldr	r3, [r3, #16]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d113      	bne.n	80057ba <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005792:	2300      	movs	r3, #0
 8005794:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800579a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057a8:	b29a      	uxth	r2, r3
 80057aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ac:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057b2:	1c9a      	adds	r2, r3, #2
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	629a      	str	r2, [r3, #40]	; 0x28
 80057b8:	e026      	b.n	8005808 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057be:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80057c0:	2300      	movs	r3, #0
 80057c2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057cc:	d007      	beq.n	80057de <UART_Receive_IT+0x74>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d10a      	bne.n	80057ec <UART_Receive_IT+0x82>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	691b      	ldr	r3, [r3, #16]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d106      	bne.n	80057ec <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	b2da      	uxtb	r2, r3
 80057e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057e8:	701a      	strb	r2, [r3, #0]
 80057ea:	e008      	b.n	80057fe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057f8:	b2da      	uxtb	r2, r3
 80057fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057fc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005802:	1c5a      	adds	r2, r3, #1
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800580c:	b29b      	uxth	r3, r3
 800580e:	3b01      	subs	r3, #1
 8005810:	b29b      	uxth	r3, r3
 8005812:	687a      	ldr	r2, [r7, #4]
 8005814:	4619      	mov	r1, r3
 8005816:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005818:	2b00      	cmp	r3, #0
 800581a:	d15a      	bne.n	80058d2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	68da      	ldr	r2, [r3, #12]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f022 0220 	bic.w	r2, r2, #32
 800582a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	68da      	ldr	r2, [r3, #12]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800583a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	695a      	ldr	r2, [r3, #20]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f022 0201 	bic.w	r2, r2, #1
 800584a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2220      	movs	r2, #32
 8005850:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005858:	2b01      	cmp	r3, #1
 800585a:	d135      	bne.n	80058c8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2200      	movs	r2, #0
 8005860:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	330c      	adds	r3, #12
 8005868:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	e853 3f00 	ldrex	r3, [r3]
 8005870:	613b      	str	r3, [r7, #16]
   return(result);
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	f023 0310 	bic.w	r3, r3, #16
 8005878:	627b      	str	r3, [r7, #36]	; 0x24
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	330c      	adds	r3, #12
 8005880:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005882:	623a      	str	r2, [r7, #32]
 8005884:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005886:	69f9      	ldr	r1, [r7, #28]
 8005888:	6a3a      	ldr	r2, [r7, #32]
 800588a:	e841 2300 	strex	r3, r2, [r1]
 800588e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005890:	69bb      	ldr	r3, [r7, #24]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d1e5      	bne.n	8005862 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 0310 	and.w	r3, r3, #16
 80058a0:	2b10      	cmp	r3, #16
 80058a2:	d10a      	bne.n	80058ba <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80058a4:	2300      	movs	r3, #0
 80058a6:	60fb      	str	r3, [r7, #12]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	60fb      	str	r3, [r7, #12]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	60fb      	str	r3, [r7, #12]
 80058b8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80058be:	4619      	mov	r1, r3
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f7ff fdf9 	bl	80054b8 <HAL_UARTEx_RxEventCallback>
 80058c6:	e002      	b.n	80058ce <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f7ff fde1 	bl	8005490 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80058ce:	2300      	movs	r3, #0
 80058d0:	e002      	b.n	80058d8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80058d2:	2300      	movs	r3, #0
 80058d4:	e000      	b.n	80058d8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80058d6:	2302      	movs	r3, #2
  }
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3730      	adds	r7, #48	; 0x30
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}

080058e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058e4:	b09f      	sub	sp, #124	; 0x7c
 80058e6:	af00      	add	r7, sp, #0
 80058e8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	691b      	ldr	r3, [r3, #16]
 80058f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80058f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058f6:	68d9      	ldr	r1, [r3, #12]
 80058f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	ea40 0301 	orr.w	r3, r0, r1
 8005900:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005902:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005904:	689a      	ldr	r2, [r3, #8]
 8005906:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005908:	691b      	ldr	r3, [r3, #16]
 800590a:	431a      	orrs	r2, r3
 800590c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800590e:	695b      	ldr	r3, [r3, #20]
 8005910:	431a      	orrs	r2, r3
 8005912:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005914:	69db      	ldr	r3, [r3, #28]
 8005916:	4313      	orrs	r3, r2
 8005918:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800591a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005924:	f021 010c 	bic.w	r1, r1, #12
 8005928:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800592e:	430b      	orrs	r3, r1
 8005930:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005932:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	695b      	ldr	r3, [r3, #20]
 8005938:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800593c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800593e:	6999      	ldr	r1, [r3, #24]
 8005940:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	ea40 0301 	orr.w	r3, r0, r1
 8005948:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800594a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	4bc5      	ldr	r3, [pc, #788]	; (8005c64 <UART_SetConfig+0x384>)
 8005950:	429a      	cmp	r2, r3
 8005952:	d004      	beq.n	800595e <UART_SetConfig+0x7e>
 8005954:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005956:	681a      	ldr	r2, [r3, #0]
 8005958:	4bc3      	ldr	r3, [pc, #780]	; (8005c68 <UART_SetConfig+0x388>)
 800595a:	429a      	cmp	r2, r3
 800595c:	d103      	bne.n	8005966 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800595e:	f7fe fda5 	bl	80044ac <HAL_RCC_GetPCLK2Freq>
 8005962:	6778      	str	r0, [r7, #116]	; 0x74
 8005964:	e002      	b.n	800596c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005966:	f7fe fd8d 	bl	8004484 <HAL_RCC_GetPCLK1Freq>
 800596a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800596c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800596e:	69db      	ldr	r3, [r3, #28]
 8005970:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005974:	f040 80b6 	bne.w	8005ae4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005978:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800597a:	461c      	mov	r4, r3
 800597c:	f04f 0500 	mov.w	r5, #0
 8005980:	4622      	mov	r2, r4
 8005982:	462b      	mov	r3, r5
 8005984:	1891      	adds	r1, r2, r2
 8005986:	6439      	str	r1, [r7, #64]	; 0x40
 8005988:	415b      	adcs	r3, r3
 800598a:	647b      	str	r3, [r7, #68]	; 0x44
 800598c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005990:	1912      	adds	r2, r2, r4
 8005992:	eb45 0303 	adc.w	r3, r5, r3
 8005996:	f04f 0000 	mov.w	r0, #0
 800599a:	f04f 0100 	mov.w	r1, #0
 800599e:	00d9      	lsls	r1, r3, #3
 80059a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80059a4:	00d0      	lsls	r0, r2, #3
 80059a6:	4602      	mov	r2, r0
 80059a8:	460b      	mov	r3, r1
 80059aa:	1911      	adds	r1, r2, r4
 80059ac:	6639      	str	r1, [r7, #96]	; 0x60
 80059ae:	416b      	adcs	r3, r5
 80059b0:	667b      	str	r3, [r7, #100]	; 0x64
 80059b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	461a      	mov	r2, r3
 80059b8:	f04f 0300 	mov.w	r3, #0
 80059bc:	1891      	adds	r1, r2, r2
 80059be:	63b9      	str	r1, [r7, #56]	; 0x38
 80059c0:	415b      	adcs	r3, r3
 80059c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80059c8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80059cc:	f7fa fc0e 	bl	80001ec <__aeabi_uldivmod>
 80059d0:	4602      	mov	r2, r0
 80059d2:	460b      	mov	r3, r1
 80059d4:	4ba5      	ldr	r3, [pc, #660]	; (8005c6c <UART_SetConfig+0x38c>)
 80059d6:	fba3 2302 	umull	r2, r3, r3, r2
 80059da:	095b      	lsrs	r3, r3, #5
 80059dc:	011e      	lsls	r6, r3, #4
 80059de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059e0:	461c      	mov	r4, r3
 80059e2:	f04f 0500 	mov.w	r5, #0
 80059e6:	4622      	mov	r2, r4
 80059e8:	462b      	mov	r3, r5
 80059ea:	1891      	adds	r1, r2, r2
 80059ec:	6339      	str	r1, [r7, #48]	; 0x30
 80059ee:	415b      	adcs	r3, r3
 80059f0:	637b      	str	r3, [r7, #52]	; 0x34
 80059f2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80059f6:	1912      	adds	r2, r2, r4
 80059f8:	eb45 0303 	adc.w	r3, r5, r3
 80059fc:	f04f 0000 	mov.w	r0, #0
 8005a00:	f04f 0100 	mov.w	r1, #0
 8005a04:	00d9      	lsls	r1, r3, #3
 8005a06:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005a0a:	00d0      	lsls	r0, r2, #3
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	460b      	mov	r3, r1
 8005a10:	1911      	adds	r1, r2, r4
 8005a12:	65b9      	str	r1, [r7, #88]	; 0x58
 8005a14:	416b      	adcs	r3, r5
 8005a16:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	461a      	mov	r2, r3
 8005a1e:	f04f 0300 	mov.w	r3, #0
 8005a22:	1891      	adds	r1, r2, r2
 8005a24:	62b9      	str	r1, [r7, #40]	; 0x28
 8005a26:	415b      	adcs	r3, r3
 8005a28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a2a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005a2e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005a32:	f7fa fbdb 	bl	80001ec <__aeabi_uldivmod>
 8005a36:	4602      	mov	r2, r0
 8005a38:	460b      	mov	r3, r1
 8005a3a:	4b8c      	ldr	r3, [pc, #560]	; (8005c6c <UART_SetConfig+0x38c>)
 8005a3c:	fba3 1302 	umull	r1, r3, r3, r2
 8005a40:	095b      	lsrs	r3, r3, #5
 8005a42:	2164      	movs	r1, #100	; 0x64
 8005a44:	fb01 f303 	mul.w	r3, r1, r3
 8005a48:	1ad3      	subs	r3, r2, r3
 8005a4a:	00db      	lsls	r3, r3, #3
 8005a4c:	3332      	adds	r3, #50	; 0x32
 8005a4e:	4a87      	ldr	r2, [pc, #540]	; (8005c6c <UART_SetConfig+0x38c>)
 8005a50:	fba2 2303 	umull	r2, r3, r2, r3
 8005a54:	095b      	lsrs	r3, r3, #5
 8005a56:	005b      	lsls	r3, r3, #1
 8005a58:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005a5c:	441e      	add	r6, r3
 8005a5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a60:	4618      	mov	r0, r3
 8005a62:	f04f 0100 	mov.w	r1, #0
 8005a66:	4602      	mov	r2, r0
 8005a68:	460b      	mov	r3, r1
 8005a6a:	1894      	adds	r4, r2, r2
 8005a6c:	623c      	str	r4, [r7, #32]
 8005a6e:	415b      	adcs	r3, r3
 8005a70:	627b      	str	r3, [r7, #36]	; 0x24
 8005a72:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005a76:	1812      	adds	r2, r2, r0
 8005a78:	eb41 0303 	adc.w	r3, r1, r3
 8005a7c:	f04f 0400 	mov.w	r4, #0
 8005a80:	f04f 0500 	mov.w	r5, #0
 8005a84:	00dd      	lsls	r5, r3, #3
 8005a86:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005a8a:	00d4      	lsls	r4, r2, #3
 8005a8c:	4622      	mov	r2, r4
 8005a8e:	462b      	mov	r3, r5
 8005a90:	1814      	adds	r4, r2, r0
 8005a92:	653c      	str	r4, [r7, #80]	; 0x50
 8005a94:	414b      	adcs	r3, r1
 8005a96:	657b      	str	r3, [r7, #84]	; 0x54
 8005a98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	461a      	mov	r2, r3
 8005a9e:	f04f 0300 	mov.w	r3, #0
 8005aa2:	1891      	adds	r1, r2, r2
 8005aa4:	61b9      	str	r1, [r7, #24]
 8005aa6:	415b      	adcs	r3, r3
 8005aa8:	61fb      	str	r3, [r7, #28]
 8005aaa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005aae:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005ab2:	f7fa fb9b 	bl	80001ec <__aeabi_uldivmod>
 8005ab6:	4602      	mov	r2, r0
 8005ab8:	460b      	mov	r3, r1
 8005aba:	4b6c      	ldr	r3, [pc, #432]	; (8005c6c <UART_SetConfig+0x38c>)
 8005abc:	fba3 1302 	umull	r1, r3, r3, r2
 8005ac0:	095b      	lsrs	r3, r3, #5
 8005ac2:	2164      	movs	r1, #100	; 0x64
 8005ac4:	fb01 f303 	mul.w	r3, r1, r3
 8005ac8:	1ad3      	subs	r3, r2, r3
 8005aca:	00db      	lsls	r3, r3, #3
 8005acc:	3332      	adds	r3, #50	; 0x32
 8005ace:	4a67      	ldr	r2, [pc, #412]	; (8005c6c <UART_SetConfig+0x38c>)
 8005ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ad4:	095b      	lsrs	r3, r3, #5
 8005ad6:	f003 0207 	and.w	r2, r3, #7
 8005ada:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4432      	add	r2, r6
 8005ae0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005ae2:	e0b9      	b.n	8005c58 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ae4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ae6:	461c      	mov	r4, r3
 8005ae8:	f04f 0500 	mov.w	r5, #0
 8005aec:	4622      	mov	r2, r4
 8005aee:	462b      	mov	r3, r5
 8005af0:	1891      	adds	r1, r2, r2
 8005af2:	6139      	str	r1, [r7, #16]
 8005af4:	415b      	adcs	r3, r3
 8005af6:	617b      	str	r3, [r7, #20]
 8005af8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005afc:	1912      	adds	r2, r2, r4
 8005afe:	eb45 0303 	adc.w	r3, r5, r3
 8005b02:	f04f 0000 	mov.w	r0, #0
 8005b06:	f04f 0100 	mov.w	r1, #0
 8005b0a:	00d9      	lsls	r1, r3, #3
 8005b0c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005b10:	00d0      	lsls	r0, r2, #3
 8005b12:	4602      	mov	r2, r0
 8005b14:	460b      	mov	r3, r1
 8005b16:	eb12 0804 	adds.w	r8, r2, r4
 8005b1a:	eb43 0905 	adc.w	r9, r3, r5
 8005b1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	4618      	mov	r0, r3
 8005b24:	f04f 0100 	mov.w	r1, #0
 8005b28:	f04f 0200 	mov.w	r2, #0
 8005b2c:	f04f 0300 	mov.w	r3, #0
 8005b30:	008b      	lsls	r3, r1, #2
 8005b32:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005b36:	0082      	lsls	r2, r0, #2
 8005b38:	4640      	mov	r0, r8
 8005b3a:	4649      	mov	r1, r9
 8005b3c:	f7fa fb56 	bl	80001ec <__aeabi_uldivmod>
 8005b40:	4602      	mov	r2, r0
 8005b42:	460b      	mov	r3, r1
 8005b44:	4b49      	ldr	r3, [pc, #292]	; (8005c6c <UART_SetConfig+0x38c>)
 8005b46:	fba3 2302 	umull	r2, r3, r3, r2
 8005b4a:	095b      	lsrs	r3, r3, #5
 8005b4c:	011e      	lsls	r6, r3, #4
 8005b4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b50:	4618      	mov	r0, r3
 8005b52:	f04f 0100 	mov.w	r1, #0
 8005b56:	4602      	mov	r2, r0
 8005b58:	460b      	mov	r3, r1
 8005b5a:	1894      	adds	r4, r2, r2
 8005b5c:	60bc      	str	r4, [r7, #8]
 8005b5e:	415b      	adcs	r3, r3
 8005b60:	60fb      	str	r3, [r7, #12]
 8005b62:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005b66:	1812      	adds	r2, r2, r0
 8005b68:	eb41 0303 	adc.w	r3, r1, r3
 8005b6c:	f04f 0400 	mov.w	r4, #0
 8005b70:	f04f 0500 	mov.w	r5, #0
 8005b74:	00dd      	lsls	r5, r3, #3
 8005b76:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005b7a:	00d4      	lsls	r4, r2, #3
 8005b7c:	4622      	mov	r2, r4
 8005b7e:	462b      	mov	r3, r5
 8005b80:	1814      	adds	r4, r2, r0
 8005b82:	64bc      	str	r4, [r7, #72]	; 0x48
 8005b84:	414b      	adcs	r3, r1
 8005b86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f04f 0100 	mov.w	r1, #0
 8005b92:	f04f 0200 	mov.w	r2, #0
 8005b96:	f04f 0300 	mov.w	r3, #0
 8005b9a:	008b      	lsls	r3, r1, #2
 8005b9c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005ba0:	0082      	lsls	r2, r0, #2
 8005ba2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005ba6:	f7fa fb21 	bl	80001ec <__aeabi_uldivmod>
 8005baa:	4602      	mov	r2, r0
 8005bac:	460b      	mov	r3, r1
 8005bae:	4b2f      	ldr	r3, [pc, #188]	; (8005c6c <UART_SetConfig+0x38c>)
 8005bb0:	fba3 1302 	umull	r1, r3, r3, r2
 8005bb4:	095b      	lsrs	r3, r3, #5
 8005bb6:	2164      	movs	r1, #100	; 0x64
 8005bb8:	fb01 f303 	mul.w	r3, r1, r3
 8005bbc:	1ad3      	subs	r3, r2, r3
 8005bbe:	011b      	lsls	r3, r3, #4
 8005bc0:	3332      	adds	r3, #50	; 0x32
 8005bc2:	4a2a      	ldr	r2, [pc, #168]	; (8005c6c <UART_SetConfig+0x38c>)
 8005bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8005bc8:	095b      	lsrs	r3, r3, #5
 8005bca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005bce:	441e      	add	r6, r3
 8005bd0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f04f 0100 	mov.w	r1, #0
 8005bd8:	4602      	mov	r2, r0
 8005bda:	460b      	mov	r3, r1
 8005bdc:	1894      	adds	r4, r2, r2
 8005bde:	603c      	str	r4, [r7, #0]
 8005be0:	415b      	adcs	r3, r3
 8005be2:	607b      	str	r3, [r7, #4]
 8005be4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005be8:	1812      	adds	r2, r2, r0
 8005bea:	eb41 0303 	adc.w	r3, r1, r3
 8005bee:	f04f 0400 	mov.w	r4, #0
 8005bf2:	f04f 0500 	mov.w	r5, #0
 8005bf6:	00dd      	lsls	r5, r3, #3
 8005bf8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005bfc:	00d4      	lsls	r4, r2, #3
 8005bfe:	4622      	mov	r2, r4
 8005c00:	462b      	mov	r3, r5
 8005c02:	eb12 0a00 	adds.w	sl, r2, r0
 8005c06:	eb43 0b01 	adc.w	fp, r3, r1
 8005c0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f04f 0100 	mov.w	r1, #0
 8005c14:	f04f 0200 	mov.w	r2, #0
 8005c18:	f04f 0300 	mov.w	r3, #0
 8005c1c:	008b      	lsls	r3, r1, #2
 8005c1e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005c22:	0082      	lsls	r2, r0, #2
 8005c24:	4650      	mov	r0, sl
 8005c26:	4659      	mov	r1, fp
 8005c28:	f7fa fae0 	bl	80001ec <__aeabi_uldivmod>
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	460b      	mov	r3, r1
 8005c30:	4b0e      	ldr	r3, [pc, #56]	; (8005c6c <UART_SetConfig+0x38c>)
 8005c32:	fba3 1302 	umull	r1, r3, r3, r2
 8005c36:	095b      	lsrs	r3, r3, #5
 8005c38:	2164      	movs	r1, #100	; 0x64
 8005c3a:	fb01 f303 	mul.w	r3, r1, r3
 8005c3e:	1ad3      	subs	r3, r2, r3
 8005c40:	011b      	lsls	r3, r3, #4
 8005c42:	3332      	adds	r3, #50	; 0x32
 8005c44:	4a09      	ldr	r2, [pc, #36]	; (8005c6c <UART_SetConfig+0x38c>)
 8005c46:	fba2 2303 	umull	r2, r3, r2, r3
 8005c4a:	095b      	lsrs	r3, r3, #5
 8005c4c:	f003 020f 	and.w	r2, r3, #15
 8005c50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4432      	add	r2, r6
 8005c56:	609a      	str	r2, [r3, #8]
}
 8005c58:	bf00      	nop
 8005c5a:	377c      	adds	r7, #124	; 0x7c
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c62:	bf00      	nop
 8005c64:	40011000 	.word	0x40011000
 8005c68:	40011400 	.word	0x40011400
 8005c6c:	51eb851f 	.word	0x51eb851f

08005c70 <__libc_init_array>:
 8005c70:	b570      	push	{r4, r5, r6, lr}
 8005c72:	4d0d      	ldr	r5, [pc, #52]	; (8005ca8 <__libc_init_array+0x38>)
 8005c74:	4c0d      	ldr	r4, [pc, #52]	; (8005cac <__libc_init_array+0x3c>)
 8005c76:	1b64      	subs	r4, r4, r5
 8005c78:	10a4      	asrs	r4, r4, #2
 8005c7a:	2600      	movs	r6, #0
 8005c7c:	42a6      	cmp	r6, r4
 8005c7e:	d109      	bne.n	8005c94 <__libc_init_array+0x24>
 8005c80:	4d0b      	ldr	r5, [pc, #44]	; (8005cb0 <__libc_init_array+0x40>)
 8005c82:	4c0c      	ldr	r4, [pc, #48]	; (8005cb4 <__libc_init_array+0x44>)
 8005c84:	f000 f820 	bl	8005cc8 <_init>
 8005c88:	1b64      	subs	r4, r4, r5
 8005c8a:	10a4      	asrs	r4, r4, #2
 8005c8c:	2600      	movs	r6, #0
 8005c8e:	42a6      	cmp	r6, r4
 8005c90:	d105      	bne.n	8005c9e <__libc_init_array+0x2e>
 8005c92:	bd70      	pop	{r4, r5, r6, pc}
 8005c94:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c98:	4798      	blx	r3
 8005c9a:	3601      	adds	r6, #1
 8005c9c:	e7ee      	b.n	8005c7c <__libc_init_array+0xc>
 8005c9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ca2:	4798      	blx	r3
 8005ca4:	3601      	adds	r6, #1
 8005ca6:	e7f2      	b.n	8005c8e <__libc_init_array+0x1e>
 8005ca8:	08005d14 	.word	0x08005d14
 8005cac:	08005d14 	.word	0x08005d14
 8005cb0:	08005d14 	.word	0x08005d14
 8005cb4:	08005d18 	.word	0x08005d18

08005cb8 <memset>:
 8005cb8:	4402      	add	r2, r0
 8005cba:	4603      	mov	r3, r0
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d100      	bne.n	8005cc2 <memset+0xa>
 8005cc0:	4770      	bx	lr
 8005cc2:	f803 1b01 	strb.w	r1, [r3], #1
 8005cc6:	e7f9      	b.n	8005cbc <memset+0x4>

08005cc8 <_init>:
 8005cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cca:	bf00      	nop
 8005ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cce:	bc08      	pop	{r3}
 8005cd0:	469e      	mov	lr, r3
 8005cd2:	4770      	bx	lr

08005cd4 <_fini>:
 8005cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cd6:	bf00      	nop
 8005cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cda:	bc08      	pop	{r3}
 8005cdc:	469e      	mov	lr, r3
 8005cde:	4770      	bx	lr
