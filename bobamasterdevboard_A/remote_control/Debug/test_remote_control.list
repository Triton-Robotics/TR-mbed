
test_remote_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c28  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08005dd4  08005dd4  00015dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005df4  08005df4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005df4  08005df4  00015df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005dfc  08005dfc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005dfc  08005dfc  00015dfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e00  08005e00  00015e00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005e04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005b8  2000000c  08005e10  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005c4  08005e10  000205c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a5a6  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cb2  00000000  00000000  0003a5e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001388  00000000  00000000  0003d298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012a8  00000000  00000000  0003e620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025141  00000000  00000000  0003f8c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017200  00000000  00000000  00064a09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e0642  00000000  00000000  0007bc09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015c24b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000536c  00000000  00000000  0015c2a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08005dbc 	.word	0x08005dbc

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08005dbc 	.word	0x08005dbc

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96e 	b.w	80004e0 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468c      	mov	ip, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	f040 8083 	bne.w	8000332 <__udivmoddi4+0x116>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d947      	bls.n	80002c2 <__udivmoddi4+0xa6>
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	b142      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000238:	f1c2 0020 	rsb	r0, r2, #32
 800023c:	fa24 f000 	lsr.w	r0, r4, r0
 8000240:	4091      	lsls	r1, r2
 8000242:	4097      	lsls	r7, r2
 8000244:	ea40 0c01 	orr.w	ip, r0, r1
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbbc f6f8 	udiv	r6, ip, r8
 8000254:	fa1f fe87 	uxth.w	lr, r7
 8000258:	fb08 c116 	mls	r1, r8, r6, ip
 800025c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000260:	fb06 f10e 	mul.w	r1, r6, lr
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18fb      	adds	r3, r7, r3
 800026a:	f106 30ff 	add.w	r0, r6, #4294967295
 800026e:	f080 8119 	bcs.w	80004a4 <__udivmoddi4+0x288>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8116 	bls.w	80004a4 <__udivmoddi4+0x288>
 8000278:	3e02      	subs	r6, #2
 800027a:	443b      	add	r3, r7
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0f8 	udiv	r0, r3, r8
 8000284:	fb08 3310 	mls	r3, r8, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000290:	45a6      	cmp	lr, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	193c      	adds	r4, r7, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 8105 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 800029e:	45a6      	cmp	lr, r4
 80002a0:	f240 8102 	bls.w	80004a8 <__udivmoddi4+0x28c>
 80002a4:	3802      	subs	r0, #2
 80002a6:	443c      	add	r4, r7
 80002a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ac:	eba4 040e 	sub.w	r4, r4, lr
 80002b0:	2600      	movs	r6, #0
 80002b2:	b11d      	cbz	r5, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c5 4300 	strd	r4, r3, [r5]
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	b902      	cbnz	r2, 80002c6 <__udivmoddi4+0xaa>
 80002c4:	deff      	udf	#255	; 0xff
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	2a00      	cmp	r2, #0
 80002cc:	d150      	bne.n	8000370 <__udivmoddi4+0x154>
 80002ce:	1bcb      	subs	r3, r1, r7
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f f887 	uxth.w	r8, r7
 80002d8:	2601      	movs	r6, #1
 80002da:	fbb3 fcfe 	udiv	ip, r3, lr
 80002de:	0c21      	lsrs	r1, r4, #16
 80002e0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002e8:	fb08 f30c 	mul.w	r3, r8, ip
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d907      	bls.n	8000300 <__udivmoddi4+0xe4>
 80002f0:	1879      	adds	r1, r7, r1
 80002f2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0xe2>
 80002f8:	428b      	cmp	r3, r1
 80002fa:	f200 80e9 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 80002fe:	4684      	mov	ip, r0
 8000300:	1ac9      	subs	r1, r1, r3
 8000302:	b2a3      	uxth	r3, r4
 8000304:	fbb1 f0fe 	udiv	r0, r1, lr
 8000308:	fb0e 1110 	mls	r1, lr, r0, r1
 800030c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000310:	fb08 f800 	mul.w	r8, r8, r0
 8000314:	45a0      	cmp	r8, r4
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x10c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x10a>
 8000320:	45a0      	cmp	r8, r4
 8000322:	f200 80d9 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 8000326:	4618      	mov	r0, r3
 8000328:	eba4 0408 	sub.w	r4, r4, r8
 800032c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000330:	e7bf      	b.n	80002b2 <__udivmoddi4+0x96>
 8000332:	428b      	cmp	r3, r1
 8000334:	d909      	bls.n	800034a <__udivmoddi4+0x12e>
 8000336:	2d00      	cmp	r5, #0
 8000338:	f000 80b1 	beq.w	800049e <__udivmoddi4+0x282>
 800033c:	2600      	movs	r6, #0
 800033e:	e9c5 0100 	strd	r0, r1, [r5]
 8000342:	4630      	mov	r0, r6
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	fab3 f683 	clz	r6, r3
 800034e:	2e00      	cmp	r6, #0
 8000350:	d14a      	bne.n	80003e8 <__udivmoddi4+0x1cc>
 8000352:	428b      	cmp	r3, r1
 8000354:	d302      	bcc.n	800035c <__udivmoddi4+0x140>
 8000356:	4282      	cmp	r2, r0
 8000358:	f200 80b8 	bhi.w	80004cc <__udivmoddi4+0x2b0>
 800035c:	1a84      	subs	r4, r0, r2
 800035e:	eb61 0103 	sbc.w	r1, r1, r3
 8000362:	2001      	movs	r0, #1
 8000364:	468c      	mov	ip, r1
 8000366:	2d00      	cmp	r5, #0
 8000368:	d0a8      	beq.n	80002bc <__udivmoddi4+0xa0>
 800036a:	e9c5 4c00 	strd	r4, ip, [r5]
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0xa0>
 8000370:	f1c2 0320 	rsb	r3, r2, #32
 8000374:	fa20 f603 	lsr.w	r6, r0, r3
 8000378:	4097      	lsls	r7, r2
 800037a:	fa01 f002 	lsl.w	r0, r1, r2
 800037e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000382:	40d9      	lsrs	r1, r3
 8000384:	4330      	orrs	r0, r6
 8000386:	0c03      	lsrs	r3, r0, #16
 8000388:	fbb1 f6fe 	udiv	r6, r1, lr
 800038c:	fa1f f887 	uxth.w	r8, r7
 8000390:	fb0e 1116 	mls	r1, lr, r6, r1
 8000394:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000398:	fb06 f108 	mul.w	r1, r6, r8
 800039c:	4299      	cmp	r1, r3
 800039e:	fa04 f402 	lsl.w	r4, r4, r2
 80003a2:	d909      	bls.n	80003b8 <__udivmoddi4+0x19c>
 80003a4:	18fb      	adds	r3, r7, r3
 80003a6:	f106 3cff 	add.w	ip, r6, #4294967295
 80003aa:	f080 808d 	bcs.w	80004c8 <__udivmoddi4+0x2ac>
 80003ae:	4299      	cmp	r1, r3
 80003b0:	f240 808a 	bls.w	80004c8 <__udivmoddi4+0x2ac>
 80003b4:	3e02      	subs	r6, #2
 80003b6:	443b      	add	r3, r7
 80003b8:	1a5b      	subs	r3, r3, r1
 80003ba:	b281      	uxth	r1, r0
 80003bc:	fbb3 f0fe 	udiv	r0, r3, lr
 80003c0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003c8:	fb00 f308 	mul.w	r3, r0, r8
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x1c4>
 80003d0:	1879      	adds	r1, r7, r1
 80003d2:	f100 3cff 	add.w	ip, r0, #4294967295
 80003d6:	d273      	bcs.n	80004c0 <__udivmoddi4+0x2a4>
 80003d8:	428b      	cmp	r3, r1
 80003da:	d971      	bls.n	80004c0 <__udivmoddi4+0x2a4>
 80003dc:	3802      	subs	r0, #2
 80003de:	4439      	add	r1, r7
 80003e0:	1acb      	subs	r3, r1, r3
 80003e2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003e6:	e778      	b.n	80002da <__udivmoddi4+0xbe>
 80003e8:	f1c6 0c20 	rsb	ip, r6, #32
 80003ec:	fa03 f406 	lsl.w	r4, r3, r6
 80003f0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f4:	431c      	orrs	r4, r3
 80003f6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003fa:	fa01 f306 	lsl.w	r3, r1, r6
 80003fe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000402:	fa21 f10c 	lsr.w	r1, r1, ip
 8000406:	431f      	orrs	r7, r3
 8000408:	0c3b      	lsrs	r3, r7, #16
 800040a:	fbb1 f9fe 	udiv	r9, r1, lr
 800040e:	fa1f f884 	uxth.w	r8, r4
 8000412:	fb0e 1119 	mls	r1, lr, r9, r1
 8000416:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800041a:	fb09 fa08 	mul.w	sl, r9, r8
 800041e:	458a      	cmp	sl, r1
 8000420:	fa02 f206 	lsl.w	r2, r2, r6
 8000424:	fa00 f306 	lsl.w	r3, r0, r6
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x220>
 800042a:	1861      	adds	r1, r4, r1
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d248      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000432:	458a      	cmp	sl, r1
 8000434:	d946      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	4421      	add	r1, r4
 800043c:	eba1 010a 	sub.w	r1, r1, sl
 8000440:	b2bf      	uxth	r7, r7
 8000442:	fbb1 f0fe 	udiv	r0, r1, lr
 8000446:	fb0e 1110 	mls	r1, lr, r0, r1
 800044a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45b8      	cmp	r8, r7
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x24a>
 8000456:	19e7      	adds	r7, r4, r7
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d22e      	bcs.n	80004bc <__udivmoddi4+0x2a0>
 800045e:	45b8      	cmp	r8, r7
 8000460:	d92c      	bls.n	80004bc <__udivmoddi4+0x2a0>
 8000462:	3802      	subs	r0, #2
 8000464:	4427      	add	r7, r4
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba7 0708 	sub.w	r7, r7, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454f      	cmp	r7, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	4649      	mov	r1, r9
 8000478:	d31a      	bcc.n	80004b0 <__udivmoddi4+0x294>
 800047a:	d017      	beq.n	80004ac <__udivmoddi4+0x290>
 800047c:	b15d      	cbz	r5, 8000496 <__udivmoddi4+0x27a>
 800047e:	ebb3 020e 	subs.w	r2, r3, lr
 8000482:	eb67 0701 	sbc.w	r7, r7, r1
 8000486:	fa07 fc0c 	lsl.w	ip, r7, ip
 800048a:	40f2      	lsrs	r2, r6
 800048c:	ea4c 0202 	orr.w	r2, ip, r2
 8000490:	40f7      	lsrs	r7, r6
 8000492:	e9c5 2700 	strd	r2, r7, [r5]
 8000496:	2600      	movs	r6, #0
 8000498:	4631      	mov	r1, r6
 800049a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049e:	462e      	mov	r6, r5
 80004a0:	4628      	mov	r0, r5
 80004a2:	e70b      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a4:	4606      	mov	r6, r0
 80004a6:	e6e9      	b.n	800027c <__udivmoddi4+0x60>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e6fd      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004ac:	4543      	cmp	r3, r8
 80004ae:	d2e5      	bcs.n	800047c <__udivmoddi4+0x260>
 80004b0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b4:	eb69 0104 	sbc.w	r1, r9, r4
 80004b8:	3801      	subs	r0, #1
 80004ba:	e7df      	b.n	800047c <__udivmoddi4+0x260>
 80004bc:	4608      	mov	r0, r1
 80004be:	e7d2      	b.n	8000466 <__udivmoddi4+0x24a>
 80004c0:	4660      	mov	r0, ip
 80004c2:	e78d      	b.n	80003e0 <__udivmoddi4+0x1c4>
 80004c4:	4681      	mov	r9, r0
 80004c6:	e7b9      	b.n	800043c <__udivmoddi4+0x220>
 80004c8:	4666      	mov	r6, ip
 80004ca:	e775      	b.n	80003b8 <__udivmoddi4+0x19c>
 80004cc:	4630      	mov	r0, r6
 80004ce:	e74a      	b.n	8000366 <__udivmoddi4+0x14a>
 80004d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d4:	4439      	add	r1, r7
 80004d6:	e713      	b.n	8000300 <__udivmoddi4+0xe4>
 80004d8:	3802      	subs	r0, #2
 80004da:	443c      	add	r4, r7
 80004dc:	e724      	b.n	8000328 <__udivmoddi4+0x10c>
 80004de:	bf00      	nop

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <numdataToMSC>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

char numdataToMSC(int in){
 80004e4:	b480      	push	{r7}
 80004e6:	b085      	sub	sp, #20
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
	in += 660; // Fuck them negatives
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80004f2:	607b      	str	r3, [r7, #4]
	int carry = in / 94;
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	4a09      	ldr	r2, [pc, #36]	; (800051c <numdataToMSC+0x38>)
 80004f8:	fb82 1203 	smull	r1, r2, r2, r3
 80004fc:	441a      	add	r2, r3
 80004fe:	1192      	asrs	r2, r2, #6
 8000500:	17db      	asrs	r3, r3, #31
 8000502:	1ad3      	subs	r3, r2, r3
 8000504:	60fb      	str	r3, [r7, #12]
	char charCarry = (char)(carry+32);
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	b2db      	uxtb	r3, r3
 800050a:	3320      	adds	r3, #32
 800050c:	72fb      	strb	r3, [r7, #11]
	return charCarry;
 800050e:	7afb      	ldrb	r3, [r7, #11]
}
 8000510:	4618      	mov	r0, r3
 8000512:	3714      	adds	r7, #20
 8000514:	46bd      	mov	sp, r7
 8000516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051a:	4770      	bx	lr
 800051c:	ae4c415d 	.word	0xae4c415d

08000520 <numdataToLSC>:

char numdataToLSC(int in){
 8000520:	b480      	push	{r7}
 8000522:	b085      	sub	sp, #20
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
	in += 660; // Fuck them negatives
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800052e:	607b      	str	r3, [r7, #4]
	int remainder = in % 94;
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	4a0b      	ldr	r2, [pc, #44]	; (8000560 <numdataToLSC+0x40>)
 8000534:	fb82 1203 	smull	r1, r2, r2, r3
 8000538:	441a      	add	r2, r3
 800053a:	1191      	asrs	r1, r2, #6
 800053c:	17da      	asrs	r2, r3, #31
 800053e:	1a8a      	subs	r2, r1, r2
 8000540:	215e      	movs	r1, #94	; 0x5e
 8000542:	fb01 f202 	mul.w	r2, r1, r2
 8000546:	1a9b      	subs	r3, r3, r2
 8000548:	60fb      	str	r3, [r7, #12]
	char charRemainder = (char)(remainder+32);
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	b2db      	uxtb	r3, r3
 800054e:	3320      	adds	r3, #32
 8000550:	72fb      	strb	r3, [r7, #11]
	return charRemainder;
 8000552:	7afb      	ldrb	r3, [r7, #11]
}
 8000554:	4618      	mov	r0, r3
 8000556:	3714      	adds	r7, #20
 8000558:	46bd      	mov	sp, r7
 800055a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055e:	4770      	bx	lr
 8000560:	ae4c415d 	.word	0xae4c415d

08000564 <switchToChar>:

char switchToChar(int in) {
 8000564:	b480      	push	{r7}
 8000566:	b083      	sub	sp, #12
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
    in += 32;
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	3320      	adds	r3, #32
 8000570:	607b      	str	r3, [r7, #4]
    return (char)in;
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	b2db      	uxtb	r3, r3
}
 8000576:	4618      	mov	r0, r3
 8000578:	370c      	adds	r7, #12
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr
	...

08000584 <getRCVals>:

void getRCVals() {
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
	leftJoyX = rc.ch3;
 8000588:	4b13      	ldr	r3, [pc, #76]	; (80005d8 <getRCVals+0x54>)
 800058a:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800058e:	4b13      	ldr	r3, [pc, #76]	; (80005dc <getRCVals+0x58>)
 8000590:	801a      	strh	r2, [r3, #0]
	leftJoyY = rc.ch4;
 8000592:	4b11      	ldr	r3, [pc, #68]	; (80005d8 <getRCVals+0x54>)
 8000594:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8000598:	4b11      	ldr	r3, [pc, #68]	; (80005e0 <getRCVals+0x5c>)
 800059a:	801a      	strh	r2, [r3, #0]
	rightJoyX = rc.ch1;
 800059c:	4b0e      	ldr	r3, [pc, #56]	; (80005d8 <getRCVals+0x54>)
 800059e:	f9b3 2000 	ldrsh.w	r2, [r3]
 80005a2:	4b10      	ldr	r3, [pc, #64]	; (80005e4 <getRCVals+0x60>)
 80005a4:	801a      	strh	r2, [r3, #0]
	rightJoyY = rc.ch2;
 80005a6:	4b0c      	ldr	r3, [pc, #48]	; (80005d8 <getRCVals+0x54>)
 80005a8:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80005ac:	4b0e      	ldr	r3, [pc, #56]	; (80005e8 <getRCVals+0x64>)
 80005ae:	801a      	strh	r2, [r3, #0]

	wheel = rc.wheel;
 80005b0:	4b09      	ldr	r3, [pc, #36]	; (80005d8 <getRCVals+0x54>)
 80005b2:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 80005b6:	4b0d      	ldr	r3, [pc, #52]	; (80005ec <getRCVals+0x68>)
 80005b8:	801a      	strh	r2, [r3, #0]

	leftSwitch = rc.sw1;
 80005ba:	4b07      	ldr	r3, [pc, #28]	; (80005d8 <getRCVals+0x54>)
 80005bc:	7a9b      	ldrb	r3, [r3, #10]
 80005be:	b21a      	sxth	r2, r3
 80005c0:	4b0b      	ldr	r3, [pc, #44]	; (80005f0 <getRCVals+0x6c>)
 80005c2:	801a      	strh	r2, [r3, #0]
	rightSwitch = rc.sw2;
 80005c4:	4b04      	ldr	r3, [pc, #16]	; (80005d8 <getRCVals+0x54>)
 80005c6:	7adb      	ldrb	r3, [r3, #11]
 80005c8:	b21a      	sxth	r2, r3
 80005ca:	4b0a      	ldr	r3, [pc, #40]	; (80005f4 <getRCVals+0x70>)
 80005cc:	801a      	strh	r2, [r3, #0]

}
 80005ce:	bf00      	nop
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr
 80005d8:	20000584 	.word	0x20000584
 80005dc:	200001cc 	.word	0x200001cc
 80005e0:	200001ca 	.word	0x200001ca
 80005e4:	2000038c 	.word	0x2000038c
 80005e8:	200001c8 	.word	0x200001c8
 80005ec:	2000002c 	.word	0x2000002c
 80005f0:	200001ce 	.word	0x200001ce
 80005f4:	200004cc 	.word	0x200004cc

080005f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005fc:	f001 fe4c 	bl	8002298 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000600:	f000 f912 	bl	8000828 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000604:	f000 fd5e 	bl	80010c4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000608:	f000 fd1e 	bl	8001048 <MX_DMA_Init>
  MX_CAN1_Init();
 800060c:	f000 f976 	bl	80008fc <MX_CAN1_Init>
  MX_CAN2_Init();
 8000610:	f000 f9aa 	bl	8000968 <MX_CAN2_Init>
  MX_SPI5_Init();
 8000614:	f000 fa1e 	bl	8000a54 <MX_SPI5_Init>
  MX_TIM2_Init();
 8000618:	f000 fa52 	bl	8000ac0 <MX_TIM2_Init>
  MX_TIM4_Init();
 800061c:	f000 fb0e 	bl	8000c3c <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000620:	f000 fc92 	bl	8000f48 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000624:	f000 fcbc 	bl	8000fa0 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8000628:	f000 fce4 	bl	8000ff4 <MX_USART6_UART_Init>
  MX_TIM3_Init();
 800062c:	f000 faac 	bl	8000b88 <MX_TIM3_Init>
  MX_TIM12_Init();
 8000630:	f000 fbf0 	bl	8000e14 <MX_TIM12_Init>
  MX_TIM5_Init();
 8000634:	f000 fb7e 	bl	8000d34 <MX_TIM5_Init>
  MX_I2C3_Init();
 8000638:	f000 f9cc 	bl	80009d4 <MX_I2C3_Init>
  MX_UART4_Init();
 800063c:	f000 fc30 	bl	8000ea0 <MX_UART4_Init>
  MX_UART7_Init();
 8000640:	f000 fc58 	bl	8000ef4 <MX_UART7_Init>
  /* USER CODE BEGIN 2 */

  led_off();
 8000644:	f000 fe82 	bl	800134c <led_off>
  power_on();
 8000648:	f000 fe94 	bl	8001374 <power_on>
  dbus_uart_init();
 800064c:	f001 f85a 	bl	8001704 <dbus_uart_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  getRCVals();
 8000650:	f7ff ff98 	bl	8000584 <getRCVals>
	  sendString[0] = numdataToMSC(leftJoyX);
 8000654:	4b6a      	ldr	r3, [pc, #424]	; (8000800 <main+0x208>)
 8000656:	f9b3 3000 	ldrsh.w	r3, [r3]
 800065a:	4618      	mov	r0, r3
 800065c:	f7ff ff42 	bl	80004e4 <numdataToMSC>
 8000660:	4603      	mov	r3, r0
 8000662:	461a      	mov	r2, r3
 8000664:	4b67      	ldr	r3, [pc, #412]	; (8000804 <main+0x20c>)
 8000666:	701a      	strb	r2, [r3, #0]
	  sendString[1] = numdataToLSC(leftJoyX);
 8000668:	4b65      	ldr	r3, [pc, #404]	; (8000800 <main+0x208>)
 800066a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800066e:	4618      	mov	r0, r3
 8000670:	f7ff ff56 	bl	8000520 <numdataToLSC>
 8000674:	4603      	mov	r3, r0
 8000676:	461a      	mov	r2, r3
 8000678:	4b62      	ldr	r3, [pc, #392]	; (8000804 <main+0x20c>)
 800067a:	705a      	strb	r2, [r3, #1]
	  sendString[2] = numdataToMSC(leftJoyY);
 800067c:	4b62      	ldr	r3, [pc, #392]	; (8000808 <main+0x210>)
 800067e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000682:	4618      	mov	r0, r3
 8000684:	f7ff ff2e 	bl	80004e4 <numdataToMSC>
 8000688:	4603      	mov	r3, r0
 800068a:	461a      	mov	r2, r3
 800068c:	4b5d      	ldr	r3, [pc, #372]	; (8000804 <main+0x20c>)
 800068e:	709a      	strb	r2, [r3, #2]
	  sendString[3] = numdataToLSC(leftJoyY);
 8000690:	4b5d      	ldr	r3, [pc, #372]	; (8000808 <main+0x210>)
 8000692:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000696:	4618      	mov	r0, r3
 8000698:	f7ff ff42 	bl	8000520 <numdataToLSC>
 800069c:	4603      	mov	r3, r0
 800069e:	461a      	mov	r2, r3
 80006a0:	4b58      	ldr	r3, [pc, #352]	; (8000804 <main+0x20c>)
 80006a2:	70da      	strb	r2, [r3, #3]
	  sendString[4] = numdataToMSC(rightJoyX);
 80006a4:	4b59      	ldr	r3, [pc, #356]	; (800080c <main+0x214>)
 80006a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006aa:	4618      	mov	r0, r3
 80006ac:	f7ff ff1a 	bl	80004e4 <numdataToMSC>
 80006b0:	4603      	mov	r3, r0
 80006b2:	461a      	mov	r2, r3
 80006b4:	4b53      	ldr	r3, [pc, #332]	; (8000804 <main+0x20c>)
 80006b6:	711a      	strb	r2, [r3, #4]
	  sendString[5] = numdataToLSC(rightJoyX);
 80006b8:	4b54      	ldr	r3, [pc, #336]	; (800080c <main+0x214>)
 80006ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006be:	4618      	mov	r0, r3
 80006c0:	f7ff ff2e 	bl	8000520 <numdataToLSC>
 80006c4:	4603      	mov	r3, r0
 80006c6:	461a      	mov	r2, r3
 80006c8:	4b4e      	ldr	r3, [pc, #312]	; (8000804 <main+0x20c>)
 80006ca:	715a      	strb	r2, [r3, #5]
	  sendString[6] = numdataToMSC(rightJoyY);
 80006cc:	4b50      	ldr	r3, [pc, #320]	; (8000810 <main+0x218>)
 80006ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006d2:	4618      	mov	r0, r3
 80006d4:	f7ff ff06 	bl	80004e4 <numdataToMSC>
 80006d8:	4603      	mov	r3, r0
 80006da:	461a      	mov	r2, r3
 80006dc:	4b49      	ldr	r3, [pc, #292]	; (8000804 <main+0x20c>)
 80006de:	719a      	strb	r2, [r3, #6]
	  sendString[7] = numdataToLSC(rightJoyY);
 80006e0:	4b4b      	ldr	r3, [pc, #300]	; (8000810 <main+0x218>)
 80006e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006e6:	4618      	mov	r0, r3
 80006e8:	f7ff ff1a 	bl	8000520 <numdataToLSC>
 80006ec:	4603      	mov	r3, r0
 80006ee:	461a      	mov	r2, r3
 80006f0:	4b44      	ldr	r3, [pc, #272]	; (8000804 <main+0x20c>)
 80006f2:	71da      	strb	r2, [r3, #7]
	  sendString[8] = numdataToMSC(wheel);
 80006f4:	4b47      	ldr	r3, [pc, #284]	; (8000814 <main+0x21c>)
 80006f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006fa:	4618      	mov	r0, r3
 80006fc:	f7ff fef2 	bl	80004e4 <numdataToMSC>
 8000700:	4603      	mov	r3, r0
 8000702:	461a      	mov	r2, r3
 8000704:	4b3f      	ldr	r3, [pc, #252]	; (8000804 <main+0x20c>)
 8000706:	721a      	strb	r2, [r3, #8]
	  sendString[9] = numdataToLSC(wheel);
 8000708:	4b42      	ldr	r3, [pc, #264]	; (8000814 <main+0x21c>)
 800070a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800070e:	4618      	mov	r0, r3
 8000710:	f7ff ff06 	bl	8000520 <numdataToLSC>
 8000714:	4603      	mov	r3, r0
 8000716:	461a      	mov	r2, r3
 8000718:	4b3a      	ldr	r3, [pc, #232]	; (8000804 <main+0x20c>)
 800071a:	725a      	strb	r2, [r3, #9]
	  sendString[10] = switchToChar(leftSwitch);
 800071c:	4b3e      	ldr	r3, [pc, #248]	; (8000818 <main+0x220>)
 800071e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000722:	4618      	mov	r0, r3
 8000724:	f7ff ff1e 	bl	8000564 <switchToChar>
 8000728:	4603      	mov	r3, r0
 800072a:	461a      	mov	r2, r3
 800072c:	4b35      	ldr	r3, [pc, #212]	; (8000804 <main+0x20c>)
 800072e:	729a      	strb	r2, [r3, #10]
	  sendString[11] = switchToChar(rightSwitch);
 8000730:	4b3a      	ldr	r3, [pc, #232]	; (800081c <main+0x224>)
 8000732:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000736:	4618      	mov	r0, r3
 8000738:	f7ff ff14 	bl	8000564 <switchToChar>
 800073c:	4603      	mov	r3, r0
 800073e:	461a      	mov	r2, r3
 8000740:	4b30      	ldr	r3, [pc, #192]	; (8000804 <main+0x20c>)
 8000742:	72da      	strb	r2, [r3, #11]

	  sendString[12] = numdataToMSC(rc.mouse.x);
 8000744:	4b36      	ldr	r3, [pc, #216]	; (8000820 <main+0x228>)
 8000746:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800074a:	4618      	mov	r0, r3
 800074c:	f7ff feca 	bl	80004e4 <numdataToMSC>
 8000750:	4603      	mov	r3, r0
 8000752:	461a      	mov	r2, r3
 8000754:	4b2b      	ldr	r3, [pc, #172]	; (8000804 <main+0x20c>)
 8000756:	731a      	strb	r2, [r3, #12]
	  sendString[13] = numdataToLSC(rc.mouse.x);
 8000758:	4b31      	ldr	r3, [pc, #196]	; (8000820 <main+0x228>)
 800075a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800075e:	4618      	mov	r0, r3
 8000760:	f7ff fede 	bl	8000520 <numdataToLSC>
 8000764:	4603      	mov	r3, r0
 8000766:	461a      	mov	r2, r3
 8000768:	4b26      	ldr	r3, [pc, #152]	; (8000804 <main+0x20c>)
 800076a:	735a      	strb	r2, [r3, #13]
	  sendString[14] = numdataToMSC(rc.mouse.y);
 800076c:	4b2c      	ldr	r3, [pc, #176]	; (8000820 <main+0x228>)
 800076e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000772:	4618      	mov	r0, r3
 8000774:	f7ff feb6 	bl	80004e4 <numdataToMSC>
 8000778:	4603      	mov	r3, r0
 800077a:	461a      	mov	r2, r3
 800077c:	4b21      	ldr	r3, [pc, #132]	; (8000804 <main+0x20c>)
 800077e:	739a      	strb	r2, [r3, #14]
	  sendString[15] = numdataToLSC(rc.mouse.y);
 8000780:	4b27      	ldr	r3, [pc, #156]	; (8000820 <main+0x228>)
 8000782:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000786:	4618      	mov	r0, r3
 8000788:	f7ff feca 	bl	8000520 <numdataToLSC>
 800078c:	4603      	mov	r3, r0
 800078e:	461a      	mov	r2, r3
 8000790:	4b1c      	ldr	r3, [pc, #112]	; (8000804 <main+0x20c>)
 8000792:	73da      	strb	r2, [r3, #15]
	  sendString[16] = numdataToMSC(rc.mouse.z);
 8000794:	4b22      	ldr	r3, [pc, #136]	; (8000820 <main+0x228>)
 8000796:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800079a:	4618      	mov	r0, r3
 800079c:	f7ff fea2 	bl	80004e4 <numdataToMSC>
 80007a0:	4603      	mov	r3, r0
 80007a2:	461a      	mov	r2, r3
 80007a4:	4b17      	ldr	r3, [pc, #92]	; (8000804 <main+0x20c>)
 80007a6:	741a      	strb	r2, [r3, #16]
	  sendString[17] = numdataToLSC(rc.mouse.z);
 80007a8:	4b1d      	ldr	r3, [pc, #116]	; (8000820 <main+0x228>)
 80007aa:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80007ae:	4618      	mov	r0, r3
 80007b0:	f7ff feb6 	bl	8000520 <numdataToLSC>
 80007b4:	4603      	mov	r3, r0
 80007b6:	461a      	mov	r2, r3
 80007b8:	4b12      	ldr	r3, [pc, #72]	; (8000804 <main+0x20c>)
 80007ba:	745a      	strb	r2, [r3, #17]
	  sendString[18] = switchToChar(rc.mouse.l);
 80007bc:	4b18      	ldr	r3, [pc, #96]	; (8000820 <main+0x228>)
 80007be:	7c9b      	ldrb	r3, [r3, #18]
 80007c0:	4618      	mov	r0, r3
 80007c2:	f7ff fecf 	bl	8000564 <switchToChar>
 80007c6:	4603      	mov	r3, r0
 80007c8:	461a      	mov	r2, r3
 80007ca:	4b0e      	ldr	r3, [pc, #56]	; (8000804 <main+0x20c>)
 80007cc:	749a      	strb	r2, [r3, #18]
	  sendString[19] = switchToChar(rc.mouse.r);
 80007ce:	4b14      	ldr	r3, [pc, #80]	; (8000820 <main+0x228>)
 80007d0:	7cdb      	ldrb	r3, [r3, #19]
 80007d2:	4618      	mov	r0, r3
 80007d4:	f7ff fec6 	bl	8000564 <switchToChar>
 80007d8:	4603      	mov	r3, r0
 80007da:	461a      	mov	r2, r3
 80007dc:	4b09      	ldr	r3, [pc, #36]	; (8000804 <main+0x20c>)
 80007de:	74da      	strb	r2, [r3, #19]

	  sendString[20] = (char)rc.kb.key_code;
 80007e0:	4b0f      	ldr	r3, [pc, #60]	; (8000820 <main+0x228>)
 80007e2:	8a9b      	ldrh	r3, [r3, #20]
 80007e4:	b2da      	uxtb	r2, r3
 80007e6:	4b07      	ldr	r3, [pc, #28]	; (8000804 <main+0x20c>)
 80007e8:	751a      	strb	r2, [r3, #20]


	  HAL_UART_Transmit(&huart7, sendString, sizeof(sendString) ,HAL_MAX_DELAY);
 80007ea:	f04f 33ff 	mov.w	r3, #4294967295
 80007ee:	2215      	movs	r2, #21
 80007f0:	4904      	ldr	r1, [pc, #16]	; (8000804 <main+0x20c>)
 80007f2:	480c      	ldr	r0, [pc, #48]	; (8000824 <main+0x22c>)
 80007f4:	f004 fb9b 	bl	8004f2e <HAL_UART_Transmit>
	  HAL_Delay(40); // Important as to not spam the Nucleo
 80007f8:	2028      	movs	r0, #40	; 0x28
 80007fa:	f001 fdbf 	bl	800237c <HAL_Delay>
	  getRCVals();
 80007fe:	e727      	b.n	8000650 <main+0x58>
 8000800:	200001cc 	.word	0x200001cc
 8000804:	20000518 	.word	0x20000518
 8000808:	200001ca 	.word	0x200001ca
 800080c:	2000038c 	.word	0x2000038c
 8000810:	200001c8 	.word	0x200001c8
 8000814:	2000002c 	.word	0x2000002c
 8000818:	200001ce 	.word	0x200001ce
 800081c:	200004cc 	.word	0x200004cc
 8000820:	20000584 	.word	0x20000584
 8000824:	200000e4 	.word	0x200000e4

08000828 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b094      	sub	sp, #80	; 0x50
 800082c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800082e:	f107 0320 	add.w	r3, r7, #32
 8000832:	2230      	movs	r2, #48	; 0x30
 8000834:	2100      	movs	r1, #0
 8000836:	4618      	mov	r0, r3
 8000838:	f005 fab8 	bl	8005dac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800083c:	f107 030c 	add.w	r3, r7, #12
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	605a      	str	r2, [r3, #4]
 8000846:	609a      	str	r2, [r3, #8]
 8000848:	60da      	str	r2, [r3, #12]
 800084a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800084c:	2300      	movs	r3, #0
 800084e:	60bb      	str	r3, [r7, #8]
 8000850:	4b28      	ldr	r3, [pc, #160]	; (80008f4 <SystemClock_Config+0xcc>)
 8000852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000854:	4a27      	ldr	r2, [pc, #156]	; (80008f4 <SystemClock_Config+0xcc>)
 8000856:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800085a:	6413      	str	r3, [r2, #64]	; 0x40
 800085c:	4b25      	ldr	r3, [pc, #148]	; (80008f4 <SystemClock_Config+0xcc>)
 800085e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000860:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000864:	60bb      	str	r3, [r7, #8]
 8000866:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000868:	2300      	movs	r3, #0
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	4b22      	ldr	r3, [pc, #136]	; (80008f8 <SystemClock_Config+0xd0>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a21      	ldr	r2, [pc, #132]	; (80008f8 <SystemClock_Config+0xd0>)
 8000872:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000876:	6013      	str	r3, [r2, #0]
 8000878:	4b1f      	ldr	r3, [pc, #124]	; (80008f8 <SystemClock_Config+0xd0>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000880:	607b      	str	r3, [r7, #4]
 8000882:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000884:	2301      	movs	r3, #1
 8000886:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000888:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800088c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800088e:	2302      	movs	r3, #2
 8000890:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000892:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000896:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8000898:	2306      	movs	r3, #6
 800089a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800089c:	23a8      	movs	r3, #168	; 0xa8
 800089e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008a0:	2302      	movs	r3, #2
 80008a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008a4:	2304      	movs	r3, #4
 80008a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a8:	f107 0320 	add.w	r3, r7, #32
 80008ac:	4618      	mov	r0, r3
 80008ae:	f003 fa43 	bl	8003d38 <HAL_RCC_OscConfig>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008b8:	f000 fcde 	bl	8001278 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008bc:	230f      	movs	r3, #15
 80008be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008c0:	2302      	movs	r3, #2
 80008c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008c4:	2300      	movs	r3, #0
 80008c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008c8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008d4:	f107 030c 	add.w	r3, r7, #12
 80008d8:	2105      	movs	r1, #5
 80008da:	4618      	mov	r0, r3
 80008dc:	f003 fca4 	bl	8004228 <HAL_RCC_ClockConfig>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80008e6:	f000 fcc7 	bl	8001278 <Error_Handler>
  }
}
 80008ea:	bf00      	nop
 80008ec:	3750      	adds	r7, #80	; 0x50
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	40023800 	.word	0x40023800
 80008f8:	40007000 	.word	0x40007000

080008fc <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000900:	4b17      	ldr	r3, [pc, #92]	; (8000960 <MX_CAN1_Init+0x64>)
 8000902:	4a18      	ldr	r2, [pc, #96]	; (8000964 <MX_CAN1_Init+0x68>)
 8000904:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8000906:	4b16      	ldr	r3, [pc, #88]	; (8000960 <MX_CAN1_Init+0x64>)
 8000908:	2203      	movs	r2, #3
 800090a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800090c:	4b14      	ldr	r3, [pc, #80]	; (8000960 <MX_CAN1_Init+0x64>)
 800090e:	2200      	movs	r2, #0
 8000910:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000912:	4b13      	ldr	r3, [pc, #76]	; (8000960 <MX_CAN1_Init+0x64>)
 8000914:	2200      	movs	r2, #0
 8000916:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_9TQ;
 8000918:	4b11      	ldr	r3, [pc, #68]	; (8000960 <MX_CAN1_Init+0x64>)
 800091a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800091e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000920:	4b0f      	ldr	r3, [pc, #60]	; (8000960 <MX_CAN1_Init+0x64>)
 8000922:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000926:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000928:	4b0d      	ldr	r3, [pc, #52]	; (8000960 <MX_CAN1_Init+0x64>)
 800092a:	2200      	movs	r2, #0
 800092c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800092e:	4b0c      	ldr	r3, [pc, #48]	; (8000960 <MX_CAN1_Init+0x64>)
 8000930:	2200      	movs	r2, #0
 8000932:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000934:	4b0a      	ldr	r3, [pc, #40]	; (8000960 <MX_CAN1_Init+0x64>)
 8000936:	2200      	movs	r2, #0
 8000938:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800093a:	4b09      	ldr	r3, [pc, #36]	; (8000960 <MX_CAN1_Init+0x64>)
 800093c:	2200      	movs	r2, #0
 800093e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000940:	4b07      	ldr	r3, [pc, #28]	; (8000960 <MX_CAN1_Init+0x64>)
 8000942:	2200      	movs	r2, #0
 8000944:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000946:	4b06      	ldr	r3, [pc, #24]	; (8000960 <MX_CAN1_Init+0x64>)
 8000948:	2200      	movs	r2, #0
 800094a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800094c:	4804      	ldr	r0, [pc, #16]	; (8000960 <MX_CAN1_Init+0x64>)
 800094e:	f001 fd39 	bl	80023c4 <HAL_CAN_Init>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000958:	f000 fc8e 	bl	8001278 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800095c:	bf00      	nop
 800095e:	bd80      	pop	{r7, pc}
 8000960:	200004a4 	.word	0x200004a4
 8000964:	40006400 	.word	0x40006400

08000968 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 800096c:	4b17      	ldr	r3, [pc, #92]	; (80009cc <MX_CAN2_Init+0x64>)
 800096e:	4a18      	ldr	r2, [pc, #96]	; (80009d0 <MX_CAN2_Init+0x68>)
 8000970:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 8000972:	4b16      	ldr	r3, [pc, #88]	; (80009cc <MX_CAN2_Init+0x64>)
 8000974:	2203      	movs	r2, #3
 8000976:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000978:	4b14      	ldr	r3, [pc, #80]	; (80009cc <MX_CAN2_Init+0x64>)
 800097a:	2200      	movs	r2, #0
 800097c:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800097e:	4b13      	ldr	r3, [pc, #76]	; (80009cc <MX_CAN2_Init+0x64>)
 8000980:	2200      	movs	r2, #0
 8000982:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_9TQ;
 8000984:	4b11      	ldr	r3, [pc, #68]	; (80009cc <MX_CAN2_Init+0x64>)
 8000986:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800098a:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_4TQ;
 800098c:	4b0f      	ldr	r3, [pc, #60]	; (80009cc <MX_CAN2_Init+0x64>)
 800098e:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000992:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000994:	4b0d      	ldr	r3, [pc, #52]	; (80009cc <MX_CAN2_Init+0x64>)
 8000996:	2200      	movs	r2, #0
 8000998:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 800099a:	4b0c      	ldr	r3, [pc, #48]	; (80009cc <MX_CAN2_Init+0x64>)
 800099c:	2200      	movs	r2, #0
 800099e:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80009a0:	4b0a      	ldr	r3, [pc, #40]	; (80009cc <MX_CAN2_Init+0x64>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80009a6:	4b09      	ldr	r3, [pc, #36]	; (80009cc <MX_CAN2_Init+0x64>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80009ac:	4b07      	ldr	r3, [pc, #28]	; (80009cc <MX_CAN2_Init+0x64>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80009b2:	4b06      	ldr	r3, [pc, #24]	; (80009cc <MX_CAN2_Init+0x64>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80009b8:	4804      	ldr	r0, [pc, #16]	; (80009cc <MX_CAN2_Init+0x64>)
 80009ba:	f001 fd03 	bl	80023c4 <HAL_CAN_Init>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 80009c4:	f000 fc58 	bl	8001278 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80009c8:	bf00      	nop
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	20000260 	.word	0x20000260
 80009d0:	40006800 	.word	0x40006800

080009d4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80009d8:	4b1b      	ldr	r3, [pc, #108]	; (8000a48 <MX_I2C3_Init+0x74>)
 80009da:	4a1c      	ldr	r2, [pc, #112]	; (8000a4c <MX_I2C3_Init+0x78>)
 80009dc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80009de:	4b1a      	ldr	r3, [pc, #104]	; (8000a48 <MX_I2C3_Init+0x74>)
 80009e0:	4a1b      	ldr	r2, [pc, #108]	; (8000a50 <MX_I2C3_Init+0x7c>)
 80009e2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009e4:	4b18      	ldr	r3, [pc, #96]	; (8000a48 <MX_I2C3_Init+0x74>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80009ea:	4b17      	ldr	r3, [pc, #92]	; (8000a48 <MX_I2C3_Init+0x74>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009f0:	4b15      	ldr	r3, [pc, #84]	; (8000a48 <MX_I2C3_Init+0x74>)
 80009f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009f6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009f8:	4b13      	ldr	r3, [pc, #76]	; (8000a48 <MX_I2C3_Init+0x74>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80009fe:	4b12      	ldr	r3, [pc, #72]	; (8000a48 <MX_I2C3_Init+0x74>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a04:	4b10      	ldr	r3, [pc, #64]	; (8000a48 <MX_I2C3_Init+0x74>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a0a:	4b0f      	ldr	r3, [pc, #60]	; (8000a48 <MX_I2C3_Init+0x74>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000a10:	480d      	ldr	r0, [pc, #52]	; (8000a48 <MX_I2C3_Init+0x74>)
 8000a12:	f002 ffd1 	bl	80039b8 <HAL_I2C_Init>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000a1c:	f000 fc2c 	bl	8001278 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a20:	2100      	movs	r1, #0
 8000a22:	4809      	ldr	r0, [pc, #36]	; (8000a48 <MX_I2C3_Init+0x74>)
 8000a24:	f003 f90c 	bl	8003c40 <HAL_I2CEx_ConfigAnalogFilter>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000a2e:	f000 fc23 	bl	8001278 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000a32:	2100      	movs	r1, #0
 8000a34:	4804      	ldr	r0, [pc, #16]	; (8000a48 <MX_I2C3_Init+0x74>)
 8000a36:	f003 f93f 	bl	8003cb8 <HAL_I2CEx_ConfigDigitalFilter>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000a40:	f000 fc1a 	bl	8001278 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000a44:	bf00      	nop
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	20000090 	.word	0x20000090
 8000a4c:	40005c00 	.word	0x40005c00
 8000a50:	000186a0 	.word	0x000186a0

08000a54 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000a58:	4b17      	ldr	r3, [pc, #92]	; (8000ab8 <MX_SPI5_Init+0x64>)
 8000a5a:	4a18      	ldr	r2, [pc, #96]	; (8000abc <MX_SPI5_Init+0x68>)
 8000a5c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000a5e:	4b16      	ldr	r3, [pc, #88]	; (8000ab8 <MX_SPI5_Init+0x64>)
 8000a60:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a64:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000a66:	4b14      	ldr	r3, [pc, #80]	; (8000ab8 <MX_SPI5_Init+0x64>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a6c:	4b12      	ldr	r3, [pc, #72]	; (8000ab8 <MX_SPI5_Init+0x64>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a72:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <MX_SPI5_Init+0x64>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a78:	4b0f      	ldr	r3, [pc, #60]	; (8000ab8 <MX_SPI5_Init+0x64>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000a7e:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <MX_SPI5_Init+0x64>)
 8000a80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a84:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000a86:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <MX_SPI5_Init+0x64>)
 8000a88:	2230      	movs	r2, #48	; 0x30
 8000a8a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a8c:	4b0a      	ldr	r3, [pc, #40]	; (8000ab8 <MX_SPI5_Init+0x64>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a92:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <MX_SPI5_Init+0x64>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a98:	4b07      	ldr	r3, [pc, #28]	; (8000ab8 <MX_SPI5_Init+0x64>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000a9e:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <MX_SPI5_Init+0x64>)
 8000aa0:	220a      	movs	r2, #10
 8000aa2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000aa4:	4804      	ldr	r0, [pc, #16]	; (8000ab8 <MX_SPI5_Init+0x64>)
 8000aa6:	f003 fd8f 	bl	80045c8 <HAL_SPI_Init>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000ab0:	f000 fbe2 	bl	8001278 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000ab4:	bf00      	nop
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	20000128 	.word	0x20000128
 8000abc:	40015000 	.word	0x40015000

08000ac0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b08a      	sub	sp, #40	; 0x28
 8000ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ac6:	f107 0320 	add.w	r3, r7, #32
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
 8000ace:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ad0:	1d3b      	adds	r3, r7, #4
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	601a      	str	r2, [r3, #0]
 8000ad6:	605a      	str	r2, [r3, #4]
 8000ad8:	609a      	str	r2, [r3, #8]
 8000ada:	60da      	str	r2, [r3, #12]
 8000adc:	611a      	str	r2, [r3, #16]
 8000ade:	615a      	str	r2, [r3, #20]
 8000ae0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ae2:	4b28      	ldr	r3, [pc, #160]	; (8000b84 <MX_TIM2_Init+0xc4>)
 8000ae4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ae8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = TIM_PSC_APB1;
 8000aea:	4b26      	ldr	r3, [pc, #152]	; (8000b84 <MX_TIM2_Init+0xc4>)
 8000aec:	22a7      	movs	r2, #167	; 0xa7
 8000aee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000af0:	4b24      	ldr	r3, [pc, #144]	; (8000b84 <MX_TIM2_Init+0xc4>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = PWM_RESOLUTION-1;
 8000af6:	4b23      	ldr	r3, [pc, #140]	; (8000b84 <MX_TIM2_Init+0xc4>)
 8000af8:	f242 720f 	movw	r2, #9999	; 0x270f
 8000afc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000afe:	4b21      	ldr	r3, [pc, #132]	; (8000b84 <MX_TIM2_Init+0xc4>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b04:	4b1f      	ldr	r3, [pc, #124]	; (8000b84 <MX_TIM2_Init+0xc4>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b0a:	481e      	ldr	r0, [pc, #120]	; (8000b84 <MX_TIM2_Init+0xc4>)
 8000b0c:	f003 fde5 	bl	80046da <HAL_TIM_PWM_Init>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000b16:	f000 fbaf 	bl	8001278 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b22:	f107 0320 	add.w	r3, r7, #32
 8000b26:	4619      	mov	r1, r3
 8000b28:	4816      	ldr	r0, [pc, #88]	; (8000b84 <MX_TIM2_Init+0xc4>)
 8000b2a:	f004 f937 	bl	8004d9c <HAL_TIMEx_MasterConfigSynchronization>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000b34:	f000 fba0 	bl	8001278 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b38:	2360      	movs	r3, #96	; 0x60
 8000b3a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = PWM_DEFAULT_DUTY;
 8000b3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b40:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b42:	2300      	movs	r3, #0
 8000b44:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b46:	2300      	movs	r3, #0
 8000b48:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b4a:	1d3b      	adds	r3, r7, #4
 8000b4c:	2208      	movs	r2, #8
 8000b4e:	4619      	mov	r1, r3
 8000b50:	480c      	ldr	r0, [pc, #48]	; (8000b84 <MX_TIM2_Init+0xc4>)
 8000b52:	f003 fe11 	bl	8004778 <HAL_TIM_PWM_ConfigChannel>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000b5c:	f000 fb8c 	bl	8001278 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b60:	1d3b      	adds	r3, r7, #4
 8000b62:	220c      	movs	r2, #12
 8000b64:	4619      	mov	r1, r3
 8000b66:	4807      	ldr	r0, [pc, #28]	; (8000b84 <MX_TIM2_Init+0xc4>)
 8000b68:	f003 fe06 	bl	8004778 <HAL_TIM_PWM_ConfigChannel>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000b72:	f000 fb81 	bl	8001278 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000b76:	4803      	ldr	r0, [pc, #12]	; (8000b84 <MX_TIM2_Init+0xc4>)
 8000b78:	f000 fffa 	bl	8001b70 <HAL_TIM_MspPostInit>

}
 8000b7c:	bf00      	nop
 8000b7e:	3728      	adds	r7, #40	; 0x28
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	20000418 	.word	0x20000418

08000b88 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b08a      	sub	sp, #40	; 0x28
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b8e:	f107 0320 	add.w	r3, r7, #32
 8000b92:	2200      	movs	r2, #0
 8000b94:	601a      	str	r2, [r3, #0]
 8000b96:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b98:	1d3b      	adds	r3, r7, #4
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	601a      	str	r2, [r3, #0]
 8000b9e:	605a      	str	r2, [r3, #4]
 8000ba0:	609a      	str	r2, [r3, #8]
 8000ba2:	60da      	str	r2, [r3, #12]
 8000ba4:	611a      	str	r2, [r3, #16]
 8000ba6:	615a      	str	r2, [r3, #20]
 8000ba8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000baa:	4b22      	ldr	r3, [pc, #136]	; (8000c34 <MX_TIM3_Init+0xac>)
 8000bac:	4a22      	ldr	r2, [pc, #136]	; (8000c38 <MX_TIM3_Init+0xb0>)
 8000bae:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000bb0:	4b20      	ldr	r3, [pc, #128]	; (8000c34 <MX_TIM3_Init+0xac>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bb6:	4b1f      	ldr	r3, [pc, #124]	; (8000c34 <MX_TIM3_Init+0xac>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4999;
 8000bbc:	4b1d      	ldr	r3, [pc, #116]	; (8000c34 <MX_TIM3_Init+0xac>)
 8000bbe:	f241 3287 	movw	r2, #4999	; 0x1387
 8000bc2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bc4:	4b1b      	ldr	r3, [pc, #108]	; (8000c34 <MX_TIM3_Init+0xac>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bca:	4b1a      	ldr	r3, [pc, #104]	; (8000c34 <MX_TIM3_Init+0xac>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000bd0:	4818      	ldr	r0, [pc, #96]	; (8000c34 <MX_TIM3_Init+0xac>)
 8000bd2:	f003 fd82 	bl	80046da <HAL_TIM_PWM_Init>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000bdc:	f000 fb4c 	bl	8001278 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000be0:	2300      	movs	r3, #0
 8000be2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000be4:	2300      	movs	r3, #0
 8000be6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000be8:	f107 0320 	add.w	r3, r7, #32
 8000bec:	4619      	mov	r1, r3
 8000bee:	4811      	ldr	r0, [pc, #68]	; (8000c34 <MX_TIM3_Init+0xac>)
 8000bf0:	f004 f8d4 	bl	8004d9c <HAL_TIMEx_MasterConfigSynchronization>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000bfa:	f000 fb3d 	bl	8001278 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bfe:	2360      	movs	r3, #96	; 0x60
 8000c00:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000c02:	2300      	movs	r3, #0
 8000c04:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c06:	2300      	movs	r3, #0
 8000c08:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c0e:	1d3b      	adds	r3, r7, #4
 8000c10:	2204      	movs	r2, #4
 8000c12:	4619      	mov	r1, r3
 8000c14:	4807      	ldr	r0, [pc, #28]	; (8000c34 <MX_TIM3_Init+0xac>)
 8000c16:	f003 fdaf 	bl	8004778 <HAL_TIM_PWM_ConfigChannel>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000c20:	f000 fb2a 	bl	8001278 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000c24:	4803      	ldr	r0, [pc, #12]	; (8000c34 <MX_TIM3_Init+0xac>)
 8000c26:	f000 ffa3 	bl	8001b70 <HAL_TIM_MspPostInit>

}
 8000c2a:	bf00      	nop
 8000c2c:	3728      	adds	r7, #40	; 0x28
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	20000218 	.word	0x20000218
 8000c38:	40000400 	.word	0x40000400

08000c3c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b08a      	sub	sp, #40	; 0x28
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c42:	f107 0320 	add.w	r3, r7, #32
 8000c46:	2200      	movs	r2, #0
 8000c48:	601a      	str	r2, [r3, #0]
 8000c4a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c4c:	1d3b      	adds	r3, r7, #4
 8000c4e:	2200      	movs	r2, #0
 8000c50:	601a      	str	r2, [r3, #0]
 8000c52:	605a      	str	r2, [r3, #4]
 8000c54:	609a      	str	r2, [r3, #8]
 8000c56:	60da      	str	r2, [r3, #12]
 8000c58:	611a      	str	r2, [r3, #16]
 8000c5a:	615a      	str	r2, [r3, #20]
 8000c5c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000c5e:	4b33      	ldr	r3, [pc, #204]	; (8000d2c <MX_TIM4_Init+0xf0>)
 8000c60:	4a33      	ldr	r2, [pc, #204]	; (8000d30 <MX_TIM4_Init+0xf4>)
 8000c62:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = TIM_PSC_APB1;
 8000c64:	4b31      	ldr	r3, [pc, #196]	; (8000d2c <MX_TIM4_Init+0xf0>)
 8000c66:	22a7      	movs	r2, #167	; 0xa7
 8000c68:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c6a:	4b30      	ldr	r3, [pc, #192]	; (8000d2c <MX_TIM4_Init+0xf0>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = PWM_RESOLUTION-1;
 8000c70:	4b2e      	ldr	r3, [pc, #184]	; (8000d2c <MX_TIM4_Init+0xf0>)
 8000c72:	f242 720f 	movw	r2, #9999	; 0x270f
 8000c76:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c78:	4b2c      	ldr	r3, [pc, #176]	; (8000d2c <MX_TIM4_Init+0xf0>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c7e:	4b2b      	ldr	r3, [pc, #172]	; (8000d2c <MX_TIM4_Init+0xf0>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000c84:	4829      	ldr	r0, [pc, #164]	; (8000d2c <MX_TIM4_Init+0xf0>)
 8000c86:	f003 fd28 	bl	80046da <HAL_TIM_PWM_Init>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8000c90:	f000 faf2 	bl	8001278 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c94:	2300      	movs	r3, #0
 8000c96:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000c9c:	f107 0320 	add.w	r3, r7, #32
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4822      	ldr	r0, [pc, #136]	; (8000d2c <MX_TIM4_Init+0xf0>)
 8000ca4:	f004 f87a 	bl	8004d9c <HAL_TIMEx_MasterConfigSynchronization>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8000cae:	f000 fae3 	bl	8001278 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cb2:	2360      	movs	r3, #96	; 0x60
 8000cb4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = PWM_DEFAULT_DUTY;
 8000cb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cc4:	1d3b      	adds	r3, r7, #4
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4818      	ldr	r0, [pc, #96]	; (8000d2c <MX_TIM4_Init+0xf0>)
 8000ccc:	f003 fd54 	bl	8004778 <HAL_TIM_PWM_ConfigChannel>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000cd6:	f000 facf 	bl	8001278 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000cda:	1d3b      	adds	r3, r7, #4
 8000cdc:	2204      	movs	r2, #4
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4812      	ldr	r0, [pc, #72]	; (8000d2c <MX_TIM4_Init+0xf0>)
 8000ce2:	f003 fd49 	bl	8004778 <HAL_TIM_PWM_ConfigChannel>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8000cec:	f000 fac4 	bl	8001278 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000cf0:	1d3b      	adds	r3, r7, #4
 8000cf2:	2208      	movs	r2, #8
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	480d      	ldr	r0, [pc, #52]	; (8000d2c <MX_TIM4_Init+0xf0>)
 8000cf8:	f003 fd3e 	bl	8004778 <HAL_TIM_PWM_ConfigChannel>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 8000d02:	f000 fab9 	bl	8001278 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d06:	1d3b      	adds	r3, r7, #4
 8000d08:	220c      	movs	r2, #12
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4807      	ldr	r0, [pc, #28]	; (8000d2c <MX_TIM4_Init+0xf0>)
 8000d0e:	f003 fd33 	bl	8004778 <HAL_TIM_PWM_ConfigChannel>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 8000d18:	f000 faae 	bl	8001278 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000d1c:	4803      	ldr	r0, [pc, #12]	; (8000d2c <MX_TIM4_Init+0xf0>)
 8000d1e:	f000 ff27 	bl	8001b70 <HAL_TIM_MspPostInit>

}
 8000d22:	bf00      	nop
 8000d24:	3728      	adds	r7, #40	; 0x28
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	20000180 	.word	0x20000180
 8000d30:	40000800 	.word	0x40000800

08000d34 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b08a      	sub	sp, #40	; 0x28
 8000d38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d3a:	f107 0320 	add.w	r3, r7, #32
 8000d3e:	2200      	movs	r2, #0
 8000d40:	601a      	str	r2, [r3, #0]
 8000d42:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d44:	1d3b      	adds	r3, r7, #4
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	605a      	str	r2, [r3, #4]
 8000d4c:	609a      	str	r2, [r3, #8]
 8000d4e:	60da      	str	r2, [r3, #12]
 8000d50:	611a      	str	r2, [r3, #16]
 8000d52:	615a      	str	r2, [r3, #20]
 8000d54:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000d56:	4b2d      	ldr	r3, [pc, #180]	; (8000e0c <MX_TIM5_Init+0xd8>)
 8000d58:	4a2d      	ldr	r2, [pc, #180]	; (8000e10 <MX_TIM5_Init+0xdc>)
 8000d5a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000d5c:	4b2b      	ldr	r3, [pc, #172]	; (8000e0c <MX_TIM5_Init+0xd8>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d62:	4b2a      	ldr	r3, [pc, #168]	; (8000e0c <MX_TIM5_Init+0xd8>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000d68:	4b28      	ldr	r3, [pc, #160]	; (8000e0c <MX_TIM5_Init+0xd8>)
 8000d6a:	f04f 32ff 	mov.w	r2, #4294967295
 8000d6e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d70:	4b26      	ldr	r3, [pc, #152]	; (8000e0c <MX_TIM5_Init+0xd8>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d76:	4b25      	ldr	r3, [pc, #148]	; (8000e0c <MX_TIM5_Init+0xd8>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000d7c:	4823      	ldr	r0, [pc, #140]	; (8000e0c <MX_TIM5_Init+0xd8>)
 8000d7e:	f003 fcac 	bl	80046da <HAL_TIM_PWM_Init>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8000d88:	f000 fa76 	bl	8001278 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d90:	2300      	movs	r3, #0
 8000d92:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000d94:	f107 0320 	add.w	r3, r7, #32
 8000d98:	4619      	mov	r1, r3
 8000d9a:	481c      	ldr	r0, [pc, #112]	; (8000e0c <MX_TIM5_Init+0xd8>)
 8000d9c:	f003 fffe 	bl	8004d9c <HAL_TIMEx_MasterConfigSynchronization>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8000da6:	f000 fa67 	bl	8001278 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000daa:	2360      	movs	r3, #96	; 0x60
 8000dac:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000dae:	2300      	movs	r3, #0
 8000db0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000db2:	2300      	movs	r3, #0
 8000db4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000db6:	2300      	movs	r3, #0
 8000db8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dba:	1d3b      	adds	r3, r7, #4
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4812      	ldr	r0, [pc, #72]	; (8000e0c <MX_TIM5_Init+0xd8>)
 8000dc2:	f003 fcd9 	bl	8004778 <HAL_TIM_PWM_ConfigChannel>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8000dcc:	f000 fa54 	bl	8001278 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000dd0:	1d3b      	adds	r3, r7, #4
 8000dd2:	2204      	movs	r2, #4
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	480d      	ldr	r0, [pc, #52]	; (8000e0c <MX_TIM5_Init+0xd8>)
 8000dd8:	f003 fcce 	bl	8004778 <HAL_TIM_PWM_ConfigChannel>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8000de2:	f000 fa49 	bl	8001278 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000de6:	1d3b      	adds	r3, r7, #4
 8000de8:	2208      	movs	r2, #8
 8000dea:	4619      	mov	r1, r3
 8000dec:	4807      	ldr	r0, [pc, #28]	; (8000e0c <MX_TIM5_Init+0xd8>)
 8000dee:	f003 fcc3 	bl	8004778 <HAL_TIM_PWM_ConfigChannel>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_TIM5_Init+0xc8>
  {
    Error_Handler();
 8000df8:	f000 fa3e 	bl	8001278 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000dfc:	4803      	ldr	r0, [pc, #12]	; (8000e0c <MX_TIM5_Init+0xd8>)
 8000dfe:	f000 feb7 	bl	8001b70 <HAL_TIM_MspPostInit>

}
 8000e02:	bf00      	nop
 8000e04:	3728      	adds	r7, #40	; 0x28
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	200001d0 	.word	0x200001d0
 8000e10:	40000c00 	.word	0x40000c00

08000e14 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b088      	sub	sp, #32
 8000e18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e1a:	1d3b      	adds	r3, r7, #4
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	605a      	str	r2, [r3, #4]
 8000e22:	609a      	str	r2, [r3, #8]
 8000e24:	60da      	str	r2, [r3, #12]
 8000e26:	611a      	str	r2, [r3, #16]
 8000e28:	615a      	str	r2, [r3, #20]
 8000e2a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8000e2c:	4b1a      	ldr	r3, [pc, #104]	; (8000e98 <MX_TIM12_Init+0x84>)
 8000e2e:	4a1b      	ldr	r2, [pc, #108]	; (8000e9c <MX_TIM12_Init+0x88>)
 8000e30:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 3;
 8000e32:	4b19      	ldr	r3, [pc, #100]	; (8000e98 <MX_TIM12_Init+0x84>)
 8000e34:	2203      	movs	r2, #3
 8000e36:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e38:	4b17      	ldr	r3, [pc, #92]	; (8000e98 <MX_TIM12_Init+0x84>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 7777;
 8000e3e:	4b16      	ldr	r3, [pc, #88]	; (8000e98 <MX_TIM12_Init+0x84>)
 8000e40:	f641 6261 	movw	r2, #7777	; 0x1e61
 8000e44:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e46:	4b14      	ldr	r3, [pc, #80]	; (8000e98 <MX_TIM12_Init+0x84>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e4c:	4b12      	ldr	r3, [pc, #72]	; (8000e98 <MX_TIM12_Init+0x84>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8000e52:	4811      	ldr	r0, [pc, #68]	; (8000e98 <MX_TIM12_Init+0x84>)
 8000e54:	f003 fc41 	bl	80046da <HAL_TIM_PWM_Init>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8000e5e:	f000 fa0b 	bl	8001278 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e62:	2360      	movs	r3, #96	; 0x60
 8000e64:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e66:	2300      	movs	r3, #0
 8000e68:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e72:	1d3b      	adds	r3, r7, #4
 8000e74:	2200      	movs	r2, #0
 8000e76:	4619      	mov	r1, r3
 8000e78:	4807      	ldr	r0, [pc, #28]	; (8000e98 <MX_TIM12_Init+0x84>)
 8000e7a:	f003 fc7d 	bl	8004778 <HAL_TIM_PWM_ConfigChannel>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8000e84:	f000 f9f8 	bl	8001278 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8000e88:	4803      	ldr	r0, [pc, #12]	; (8000e98 <MX_TIM12_Init+0x84>)
 8000e8a:	f000 fe71 	bl	8001b70 <HAL_TIM_MspPostInit>

}
 8000e8e:	bf00      	nop
 8000e90:	3720      	adds	r7, #32
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	200004d0 	.word	0x200004d0
 8000e9c:	40001800 	.word	0x40001800

08000ea0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000ea4:	4b11      	ldr	r3, [pc, #68]	; (8000eec <MX_UART4_Init+0x4c>)
 8000ea6:	4a12      	ldr	r2, [pc, #72]	; (8000ef0 <MX_UART4_Init+0x50>)
 8000ea8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000eaa:	4b10      	ldr	r3, [pc, #64]	; (8000eec <MX_UART4_Init+0x4c>)
 8000eac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000eb0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000eb2:	4b0e      	ldr	r3, [pc, #56]	; (8000eec <MX_UART4_Init+0x4c>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000eb8:	4b0c      	ldr	r3, [pc, #48]	; (8000eec <MX_UART4_Init+0x4c>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_EVEN;
 8000ebe:	4b0b      	ldr	r3, [pc, #44]	; (8000eec <MX_UART4_Init+0x4c>)
 8000ec0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ec4:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000ec6:	4b09      	ldr	r3, [pc, #36]	; (8000eec <MX_UART4_Init+0x4c>)
 8000ec8:	220c      	movs	r2, #12
 8000eca:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ecc:	4b07      	ldr	r3, [pc, #28]	; (8000eec <MX_UART4_Init+0x4c>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ed2:	4b06      	ldr	r3, [pc, #24]	; (8000eec <MX_UART4_Init+0x4c>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000ed8:	4804      	ldr	r0, [pc, #16]	; (8000eec <MX_UART4_Init+0x4c>)
 8000eda:	f003 ffdb 	bl	8004e94 <HAL_UART_Init>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_UART4_Init+0x48>
  {
    Error_Handler();
 8000ee4:	f000 f9c8 	bl	8001278 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000ee8:	bf00      	nop
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	200003d4 	.word	0x200003d4
 8000ef0:	40004c00 	.word	0x40004c00

08000ef4 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8000ef8:	4b10      	ldr	r3, [pc, #64]	; (8000f3c <MX_UART7_Init+0x48>)
 8000efa:	4a11      	ldr	r2, [pc, #68]	; (8000f40 <MX_UART7_Init+0x4c>)
 8000efc:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 100000;
 8000efe:	4b0f      	ldr	r3, [pc, #60]	; (8000f3c <MX_UART7_Init+0x48>)
 8000f00:	4a10      	ldr	r2, [pc, #64]	; (8000f44 <MX_UART7_Init+0x50>)
 8000f02:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8000f04:	4b0d      	ldr	r3, [pc, #52]	; (8000f3c <MX_UART7_Init+0x48>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8000f0a:	4b0c      	ldr	r3, [pc, #48]	; (8000f3c <MX_UART7_Init+0x48>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8000f10:	4b0a      	ldr	r3, [pc, #40]	; (8000f3c <MX_UART7_Init+0x48>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8000f16:	4b09      	ldr	r3, [pc, #36]	; (8000f3c <MX_UART7_Init+0x48>)
 8000f18:	220c      	movs	r2, #12
 8000f1a:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f1c:	4b07      	ldr	r3, [pc, #28]	; (8000f3c <MX_UART7_Init+0x48>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f22:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <MX_UART7_Init+0x48>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8000f28:	4804      	ldr	r0, [pc, #16]	; (8000f3c <MX_UART7_Init+0x48>)
 8000f2a:	f003 ffb3 	bl	8004e94 <HAL_UART_Init>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <MX_UART7_Init+0x44>
  {
    Error_Handler();
 8000f34:	f000 f9a0 	bl	8001278 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8000f38:	bf00      	nop
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	200000e4 	.word	0x200000e4
 8000f40:	40007800 	.word	0x40007800
 8000f44:	000186a0 	.word	0x000186a0

08000f48 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f4c:	4b11      	ldr	r3, [pc, #68]	; (8000f94 <MX_USART1_UART_Init+0x4c>)
 8000f4e:	4a12      	ldr	r2, [pc, #72]	; (8000f98 <MX_USART1_UART_Init+0x50>)
 8000f50:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 100000;
 8000f52:	4b10      	ldr	r3, [pc, #64]	; (8000f94 <MX_USART1_UART_Init+0x4c>)
 8000f54:	4a11      	ldr	r2, [pc, #68]	; (8000f9c <MX_USART1_UART_Init+0x54>)
 8000f56:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f58:	4b0e      	ldr	r3, [pc, #56]	; (8000f94 <MX_USART1_UART_Init+0x4c>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f5e:	4b0d      	ldr	r3, [pc, #52]	; (8000f94 <MX_USART1_UART_Init+0x4c>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8000f64:	4b0b      	ldr	r3, [pc, #44]	; (8000f94 <MX_USART1_UART_Init+0x4c>)
 8000f66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f6a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f6c:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <MX_USART1_UART_Init+0x4c>)
 8000f6e:	220c      	movs	r2, #12
 8000f70:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f72:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <MX_USART1_UART_Init+0x4c>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f78:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <MX_USART1_UART_Init+0x4c>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f7e:	4805      	ldr	r0, [pc, #20]	; (8000f94 <MX_USART1_UART_Init+0x4c>)
 8000f80:	f003 ff88 	bl	8004e94 <HAL_UART_Init>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000f8a:	f000 f975 	bl	8001278 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	20000348 	.word	0x20000348
 8000f98:	40011000 	.word	0x40011000
 8000f9c:	000186a0 	.word	0x000186a0

08000fa0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fa4:	4b11      	ldr	r3, [pc, #68]	; (8000fec <MX_USART2_UART_Init+0x4c>)
 8000fa6:	4a12      	ldr	r2, [pc, #72]	; (8000ff0 <MX_USART2_UART_Init+0x50>)
 8000fa8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000faa:	4b10      	ldr	r3, [pc, #64]	; (8000fec <MX_USART2_UART_Init+0x4c>)
 8000fac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fb0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fb2:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <MX_USART2_UART_Init+0x4c>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fb8:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <MX_USART2_UART_Init+0x4c>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fbe:	4b0b      	ldr	r3, [pc, #44]	; (8000fec <MX_USART2_UART_Init+0x4c>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fc4:	4b09      	ldr	r3, [pc, #36]	; (8000fec <MX_USART2_UART_Init+0x4c>)
 8000fc6:	220c      	movs	r2, #12
 8000fc8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fca:	4b08      	ldr	r3, [pc, #32]	; (8000fec <MX_USART2_UART_Init+0x4c>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fd0:	4b06      	ldr	r3, [pc, #24]	; (8000fec <MX_USART2_UART_Init+0x4c>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fd6:	4805      	ldr	r0, [pc, #20]	; (8000fec <MX_USART2_UART_Init+0x4c>)
 8000fd8:	f003 ff5c 	bl	8004e94 <HAL_UART_Init>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000fe2:	f000 f949 	bl	8001278 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20000460 	.word	0x20000460
 8000ff0:	40004400 	.word	0x40004400

08000ff4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000ff8:	4b11      	ldr	r3, [pc, #68]	; (8001040 <MX_USART6_UART_Init+0x4c>)
 8000ffa:	4a12      	ldr	r2, [pc, #72]	; (8001044 <MX_USART6_UART_Init+0x50>)
 8000ffc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000ffe:	4b10      	ldr	r3, [pc, #64]	; (8001040 <MX_USART6_UART_Init+0x4c>)
 8001000:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001004:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001006:	4b0e      	ldr	r3, [pc, #56]	; (8001040 <MX_USART6_UART_Init+0x4c>)
 8001008:	2200      	movs	r2, #0
 800100a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800100c:	4b0c      	ldr	r3, [pc, #48]	; (8001040 <MX_USART6_UART_Init+0x4c>)
 800100e:	2200      	movs	r2, #0
 8001010:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001012:	4b0b      	ldr	r3, [pc, #44]	; (8001040 <MX_USART6_UART_Init+0x4c>)
 8001014:	2200      	movs	r2, #0
 8001016:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001018:	4b09      	ldr	r3, [pc, #36]	; (8001040 <MX_USART6_UART_Init+0x4c>)
 800101a:	220c      	movs	r2, #12
 800101c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800101e:	4b08      	ldr	r3, [pc, #32]	; (8001040 <MX_USART6_UART_Init+0x4c>)
 8001020:	2200      	movs	r2, #0
 8001022:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001024:	4b06      	ldr	r3, [pc, #24]	; (8001040 <MX_USART6_UART_Init+0x4c>)
 8001026:	2200      	movs	r2, #0
 8001028:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800102a:	4805      	ldr	r0, [pc, #20]	; (8001040 <MX_USART6_UART_Init+0x4c>)
 800102c:	f003 ff32 	bl	8004e94 <HAL_UART_Init>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001036:	f000 f91f 	bl	8001278 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20000390 	.word	0x20000390
 8001044:	40011400 	.word	0x40011400

08001048 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	607b      	str	r3, [r7, #4]
 8001052:	4b1b      	ldr	r3, [pc, #108]	; (80010c0 <MX_DMA_Init+0x78>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	4a1a      	ldr	r2, [pc, #104]	; (80010c0 <MX_DMA_Init+0x78>)
 8001058:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800105c:	6313      	str	r3, [r2, #48]	; 0x30
 800105e:	4b18      	ldr	r3, [pc, #96]	; (80010c0 <MX_DMA_Init+0x78>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001066:	607b      	str	r3, [r7, #4]
 8001068:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	603b      	str	r3, [r7, #0]
 800106e:	4b14      	ldr	r3, [pc, #80]	; (80010c0 <MX_DMA_Init+0x78>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	4a13      	ldr	r2, [pc, #76]	; (80010c0 <MX_DMA_Init+0x78>)
 8001074:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001078:	6313      	str	r3, [r2, #48]	; 0x30
 800107a:	4b11      	ldr	r3, [pc, #68]	; (80010c0 <MX_DMA_Init+0x78>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001082:	603b      	str	r3, [r7, #0]
 8001084:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001086:	2200      	movs	r2, #0
 8001088:	2100      	movs	r1, #0
 800108a:	2010      	movs	r0, #16
 800108c:	f001 feb1 	bl	8002df2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001090:	2010      	movs	r0, #16
 8001092:	f001 feca 	bl	8002e2a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001096:	2200      	movs	r2, #0
 8001098:	2100      	movs	r1, #0
 800109a:	2011      	movs	r0, #17
 800109c:	f001 fea9 	bl	8002df2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80010a0:	2011      	movs	r0, #17
 80010a2:	f001 fec2 	bl	8002e2a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80010a6:	2200      	movs	r2, #0
 80010a8:	2100      	movs	r1, #0
 80010aa:	203a      	movs	r0, #58	; 0x3a
 80010ac:	f001 fea1 	bl	8002df2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80010b0:	203a      	movs	r0, #58	; 0x3a
 80010b2:	f001 feba 	bl	8002e2a <HAL_NVIC_EnableIRQ>

}
 80010b6:	bf00      	nop
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40023800 	.word	0x40023800

080010c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b08c      	sub	sp, #48	; 0x30
 80010c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ca:	f107 031c 	add.w	r3, r7, #28
 80010ce:	2200      	movs	r2, #0
 80010d0:	601a      	str	r2, [r3, #0]
 80010d2:	605a      	str	r2, [r3, #4]
 80010d4:	609a      	str	r2, [r3, #8]
 80010d6:	60da      	str	r2, [r3, #12]
 80010d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	61bb      	str	r3, [r7, #24]
 80010de:	4b61      	ldr	r3, [pc, #388]	; (8001264 <MX_GPIO_Init+0x1a0>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	4a60      	ldr	r2, [pc, #384]	; (8001264 <MX_GPIO_Init+0x1a0>)
 80010e4:	f043 0310 	orr.w	r3, r3, #16
 80010e8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ea:	4b5e      	ldr	r3, [pc, #376]	; (8001264 <MX_GPIO_Init+0x1a0>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	f003 0310 	and.w	r3, r3, #16
 80010f2:	61bb      	str	r3, [r7, #24]
 80010f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	617b      	str	r3, [r7, #20]
 80010fa:	4b5a      	ldr	r3, [pc, #360]	; (8001264 <MX_GPIO_Init+0x1a0>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	4a59      	ldr	r2, [pc, #356]	; (8001264 <MX_GPIO_Init+0x1a0>)
 8001100:	f043 0302 	orr.w	r3, r3, #2
 8001104:	6313      	str	r3, [r2, #48]	; 0x30
 8001106:	4b57      	ldr	r3, [pc, #348]	; (8001264 <MX_GPIO_Init+0x1a0>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	f003 0302 	and.w	r3, r3, #2
 800110e:	617b      	str	r3, [r7, #20]
 8001110:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	613b      	str	r3, [r7, #16]
 8001116:	4b53      	ldr	r3, [pc, #332]	; (8001264 <MX_GPIO_Init+0x1a0>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	4a52      	ldr	r2, [pc, #328]	; (8001264 <MX_GPIO_Init+0x1a0>)
 800111c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001120:	6313      	str	r3, [r2, #48]	; 0x30
 8001122:	4b50      	ldr	r3, [pc, #320]	; (8001264 <MX_GPIO_Init+0x1a0>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800112a:	613b      	str	r3, [r7, #16]
 800112c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	60fb      	str	r3, [r7, #12]
 8001132:	4b4c      	ldr	r3, [pc, #304]	; (8001264 <MX_GPIO_Init+0x1a0>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	4a4b      	ldr	r2, [pc, #300]	; (8001264 <MX_GPIO_Init+0x1a0>)
 8001138:	f043 0301 	orr.w	r3, r3, #1
 800113c:	6313      	str	r3, [r2, #48]	; 0x30
 800113e:	4b49      	ldr	r3, [pc, #292]	; (8001264 <MX_GPIO_Init+0x1a0>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	f003 0301 	and.w	r3, r3, #1
 8001146:	60fb      	str	r3, [r7, #12]
 8001148:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	60bb      	str	r3, [r7, #8]
 800114e:	4b45      	ldr	r3, [pc, #276]	; (8001264 <MX_GPIO_Init+0x1a0>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	4a44      	ldr	r2, [pc, #272]	; (8001264 <MX_GPIO_Init+0x1a0>)
 8001154:	f043 0308 	orr.w	r3, r3, #8
 8001158:	6313      	str	r3, [r2, #48]	; 0x30
 800115a:	4b42      	ldr	r3, [pc, #264]	; (8001264 <MX_GPIO_Init+0x1a0>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	f003 0308 	and.w	r3, r3, #8
 8001162:	60bb      	str	r3, [r7, #8]
 8001164:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	607b      	str	r3, [r7, #4]
 800116a:	4b3e      	ldr	r3, [pc, #248]	; (8001264 <MX_GPIO_Init+0x1a0>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	4a3d      	ldr	r2, [pc, #244]	; (8001264 <MX_GPIO_Init+0x1a0>)
 8001170:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001174:	6313      	str	r3, [r2, #48]	; 0x30
 8001176:	4b3b      	ldr	r3, [pc, #236]	; (8001264 <MX_GPIO_Init+0x1a0>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800117e:	607b      	str	r3, [r7, #4]
 8001180:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	603b      	str	r3, [r7, #0]
 8001186:	4b37      	ldr	r3, [pc, #220]	; (8001264 <MX_GPIO_Init+0x1a0>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	4a36      	ldr	r2, [pc, #216]	; (8001264 <MX_GPIO_Init+0x1a0>)
 800118c:	f043 0320 	orr.w	r3, r3, #32
 8001190:	6313      	str	r3, [r2, #48]	; 0x30
 8001192:	4b34      	ldr	r3, [pc, #208]	; (8001264 <MX_GPIO_Init+0x1a0>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	f003 0320 	and.w	r3, r3, #32
 800119a:	603b      	str	r3, [r7, #0]
 800119c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, IST_INT_Pin|IST_RST_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 800119e:	2200      	movs	r2, #0
 80011a0:	f640 010c 	movw	r1, #2060	; 0x80c
 80011a4:	4830      	ldr	r0, [pc, #192]	; (8001268 <MX_GPIO_Init+0x1a4>)
 80011a6:	f002 fbed 	bl	8003984 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80011aa:	2200      	movs	r2, #0
 80011ac:	213c      	movs	r1, #60	; 0x3c
 80011ae:	482f      	ldr	r0, [pc, #188]	; (800126c <MX_GPIO_Init+0x1a8>)
 80011b0:	f002 fbe8 	bl	8003984 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6|LED_GREEN_Pin, GPIO_PIN_RESET);
 80011b4:	2200      	movs	r2, #0
 80011b6:	f244 0140 	movw	r1, #16448	; 0x4040
 80011ba:	482d      	ldr	r0, [pc, #180]	; (8001270 <MX_GPIO_Init+0x1ac>)
 80011bc:	f002 fbe2 	bl	8003984 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, GPIO_PIN_RESET);
 80011c0:	2200      	movs	r2, #0
 80011c2:	2102      	movs	r1, #2
 80011c4:	482b      	ldr	r0, [pc, #172]	; (8001274 <MX_GPIO_Init+0x1b0>)
 80011c6:	f002 fbdd 	bl	8003984 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : IST_INT_Pin IST_RST_Pin */
  GPIO_InitStruct.Pin = IST_INT_Pin|IST_RST_Pin;
 80011ca:	230c      	movs	r3, #12
 80011cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ce:	2301      	movs	r3, #1
 80011d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d2:	2300      	movs	r3, #0
 80011d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d6:	2303      	movs	r3, #3
 80011d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011da:	f107 031c 	add.w	r3, r7, #28
 80011de:	4619      	mov	r1, r3
 80011e0:	4821      	ldr	r0, [pc, #132]	; (8001268 <MX_GPIO_Init+0x1a4>)
 80011e2:	f002 fa23 	bl	800362c <HAL_GPIO_Init>

  /*Configure GPIO pins : PH2 PH3 PH4 PH5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80011e6:	233c      	movs	r3, #60	; 0x3c
 80011e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ea:	2301      	movs	r3, #1
 80011ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ee:	2300      	movs	r3, #0
 80011f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f2:	2300      	movs	r3, #0
 80011f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80011f6:	f107 031c 	add.w	r3, r7, #28
 80011fa:	4619      	mov	r1, r3
 80011fc:	481b      	ldr	r0, [pc, #108]	; (800126c <MX_GPIO_Init+0x1a8>)
 80011fe:	f002 fa15 	bl	800362c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 LED_GREEN_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_6|LED_GREEN_Pin;
 8001202:	f244 0340 	movw	r3, #16448	; 0x4040
 8001206:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001208:	2301      	movs	r3, #1
 800120a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120c:	2300      	movs	r3, #0
 800120e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001210:	2300      	movs	r3, #0
 8001212:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001214:	f107 031c 	add.w	r3, r7, #28
 8001218:	4619      	mov	r1, r3
 800121a:	4815      	ldr	r0, [pc, #84]	; (8001270 <MX_GPIO_Init+0x1ac>)
 800121c:	f002 fa06 	bl	800362c <HAL_GPIO_Init>

  /*Configure GPIO pin : PG1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001220:	2302      	movs	r3, #2
 8001222:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001224:	2301      	movs	r3, #1
 8001226:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001228:	2300      	movs	r3, #0
 800122a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122c:	2300      	movs	r3, #0
 800122e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001230:	f107 031c 	add.w	r3, r7, #28
 8001234:	4619      	mov	r1, r3
 8001236:	480f      	ldr	r0, [pc, #60]	; (8001274 <MX_GPIO_Init+0x1b0>)
 8001238:	f002 f9f8 	bl	800362c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 800123c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001240:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001242:	2301      	movs	r3, #1
 8001244:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001246:	2300      	movs	r3, #0
 8001248:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124a:	2300      	movs	r3, #0
 800124c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 800124e:	f107 031c 	add.w	r3, r7, #28
 8001252:	4619      	mov	r1, r3
 8001254:	4804      	ldr	r0, [pc, #16]	; (8001268 <MX_GPIO_Init+0x1a4>)
 8001256:	f002 f9e9 	bl	800362c <HAL_GPIO_Init>

}
 800125a:	bf00      	nop
 800125c:	3730      	adds	r7, #48	; 0x30
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	40023800 	.word	0x40023800
 8001268:	40021000 	.word	0x40021000
 800126c:	40021c00 	.word	0x40021c00
 8001270:	40021400 	.word	0x40021400
 8001274:	40021800 	.word	0x40021800

08001278 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800127c:	bf00      	nop
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
	...

08001288 <HAL_CAN_RxFifo0MsgPendingCallback>:
    else
        while (HAL_CAN_IsTxMessagePending(hcan, pTxMailbox));
}


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001288:	b580      	push	{r7, lr}
 800128a:	b08c      	sub	sp, #48	; 0x30
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef rx_header;
    uint8_t rx_data[CAN_DATA_SIZE];

    HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, rx_data);
 8001290:	f107 0308 	add.w	r3, r7, #8
 8001294:	f107 0210 	add.w	r2, r7, #16
 8001298:	2100      	movs	r1, #0
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f001 f98d 	bl	80025ba <HAL_CAN_GetRxMessage>
    uint8_t idx = rx_header.StdId - CAN_RX_ID_START;
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	3b01      	subs	r3, #1
 80012a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    get_motor_measure(&motors[idx], rx_data);
 80012aa:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80012ae:	4613      	mov	r3, r2
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	4413      	add	r3, r2
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	4a06      	ldr	r2, [pc, #24]	; (80012d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 80012b8:	4413      	add	r3, r2
 80012ba:	f107 0208 	add.w	r2, r7, #8
 80012be:	4611      	mov	r1, r2
 80012c0:	4618      	mov	r0, r3
 80012c2:	f000 f807 	bl	80012d4 <get_motor_measure>

}
 80012c6:	bf00      	nop
 80012c8:	3730      	adds	r7, #48	; 0x30
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	20000530 	.word	0x20000530

080012d4 <get_motor_measure>:

void get_motor_measure(motor_measure_t* m, uint8_t data[CAN_DATA_SIZE]){
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	6039      	str	r1, [r7, #0]
    (m)->last_ecd = (m)->ecd;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	881b      	ldrh	r3, [r3, #0]
 80012e2:	b21a      	sxth	r2, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	811a      	strh	r2, [r3, #8]
    (m)->ecd = (uint16_t)((data)[0] << 8 | (data)[1]);
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	021b      	lsls	r3, r3, #8
 80012ee:	b21a      	sxth	r2, r3
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	3301      	adds	r3, #1
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	b21b      	sxth	r3, r3
 80012f8:	4313      	orrs	r3, r2
 80012fa:	b21b      	sxth	r3, r3
 80012fc:	b29a      	uxth	r2, r3
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	801a      	strh	r2, [r3, #0]
    (m)->speed_rpm = (uint16_t)((data)[2] << 8 | (data)[3]);
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	3302      	adds	r3, #2
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	021b      	lsls	r3, r3, #8
 800130a:	b21a      	sxth	r2, r3
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	3303      	adds	r3, #3
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	b21b      	sxth	r3, r3
 8001314:	4313      	orrs	r3, r2
 8001316:	b21a      	sxth	r2, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	805a      	strh	r2, [r3, #2]
    (m)->given_current = (uint16_t)((data)[4] << 8 | (data)[5]);
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	3304      	adds	r3, #4
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	021b      	lsls	r3, r3, #8
 8001324:	b21a      	sxth	r2, r3
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	3305      	adds	r3, #5
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	b21b      	sxth	r3, r3
 800132e:	4313      	orrs	r3, r2
 8001330:	b21a      	sxth	r2, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	809a      	strh	r2, [r3, #4]
    (m)->temperature = (data)[6];
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	799a      	ldrb	r2, [r3, #6]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	719a      	strb	r2, [r3, #6]
}
 800133e:	bf00      	nop
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
	...

0800134c <led_off>:
 */


#include "rm_gpio.h"

void led_off(void){
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8001350:	2201      	movs	r2, #1
 8001352:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001356:	4805      	ldr	r0, [pc, #20]	; (800136c <led_off+0x20>)
 8001358:	f002 fb14 	bl	8003984 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 800135c:	2201      	movs	r2, #1
 800135e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001362:	4803      	ldr	r0, [pc, #12]	; (8001370 <led_off+0x24>)
 8001364:	f002 fb0e 	bl	8003984 <HAL_GPIO_WritePin>
}
 8001368:	bf00      	nop
 800136a:	bd80      	pop	{r7, pc}
 800136c:	40021400 	.word	0x40021400
 8001370:	40021000 	.word	0x40021000

08001374 <power_on>:

void power_on(void){
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOH, GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5, GPIO_PIN_SET);
 8001378:	2201      	movs	r2, #1
 800137a:	213c      	movs	r1, #60	; 0x3c
 800137c:	4802      	ldr	r0, [pc, #8]	; (8001388 <power_on+0x14>)
 800137e:	f002 fb01 	bl	8003984 <HAL_GPIO_WritePin>
}
 8001382:	bf00      	nop
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	40021c00 	.word	0x40021c00

0800138c <uart_receive_dma_no_it>:
  * @param[in]  pData: receive buff
  * @param[in]  Size:  buff size
  * @retval     set success or fail
  */
static int uart_receive_dma_no_it(UART_HandleTypeDef* huart, uint8_t* pData, uint32_t Size)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b086      	sub	sp, #24
 8001390:	af00      	add	r7, sp, #0
 8001392:	60f8      	str	r0, [r7, #12]
 8001394:	60b9      	str	r1, [r7, #8]
 8001396:	607a      	str	r2, [r7, #4]
  uint32_t tmp1 = 0;
 8001398:	2300      	movs	r3, #0
 800139a:	617b      	str	r3, [r7, #20]

  tmp1 = huart->RxState;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	617b      	str	r3, [r7, #20]

	if (tmp1 == HAL_UART_STATE_READY)
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	2b20      	cmp	r3, #32
 80013aa:	d125      	bne.n	80013f8 <uart_receive_dma_no_it+0x6c>
	{
		if ((pData == NULL) || (Size == 0))
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d002      	beq.n	80013b8 <uart_receive_dma_no_it+0x2c>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d101      	bne.n	80013bc <uart_receive_dma_no_it+0x30>
		{
			return HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
 80013ba:	e01e      	b.n	80013fa <uart_receive_dma_no_it+0x6e>
		}

		huart->pRxBuffPtr = pData;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	68ba      	ldr	r2, [r7, #8]
 80013c0:	629a      	str	r2, [r3, #40]	; 0x28
		huart->RxXferSize = Size;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	b29a      	uxth	r2, r3
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	859a      	strh	r2, [r3, #44]	; 0x2c
		huart->ErrorCode  = HAL_UART_ERROR_NONE;
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	2200      	movs	r2, #0
 80013ce:	641a      	str	r2, [r3, #64]	; 0x40

		/* Enable the DMA Stream */
		HAL_DMA_Start(huart->hdmarx, (uint32_t)&huart->Instance->DR, (uint32_t)pData, Size);
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	3304      	adds	r3, #4
 80013da:	4619      	mov	r1, r3
 80013dc:	68ba      	ldr	r2, [r7, #8]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	f001 fdec 	bl	8002fbc <HAL_DMA_Start>

		/*
		 * Enable the DMA transfer for the receiver request by setting the DMAR bit
		 * in the UART CR3 register
		 */
		SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	695a      	ldr	r2, [r3, #20]
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80013f2:	615a      	str	r2, [r3, #20]

		return HAL_OK;
 80013f4:	2300      	movs	r3, #0
 80013f6:	e000      	b.n	80013fa <uart_receive_dma_no_it+0x6e>
	}
	else
	{
		return HAL_BUSY;
 80013f8:	2302      	movs	r3, #2
	}
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3718      	adds	r7, #24
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <dma_current_data_counter>:
  * @param[in]  dma_stream: where y can be 1 or 2 to select the DMA and x can be 0
  *             to 7 to select the DMA Stream.
  * @retval     The number of remaining data units in the current DMAy Streamx transfer.
  */
uint16_t dma_current_data_counter(DMA_Stream_TypeDef *dma_stream)
{
 8001402:	b480      	push	{r7}
 8001404:	b083      	sub	sp, #12
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
  /* Return the number of remaining data units for DMAy Streamx */
  return ((uint16_t)(dma_stream->NDTR));
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	b29b      	uxth	r3, r3
}
 8001410:	4618      	mov	r0, r3
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <rc_callback_handler>:
  * @param[out]  rc:   structure to save handled rc data
  * @param[in]   buff: the buff which saved raw rc data
  * @retval
  */
void rc_callback_handler(rc_info_t *rc, uint8_t *buff)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	6039      	str	r1, [r7, #0]
  rc->ch1 = (buff[0] | buff[1] << 8) & 0x07FF;
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	b21a      	sxth	r2, r3
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	3301      	adds	r3, #1
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	021b      	lsls	r3, r3, #8
 8001434:	b21b      	sxth	r3, r3
 8001436:	4313      	orrs	r3, r2
 8001438:	b21b      	sxth	r3, r3
 800143a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800143e:	b21a      	sxth	r2, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	801a      	strh	r2, [r3, #0]
  rc->ch1 -= 1024;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	f9b3 3000 	ldrsh.w	r3, [r3]
 800144a:	b29b      	uxth	r3, r3
 800144c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001450:	b29b      	uxth	r3, r3
 8001452:	b21a      	sxth	r2, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	801a      	strh	r2, [r3, #0]
  rc->ch2 = (buff[1] >> 3 | buff[2] << 5) & 0x07FF;
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	3301      	adds	r3, #1
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	08db      	lsrs	r3, r3, #3
 8001460:	b2db      	uxtb	r3, r3
 8001462:	b21a      	sxth	r2, r3
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	3302      	adds	r3, #2
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	015b      	lsls	r3, r3, #5
 800146c:	b21b      	sxth	r3, r3
 800146e:	4313      	orrs	r3, r2
 8001470:	b21b      	sxth	r3, r3
 8001472:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001476:	b21a      	sxth	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	805a      	strh	r2, [r3, #2]
  rc->ch2 -= 1024;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001482:	b29b      	uxth	r3, r3
 8001484:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001488:	b29b      	uxth	r3, r3
 800148a:	b21a      	sxth	r2, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	805a      	strh	r2, [r3, #2]
  rc->ch3 = (buff[2] >> 6 | buff[3] << 2 | buff[4] << 10) & 0x07FF;
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	3302      	adds	r3, #2
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	099b      	lsrs	r3, r3, #6
 8001498:	b2db      	uxtb	r3, r3
 800149a:	b21a      	sxth	r2, r3
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	3303      	adds	r3, #3
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	b21b      	sxth	r3, r3
 80014a6:	4313      	orrs	r3, r2
 80014a8:	b21a      	sxth	r2, r3
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	3304      	adds	r3, #4
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	029b      	lsls	r3, r3, #10
 80014b2:	b21b      	sxth	r3, r3
 80014b4:	4313      	orrs	r3, r2
 80014b6:	b21b      	sxth	r3, r3
 80014b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014bc:	b21a      	sxth	r2, r3
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	809a      	strh	r2, [r3, #4]
  rc->ch3 -= 1024;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80014c8:	b29b      	uxth	r3, r3
 80014ca:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80014ce:	b29b      	uxth	r3, r3
 80014d0:	b21a      	sxth	r2, r3
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	809a      	strh	r2, [r3, #4]
  rc->ch4 = (buff[4] >> 1 | buff[5] << 7) & 0x07FF;
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	3304      	adds	r3, #4
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	085b      	lsrs	r3, r3, #1
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	b21a      	sxth	r2, r3
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	3305      	adds	r3, #5
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	01db      	lsls	r3, r3, #7
 80014ea:	b21b      	sxth	r3, r3
 80014ec:	4313      	orrs	r3, r2
 80014ee:	b21b      	sxth	r3, r3
 80014f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014f4:	b21a      	sxth	r2, r3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	80da      	strh	r2, [r3, #6]
  rc->ch4 -= 1024;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001500:	b29b      	uxth	r3, r3
 8001502:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001506:	b29b      	uxth	r3, r3
 8001508:	b21a      	sxth	r2, r3
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	80da      	strh	r2, [r3, #6]

  rc->sw1 = ((buff[5] >> 4) & 0x000C) >> 2;
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	3305      	adds	r3, #5
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	091b      	lsrs	r3, r3, #4
 8001516:	b2db      	uxtb	r3, r3
 8001518:	109b      	asrs	r3, r3, #2
 800151a:	b2db      	uxtb	r3, r3
 800151c:	f003 0303 	and.w	r3, r3, #3
 8001520:	b2da      	uxtb	r2, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	729a      	strb	r2, [r3, #10]
  rc->sw2 = (buff[5] >> 4) & 0x0003;
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	3305      	adds	r3, #5
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	091b      	lsrs	r3, r3, #4
 800152e:	b2db      	uxtb	r3, r3
 8001530:	f003 0303 	and.w	r3, r3, #3
 8001534:	b2da      	uxtb	r2, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	72da      	strb	r2, [r3, #11]

  if ((abs(rc->ch1) > 660) || \
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001540:	2b00      	cmp	r3, #0
 8001542:	bfb8      	it	lt
 8001544:	425b      	neglt	r3, r3
 8001546:	b29b      	uxth	r3, r3
 8001548:	f5b3 7f25 	cmp.w	r3, #660	; 0x294
 800154c:	d81d      	bhi.n	800158a <rc_callback_handler+0x16e>
      (abs(rc->ch2) > 660) || \
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001554:	2b00      	cmp	r3, #0
 8001556:	bfb8      	it	lt
 8001558:	425b      	neglt	r3, r3
 800155a:	b29b      	uxth	r3, r3
  if ((abs(rc->ch1) > 660) || \
 800155c:	f5b3 7f25 	cmp.w	r3, #660	; 0x294
 8001560:	d813      	bhi.n	800158a <rc_callback_handler+0x16e>
      (abs(rc->ch3) > 660) || \
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001568:	2b00      	cmp	r3, #0
 800156a:	bfb8      	it	lt
 800156c:	425b      	neglt	r3, r3
 800156e:	b29b      	uxth	r3, r3
      (abs(rc->ch2) > 660) || \
 8001570:	f5b3 7f25 	cmp.w	r3, #660	; 0x294
 8001574:	d809      	bhi.n	800158a <rc_callback_handler+0x16e>
      (abs(rc->ch4) > 660))
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800157c:	2b00      	cmp	r3, #0
 800157e:	bfb8      	it	lt
 8001580:	425b      	neglt	r3, r3
 8001582:	b29b      	uxth	r3, r3
      (abs(rc->ch3) > 660) || \
 8001584:	f5b3 7f25 	cmp.w	r3, #660	; 0x294
 8001588:	d904      	bls.n	8001594 <rc_callback_handler+0x178>
  {
    memset(rc, 0, sizeof(rc_info_t));
 800158a:	2216      	movs	r2, #22
 800158c:	2100      	movs	r1, #0
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f004 fc0c 	bl	8005dac <memset>
  }

  rc->mouse.x = buff[6] | (buff[7] << 8);                    //!< Mouse X axis
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	3306      	adds	r3, #6
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	b21a      	sxth	r2, r3
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	3307      	adds	r3, #7
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	021b      	lsls	r3, r3, #8
 80015a4:	b21b      	sxth	r3, r3
 80015a6:	4313      	orrs	r3, r2
 80015a8:	b21a      	sxth	r2, r3
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	819a      	strh	r2, [r3, #12]
  rc->mouse.y = buff[8] | (buff[9] << 8);                    //!< Mouse Y axis
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	3308      	adds	r3, #8
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	b21a      	sxth	r2, r3
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	3309      	adds	r3, #9
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	021b      	lsls	r3, r3, #8
 80015be:	b21b      	sxth	r3, r3
 80015c0:	4313      	orrs	r3, r2
 80015c2:	b21a      	sxth	r2, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	81da      	strh	r2, [r3, #14]
  rc->mouse.z = buff[10] | (buff[11] << 8);                  //!< Mouse Z axis
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	330a      	adds	r3, #10
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	b21a      	sxth	r2, r3
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	330b      	adds	r3, #11
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	021b      	lsls	r3, r3, #8
 80015d8:	b21b      	sxth	r3, r3
 80015da:	4313      	orrs	r3, r2
 80015dc:	b21a      	sxth	r2, r3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	821a      	strh	r2, [r3, #16]
  rc->mouse.l = buff[12];                                  //!< Mouse Left Is Press ?
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	7b1a      	ldrb	r2, [r3, #12]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	749a      	strb	r2, [r3, #18]
  rc->mouse.r = buff[13];                                  //!< Mouse Right Is Press ?
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	7b5a      	ldrb	r2, [r3, #13]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	74da      	strb	r2, [r3, #19]
  rc->kb.key_code = buff[14] | (buff[15] << 8);                    //!< KeyBoard value
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	330e      	adds	r3, #14
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	b21a      	sxth	r2, r3
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	330f      	adds	r3, #15
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	021b      	lsls	r3, r3, #8
 8001602:	b21b      	sxth	r3, r3
 8001604:	4313      	orrs	r3, r2
 8001606:	b21b      	sxth	r3, r3
 8001608:	b29a      	uxth	r2, r3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	829a      	strh	r2, [r3, #20]
  rc->wheel = buff[16] | ( buff[17] << 8);
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	3310      	adds	r3, #16
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	b21a      	sxth	r2, r3
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	3311      	adds	r3, #17
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	021b      	lsls	r3, r3, #8
 800161e:	b21b      	sxth	r3, r3
 8001620:	4313      	orrs	r3, r2
 8001622:	b21a      	sxth	r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	811a      	strh	r2, [r3, #8]
  rc->wheel -= 1024;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800162e:	b29b      	uxth	r3, r3
 8001630:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001634:	b29b      	uxth	r3, r3
 8001636:	b21a      	sxth	r2, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	811a      	strh	r2, [r3, #8]
}
 800163c:	bf00      	nop
 800163e:	3708      	adds	r7, #8
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}

08001644 <uart_rx_idle_callback>:
  * @brief      clear idle it flag after uart receive a frame data
  * @param[in]  huart: uart IRQHandler id
  * @retval
  */
static void uart_rx_idle_callback(UART_HandleTypeDef* huart)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
	/* clear idle it flag avoid idle interrupt all the time */
	__HAL_UART_CLEAR_IDLEFLAG(huart);
 800164c:	2300      	movs	r3, #0
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	60fb      	str	r3, [r7, #12]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	60fb      	str	r3, [r7, #12]
 8001660:	68fb      	ldr	r3, [r7, #12]

	/* handle received data in idle interrupt */
	if (huart == &DBUS_HUART)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4a17      	ldr	r2, [pc, #92]	; (80016c4 <uart_rx_idle_callback+0x80>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d127      	bne.n	80016ba <uart_rx_idle_callback+0x76>
	{
		/* clear DMA transfer complete flag */
		__HAL_DMA_DISABLE(huart->hdmarx);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f022 0201 	bic.w	r2, r2, #1
 800167c:	601a      	str	r2, [r3, #0]

		/* handle dbus data dbus_buf from DMA */
		if ((DBUS_MAX_LEN - dma_current_data_counter(huart->hdmarx->Instance)) == DBUS_BUFLEN)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4618      	mov	r0, r3
 8001686:	f7ff febc 	bl	8001402 <dma_current_data_counter>
 800168a:	4603      	mov	r3, r0
 800168c:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
 8001690:	2b12      	cmp	r3, #18
 8001692:	d103      	bne.n	800169c <uart_rx_idle_callback+0x58>
		{
			rc_callback_handler(&rc, dbus_buf);
 8001694:	490c      	ldr	r1, [pc, #48]	; (80016c8 <uart_rx_idle_callback+0x84>)
 8001696:	480d      	ldr	r0, [pc, #52]	; (80016cc <uart_rx_idle_callback+0x88>)
 8001698:	f7ff fec0 	bl	800141c <rc_callback_handler>
		}

		/* restart dma transmission */
		__HAL_DMA_SET_COUNTER(huart->hdmarx, DBUS_MAX_LEN);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	2224      	movs	r2, #36	; 0x24
 80016a4:	605a      	str	r2, [r3, #4]
		__HAL_DMA_ENABLE(huart->hdmarx);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f042 0201 	orr.w	r2, r2, #1
 80016b8:	601a      	str	r2, [r3, #0]
	}
}
 80016ba:	bf00      	nop
 80016bc:	3710      	adds	r7, #16
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	20000348 	.word	0x20000348
 80016c8:	2000059c 	.word	0x2000059c
 80016cc:	20000584 	.word	0x20000584

080016d0 <uart_receive_handler>:
  * @brief      callback this function when uart interrupt
  * @param[in]  huart: uart IRQHandler id
  * @retval
  */
void uart_receive_handler(UART_HandleTypeDef *huart)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
	if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) &&
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 0310 	and.w	r3, r3, #16
 80016e2:	2b10      	cmp	r3, #16
 80016e4:	d109      	bne.n	80016fa <uart_receive_handler+0x2a>
			__HAL_UART_GET_IT_SOURCE(huart, UART_IT_IDLE))
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	f003 0310 	and.w	r3, r3, #16
	if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) &&
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d002      	beq.n	80016fa <uart_receive_handler+0x2a>
	{
		uart_rx_idle_callback(huart);
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f7ff ffa5 	bl	8001644 <uart_rx_idle_callback>
	}
}
 80016fa:	bf00      	nop
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
	...

08001704 <dbus_uart_init>:
  * @brief   initialize dbus uart device
  * @param
  * @retval
  */
void dbus_uart_init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
	/* open uart idle it */
	__HAL_UART_CLEAR_IDLEFLAG(&DBUS_HUART);
 800170a:	2300      	movs	r3, #0
 800170c:	607b      	str	r3, [r7, #4]
 800170e:	4b0d      	ldr	r3, [pc, #52]	; (8001744 <dbus_uart_init+0x40>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	607b      	str	r3, [r7, #4]
 8001716:	4b0b      	ldr	r3, [pc, #44]	; (8001744 <dbus_uart_init+0x40>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	607b      	str	r3, [r7, #4]
 800171e:	687b      	ldr	r3, [r7, #4]
	__HAL_UART_ENABLE_IT(&DBUS_HUART, UART_IT_IDLE);
 8001720:	4b08      	ldr	r3, [pc, #32]	; (8001744 <dbus_uart_init+0x40>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	68da      	ldr	r2, [r3, #12]
 8001726:	4b07      	ldr	r3, [pc, #28]	; (8001744 <dbus_uart_init+0x40>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f042 0210 	orr.w	r2, r2, #16
 800172e:	60da      	str	r2, [r3, #12]

	uart_receive_dma_no_it(&DBUS_HUART, dbus_buf, DBUS_MAX_LEN);
 8001730:	2224      	movs	r2, #36	; 0x24
 8001732:	4905      	ldr	r1, [pc, #20]	; (8001748 <dbus_uart_init+0x44>)
 8001734:	4803      	ldr	r0, [pc, #12]	; (8001744 <dbus_uart_init+0x40>)
 8001736:	f7ff fe29 	bl	800138c <uart_receive_dma_no_it>
}
 800173a:	bf00      	nop
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	20000348 	.word	0x20000348
 8001748:	2000059c 	.word	0x2000059c

0800174c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	607b      	str	r3, [r7, #4]
 8001756:	4b10      	ldr	r3, [pc, #64]	; (8001798 <HAL_MspInit+0x4c>)
 8001758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175a:	4a0f      	ldr	r2, [pc, #60]	; (8001798 <HAL_MspInit+0x4c>)
 800175c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001760:	6453      	str	r3, [r2, #68]	; 0x44
 8001762:	4b0d      	ldr	r3, [pc, #52]	; (8001798 <HAL_MspInit+0x4c>)
 8001764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001766:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800176a:	607b      	str	r3, [r7, #4]
 800176c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800176e:	2300      	movs	r3, #0
 8001770:	603b      	str	r3, [r7, #0]
 8001772:	4b09      	ldr	r3, [pc, #36]	; (8001798 <HAL_MspInit+0x4c>)
 8001774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001776:	4a08      	ldr	r2, [pc, #32]	; (8001798 <HAL_MspInit+0x4c>)
 8001778:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800177c:	6413      	str	r3, [r2, #64]	; 0x40
 800177e:	4b06      	ldr	r3, [pc, #24]	; (8001798 <HAL_MspInit+0x4c>)
 8001780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001786:	603b      	str	r3, [r7, #0]
 8001788:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800178a:	bf00      	nop
 800178c:	370c      	adds	r7, #12
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	40023800 	.word	0x40023800

0800179c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b08c      	sub	sp, #48	; 0x30
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a4:	f107 031c 	add.w	r3, r7, #28
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	605a      	str	r2, [r3, #4]
 80017ae:	609a      	str	r2, [r3, #8]
 80017b0:	60da      	str	r2, [r3, #12]
 80017b2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a52      	ldr	r2, [pc, #328]	; (8001904 <HAL_CAN_MspInit+0x168>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d145      	bne.n	800184a <HAL_CAN_MspInit+0xae>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80017be:	4b52      	ldr	r3, [pc, #328]	; (8001908 <HAL_CAN_MspInit+0x16c>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	3301      	adds	r3, #1
 80017c4:	4a50      	ldr	r2, [pc, #320]	; (8001908 <HAL_CAN_MspInit+0x16c>)
 80017c6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80017c8:	4b4f      	ldr	r3, [pc, #316]	; (8001908 <HAL_CAN_MspInit+0x16c>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d10d      	bne.n	80017ec <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80017d0:	2300      	movs	r3, #0
 80017d2:	61bb      	str	r3, [r7, #24]
 80017d4:	4b4d      	ldr	r3, [pc, #308]	; (800190c <HAL_CAN_MspInit+0x170>)
 80017d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d8:	4a4c      	ldr	r2, [pc, #304]	; (800190c <HAL_CAN_MspInit+0x170>)
 80017da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017de:	6413      	str	r3, [r2, #64]	; 0x40
 80017e0:	4b4a      	ldr	r3, [pc, #296]	; (800190c <HAL_CAN_MspInit+0x170>)
 80017e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017e8:	61bb      	str	r3, [r7, #24]
 80017ea:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017ec:	2300      	movs	r3, #0
 80017ee:	617b      	str	r3, [r7, #20]
 80017f0:	4b46      	ldr	r3, [pc, #280]	; (800190c <HAL_CAN_MspInit+0x170>)
 80017f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f4:	4a45      	ldr	r2, [pc, #276]	; (800190c <HAL_CAN_MspInit+0x170>)
 80017f6:	f043 0308 	orr.w	r3, r3, #8
 80017fa:	6313      	str	r3, [r2, #48]	; 0x30
 80017fc:	4b43      	ldr	r3, [pc, #268]	; (800190c <HAL_CAN_MspInit+0x170>)
 80017fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001800:	f003 0308 	and.w	r3, r3, #8
 8001804:	617b      	str	r3, [r7, #20]
 8001806:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001808:	2303      	movs	r3, #3
 800180a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800180c:	2302      	movs	r3, #2
 800180e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001810:	2300      	movs	r3, #0
 8001812:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001814:	2303      	movs	r3, #3
 8001816:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001818:	2309      	movs	r3, #9
 800181a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800181c:	f107 031c 	add.w	r3, r7, #28
 8001820:	4619      	mov	r1, r3
 8001822:	483b      	ldr	r0, [pc, #236]	; (8001910 <HAL_CAN_MspInit+0x174>)
 8001824:	f001 ff02 	bl	800362c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8001828:	2200      	movs	r2, #0
 800182a:	2100      	movs	r1, #0
 800182c:	2013      	movs	r0, #19
 800182e:	f001 fae0 	bl	8002df2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001832:	2013      	movs	r0, #19
 8001834:	f001 faf9 	bl	8002e2a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001838:	2200      	movs	r2, #0
 800183a:	2100      	movs	r1, #0
 800183c:	2014      	movs	r0, #20
 800183e:	f001 fad8 	bl	8002df2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001842:	2014      	movs	r0, #20
 8001844:	f001 faf1 	bl	8002e2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8001848:	e058      	b.n	80018fc <HAL_CAN_MspInit+0x160>
  else if(hcan->Instance==CAN2)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a31      	ldr	r2, [pc, #196]	; (8001914 <HAL_CAN_MspInit+0x178>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d153      	bne.n	80018fc <HAL_CAN_MspInit+0x160>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001854:	2300      	movs	r3, #0
 8001856:	613b      	str	r3, [r7, #16]
 8001858:	4b2c      	ldr	r3, [pc, #176]	; (800190c <HAL_CAN_MspInit+0x170>)
 800185a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185c:	4a2b      	ldr	r2, [pc, #172]	; (800190c <HAL_CAN_MspInit+0x170>)
 800185e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001862:	6413      	str	r3, [r2, #64]	; 0x40
 8001864:	4b29      	ldr	r3, [pc, #164]	; (800190c <HAL_CAN_MspInit+0x170>)
 8001866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001868:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800186c:	613b      	str	r3, [r7, #16]
 800186e:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001870:	4b25      	ldr	r3, [pc, #148]	; (8001908 <HAL_CAN_MspInit+0x16c>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	3301      	adds	r3, #1
 8001876:	4a24      	ldr	r2, [pc, #144]	; (8001908 <HAL_CAN_MspInit+0x16c>)
 8001878:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800187a:	4b23      	ldr	r3, [pc, #140]	; (8001908 <HAL_CAN_MspInit+0x16c>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2b01      	cmp	r3, #1
 8001880:	d10d      	bne.n	800189e <HAL_CAN_MspInit+0x102>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001882:	2300      	movs	r3, #0
 8001884:	60fb      	str	r3, [r7, #12]
 8001886:	4b21      	ldr	r3, [pc, #132]	; (800190c <HAL_CAN_MspInit+0x170>)
 8001888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188a:	4a20      	ldr	r2, [pc, #128]	; (800190c <HAL_CAN_MspInit+0x170>)
 800188c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001890:	6413      	str	r3, [r2, #64]	; 0x40
 8001892:	4b1e      	ldr	r3, [pc, #120]	; (800190c <HAL_CAN_MspInit+0x170>)
 8001894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800189a:	60fb      	str	r3, [r7, #12]
 800189c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	60bb      	str	r3, [r7, #8]
 80018a2:	4b1a      	ldr	r3, [pc, #104]	; (800190c <HAL_CAN_MspInit+0x170>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	4a19      	ldr	r2, [pc, #100]	; (800190c <HAL_CAN_MspInit+0x170>)
 80018a8:	f043 0302 	orr.w	r3, r3, #2
 80018ac:	6313      	str	r3, [r2, #48]	; 0x30
 80018ae:	4b17      	ldr	r3, [pc, #92]	; (800190c <HAL_CAN_MspInit+0x170>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b2:	f003 0302 	and.w	r3, r3, #2
 80018b6:	60bb      	str	r3, [r7, #8]
 80018b8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80018ba:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80018be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c0:	2302      	movs	r3, #2
 80018c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c4:	2300      	movs	r3, #0
 80018c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018c8:	2303      	movs	r3, #3
 80018ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80018cc:	2309      	movs	r3, #9
 80018ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018d0:	f107 031c 	add.w	r3, r7, #28
 80018d4:	4619      	mov	r1, r3
 80018d6:	4810      	ldr	r0, [pc, #64]	; (8001918 <HAL_CAN_MspInit+0x17c>)
 80018d8:	f001 fea8 	bl	800362c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 0, 0);
 80018dc:	2200      	movs	r2, #0
 80018de:	2100      	movs	r1, #0
 80018e0:	203f      	movs	r0, #63	; 0x3f
 80018e2:	f001 fa86 	bl	8002df2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 80018e6:	203f      	movs	r0, #63	; 0x3f
 80018e8:	f001 fa9f 	bl	8002e2a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 80018ec:	2200      	movs	r2, #0
 80018ee:	2100      	movs	r1, #0
 80018f0:	2040      	movs	r0, #64	; 0x40
 80018f2:	f001 fa7e 	bl	8002df2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 80018f6:	2040      	movs	r0, #64	; 0x40
 80018f8:	f001 fa97 	bl	8002e2a <HAL_NVIC_EnableIRQ>
}
 80018fc:	bf00      	nop
 80018fe:	3730      	adds	r7, #48	; 0x30
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	40006400 	.word	0x40006400
 8001908:	20000028 	.word	0x20000028
 800190c:	40023800 	.word	0x40023800
 8001910:	40020c00 	.word	0x40020c00
 8001914:	40006800 	.word	0x40006800
 8001918:	40020400 	.word	0x40020400

0800191c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b08a      	sub	sp, #40	; 0x28
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001924:	f107 0314 	add.w	r3, r7, #20
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	605a      	str	r2, [r3, #4]
 800192e:	609a      	str	r2, [r3, #8]
 8001930:	60da      	str	r2, [r3, #12]
 8001932:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a29      	ldr	r2, [pc, #164]	; (80019e0 <HAL_I2C_MspInit+0xc4>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d14b      	bne.n	80019d6 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	613b      	str	r3, [r7, #16]
 8001942:	4b28      	ldr	r3, [pc, #160]	; (80019e4 <HAL_I2C_MspInit+0xc8>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	4a27      	ldr	r2, [pc, #156]	; (80019e4 <HAL_I2C_MspInit+0xc8>)
 8001948:	f043 0301 	orr.w	r3, r3, #1
 800194c:	6313      	str	r3, [r2, #48]	; 0x30
 800194e:	4b25      	ldr	r3, [pc, #148]	; (80019e4 <HAL_I2C_MspInit+0xc8>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	f003 0301 	and.w	r3, r3, #1
 8001956:	613b      	str	r3, [r7, #16]
 8001958:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	60fb      	str	r3, [r7, #12]
 800195e:	4b21      	ldr	r3, [pc, #132]	; (80019e4 <HAL_I2C_MspInit+0xc8>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	4a20      	ldr	r2, [pc, #128]	; (80019e4 <HAL_I2C_MspInit+0xc8>)
 8001964:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001968:	6313      	str	r3, [r2, #48]	; 0x30
 800196a:	4b1e      	ldr	r3, [pc, #120]	; (80019e4 <HAL_I2C_MspInit+0xc8>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PA9     ------> I2C3_SMBA
    PA8     ------> I2C3_SCL
    PH8     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8001976:	f44f 7340 	mov.w	r3, #768	; 0x300
 800197a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800197c:	2312      	movs	r3, #18
 800197e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001980:	2300      	movs	r3, #0
 8001982:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001984:	2303      	movs	r3, #3
 8001986:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001988:	2304      	movs	r3, #4
 800198a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800198c:	f107 0314 	add.w	r3, r7, #20
 8001990:	4619      	mov	r1, r3
 8001992:	4815      	ldr	r0, [pc, #84]	; (80019e8 <HAL_I2C_MspInit+0xcc>)
 8001994:	f001 fe4a 	bl	800362c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001998:	f44f 7380 	mov.w	r3, #256	; 0x100
 800199c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800199e:	2312      	movs	r3, #18
 80019a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a2:	2300      	movs	r3, #0
 80019a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019a6:	2303      	movs	r3, #3
 80019a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80019aa:	2304      	movs	r3, #4
 80019ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80019ae:	f107 0314 	add.w	r3, r7, #20
 80019b2:	4619      	mov	r1, r3
 80019b4:	480d      	ldr	r0, [pc, #52]	; (80019ec <HAL_I2C_MspInit+0xd0>)
 80019b6:	f001 fe39 	bl	800362c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80019ba:	2300      	movs	r3, #0
 80019bc:	60bb      	str	r3, [r7, #8]
 80019be:	4b09      	ldr	r3, [pc, #36]	; (80019e4 <HAL_I2C_MspInit+0xc8>)
 80019c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c2:	4a08      	ldr	r2, [pc, #32]	; (80019e4 <HAL_I2C_MspInit+0xc8>)
 80019c4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80019c8:	6413      	str	r3, [r2, #64]	; 0x40
 80019ca:	4b06      	ldr	r3, [pc, #24]	; (80019e4 <HAL_I2C_MspInit+0xc8>)
 80019cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80019d2:	60bb      	str	r3, [r7, #8]
 80019d4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80019d6:	bf00      	nop
 80019d8:	3728      	adds	r7, #40	; 0x28
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	40005c00 	.word	0x40005c00
 80019e4:	40023800 	.word	0x40023800
 80019e8:	40020000 	.word	0x40020000
 80019ec:	40021c00 	.word	0x40021c00

080019f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b08a      	sub	sp, #40	; 0x28
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f8:	f107 0314 	add.w	r3, r7, #20
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	605a      	str	r2, [r3, #4]
 8001a02:	609a      	str	r2, [r3, #8]
 8001a04:	60da      	str	r2, [r3, #12]
 8001a06:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a19      	ldr	r2, [pc, #100]	; (8001a74 <HAL_SPI_MspInit+0x84>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d12c      	bne.n	8001a6c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001a12:	2300      	movs	r3, #0
 8001a14:	613b      	str	r3, [r7, #16]
 8001a16:	4b18      	ldr	r3, [pc, #96]	; (8001a78 <HAL_SPI_MspInit+0x88>)
 8001a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1a:	4a17      	ldr	r2, [pc, #92]	; (8001a78 <HAL_SPI_MspInit+0x88>)
 8001a1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001a20:	6453      	str	r3, [r2, #68]	; 0x44
 8001a22:	4b15      	ldr	r3, [pc, #84]	; (8001a78 <HAL_SPI_MspInit+0x88>)
 8001a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a2a:	613b      	str	r3, [r7, #16]
 8001a2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60fb      	str	r3, [r7, #12]
 8001a32:	4b11      	ldr	r3, [pc, #68]	; (8001a78 <HAL_SPI_MspInit+0x88>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a36:	4a10      	ldr	r2, [pc, #64]	; (8001a78 <HAL_SPI_MspInit+0x88>)
 8001a38:	f043 0320 	orr.w	r3, r3, #32
 8001a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a3e:	4b0e      	ldr	r3, [pc, #56]	; (8001a78 <HAL_SPI_MspInit+0x88>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a42:	f003 0320 	and.w	r3, r3, #32
 8001a46:	60fb      	str	r3, [r7, #12]
 8001a48:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF9     ------> SPI5_MOSI
    PF8     ------> SPI5_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_8;
 8001a4a:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001a4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a50:	2302      	movs	r3, #2
 8001a52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a54:	2300      	movs	r3, #0
 8001a56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001a5c:	2305      	movs	r3, #5
 8001a5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a60:	f107 0314 	add.w	r3, r7, #20
 8001a64:	4619      	mov	r1, r3
 8001a66:	4805      	ldr	r0, [pc, #20]	; (8001a7c <HAL_SPI_MspInit+0x8c>)
 8001a68:	f001 fde0 	bl	800362c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001a6c:	bf00      	nop
 8001a6e:	3728      	adds	r7, #40	; 0x28
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	40015000 	.word	0x40015000
 8001a78:	40023800 	.word	0x40023800
 8001a7c:	40021400 	.word	0x40021400

08001a80 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b089      	sub	sp, #36	; 0x24
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a90:	d10e      	bne.n	8001ab0 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a92:	2300      	movs	r3, #0
 8001a94:	61fb      	str	r3, [r7, #28]
 8001a96:	4b31      	ldr	r3, [pc, #196]	; (8001b5c <HAL_TIM_PWM_MspInit+0xdc>)
 8001a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9a:	4a30      	ldr	r2, [pc, #192]	; (8001b5c <HAL_TIM_PWM_MspInit+0xdc>)
 8001a9c:	f043 0301 	orr.w	r3, r3, #1
 8001aa0:	6413      	str	r3, [r2, #64]	; 0x40
 8001aa2:	4b2e      	ldr	r3, [pc, #184]	; (8001b5c <HAL_TIM_PWM_MspInit+0xdc>)
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	61fb      	str	r3, [r7, #28]
 8001aac:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8001aae:	e04e      	b.n	8001b4e <HAL_TIM_PWM_MspInit+0xce>
  else if(htim_pwm->Instance==TIM3)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a2a      	ldr	r2, [pc, #168]	; (8001b60 <HAL_TIM_PWM_MspInit+0xe0>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d10e      	bne.n	8001ad8 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001aba:	2300      	movs	r3, #0
 8001abc:	61bb      	str	r3, [r7, #24]
 8001abe:	4b27      	ldr	r3, [pc, #156]	; (8001b5c <HAL_TIM_PWM_MspInit+0xdc>)
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac2:	4a26      	ldr	r2, [pc, #152]	; (8001b5c <HAL_TIM_PWM_MspInit+0xdc>)
 8001ac4:	f043 0302 	orr.w	r3, r3, #2
 8001ac8:	6413      	str	r3, [r2, #64]	; 0x40
 8001aca:	4b24      	ldr	r3, [pc, #144]	; (8001b5c <HAL_TIM_PWM_MspInit+0xdc>)
 8001acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ace:	f003 0302 	and.w	r3, r3, #2
 8001ad2:	61bb      	str	r3, [r7, #24]
 8001ad4:	69bb      	ldr	r3, [r7, #24]
}
 8001ad6:	e03a      	b.n	8001b4e <HAL_TIM_PWM_MspInit+0xce>
  else if(htim_pwm->Instance==TIM4)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a21      	ldr	r2, [pc, #132]	; (8001b64 <HAL_TIM_PWM_MspInit+0xe4>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d10e      	bne.n	8001b00 <HAL_TIM_PWM_MspInit+0x80>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	617b      	str	r3, [r7, #20]
 8001ae6:	4b1d      	ldr	r3, [pc, #116]	; (8001b5c <HAL_TIM_PWM_MspInit+0xdc>)
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aea:	4a1c      	ldr	r2, [pc, #112]	; (8001b5c <HAL_TIM_PWM_MspInit+0xdc>)
 8001aec:	f043 0304 	orr.w	r3, r3, #4
 8001af0:	6413      	str	r3, [r2, #64]	; 0x40
 8001af2:	4b1a      	ldr	r3, [pc, #104]	; (8001b5c <HAL_TIM_PWM_MspInit+0xdc>)
 8001af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af6:	f003 0304 	and.w	r3, r3, #4
 8001afa:	617b      	str	r3, [r7, #20]
 8001afc:	697b      	ldr	r3, [r7, #20]
}
 8001afe:	e026      	b.n	8001b4e <HAL_TIM_PWM_MspInit+0xce>
  else if(htim_pwm->Instance==TIM5)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a18      	ldr	r2, [pc, #96]	; (8001b68 <HAL_TIM_PWM_MspInit+0xe8>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d10e      	bne.n	8001b28 <HAL_TIM_PWM_MspInit+0xa8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	613b      	str	r3, [r7, #16]
 8001b0e:	4b13      	ldr	r3, [pc, #76]	; (8001b5c <HAL_TIM_PWM_MspInit+0xdc>)
 8001b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b12:	4a12      	ldr	r2, [pc, #72]	; (8001b5c <HAL_TIM_PWM_MspInit+0xdc>)
 8001b14:	f043 0308 	orr.w	r3, r3, #8
 8001b18:	6413      	str	r3, [r2, #64]	; 0x40
 8001b1a:	4b10      	ldr	r3, [pc, #64]	; (8001b5c <HAL_TIM_PWM_MspInit+0xdc>)
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1e:	f003 0308 	and.w	r3, r3, #8
 8001b22:	613b      	str	r3, [r7, #16]
 8001b24:	693b      	ldr	r3, [r7, #16]
}
 8001b26:	e012      	b.n	8001b4e <HAL_TIM_PWM_MspInit+0xce>
  else if(htim_pwm->Instance==TIM12)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a0f      	ldr	r2, [pc, #60]	; (8001b6c <HAL_TIM_PWM_MspInit+0xec>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d10d      	bne.n	8001b4e <HAL_TIM_PWM_MspInit+0xce>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001b32:	2300      	movs	r3, #0
 8001b34:	60fb      	str	r3, [r7, #12]
 8001b36:	4b09      	ldr	r3, [pc, #36]	; (8001b5c <HAL_TIM_PWM_MspInit+0xdc>)
 8001b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3a:	4a08      	ldr	r2, [pc, #32]	; (8001b5c <HAL_TIM_PWM_MspInit+0xdc>)
 8001b3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b40:	6413      	str	r3, [r2, #64]	; 0x40
 8001b42:	4b06      	ldr	r3, [pc, #24]	; (8001b5c <HAL_TIM_PWM_MspInit+0xdc>)
 8001b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b4a:	60fb      	str	r3, [r7, #12]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
}
 8001b4e:	bf00      	nop
 8001b50:	3724      	adds	r7, #36	; 0x24
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	40023800 	.word	0x40023800
 8001b60:	40000400 	.word	0x40000400
 8001b64:	40000800 	.word	0x40000800
 8001b68:	40000c00 	.word	0x40000c00
 8001b6c:	40001800 	.word	0x40001800

08001b70 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b08c      	sub	sp, #48	; 0x30
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b78:	f107 031c 	add.w	r3, r7, #28
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	605a      	str	r2, [r3, #4]
 8001b82:	609a      	str	r2, [r3, #8]
 8001b84:	60da      	str	r2, [r3, #12]
 8001b86:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b90:	d11e      	bne.n	8001bd0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b92:	2300      	movs	r3, #0
 8001b94:	61bb      	str	r3, [r7, #24]
 8001b96:	4b59      	ldr	r3, [pc, #356]	; (8001cfc <HAL_TIM_MspPostInit+0x18c>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9a:	4a58      	ldr	r2, [pc, #352]	; (8001cfc <HAL_TIM_MspPostInit+0x18c>)
 8001b9c:	f043 0301 	orr.w	r3, r3, #1
 8001ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ba2:	4b56      	ldr	r3, [pc, #344]	; (8001cfc <HAL_TIM_MspPostInit+0x18c>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	f003 0301 	and.w	r3, r3, #1
 8001baa:	61bb      	str	r3, [r7, #24]
 8001bac:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001bae:	230c      	movs	r3, #12
 8001bb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc2:	f107 031c 	add.w	r3, r7, #28
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	484d      	ldr	r0, [pc, #308]	; (8001d00 <HAL_TIM_MspPostInit+0x190>)
 8001bca:	f001 fd2f 	bl	800362c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8001bce:	e090      	b.n	8001cf2 <HAL_TIM_MspPostInit+0x182>
  else if(htim->Instance==TIM3)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a4b      	ldr	r2, [pc, #300]	; (8001d04 <HAL_TIM_MspPostInit+0x194>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d11e      	bne.n	8001c18 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bda:	2300      	movs	r3, #0
 8001bdc:	617b      	str	r3, [r7, #20]
 8001bde:	4b47      	ldr	r3, [pc, #284]	; (8001cfc <HAL_TIM_MspPostInit+0x18c>)
 8001be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be2:	4a46      	ldr	r2, [pc, #280]	; (8001cfc <HAL_TIM_MspPostInit+0x18c>)
 8001be4:	f043 0302 	orr.w	r3, r3, #2
 8001be8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bea:	4b44      	ldr	r3, [pc, #272]	; (8001cfc <HAL_TIM_MspPostInit+0x18c>)
 8001bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	617b      	str	r3, [r7, #20]
 8001bf4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001bf6:	2320      	movs	r3, #32
 8001bf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c02:	2300      	movs	r3, #0
 8001c04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c06:	2302      	movs	r3, #2
 8001c08:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c0a:	f107 031c 	add.w	r3, r7, #28
 8001c0e:	4619      	mov	r1, r3
 8001c10:	483d      	ldr	r0, [pc, #244]	; (8001d08 <HAL_TIM_MspPostInit+0x198>)
 8001c12:	f001 fd0b 	bl	800362c <HAL_GPIO_Init>
}
 8001c16:	e06c      	b.n	8001cf2 <HAL_TIM_MspPostInit+0x182>
  else if(htim->Instance==TIM4)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a3b      	ldr	r2, [pc, #236]	; (8001d0c <HAL_TIM_MspPostInit+0x19c>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d11f      	bne.n	8001c62 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c22:	2300      	movs	r3, #0
 8001c24:	613b      	str	r3, [r7, #16]
 8001c26:	4b35      	ldr	r3, [pc, #212]	; (8001cfc <HAL_TIM_MspPostInit+0x18c>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2a:	4a34      	ldr	r2, [pc, #208]	; (8001cfc <HAL_TIM_MspPostInit+0x18c>)
 8001c2c:	f043 0308 	orr.w	r3, r3, #8
 8001c30:	6313      	str	r3, [r2, #48]	; 0x30
 8001c32:	4b32      	ldr	r3, [pc, #200]	; (8001cfc <HAL_TIM_MspPostInit+0x18c>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c36:	f003 0308 	and.w	r3, r3, #8
 8001c3a:	613b      	str	r3, [r7, #16]
 8001c3c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12;
 8001c3e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001c42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c44:	2302      	movs	r3, #2
 8001c46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001c50:	2302      	movs	r3, #2
 8001c52:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c54:	f107 031c 	add.w	r3, r7, #28
 8001c58:	4619      	mov	r1, r3
 8001c5a:	482d      	ldr	r0, [pc, #180]	; (8001d10 <HAL_TIM_MspPostInit+0x1a0>)
 8001c5c:	f001 fce6 	bl	800362c <HAL_GPIO_Init>
}
 8001c60:	e047      	b.n	8001cf2 <HAL_TIM_MspPostInit+0x182>
  else if(htim->Instance==TIM5)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a2b      	ldr	r2, [pc, #172]	; (8001d14 <HAL_TIM_MspPostInit+0x1a4>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d11f      	bne.n	8001cac <HAL_TIM_MspPostInit+0x13c>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	60fb      	str	r3, [r7, #12]
 8001c70:	4b22      	ldr	r3, [pc, #136]	; (8001cfc <HAL_TIM_MspPostInit+0x18c>)
 8001c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c74:	4a21      	ldr	r2, [pc, #132]	; (8001cfc <HAL_TIM_MspPostInit+0x18c>)
 8001c76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c7a:	6313      	str	r3, [r2, #48]	; 0x30
 8001c7c:	4b1f      	ldr	r3, [pc, #124]	; (8001cfc <HAL_TIM_MspPostInit+0x18c>)
 8001c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c84:	60fb      	str	r3, [r7, #12]
 8001c86:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10;
 8001c88:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001c8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c8e:	2302      	movs	r3, #2
 8001c90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c92:	2300      	movs	r3, #0
 8001c94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c96:	2300      	movs	r3, #0
 8001c98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001c9e:	f107 031c 	add.w	r3, r7, #28
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	481c      	ldr	r0, [pc, #112]	; (8001d18 <HAL_TIM_MspPostInit+0x1a8>)
 8001ca6:	f001 fcc1 	bl	800362c <HAL_GPIO_Init>
}
 8001caa:	e022      	b.n	8001cf2 <HAL_TIM_MspPostInit+0x182>
  else if(htim->Instance==TIM12)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a1a      	ldr	r2, [pc, #104]	; (8001d1c <HAL_TIM_MspPostInit+0x1ac>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d11d      	bne.n	8001cf2 <HAL_TIM_MspPostInit+0x182>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	60bb      	str	r3, [r7, #8]
 8001cba:	4b10      	ldr	r3, [pc, #64]	; (8001cfc <HAL_TIM_MspPostInit+0x18c>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbe:	4a0f      	ldr	r2, [pc, #60]	; (8001cfc <HAL_TIM_MspPostInit+0x18c>)
 8001cc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cc6:	4b0d      	ldr	r3, [pc, #52]	; (8001cfc <HAL_TIM_MspPostInit+0x18c>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cce:	60bb      	str	r3, [r7, #8]
 8001cd0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001cd2:	2340      	movs	r3, #64	; 0x40
 8001cd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001ce2:	2309      	movs	r3, #9
 8001ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001ce6:	f107 031c 	add.w	r3, r7, #28
 8001cea:	4619      	mov	r1, r3
 8001cec:	480a      	ldr	r0, [pc, #40]	; (8001d18 <HAL_TIM_MspPostInit+0x1a8>)
 8001cee:	f001 fc9d 	bl	800362c <HAL_GPIO_Init>
}
 8001cf2:	bf00      	nop
 8001cf4:	3730      	adds	r7, #48	; 0x30
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	40023800 	.word	0x40023800
 8001d00:	40020000 	.word	0x40020000
 8001d04:	40000400 	.word	0x40000400
 8001d08:	40020400 	.word	0x40020400
 8001d0c:	40000800 	.word	0x40000800
 8001d10:	40020c00 	.word	0x40020c00
 8001d14:	40000c00 	.word	0x40000c00
 8001d18:	40021c00 	.word	0x40021c00
 8001d1c:	40001800 	.word	0x40001800

08001d20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b092      	sub	sp, #72	; 0x48
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d28:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	601a      	str	r2, [r3, #0]
 8001d30:	605a      	str	r2, [r3, #4]
 8001d32:	609a      	str	r2, [r3, #8]
 8001d34:	60da      	str	r2, [r3, #12]
 8001d36:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a6a      	ldr	r2, [pc, #424]	; (8001ee8 <HAL_UART_MspInit+0x1c8>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d134      	bne.n	8001dac <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001d42:	2300      	movs	r3, #0
 8001d44:	633b      	str	r3, [r7, #48]	; 0x30
 8001d46:	4b69      	ldr	r3, [pc, #420]	; (8001eec <HAL_UART_MspInit+0x1cc>)
 8001d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4a:	4a68      	ldr	r2, [pc, #416]	; (8001eec <HAL_UART_MspInit+0x1cc>)
 8001d4c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001d50:	6413      	str	r3, [r2, #64]	; 0x40
 8001d52:	4b66      	ldr	r3, [pc, #408]	; (8001eec <HAL_UART_MspInit+0x1cc>)
 8001d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d5a:	633b      	str	r3, [r7, #48]	; 0x30
 8001d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d5e:	2300      	movs	r3, #0
 8001d60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d62:	4b62      	ldr	r3, [pc, #392]	; (8001eec <HAL_UART_MspInit+0x1cc>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d66:	4a61      	ldr	r2, [pc, #388]	; (8001eec <HAL_UART_MspInit+0x1cc>)
 8001d68:	f043 0301 	orr.w	r3, r3, #1
 8001d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d6e:	4b5f      	ldr	r3, [pc, #380]	; (8001eec <HAL_UART_MspInit+0x1cc>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d72:	f003 0301 	and.w	r3, r3, #1
 8001d76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART4 GPIO Configuration
    PA1     ------> UART4_RX
    PA0/WKUP     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d7e:	2302      	movs	r3, #2
 8001d80:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d82:	2300      	movs	r3, #0
 8001d84:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d86:	2303      	movs	r3, #3
 8001d88:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001d8a:	2308      	movs	r3, #8
 8001d8c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d8e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d92:	4619      	mov	r1, r3
 8001d94:	4856      	ldr	r0, [pc, #344]	; (8001ef0 <HAL_UART_MspInit+0x1d0>)
 8001d96:	f001 fc49 	bl	800362c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	2100      	movs	r1, #0
 8001d9e:	2034      	movs	r0, #52	; 0x34
 8001da0:	f001 f827 	bl	8002df2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001da4:	2034      	movs	r0, #52	; 0x34
 8001da6:	f001 f840 	bl	8002e2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001daa:	e180      	b.n	80020ae <HAL_UART_MspInit+0x38e>
  else if(huart->Instance==UART7)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a50      	ldr	r2, [pc, #320]	; (8001ef4 <HAL_UART_MspInit+0x1d4>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d12d      	bne.n	8001e12 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_UART7_CLK_ENABLE();
 8001db6:	2300      	movs	r3, #0
 8001db8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001dba:	4b4c      	ldr	r3, [pc, #304]	; (8001eec <HAL_UART_MspInit+0x1cc>)
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbe:	4a4b      	ldr	r2, [pc, #300]	; (8001eec <HAL_UART_MspInit+0x1cc>)
 8001dc0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8001dc6:	4b49      	ldr	r3, [pc, #292]	; (8001eec <HAL_UART_MspInit+0x1cc>)
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dca:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001dce:	62bb      	str	r3, [r7, #40]	; 0x28
 8001dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	627b      	str	r3, [r7, #36]	; 0x24
 8001dd6:	4b45      	ldr	r3, [pc, #276]	; (8001eec <HAL_UART_MspInit+0x1cc>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dda:	4a44      	ldr	r2, [pc, #272]	; (8001eec <HAL_UART_MspInit+0x1cc>)
 8001ddc:	f043 0310 	orr.w	r3, r3, #16
 8001de0:	6313      	str	r3, [r2, #48]	; 0x30
 8001de2:	4b42      	ldr	r3, [pc, #264]	; (8001eec <HAL_UART_MspInit+0x1cc>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de6:	f003 0310 	and.w	r3, r3, #16
 8001dea:	627b      	str	r3, [r7, #36]	; 0x24
 8001dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7;
 8001dee:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001df2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df4:	2302      	movs	r3, #2
 8001df6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8001e00:	2308      	movs	r3, #8
 8001e02:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e04:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001e08:	4619      	mov	r1, r3
 8001e0a:	483b      	ldr	r0, [pc, #236]	; (8001ef8 <HAL_UART_MspInit+0x1d8>)
 8001e0c:	f001 fc0e 	bl	800362c <HAL_GPIO_Init>
}
 8001e10:	e14d      	b.n	80020ae <HAL_UART_MspInit+0x38e>
  else if(huart->Instance==USART1)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a39      	ldr	r2, [pc, #228]	; (8001efc <HAL_UART_MspInit+0x1dc>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d177      	bne.n	8001f0c <HAL_UART_MspInit+0x1ec>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	623b      	str	r3, [r7, #32]
 8001e20:	4b32      	ldr	r3, [pc, #200]	; (8001eec <HAL_UART_MspInit+0x1cc>)
 8001e22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e24:	4a31      	ldr	r2, [pc, #196]	; (8001eec <HAL_UART_MspInit+0x1cc>)
 8001e26:	f043 0310 	orr.w	r3, r3, #16
 8001e2a:	6453      	str	r3, [r2, #68]	; 0x44
 8001e2c:	4b2f      	ldr	r3, [pc, #188]	; (8001eec <HAL_UART_MspInit+0x1cc>)
 8001e2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e30:	f003 0310 	and.w	r3, r3, #16
 8001e34:	623b      	str	r3, [r7, #32]
 8001e36:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e38:	2300      	movs	r3, #0
 8001e3a:	61fb      	str	r3, [r7, #28]
 8001e3c:	4b2b      	ldr	r3, [pc, #172]	; (8001eec <HAL_UART_MspInit+0x1cc>)
 8001e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e40:	4a2a      	ldr	r2, [pc, #168]	; (8001eec <HAL_UART_MspInit+0x1cc>)
 8001e42:	f043 0302 	orr.w	r3, r3, #2
 8001e46:	6313      	str	r3, [r2, #48]	; 0x30
 8001e48:	4b28      	ldr	r3, [pc, #160]	; (8001eec <HAL_UART_MspInit+0x1cc>)
 8001e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4c:	f003 0302 	and.w	r3, r3, #2
 8001e50:	61fb      	str	r3, [r7, #28]
 8001e52:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8001e54:	23c0      	movs	r3, #192	; 0xc0
 8001e56:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e58:	2302      	movs	r3, #2
 8001e5a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e60:	2303      	movs	r3, #3
 8001e62:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e64:	2307      	movs	r3, #7
 8001e66:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e68:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	4824      	ldr	r0, [pc, #144]	; (8001f00 <HAL_UART_MspInit+0x1e0>)
 8001e70:	f001 fbdc 	bl	800362c <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001e74:	4b23      	ldr	r3, [pc, #140]	; (8001f04 <HAL_UART_MspInit+0x1e4>)
 8001e76:	4a24      	ldr	r2, [pc, #144]	; (8001f08 <HAL_UART_MspInit+0x1e8>)
 8001e78:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001e7a:	4b22      	ldr	r3, [pc, #136]	; (8001f04 <HAL_UART_MspInit+0x1e4>)
 8001e7c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e80:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e82:	4b20      	ldr	r3, [pc, #128]	; (8001f04 <HAL_UART_MspInit+0x1e4>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e88:	4b1e      	ldr	r3, [pc, #120]	; (8001f04 <HAL_UART_MspInit+0x1e4>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e8e:	4b1d      	ldr	r3, [pc, #116]	; (8001f04 <HAL_UART_MspInit+0x1e4>)
 8001e90:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e94:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e96:	4b1b      	ldr	r3, [pc, #108]	; (8001f04 <HAL_UART_MspInit+0x1e4>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e9c:	4b19      	ldr	r3, [pc, #100]	; (8001f04 <HAL_UART_MspInit+0x1e4>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001ea2:	4b18      	ldr	r3, [pc, #96]	; (8001f04 <HAL_UART_MspInit+0x1e4>)
 8001ea4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ea8:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001eaa:	4b16      	ldr	r3, [pc, #88]	; (8001f04 <HAL_UART_MspInit+0x1e4>)
 8001eac:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001eb0:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001eb2:	4b14      	ldr	r3, [pc, #80]	; (8001f04 <HAL_UART_MspInit+0x1e4>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001eb8:	4812      	ldr	r0, [pc, #72]	; (8001f04 <HAL_UART_MspInit+0x1e4>)
 8001eba:	f000 ffd1 	bl	8002e60 <HAL_DMA_Init>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d001      	beq.n	8001ec8 <HAL_UART_MspInit+0x1a8>
      Error_Handler();
 8001ec4:	f7ff f9d8 	bl	8001278 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	4a0e      	ldr	r2, [pc, #56]	; (8001f04 <HAL_UART_MspInit+0x1e4>)
 8001ecc:	639a      	str	r2, [r3, #56]	; 0x38
 8001ece:	4a0d      	ldr	r2, [pc, #52]	; (8001f04 <HAL_UART_MspInit+0x1e4>)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	2100      	movs	r1, #0
 8001ed8:	2025      	movs	r0, #37	; 0x25
 8001eda:	f000 ff8a 	bl	8002df2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001ede:	2025      	movs	r0, #37	; 0x25
 8001ee0:	f000 ffa3 	bl	8002e2a <HAL_NVIC_EnableIRQ>
}
 8001ee4:	e0e3      	b.n	80020ae <HAL_UART_MspInit+0x38e>
 8001ee6:	bf00      	nop
 8001ee8:	40004c00 	.word	0x40004c00
 8001eec:	40023800 	.word	0x40023800
 8001ef0:	40020000 	.word	0x40020000
 8001ef4:	40007800 	.word	0x40007800
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	40011000 	.word	0x40011000
 8001f00:	40020400 	.word	0x40020400
 8001f04:	20000288 	.word	0x20000288
 8001f08:	40026440 	.word	0x40026440
  else if(huart->Instance==USART2)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a69      	ldr	r2, [pc, #420]	; (80020b8 <HAL_UART_MspInit+0x398>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	f040 8091 	bne.w	800203a <HAL_UART_MspInit+0x31a>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f18:	2300      	movs	r3, #0
 8001f1a:	61bb      	str	r3, [r7, #24]
 8001f1c:	4b67      	ldr	r3, [pc, #412]	; (80020bc <HAL_UART_MspInit+0x39c>)
 8001f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f20:	4a66      	ldr	r2, [pc, #408]	; (80020bc <HAL_UART_MspInit+0x39c>)
 8001f22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f26:	6413      	str	r3, [r2, #64]	; 0x40
 8001f28:	4b64      	ldr	r3, [pc, #400]	; (80020bc <HAL_UART_MspInit+0x39c>)
 8001f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f30:	61bb      	str	r3, [r7, #24]
 8001f32:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f34:	2300      	movs	r3, #0
 8001f36:	617b      	str	r3, [r7, #20]
 8001f38:	4b60      	ldr	r3, [pc, #384]	; (80020bc <HAL_UART_MspInit+0x39c>)
 8001f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3c:	4a5f      	ldr	r2, [pc, #380]	; (80020bc <HAL_UART_MspInit+0x39c>)
 8001f3e:	f043 0308 	orr.w	r3, r3, #8
 8001f42:	6313      	str	r3, [r2, #48]	; 0x30
 8001f44:	4b5d      	ldr	r3, [pc, #372]	; (80020bc <HAL_UART_MspInit+0x39c>)
 8001f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f48:	f003 0308 	and.w	r3, r3, #8
 8001f4c:	617b      	str	r3, [r7, #20]
 8001f4e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5;
 8001f50:	2360      	movs	r3, #96	; 0x60
 8001f52:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f54:	2302      	movs	r3, #2
 8001f56:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f60:	2307      	movs	r3, #7
 8001f62:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f64:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001f68:	4619      	mov	r1, r3
 8001f6a:	4855      	ldr	r0, [pc, #340]	; (80020c0 <HAL_UART_MspInit+0x3a0>)
 8001f6c:	f001 fb5e 	bl	800362c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001f70:	4b54      	ldr	r3, [pc, #336]	; (80020c4 <HAL_UART_MspInit+0x3a4>)
 8001f72:	4a55      	ldr	r2, [pc, #340]	; (80020c8 <HAL_UART_MspInit+0x3a8>)
 8001f74:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001f76:	4b53      	ldr	r3, [pc, #332]	; (80020c4 <HAL_UART_MspInit+0x3a4>)
 8001f78:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f7c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f7e:	4b51      	ldr	r3, [pc, #324]	; (80020c4 <HAL_UART_MspInit+0x3a4>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f84:	4b4f      	ldr	r3, [pc, #316]	; (80020c4 <HAL_UART_MspInit+0x3a4>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f8a:	4b4e      	ldr	r3, [pc, #312]	; (80020c4 <HAL_UART_MspInit+0x3a4>)
 8001f8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f90:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f92:	4b4c      	ldr	r3, [pc, #304]	; (80020c4 <HAL_UART_MspInit+0x3a4>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f98:	4b4a      	ldr	r3, [pc, #296]	; (80020c4 <HAL_UART_MspInit+0x3a4>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001f9e:	4b49      	ldr	r3, [pc, #292]	; (80020c4 <HAL_UART_MspInit+0x3a4>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001fa4:	4b47      	ldr	r3, [pc, #284]	; (80020c4 <HAL_UART_MspInit+0x3a4>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001faa:	4b46      	ldr	r3, [pc, #280]	; (80020c4 <HAL_UART_MspInit+0x3a4>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001fb0:	4844      	ldr	r0, [pc, #272]	; (80020c4 <HAL_UART_MspInit+0x3a4>)
 8001fb2:	f000 ff55 	bl	8002e60 <HAL_DMA_Init>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d001      	beq.n	8001fc0 <HAL_UART_MspInit+0x2a0>
      Error_Handler();
 8001fbc:	f7ff f95c 	bl	8001278 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	4a40      	ldr	r2, [pc, #256]	; (80020c4 <HAL_UART_MspInit+0x3a4>)
 8001fc4:	639a      	str	r2, [r3, #56]	; 0x38
 8001fc6:	4a3f      	ldr	r2, [pc, #252]	; (80020c4 <HAL_UART_MspInit+0x3a4>)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001fcc:	4b3f      	ldr	r3, [pc, #252]	; (80020cc <HAL_UART_MspInit+0x3ac>)
 8001fce:	4a40      	ldr	r2, [pc, #256]	; (80020d0 <HAL_UART_MspInit+0x3b0>)
 8001fd0:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001fd2:	4b3e      	ldr	r3, [pc, #248]	; (80020cc <HAL_UART_MspInit+0x3ac>)
 8001fd4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001fd8:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001fda:	4b3c      	ldr	r3, [pc, #240]	; (80020cc <HAL_UART_MspInit+0x3ac>)
 8001fdc:	2240      	movs	r2, #64	; 0x40
 8001fde:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fe0:	4b3a      	ldr	r3, [pc, #232]	; (80020cc <HAL_UART_MspInit+0x3ac>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001fe6:	4b39      	ldr	r3, [pc, #228]	; (80020cc <HAL_UART_MspInit+0x3ac>)
 8001fe8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fec:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fee:	4b37      	ldr	r3, [pc, #220]	; (80020cc <HAL_UART_MspInit+0x3ac>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ff4:	4b35      	ldr	r3, [pc, #212]	; (80020cc <HAL_UART_MspInit+0x3ac>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001ffa:	4b34      	ldr	r3, [pc, #208]	; (80020cc <HAL_UART_MspInit+0x3ac>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002000:	4b32      	ldr	r3, [pc, #200]	; (80020cc <HAL_UART_MspInit+0x3ac>)
 8002002:	2200      	movs	r2, #0
 8002004:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002006:	4b31      	ldr	r3, [pc, #196]	; (80020cc <HAL_UART_MspInit+0x3ac>)
 8002008:	2200      	movs	r2, #0
 800200a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800200c:	482f      	ldr	r0, [pc, #188]	; (80020cc <HAL_UART_MspInit+0x3ac>)
 800200e:	f000 ff27 	bl	8002e60 <HAL_DMA_Init>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <HAL_UART_MspInit+0x2fc>
      Error_Handler();
 8002018:	f7ff f92e 	bl	8001278 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	4a2b      	ldr	r2, [pc, #172]	; (80020cc <HAL_UART_MspInit+0x3ac>)
 8002020:	635a      	str	r2, [r3, #52]	; 0x34
 8002022:	4a2a      	ldr	r2, [pc, #168]	; (80020cc <HAL_UART_MspInit+0x3ac>)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002028:	2200      	movs	r2, #0
 800202a:	2100      	movs	r1, #0
 800202c:	2026      	movs	r0, #38	; 0x26
 800202e:	f000 fee0 	bl	8002df2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002032:	2026      	movs	r0, #38	; 0x26
 8002034:	f000 fef9 	bl	8002e2a <HAL_NVIC_EnableIRQ>
}
 8002038:	e039      	b.n	80020ae <HAL_UART_MspInit+0x38e>
  else if(huart->Instance==USART6)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a25      	ldr	r2, [pc, #148]	; (80020d4 <HAL_UART_MspInit+0x3b4>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d134      	bne.n	80020ae <HAL_UART_MspInit+0x38e>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002044:	2300      	movs	r3, #0
 8002046:	613b      	str	r3, [r7, #16]
 8002048:	4b1c      	ldr	r3, [pc, #112]	; (80020bc <HAL_UART_MspInit+0x39c>)
 800204a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800204c:	4a1b      	ldr	r2, [pc, #108]	; (80020bc <HAL_UART_MspInit+0x39c>)
 800204e:	f043 0320 	orr.w	r3, r3, #32
 8002052:	6453      	str	r3, [r2, #68]	; 0x44
 8002054:	4b19      	ldr	r3, [pc, #100]	; (80020bc <HAL_UART_MspInit+0x39c>)
 8002056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002058:	f003 0320 	and.w	r3, r3, #32
 800205c:	613b      	str	r3, [r7, #16]
 800205e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002060:	2300      	movs	r3, #0
 8002062:	60fb      	str	r3, [r7, #12]
 8002064:	4b15      	ldr	r3, [pc, #84]	; (80020bc <HAL_UART_MspInit+0x39c>)
 8002066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002068:	4a14      	ldr	r2, [pc, #80]	; (80020bc <HAL_UART_MspInit+0x39c>)
 800206a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800206e:	6313      	str	r3, [r2, #48]	; 0x30
 8002070:	4b12      	ldr	r3, [pc, #72]	; (80020bc <HAL_UART_MspInit+0x39c>)
 8002072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002078:	60fb      	str	r3, [r7, #12]
 800207a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 800207c:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8002080:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002082:	2302      	movs	r3, #2
 8002084:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002086:	2300      	movs	r3, #0
 8002088:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800208a:	2303      	movs	r3, #3
 800208c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800208e:	2308      	movs	r3, #8
 8002090:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002092:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002096:	4619      	mov	r1, r3
 8002098:	480f      	ldr	r0, [pc, #60]	; (80020d8 <HAL_UART_MspInit+0x3b8>)
 800209a:	f001 fac7 	bl	800362c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800209e:	2200      	movs	r2, #0
 80020a0:	2100      	movs	r1, #0
 80020a2:	2047      	movs	r0, #71	; 0x47
 80020a4:	f000 fea5 	bl	8002df2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80020a8:	2047      	movs	r0, #71	; 0x47
 80020aa:	f000 febe 	bl	8002e2a <HAL_NVIC_EnableIRQ>
}
 80020ae:	bf00      	nop
 80020b0:	3748      	adds	r7, #72	; 0x48
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	40004400 	.word	0x40004400
 80020bc:	40023800 	.word	0x40023800
 80020c0:	40020c00 	.word	0x40020c00
 80020c4:	20000030 	.word	0x20000030
 80020c8:	40026088 	.word	0x40026088
 80020cc:	200002e8 	.word	0x200002e8
 80020d0:	400260a0 	.word	0x400260a0
 80020d4:	40011400 	.word	0x40011400
 80020d8:	40021800 	.word	0x40021800

080020dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80020e0:	bf00      	nop
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr

080020ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020ea:	b480      	push	{r7}
 80020ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020ee:	e7fe      	b.n	80020ee <HardFault_Handler+0x4>

080020f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020f4:	e7fe      	b.n	80020f4 <MemManage_Handler+0x4>

080020f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020f6:	b480      	push	{r7}
 80020f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020fa:	e7fe      	b.n	80020fa <BusFault_Handler+0x4>

080020fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002100:	e7fe      	b.n	8002100 <UsageFault_Handler+0x4>

08002102 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002102:	b480      	push	{r7}
 8002104:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002106:	bf00      	nop
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002114:	bf00      	nop
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr

0800211e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800211e:	b480      	push	{r7}
 8002120:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002122:	bf00      	nop
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002130:	f000 f904 	bl	800233c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002134:	bf00      	nop
 8002136:	bd80      	pop	{r7, pc}

08002138 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800213c:	4802      	ldr	r0, [pc, #8]	; (8002148 <DMA1_Stream5_IRQHandler+0x10>)
 800213e:	f001 f80b 	bl	8003158 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002142:	bf00      	nop
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	20000030 	.word	0x20000030

0800214c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002150:	4802      	ldr	r0, [pc, #8]	; (800215c <DMA1_Stream6_IRQHandler+0x10>)
 8002152:	f001 f801 	bl	8003158 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002156:	bf00      	nop
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	200002e8 	.word	0x200002e8

08002160 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002164:	4802      	ldr	r0, [pc, #8]	; (8002170 <CAN1_TX_IRQHandler+0x10>)
 8002166:	f000 fb3a 	bl	80027de <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 800216a:	bf00      	nop
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	200004a4 	.word	0x200004a4

08002174 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002178:	4802      	ldr	r0, [pc, #8]	; (8002184 <CAN1_RX0_IRQHandler+0x10>)
 800217a:	f000 fb30 	bl	80027de <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800217e:	bf00      	nop
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	200004a4 	.word	0x200004a4

08002188 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  uart_receive_handler(&huart1);
 800218c:	4803      	ldr	r0, [pc, #12]	; (800219c <USART1_IRQHandler+0x14>)
 800218e:	f7ff fa9f 	bl	80016d0 <uart_receive_handler>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002192:	4802      	ldr	r0, [pc, #8]	; (800219c <USART1_IRQHandler+0x14>)
 8002194:	f002 ff5e 	bl	8005054 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002198:	bf00      	nop
 800219a:	bd80      	pop	{r7, pc}
 800219c:	20000348 	.word	0x20000348

080021a0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80021a4:	4802      	ldr	r0, [pc, #8]	; (80021b0 <USART2_IRQHandler+0x10>)
 80021a6:	f002 ff55 	bl	8005054 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80021aa:	bf00      	nop
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	20000460 	.word	0x20000460

080021b4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80021b8:	4802      	ldr	r0, [pc, #8]	; (80021c4 <UART4_IRQHandler+0x10>)
 80021ba:	f002 ff4b 	bl	8005054 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80021be:	bf00      	nop
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	200003d4 	.word	0x200003d4

080021c8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80021cc:	4802      	ldr	r0, [pc, #8]	; (80021d8 <DMA2_Stream2_IRQHandler+0x10>)
 80021ce:	f000 ffc3 	bl	8003158 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80021d2:	bf00      	nop
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	20000288 	.word	0x20000288

080021dc <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupts.
  */
void CAN2_TX_IRQHandler(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80021e0:	4802      	ldr	r0, [pc, #8]	; (80021ec <CAN2_TX_IRQHandler+0x10>)
 80021e2:	f000 fafc 	bl	80027de <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 80021e6:	bf00      	nop
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	20000260 	.word	0x20000260

080021f0 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80021f4:	4802      	ldr	r0, [pc, #8]	; (8002200 <CAN2_RX0_IRQHandler+0x10>)
 80021f6:	f000 faf2 	bl	80027de <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 80021fa:	bf00      	nop
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	20000260 	.word	0x20000260

08002204 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002208:	4802      	ldr	r0, [pc, #8]	; (8002214 <USART6_IRQHandler+0x10>)
 800220a:	f002 ff23 	bl	8005054 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800220e:	bf00      	nop
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	20000390 	.word	0x20000390

08002218 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800221c:	4b08      	ldr	r3, [pc, #32]	; (8002240 <SystemInit+0x28>)
 800221e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002222:	4a07      	ldr	r2, [pc, #28]	; (8002240 <SystemInit+0x28>)
 8002224:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002228:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800222c:	4b04      	ldr	r3, [pc, #16]	; (8002240 <SystemInit+0x28>)
 800222e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002232:	609a      	str	r2, [r3, #8]
#endif
}
 8002234:	bf00      	nop
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	e000ed00 	.word	0xe000ed00

08002244 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002244:	f8df d034 	ldr.w	sp, [pc, #52]	; 800227c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002248:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800224a:	e003      	b.n	8002254 <LoopCopyDataInit>

0800224c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800224c:	4b0c      	ldr	r3, [pc, #48]	; (8002280 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800224e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002250:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002252:	3104      	adds	r1, #4

08002254 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002254:	480b      	ldr	r0, [pc, #44]	; (8002284 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002256:	4b0c      	ldr	r3, [pc, #48]	; (8002288 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002258:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800225a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800225c:	d3f6      	bcc.n	800224c <CopyDataInit>
  ldr  r2, =_sbss
 800225e:	4a0b      	ldr	r2, [pc, #44]	; (800228c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002260:	e002      	b.n	8002268 <LoopFillZerobss>

08002262 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002262:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002264:	f842 3b04 	str.w	r3, [r2], #4

08002268 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002268:	4b09      	ldr	r3, [pc, #36]	; (8002290 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800226a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800226c:	d3f9      	bcc.n	8002262 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800226e:	f7ff ffd3 	bl	8002218 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002272:	f003 fd77 	bl	8005d64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002276:	f7fe f9bf 	bl	80005f8 <main>
  bx  lr    
 800227a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800227c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002280:	08005e04 	.word	0x08005e04
  ldr  r0, =_sdata
 8002284:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002288:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 800228c:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8002290:	200005c4 	.word	0x200005c4

08002294 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002294:	e7fe      	b.n	8002294 <ADC_IRQHandler>
	...

08002298 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800229c:	4b0e      	ldr	r3, [pc, #56]	; (80022d8 <HAL_Init+0x40>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a0d      	ldr	r2, [pc, #52]	; (80022d8 <HAL_Init+0x40>)
 80022a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022a8:	4b0b      	ldr	r3, [pc, #44]	; (80022d8 <HAL_Init+0x40>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a0a      	ldr	r2, [pc, #40]	; (80022d8 <HAL_Init+0x40>)
 80022ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022b4:	4b08      	ldr	r3, [pc, #32]	; (80022d8 <HAL_Init+0x40>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a07      	ldr	r2, [pc, #28]	; (80022d8 <HAL_Init+0x40>)
 80022ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022c0:	2003      	movs	r0, #3
 80022c2:	f000 fd8b 	bl	8002ddc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022c6:	2000      	movs	r0, #0
 80022c8:	f000 f808 	bl	80022dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022cc:	f7ff fa3e 	bl	800174c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	40023c00 	.word	0x40023c00

080022dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022e4:	4b12      	ldr	r3, [pc, #72]	; (8002330 <HAL_InitTick+0x54>)
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	4b12      	ldr	r3, [pc, #72]	; (8002334 <HAL_InitTick+0x58>)
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	4619      	mov	r1, r3
 80022ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80022f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80022fa:	4618      	mov	r0, r3
 80022fc:	f000 fda3 	bl	8002e46 <HAL_SYSTICK_Config>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e00e      	b.n	8002328 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2b0f      	cmp	r3, #15
 800230e:	d80a      	bhi.n	8002326 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002310:	2200      	movs	r2, #0
 8002312:	6879      	ldr	r1, [r7, #4]
 8002314:	f04f 30ff 	mov.w	r0, #4294967295
 8002318:	f000 fd6b 	bl	8002df2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800231c:	4a06      	ldr	r2, [pc, #24]	; (8002338 <HAL_InitTick+0x5c>)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002322:	2300      	movs	r3, #0
 8002324:	e000      	b.n	8002328 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
}
 8002328:	4618      	mov	r0, r3
 800232a:	3708      	adds	r7, #8
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	20000000 	.word	0x20000000
 8002334:	20000008 	.word	0x20000008
 8002338:	20000004 	.word	0x20000004

0800233c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002340:	4b06      	ldr	r3, [pc, #24]	; (800235c <HAL_IncTick+0x20>)
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	461a      	mov	r2, r3
 8002346:	4b06      	ldr	r3, [pc, #24]	; (8002360 <HAL_IncTick+0x24>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4413      	add	r3, r2
 800234c:	4a04      	ldr	r2, [pc, #16]	; (8002360 <HAL_IncTick+0x24>)
 800234e:	6013      	str	r3, [r2, #0]
}
 8002350:	bf00      	nop
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	20000008 	.word	0x20000008
 8002360:	200005c0 	.word	0x200005c0

08002364 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
  return uwTick;
 8002368:	4b03      	ldr	r3, [pc, #12]	; (8002378 <HAL_GetTick+0x14>)
 800236a:	681b      	ldr	r3, [r3, #0]
}
 800236c:	4618      	mov	r0, r3
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	200005c0 	.word	0x200005c0

0800237c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002384:	f7ff ffee 	bl	8002364 <HAL_GetTick>
 8002388:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002394:	d005      	beq.n	80023a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002396:	4b0a      	ldr	r3, [pc, #40]	; (80023c0 <HAL_Delay+0x44>)
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	461a      	mov	r2, r3
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	4413      	add	r3, r2
 80023a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80023a2:	bf00      	nop
 80023a4:	f7ff ffde 	bl	8002364 <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	68fa      	ldr	r2, [r7, #12]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d8f7      	bhi.n	80023a4 <HAL_Delay+0x28>
  {
  }
}
 80023b4:	bf00      	nop
 80023b6:	bf00      	nop
 80023b8:	3710      	adds	r7, #16
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	20000008 	.word	0x20000008

080023c4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d101      	bne.n	80023d6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e0ed      	b.n	80025b2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d102      	bne.n	80023e8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f7ff f9da 	bl	800179c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f042 0201 	orr.w	r2, r2, #1
 80023f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023f8:	f7ff ffb4 	bl	8002364 <HAL_GetTick>
 80023fc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80023fe:	e012      	b.n	8002426 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002400:	f7ff ffb0 	bl	8002364 <HAL_GetTick>
 8002404:	4602      	mov	r2, r0
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	2b0a      	cmp	r3, #10
 800240c:	d90b      	bls.n	8002426 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002412:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2205      	movs	r2, #5
 800241e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e0c5      	b.n	80025b2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f003 0301 	and.w	r3, r3, #1
 8002430:	2b00      	cmp	r3, #0
 8002432:	d0e5      	beq.n	8002400 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f022 0202 	bic.w	r2, r2, #2
 8002442:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002444:	f7ff ff8e 	bl	8002364 <HAL_GetTick>
 8002448:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800244a:	e012      	b.n	8002472 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800244c:	f7ff ff8a 	bl	8002364 <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	2b0a      	cmp	r3, #10
 8002458:	d90b      	bls.n	8002472 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2205      	movs	r2, #5
 800246a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e09f      	b.n	80025b2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f003 0302 	and.w	r3, r3, #2
 800247c:	2b00      	cmp	r3, #0
 800247e:	d1e5      	bne.n	800244c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	7e1b      	ldrb	r3, [r3, #24]
 8002484:	2b01      	cmp	r3, #1
 8002486:	d108      	bne.n	800249a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002496:	601a      	str	r2, [r3, #0]
 8002498:	e007      	b.n	80024aa <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	7e5b      	ldrb	r3, [r3, #25]
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d108      	bne.n	80024c4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024c0:	601a      	str	r2, [r3, #0]
 80024c2:	e007      	b.n	80024d4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	7e9b      	ldrb	r3, [r3, #26]
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d108      	bne.n	80024ee <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f042 0220 	orr.w	r2, r2, #32
 80024ea:	601a      	str	r2, [r3, #0]
 80024ec:	e007      	b.n	80024fe <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f022 0220 	bic.w	r2, r2, #32
 80024fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	7edb      	ldrb	r3, [r3, #27]
 8002502:	2b01      	cmp	r3, #1
 8002504:	d108      	bne.n	8002518 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f022 0210 	bic.w	r2, r2, #16
 8002514:	601a      	str	r2, [r3, #0]
 8002516:	e007      	b.n	8002528 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f042 0210 	orr.w	r2, r2, #16
 8002526:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	7f1b      	ldrb	r3, [r3, #28]
 800252c:	2b01      	cmp	r3, #1
 800252e:	d108      	bne.n	8002542 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f042 0208 	orr.w	r2, r2, #8
 800253e:	601a      	str	r2, [r3, #0]
 8002540:	e007      	b.n	8002552 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f022 0208 	bic.w	r2, r2, #8
 8002550:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	7f5b      	ldrb	r3, [r3, #29]
 8002556:	2b01      	cmp	r3, #1
 8002558:	d108      	bne.n	800256c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f042 0204 	orr.w	r2, r2, #4
 8002568:	601a      	str	r2, [r3, #0]
 800256a:	e007      	b.n	800257c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f022 0204 	bic.w	r2, r2, #4
 800257a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	689a      	ldr	r2, [r3, #8]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	431a      	orrs	r2, r3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	431a      	orrs	r2, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	695b      	ldr	r3, [r3, #20]
 8002590:	ea42 0103 	orr.w	r1, r2, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	1e5a      	subs	r2, r3, #1
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	430a      	orrs	r2, r1
 80025a0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3710      	adds	r7, #16
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}

080025ba <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80025ba:	b480      	push	{r7}
 80025bc:	b087      	sub	sp, #28
 80025be:	af00      	add	r7, sp, #0
 80025c0:	60f8      	str	r0, [r7, #12]
 80025c2:	60b9      	str	r1, [r7, #8]
 80025c4:	607a      	str	r2, [r7, #4]
 80025c6:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025ce:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80025d0:	7dfb      	ldrb	r3, [r7, #23]
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d003      	beq.n	80025de <HAL_CAN_GetRxMessage+0x24>
 80025d6:	7dfb      	ldrb	r3, [r7, #23]
 80025d8:	2b02      	cmp	r3, #2
 80025da:	f040 80f3 	bne.w	80027c4 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d10e      	bne.n	8002602 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	f003 0303 	and.w	r3, r3, #3
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d116      	bne.n	8002620 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e0e7      	b.n	80027d2 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	691b      	ldr	r3, [r3, #16]
 8002608:	f003 0303 	and.w	r3, r3, #3
 800260c:	2b00      	cmp	r3, #0
 800260e:	d107      	bne.n	8002620 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002614:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e0d8      	b.n	80027d2 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	331b      	adds	r3, #27
 8002628:	011b      	lsls	r3, r3, #4
 800262a:	4413      	add	r3, r2
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0204 	and.w	r2, r3, #4
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d10c      	bne.n	8002658 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	331b      	adds	r3, #27
 8002646:	011b      	lsls	r3, r3, #4
 8002648:	4413      	add	r3, r2
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	0d5b      	lsrs	r3, r3, #21
 800264e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	601a      	str	r2, [r3, #0]
 8002656:	e00b      	b.n	8002670 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	331b      	adds	r3, #27
 8002660:	011b      	lsls	r3, r3, #4
 8002662:	4413      	add	r3, r2
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	08db      	lsrs	r3, r3, #3
 8002668:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	331b      	adds	r3, #27
 8002678:	011b      	lsls	r3, r3, #4
 800267a:	4413      	add	r3, r2
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0202 	and.w	r2, r3, #2
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	331b      	adds	r3, #27
 800268e:	011b      	lsls	r3, r3, #4
 8002690:	4413      	add	r3, r2
 8002692:	3304      	adds	r3, #4
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 020f 	and.w	r2, r3, #15
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	331b      	adds	r3, #27
 80026a6:	011b      	lsls	r3, r3, #4
 80026a8:	4413      	add	r3, r2
 80026aa:	3304      	adds	r3, #4
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	0a1b      	lsrs	r3, r3, #8
 80026b0:	b2da      	uxtb	r2, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	331b      	adds	r3, #27
 80026be:	011b      	lsls	r3, r3, #4
 80026c0:	4413      	add	r3, r2
 80026c2:	3304      	adds	r3, #4
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	0c1b      	lsrs	r3, r3, #16
 80026c8:	b29a      	uxth	r2, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	011b      	lsls	r3, r3, #4
 80026d6:	4413      	add	r3, r2
 80026d8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	b2da      	uxtb	r2, r3
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	011b      	lsls	r3, r3, #4
 80026ec:	4413      	add	r3, r2
 80026ee:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	0a1a      	lsrs	r2, r3, #8
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	3301      	adds	r3, #1
 80026fa:	b2d2      	uxtb	r2, r2
 80026fc:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	011b      	lsls	r3, r3, #4
 8002706:	4413      	add	r3, r2
 8002708:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	0c1a      	lsrs	r2, r3, #16
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	3302      	adds	r3, #2
 8002714:	b2d2      	uxtb	r2, r2
 8002716:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	011b      	lsls	r3, r3, #4
 8002720:	4413      	add	r3, r2
 8002722:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	0e1a      	lsrs	r2, r3, #24
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	3303      	adds	r3, #3
 800272e:	b2d2      	uxtb	r2, r2
 8002730:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	011b      	lsls	r3, r3, #4
 800273a:	4413      	add	r3, r2
 800273c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	3304      	adds	r3, #4
 8002746:	b2d2      	uxtb	r2, r2
 8002748:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	011b      	lsls	r3, r3, #4
 8002752:	4413      	add	r3, r2
 8002754:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	0a1a      	lsrs	r2, r3, #8
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	3305      	adds	r3, #5
 8002760:	b2d2      	uxtb	r2, r2
 8002762:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	011b      	lsls	r3, r3, #4
 800276c:	4413      	add	r3, r2
 800276e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	0c1a      	lsrs	r2, r3, #16
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	3306      	adds	r3, #6
 800277a:	b2d2      	uxtb	r2, r2
 800277c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	011b      	lsls	r3, r3, #4
 8002786:	4413      	add	r3, r2
 8002788:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	0e1a      	lsrs	r2, r3, #24
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	3307      	adds	r3, #7
 8002794:	b2d2      	uxtb	r2, r2
 8002796:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d108      	bne.n	80027b0 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	68da      	ldr	r2, [r3, #12]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f042 0220 	orr.w	r2, r2, #32
 80027ac:	60da      	str	r2, [r3, #12]
 80027ae:	e007      	b.n	80027c0 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	691a      	ldr	r2, [r3, #16]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f042 0220 	orr.w	r2, r2, #32
 80027be:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80027c0:	2300      	movs	r3, #0
 80027c2:	e006      	b.n	80027d2 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
  }
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	371c      	adds	r7, #28
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr

080027de <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80027de:	b580      	push	{r7, lr}
 80027e0:	b08a      	sub	sp, #40	; 0x28
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80027e6:	2300      	movs	r3, #0
 80027e8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	695b      	ldr	r3, [r3, #20]
 80027f0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	691b      	ldr	r3, [r3, #16]
 8002810:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	699b      	ldr	r3, [r3, #24]
 8002818:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800281a:	6a3b      	ldr	r3, [r7, #32]
 800281c:	f003 0301 	and.w	r3, r3, #1
 8002820:	2b00      	cmp	r3, #0
 8002822:	d07c      	beq.n	800291e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	f003 0301 	and.w	r3, r3, #1
 800282a:	2b00      	cmp	r3, #0
 800282c:	d023      	beq.n	8002876 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2201      	movs	r2, #1
 8002834:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	f003 0302 	and.w	r3, r3, #2
 800283c:	2b00      	cmp	r3, #0
 800283e:	d003      	beq.n	8002848 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f000 f983 	bl	8002b4c <HAL_CAN_TxMailbox0CompleteCallback>
 8002846:	e016      	b.n	8002876 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	f003 0304 	and.w	r3, r3, #4
 800284e:	2b00      	cmp	r3, #0
 8002850:	d004      	beq.n	800285c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002854:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002858:	627b      	str	r3, [r7, #36]	; 0x24
 800285a:	e00c      	b.n	8002876 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	f003 0308 	and.w	r3, r3, #8
 8002862:	2b00      	cmp	r3, #0
 8002864:	d004      	beq.n	8002870 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002868:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800286c:	627b      	str	r3, [r7, #36]	; 0x24
 800286e:	e002      	b.n	8002876 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f000 f989 	bl	8002b88 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002876:	69bb      	ldr	r3, [r7, #24]
 8002878:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800287c:	2b00      	cmp	r3, #0
 800287e:	d024      	beq.n	80028ca <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002888:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800288a:	69bb      	ldr	r3, [r7, #24]
 800288c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002890:	2b00      	cmp	r3, #0
 8002892:	d003      	beq.n	800289c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f000 f963 	bl	8002b60 <HAL_CAN_TxMailbox1CompleteCallback>
 800289a:	e016      	b.n	80028ca <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d004      	beq.n	80028b0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80028a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80028ac:	627b      	str	r3, [r7, #36]	; 0x24
 80028ae:	e00c      	b.n	80028ca <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d004      	beq.n	80028c4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80028ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028c0:	627b      	str	r3, [r7, #36]	; 0x24
 80028c2:	e002      	b.n	80028ca <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f000 f969 	bl	8002b9c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d024      	beq.n	800291e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80028dc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d003      	beq.n	80028f0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f000 f943 	bl	8002b74 <HAL_CAN_TxMailbox2CompleteCallback>
 80028ee:	e016      	b.n	800291e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80028f0:	69bb      	ldr	r3, [r7, #24]
 80028f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d004      	beq.n	8002904 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80028fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002900:	627b      	str	r3, [r7, #36]	; 0x24
 8002902:	e00c      	b.n	800291e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002904:	69bb      	ldr	r3, [r7, #24]
 8002906:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d004      	beq.n	8002918 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800290e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002910:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002914:	627b      	str	r3, [r7, #36]	; 0x24
 8002916:	e002      	b.n	800291e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f000 f949 	bl	8002bb0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800291e:	6a3b      	ldr	r3, [r7, #32]
 8002920:	f003 0308 	and.w	r3, r3, #8
 8002924:	2b00      	cmp	r3, #0
 8002926:	d00c      	beq.n	8002942 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	f003 0310 	and.w	r3, r3, #16
 800292e:	2b00      	cmp	r3, #0
 8002930:	d007      	beq.n	8002942 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002934:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002938:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2210      	movs	r2, #16
 8002940:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002942:	6a3b      	ldr	r3, [r7, #32]
 8002944:	f003 0304 	and.w	r3, r3, #4
 8002948:	2b00      	cmp	r3, #0
 800294a:	d00b      	beq.n	8002964 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	f003 0308 	and.w	r3, r3, #8
 8002952:	2b00      	cmp	r3, #0
 8002954:	d006      	beq.n	8002964 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	2208      	movs	r2, #8
 800295c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f000 f930 	bl	8002bc4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002964:	6a3b      	ldr	r3, [r7, #32]
 8002966:	f003 0302 	and.w	r3, r3, #2
 800296a:	2b00      	cmp	r3, #0
 800296c:	d009      	beq.n	8002982 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	f003 0303 	and.w	r3, r3, #3
 8002978:	2b00      	cmp	r3, #0
 800297a:	d002      	beq.n	8002982 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f7fe fc83 	bl	8001288 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002982:	6a3b      	ldr	r3, [r7, #32]
 8002984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002988:	2b00      	cmp	r3, #0
 800298a:	d00c      	beq.n	80029a6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	f003 0310 	and.w	r3, r3, #16
 8002992:	2b00      	cmp	r3, #0
 8002994:	d007      	beq.n	80029a6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002998:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800299c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2210      	movs	r2, #16
 80029a4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80029a6:	6a3b      	ldr	r3, [r7, #32]
 80029a8:	f003 0320 	and.w	r3, r3, #32
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d00b      	beq.n	80029c8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	f003 0308 	and.w	r3, r3, #8
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d006      	beq.n	80029c8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	2208      	movs	r2, #8
 80029c0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f000 f912 	bl	8002bec <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80029c8:	6a3b      	ldr	r3, [r7, #32]
 80029ca:	f003 0310 	and.w	r3, r3, #16
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d009      	beq.n	80029e6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	691b      	ldr	r3, [r3, #16]
 80029d8:	f003 0303 	and.w	r3, r3, #3
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d002      	beq.n	80029e6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f000 f8f9 	bl	8002bd8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80029e6:	6a3b      	ldr	r3, [r7, #32]
 80029e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d00b      	beq.n	8002a08 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	f003 0310 	and.w	r3, r3, #16
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d006      	beq.n	8002a08 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2210      	movs	r2, #16
 8002a00:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f000 f8fc 	bl	8002c00 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002a08:	6a3b      	ldr	r3, [r7, #32]
 8002a0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d00b      	beq.n	8002a2a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	f003 0308 	and.w	r3, r3, #8
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d006      	beq.n	8002a2a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2208      	movs	r2, #8
 8002a22:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f000 f8f5 	bl	8002c14 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002a2a:	6a3b      	ldr	r3, [r7, #32]
 8002a2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d07b      	beq.n	8002b2c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	f003 0304 	and.w	r3, r3, #4
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d072      	beq.n	8002b24 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002a3e:	6a3b      	ldr	r3, [r7, #32]
 8002a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d008      	beq.n	8002a5a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d003      	beq.n	8002a5a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a54:	f043 0301 	orr.w	r3, r3, #1
 8002a58:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002a5a:	6a3b      	ldr	r3, [r7, #32]
 8002a5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d008      	beq.n	8002a76 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d003      	beq.n	8002a76 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a70:	f043 0302 	orr.w	r3, r3, #2
 8002a74:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002a76:	6a3b      	ldr	r3, [r7, #32]
 8002a78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d008      	beq.n	8002a92 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d003      	beq.n	8002a92 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8c:	f043 0304 	orr.w	r3, r3, #4
 8002a90:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002a92:	6a3b      	ldr	r3, [r7, #32]
 8002a94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d043      	beq.n	8002b24 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d03e      	beq.n	8002b24 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002aac:	2b60      	cmp	r3, #96	; 0x60
 8002aae:	d02b      	beq.n	8002b08 <HAL_CAN_IRQHandler+0x32a>
 8002ab0:	2b60      	cmp	r3, #96	; 0x60
 8002ab2:	d82e      	bhi.n	8002b12 <HAL_CAN_IRQHandler+0x334>
 8002ab4:	2b50      	cmp	r3, #80	; 0x50
 8002ab6:	d022      	beq.n	8002afe <HAL_CAN_IRQHandler+0x320>
 8002ab8:	2b50      	cmp	r3, #80	; 0x50
 8002aba:	d82a      	bhi.n	8002b12 <HAL_CAN_IRQHandler+0x334>
 8002abc:	2b40      	cmp	r3, #64	; 0x40
 8002abe:	d019      	beq.n	8002af4 <HAL_CAN_IRQHandler+0x316>
 8002ac0:	2b40      	cmp	r3, #64	; 0x40
 8002ac2:	d826      	bhi.n	8002b12 <HAL_CAN_IRQHandler+0x334>
 8002ac4:	2b30      	cmp	r3, #48	; 0x30
 8002ac6:	d010      	beq.n	8002aea <HAL_CAN_IRQHandler+0x30c>
 8002ac8:	2b30      	cmp	r3, #48	; 0x30
 8002aca:	d822      	bhi.n	8002b12 <HAL_CAN_IRQHandler+0x334>
 8002acc:	2b10      	cmp	r3, #16
 8002ace:	d002      	beq.n	8002ad6 <HAL_CAN_IRQHandler+0x2f8>
 8002ad0:	2b20      	cmp	r3, #32
 8002ad2:	d005      	beq.n	8002ae0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002ad4:	e01d      	b.n	8002b12 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad8:	f043 0308 	orr.w	r3, r3, #8
 8002adc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002ade:	e019      	b.n	8002b14 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae2:	f043 0310 	orr.w	r3, r3, #16
 8002ae6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002ae8:	e014      	b.n	8002b14 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aec:	f043 0320 	orr.w	r3, r3, #32
 8002af0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002af2:	e00f      	b.n	8002b14 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002afa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002afc:	e00a      	b.n	8002b14 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b04:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002b06:	e005      	b.n	8002b14 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b0e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002b10:	e000      	b.n	8002b14 <HAL_CAN_IRQHandler+0x336>
            break;
 8002b12:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	699a      	ldr	r2, [r3, #24]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002b22:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2204      	movs	r2, #4
 8002b2a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d008      	beq.n	8002b44 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b38:	431a      	orrs	r2, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f000 f872 	bl	8002c28 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002b44:	bf00      	nop
 8002b46:	3728      	adds	r7, #40	; 0x28
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002b54:	bf00      	nop
 8002b56:	370c      	adds	r7, #12
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002b68:	bf00      	nop
 8002b6a:	370c      	adds	r7, #12
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr

08002b74 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002b7c:	bf00      	nop
 8002b7e:	370c      	adds	r7, #12
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr

08002b88 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002b90:	bf00      	nop
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr

08002b9c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002ba4:	bf00      	nop
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr

08002bb0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002bb8:	bf00      	nop
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002bcc:	bf00      	nop
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr

08002bd8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002be0:	bf00      	nop
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr

08002bec <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002bf4:	bf00      	nop
 8002bf6:	370c      	adds	r7, #12
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr

08002c00 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002c08:	bf00      	nop
 8002c0a:	370c      	adds	r7, #12
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr

08002c14 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002c1c:	bf00      	nop
 8002c1e:	370c      	adds	r7, #12
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr

08002c28 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002c30:	bf00      	nop
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b085      	sub	sp, #20
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f003 0307 	and.w	r3, r3, #7
 8002c4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c4c:	4b0c      	ldr	r3, [pc, #48]	; (8002c80 <__NVIC_SetPriorityGrouping+0x44>)
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c52:	68ba      	ldr	r2, [r7, #8]
 8002c54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c58:	4013      	ands	r3, r2
 8002c5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c6e:	4a04      	ldr	r2, [pc, #16]	; (8002c80 <__NVIC_SetPriorityGrouping+0x44>)
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	60d3      	str	r3, [r2, #12]
}
 8002c74:	bf00      	nop
 8002c76:	3714      	adds	r7, #20
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr
 8002c80:	e000ed00 	.word	0xe000ed00

08002c84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c88:	4b04      	ldr	r3, [pc, #16]	; (8002c9c <__NVIC_GetPriorityGrouping+0x18>)
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	0a1b      	lsrs	r3, r3, #8
 8002c8e:	f003 0307 	and.w	r3, r3, #7
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr
 8002c9c:	e000ed00 	.word	0xe000ed00

08002ca0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	db0b      	blt.n	8002cca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cb2:	79fb      	ldrb	r3, [r7, #7]
 8002cb4:	f003 021f 	and.w	r2, r3, #31
 8002cb8:	4907      	ldr	r1, [pc, #28]	; (8002cd8 <__NVIC_EnableIRQ+0x38>)
 8002cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cbe:	095b      	lsrs	r3, r3, #5
 8002cc0:	2001      	movs	r0, #1
 8002cc2:	fa00 f202 	lsl.w	r2, r0, r2
 8002cc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002cca:	bf00      	nop
 8002ccc:	370c      	adds	r7, #12
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	e000e100 	.word	0xe000e100

08002cdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	6039      	str	r1, [r7, #0]
 8002ce6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	db0a      	blt.n	8002d06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	b2da      	uxtb	r2, r3
 8002cf4:	490c      	ldr	r1, [pc, #48]	; (8002d28 <__NVIC_SetPriority+0x4c>)
 8002cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cfa:	0112      	lsls	r2, r2, #4
 8002cfc:	b2d2      	uxtb	r2, r2
 8002cfe:	440b      	add	r3, r1
 8002d00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d04:	e00a      	b.n	8002d1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	b2da      	uxtb	r2, r3
 8002d0a:	4908      	ldr	r1, [pc, #32]	; (8002d2c <__NVIC_SetPriority+0x50>)
 8002d0c:	79fb      	ldrb	r3, [r7, #7]
 8002d0e:	f003 030f 	and.w	r3, r3, #15
 8002d12:	3b04      	subs	r3, #4
 8002d14:	0112      	lsls	r2, r2, #4
 8002d16:	b2d2      	uxtb	r2, r2
 8002d18:	440b      	add	r3, r1
 8002d1a:	761a      	strb	r2, [r3, #24]
}
 8002d1c:	bf00      	nop
 8002d1e:	370c      	adds	r7, #12
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr
 8002d28:	e000e100 	.word	0xe000e100
 8002d2c:	e000ed00 	.word	0xe000ed00

08002d30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b089      	sub	sp, #36	; 0x24
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f003 0307 	and.w	r3, r3, #7
 8002d42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	f1c3 0307 	rsb	r3, r3, #7
 8002d4a:	2b04      	cmp	r3, #4
 8002d4c:	bf28      	it	cs
 8002d4e:	2304      	movcs	r3, #4
 8002d50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	3304      	adds	r3, #4
 8002d56:	2b06      	cmp	r3, #6
 8002d58:	d902      	bls.n	8002d60 <NVIC_EncodePriority+0x30>
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	3b03      	subs	r3, #3
 8002d5e:	e000      	b.n	8002d62 <NVIC_EncodePriority+0x32>
 8002d60:	2300      	movs	r3, #0
 8002d62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d64:	f04f 32ff 	mov.w	r2, #4294967295
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6e:	43da      	mvns	r2, r3
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	401a      	ands	r2, r3
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d78:	f04f 31ff 	mov.w	r1, #4294967295
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d82:	43d9      	mvns	r1, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d88:	4313      	orrs	r3, r2
         );
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3724      	adds	r7, #36	; 0x24
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr
	...

08002d98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	3b01      	subs	r3, #1
 8002da4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002da8:	d301      	bcc.n	8002dae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002daa:	2301      	movs	r3, #1
 8002dac:	e00f      	b.n	8002dce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dae:	4a0a      	ldr	r2, [pc, #40]	; (8002dd8 <SysTick_Config+0x40>)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	3b01      	subs	r3, #1
 8002db4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002db6:	210f      	movs	r1, #15
 8002db8:	f04f 30ff 	mov.w	r0, #4294967295
 8002dbc:	f7ff ff8e 	bl	8002cdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002dc0:	4b05      	ldr	r3, [pc, #20]	; (8002dd8 <SysTick_Config+0x40>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002dc6:	4b04      	ldr	r3, [pc, #16]	; (8002dd8 <SysTick_Config+0x40>)
 8002dc8:	2207      	movs	r2, #7
 8002dca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3708      	adds	r7, #8
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	e000e010 	.word	0xe000e010

08002ddc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f7ff ff29 	bl	8002c3c <__NVIC_SetPriorityGrouping>
}
 8002dea:	bf00      	nop
 8002dec:	3708      	adds	r7, #8
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}

08002df2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002df2:	b580      	push	{r7, lr}
 8002df4:	b086      	sub	sp, #24
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	4603      	mov	r3, r0
 8002dfa:	60b9      	str	r1, [r7, #8]
 8002dfc:	607a      	str	r2, [r7, #4]
 8002dfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e00:	2300      	movs	r3, #0
 8002e02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e04:	f7ff ff3e 	bl	8002c84 <__NVIC_GetPriorityGrouping>
 8002e08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	68b9      	ldr	r1, [r7, #8]
 8002e0e:	6978      	ldr	r0, [r7, #20]
 8002e10:	f7ff ff8e 	bl	8002d30 <NVIC_EncodePriority>
 8002e14:	4602      	mov	r2, r0
 8002e16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e1a:	4611      	mov	r1, r2
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7ff ff5d 	bl	8002cdc <__NVIC_SetPriority>
}
 8002e22:	bf00      	nop
 8002e24:	3718      	adds	r7, #24
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}

08002e2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e2a:	b580      	push	{r7, lr}
 8002e2c:	b082      	sub	sp, #8
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	4603      	mov	r3, r0
 8002e32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7ff ff31 	bl	8002ca0 <__NVIC_EnableIRQ>
}
 8002e3e:	bf00      	nop
 8002e40:	3708      	adds	r7, #8
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}

08002e46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b082      	sub	sp, #8
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f7ff ffa2 	bl	8002d98 <SysTick_Config>
 8002e54:	4603      	mov	r3, r0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3708      	adds	r7, #8
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
	...

08002e60 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b086      	sub	sp, #24
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002e6c:	f7ff fa7a 	bl	8002364 <HAL_GetTick>
 8002e70:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d101      	bne.n	8002e7c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e099      	b.n	8002fb0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2202      	movs	r2, #2
 8002e80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f022 0201 	bic.w	r2, r2, #1
 8002e9a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e9c:	e00f      	b.n	8002ebe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e9e:	f7ff fa61 	bl	8002364 <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	2b05      	cmp	r3, #5
 8002eaa:	d908      	bls.n	8002ebe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2220      	movs	r2, #32
 8002eb0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2203      	movs	r2, #3
 8002eb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e078      	b.n	8002fb0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0301 	and.w	r3, r3, #1
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d1e8      	bne.n	8002e9e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002ed4:	697a      	ldr	r2, [r7, #20]
 8002ed6:	4b38      	ldr	r3, [pc, #224]	; (8002fb8 <HAL_DMA_Init+0x158>)
 8002ed8:	4013      	ands	r3, r2
 8002eda:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	685a      	ldr	r2, [r3, #4]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002eea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	691b      	ldr	r3, [r3, #16]
 8002ef0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ef6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	699b      	ldr	r3, [r3, #24]
 8002efc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f02:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6a1b      	ldr	r3, [r3, #32]
 8002f08:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f0a:	697a      	ldr	r2, [r7, #20]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f14:	2b04      	cmp	r3, #4
 8002f16:	d107      	bne.n	8002f28 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f20:	4313      	orrs	r3, r2
 8002f22:	697a      	ldr	r2, [r7, #20]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	697a      	ldr	r2, [r7, #20]
 8002f2e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	695b      	ldr	r3, [r3, #20]
 8002f36:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	f023 0307 	bic.w	r3, r3, #7
 8002f3e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f44:	697a      	ldr	r2, [r7, #20]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4e:	2b04      	cmp	r3, #4
 8002f50:	d117      	bne.n	8002f82 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f56:	697a      	ldr	r2, [r7, #20]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d00e      	beq.n	8002f82 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f000 fae5 	bl	8003534 <DMA_CheckFifoParam>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d008      	beq.n	8002f82 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2240      	movs	r2, #64	; 0x40
 8002f74:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e016      	b.n	8002fb0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	697a      	ldr	r2, [r7, #20]
 8002f88:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f000 fa9c 	bl	80034c8 <DMA_CalcBaseAndBitshift>
 8002f90:	4603      	mov	r3, r0
 8002f92:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f98:	223f      	movs	r2, #63	; 0x3f
 8002f9a:	409a      	lsls	r2, r3
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2201      	movs	r2, #1
 8002faa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002fae:	2300      	movs	r3, #0
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3718      	adds	r7, #24
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	f010803f 	.word	0xf010803f

08002fbc <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b086      	sub	sp, #24
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	60b9      	str	r1, [r7, #8]
 8002fc6:	607a      	str	r2, [r7, #4]
 8002fc8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d101      	bne.n	8002fdc <HAL_DMA_Start+0x20>
 8002fd8:	2302      	movs	r3, #2
 8002fda:	e026      	b.n	800302a <HAL_DMA_Start+0x6e>
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d115      	bne.n	800301c <HAL_DMA_Start+0x60>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2202      	movs	r2, #2
 8002ff4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	68b9      	ldr	r1, [r7, #8]
 8003004:	68f8      	ldr	r0, [r7, #12]
 8003006:	f000 fa31 	bl	800346c <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f042 0201 	orr.w	r2, r2, #1
 8003018:	601a      	str	r2, [r3, #0]
 800301a:	e005      	b.n	8003028 <HAL_DMA_Start+0x6c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2200      	movs	r2, #0
 8003020:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003024:	2302      	movs	r3, #2
 8003026:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
 8003028:	7dfb      	ldrb	r3, [r7, #23]
}
 800302a:	4618      	mov	r0, r3
 800302c:	3718      	adds	r7, #24
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}

08003032 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003032:	b580      	push	{r7, lr}
 8003034:	b084      	sub	sp, #16
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800303e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003040:	f7ff f990 	bl	8002364 <HAL_GetTick>
 8003044:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800304c:	b2db      	uxtb	r3, r3
 800304e:	2b02      	cmp	r3, #2
 8003050:	d008      	beq.n	8003064 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2280      	movs	r2, #128	; 0x80
 8003056:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e052      	b.n	800310a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f022 0216 	bic.w	r2, r2, #22
 8003072:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	695a      	ldr	r2, [r3, #20]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003082:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003088:	2b00      	cmp	r3, #0
 800308a:	d103      	bne.n	8003094 <HAL_DMA_Abort+0x62>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003090:	2b00      	cmp	r3, #0
 8003092:	d007      	beq.n	80030a4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f022 0208 	bic.w	r2, r2, #8
 80030a2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f022 0201 	bic.w	r2, r2, #1
 80030b2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030b4:	e013      	b.n	80030de <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80030b6:	f7ff f955 	bl	8002364 <HAL_GetTick>
 80030ba:	4602      	mov	r2, r0
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	2b05      	cmp	r3, #5
 80030c2:	d90c      	bls.n	80030de <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2220      	movs	r2, #32
 80030c8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2203      	movs	r2, #3
 80030ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e015      	b.n	800310a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0301 	and.w	r3, r3, #1
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d1e4      	bne.n	80030b6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030f0:	223f      	movs	r2, #63	; 0x3f
 80030f2:	409a      	lsls	r2, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3710      	adds	r7, #16
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}

08003112 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003112:	b480      	push	{r7}
 8003114:	b083      	sub	sp, #12
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003120:	b2db      	uxtb	r3, r3
 8003122:	2b02      	cmp	r3, #2
 8003124:	d004      	beq.n	8003130 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2280      	movs	r2, #128	; 0x80
 800312a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e00c      	b.n	800314a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2205      	movs	r2, #5
 8003134:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f022 0201 	bic.w	r2, r2, #1
 8003146:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003148:	2300      	movs	r3, #0
}
 800314a:	4618      	mov	r0, r3
 800314c:	370c      	adds	r7, #12
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr
	...

08003158 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b086      	sub	sp, #24
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003160:	2300      	movs	r3, #0
 8003162:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003164:	4b92      	ldr	r3, [pc, #584]	; (80033b0 <HAL_DMA_IRQHandler+0x258>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a92      	ldr	r2, [pc, #584]	; (80033b4 <HAL_DMA_IRQHandler+0x25c>)
 800316a:	fba2 2303 	umull	r2, r3, r2, r3
 800316e:	0a9b      	lsrs	r3, r3, #10
 8003170:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003176:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003182:	2208      	movs	r2, #8
 8003184:	409a      	lsls	r2, r3
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	4013      	ands	r3, r2
 800318a:	2b00      	cmp	r3, #0
 800318c:	d01a      	beq.n	80031c4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0304 	and.w	r3, r3, #4
 8003198:	2b00      	cmp	r3, #0
 800319a:	d013      	beq.n	80031c4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f022 0204 	bic.w	r2, r2, #4
 80031aa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031b0:	2208      	movs	r2, #8
 80031b2:	409a      	lsls	r2, r3
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031bc:	f043 0201 	orr.w	r2, r3, #1
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031c8:	2201      	movs	r2, #1
 80031ca:	409a      	lsls	r2, r3
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	4013      	ands	r3, r2
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d012      	beq.n	80031fa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	695b      	ldr	r3, [r3, #20]
 80031da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d00b      	beq.n	80031fa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031e6:	2201      	movs	r2, #1
 80031e8:	409a      	lsls	r2, r3
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031f2:	f043 0202 	orr.w	r2, r3, #2
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031fe:	2204      	movs	r2, #4
 8003200:	409a      	lsls	r2, r3
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	4013      	ands	r3, r2
 8003206:	2b00      	cmp	r3, #0
 8003208:	d012      	beq.n	8003230 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0302 	and.w	r3, r3, #2
 8003214:	2b00      	cmp	r3, #0
 8003216:	d00b      	beq.n	8003230 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800321c:	2204      	movs	r2, #4
 800321e:	409a      	lsls	r2, r3
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003228:	f043 0204 	orr.w	r2, r3, #4
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003234:	2210      	movs	r2, #16
 8003236:	409a      	lsls	r2, r3
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	4013      	ands	r3, r2
 800323c:	2b00      	cmp	r3, #0
 800323e:	d043      	beq.n	80032c8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0308 	and.w	r3, r3, #8
 800324a:	2b00      	cmp	r3, #0
 800324c:	d03c      	beq.n	80032c8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003252:	2210      	movs	r2, #16
 8003254:	409a      	lsls	r2, r3
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d018      	beq.n	800329a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d108      	bne.n	8003288 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327a:	2b00      	cmp	r3, #0
 800327c:	d024      	beq.n	80032c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	4798      	blx	r3
 8003286:	e01f      	b.n	80032c8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800328c:	2b00      	cmp	r3, #0
 800328e:	d01b      	beq.n	80032c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	4798      	blx	r3
 8003298:	e016      	b.n	80032c8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d107      	bne.n	80032b8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f022 0208 	bic.w	r2, r2, #8
 80032b6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d003      	beq.n	80032c8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032cc:	2220      	movs	r2, #32
 80032ce:	409a      	lsls	r2, r3
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	4013      	ands	r3, r2
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	f000 808e 	beq.w	80033f6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0310 	and.w	r3, r3, #16
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	f000 8086 	beq.w	80033f6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ee:	2220      	movs	r2, #32
 80032f0:	409a      	lsls	r2, r3
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	2b05      	cmp	r3, #5
 8003300:	d136      	bne.n	8003370 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f022 0216 	bic.w	r2, r2, #22
 8003310:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	695a      	ldr	r2, [r3, #20]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003320:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003326:	2b00      	cmp	r3, #0
 8003328:	d103      	bne.n	8003332 <HAL_DMA_IRQHandler+0x1da>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800332e:	2b00      	cmp	r3, #0
 8003330:	d007      	beq.n	8003342 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f022 0208 	bic.w	r2, r2, #8
 8003340:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003346:	223f      	movs	r2, #63	; 0x3f
 8003348:	409a      	lsls	r2, r3
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2201      	movs	r2, #1
 8003352:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003362:	2b00      	cmp	r3, #0
 8003364:	d07d      	beq.n	8003462 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	4798      	blx	r3
        }
        return;
 800336e:	e078      	b.n	8003462 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d01c      	beq.n	80033b8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d108      	bne.n	800339e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003390:	2b00      	cmp	r3, #0
 8003392:	d030      	beq.n	80033f6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	4798      	blx	r3
 800339c:	e02b      	b.n	80033f6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d027      	beq.n	80033f6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	4798      	blx	r3
 80033ae:	e022      	b.n	80033f6 <HAL_DMA_IRQHandler+0x29e>
 80033b0:	20000000 	.word	0x20000000
 80033b4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d10f      	bne.n	80033e6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f022 0210 	bic.w	r2, r2, #16
 80033d4:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2201      	movs	r2, #1
 80033da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d003      	beq.n	80033f6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d032      	beq.n	8003464 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003402:	f003 0301 	and.w	r3, r3, #1
 8003406:	2b00      	cmp	r3, #0
 8003408:	d022      	beq.n	8003450 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2205      	movs	r2, #5
 800340e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f022 0201 	bic.w	r2, r2, #1
 8003420:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	3301      	adds	r3, #1
 8003426:	60bb      	str	r3, [r7, #8]
 8003428:	697a      	ldr	r2, [r7, #20]
 800342a:	429a      	cmp	r2, r3
 800342c:	d307      	bcc.n	800343e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0301 	and.w	r3, r3, #1
 8003438:	2b00      	cmp	r3, #0
 800343a:	d1f2      	bne.n	8003422 <HAL_DMA_IRQHandler+0x2ca>
 800343c:	e000      	b.n	8003440 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800343e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003454:	2b00      	cmp	r3, #0
 8003456:	d005      	beq.n	8003464 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	4798      	blx	r3
 8003460:	e000      	b.n	8003464 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003462:	bf00      	nop
    }
  }
}
 8003464:	3718      	adds	r7, #24
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop

0800346c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800346c:	b480      	push	{r7}
 800346e:	b085      	sub	sp, #20
 8003470:	af00      	add	r7, sp, #0
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	60b9      	str	r1, [r7, #8]
 8003476:	607a      	str	r2, [r7, #4]
 8003478:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003488:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	683a      	ldr	r2, [r7, #0]
 8003490:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	2b40      	cmp	r3, #64	; 0x40
 8003498:	d108      	bne.n	80034ac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	68ba      	ldr	r2, [r7, #8]
 80034a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80034aa:	e007      	b.n	80034bc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68ba      	ldr	r2, [r7, #8]
 80034b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	60da      	str	r2, [r3, #12]
}
 80034bc:	bf00      	nop
 80034be:	3714      	adds	r7, #20
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr

080034c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b085      	sub	sp, #20
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	3b10      	subs	r3, #16
 80034d8:	4a14      	ldr	r2, [pc, #80]	; (800352c <DMA_CalcBaseAndBitshift+0x64>)
 80034da:	fba2 2303 	umull	r2, r3, r2, r3
 80034de:	091b      	lsrs	r3, r3, #4
 80034e0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80034e2:	4a13      	ldr	r2, [pc, #76]	; (8003530 <DMA_CalcBaseAndBitshift+0x68>)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	4413      	add	r3, r2
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	461a      	mov	r2, r3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2b03      	cmp	r3, #3
 80034f4:	d909      	bls.n	800350a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80034fe:	f023 0303 	bic.w	r3, r3, #3
 8003502:	1d1a      	adds	r2, r3, #4
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	659a      	str	r2, [r3, #88]	; 0x58
 8003508:	e007      	b.n	800351a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003512:	f023 0303 	bic.w	r3, r3, #3
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800351e:	4618      	mov	r0, r3
 8003520:	3714      	adds	r7, #20
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	aaaaaaab 	.word	0xaaaaaaab
 8003530:	08005dec 	.word	0x08005dec

08003534 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003534:	b480      	push	{r7}
 8003536:	b085      	sub	sp, #20
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800353c:	2300      	movs	r3, #0
 800353e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003544:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d11f      	bne.n	800358e <DMA_CheckFifoParam+0x5a>
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	2b03      	cmp	r3, #3
 8003552:	d856      	bhi.n	8003602 <DMA_CheckFifoParam+0xce>
 8003554:	a201      	add	r2, pc, #4	; (adr r2, 800355c <DMA_CheckFifoParam+0x28>)
 8003556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800355a:	bf00      	nop
 800355c:	0800356d 	.word	0x0800356d
 8003560:	0800357f 	.word	0x0800357f
 8003564:	0800356d 	.word	0x0800356d
 8003568:	08003603 	.word	0x08003603
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003570:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d046      	beq.n	8003606 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800357c:	e043      	b.n	8003606 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003582:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003586:	d140      	bne.n	800360a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800358c:	e03d      	b.n	800360a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	699b      	ldr	r3, [r3, #24]
 8003592:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003596:	d121      	bne.n	80035dc <DMA_CheckFifoParam+0xa8>
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	2b03      	cmp	r3, #3
 800359c:	d837      	bhi.n	800360e <DMA_CheckFifoParam+0xda>
 800359e:	a201      	add	r2, pc, #4	; (adr r2, 80035a4 <DMA_CheckFifoParam+0x70>)
 80035a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035a4:	080035b5 	.word	0x080035b5
 80035a8:	080035bb 	.word	0x080035bb
 80035ac:	080035b5 	.word	0x080035b5
 80035b0:	080035cd 	.word	0x080035cd
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	73fb      	strb	r3, [r7, #15]
      break;
 80035b8:	e030      	b.n	800361c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d025      	beq.n	8003612 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035ca:	e022      	b.n	8003612 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80035d4:	d11f      	bne.n	8003616 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80035da:	e01c      	b.n	8003616 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d903      	bls.n	80035ea <DMA_CheckFifoParam+0xb6>
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	2b03      	cmp	r3, #3
 80035e6:	d003      	beq.n	80035f0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80035e8:	e018      	b.n	800361c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	73fb      	strb	r3, [r7, #15]
      break;
 80035ee:	e015      	b.n	800361c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d00e      	beq.n	800361a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	73fb      	strb	r3, [r7, #15]
      break;
 8003600:	e00b      	b.n	800361a <DMA_CheckFifoParam+0xe6>
      break;
 8003602:	bf00      	nop
 8003604:	e00a      	b.n	800361c <DMA_CheckFifoParam+0xe8>
      break;
 8003606:	bf00      	nop
 8003608:	e008      	b.n	800361c <DMA_CheckFifoParam+0xe8>
      break;
 800360a:	bf00      	nop
 800360c:	e006      	b.n	800361c <DMA_CheckFifoParam+0xe8>
      break;
 800360e:	bf00      	nop
 8003610:	e004      	b.n	800361c <DMA_CheckFifoParam+0xe8>
      break;
 8003612:	bf00      	nop
 8003614:	e002      	b.n	800361c <DMA_CheckFifoParam+0xe8>
      break;   
 8003616:	bf00      	nop
 8003618:	e000      	b.n	800361c <DMA_CheckFifoParam+0xe8>
      break;
 800361a:	bf00      	nop
    }
  } 
  
  return status; 
 800361c:	7bfb      	ldrb	r3, [r7, #15]
}
 800361e:	4618      	mov	r0, r3
 8003620:	3714      	adds	r7, #20
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop

0800362c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800362c:	b480      	push	{r7}
 800362e:	b089      	sub	sp, #36	; 0x24
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003636:	2300      	movs	r3, #0
 8003638:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800363a:	2300      	movs	r3, #0
 800363c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800363e:	2300      	movs	r3, #0
 8003640:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003642:	2300      	movs	r3, #0
 8003644:	61fb      	str	r3, [r7, #28]
 8003646:	e177      	b.n	8003938 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003648:	2201      	movs	r2, #1
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	fa02 f303 	lsl.w	r3, r2, r3
 8003650:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	697a      	ldr	r2, [r7, #20]
 8003658:	4013      	ands	r3, r2
 800365a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800365c:	693a      	ldr	r2, [r7, #16]
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	429a      	cmp	r2, r3
 8003662:	f040 8166 	bne.w	8003932 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f003 0303 	and.w	r3, r3, #3
 800366e:	2b01      	cmp	r3, #1
 8003670:	d005      	beq.n	800367e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800367a:	2b02      	cmp	r3, #2
 800367c:	d130      	bne.n	80036e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	005b      	lsls	r3, r3, #1
 8003688:	2203      	movs	r2, #3
 800368a:	fa02 f303 	lsl.w	r3, r2, r3
 800368e:	43db      	mvns	r3, r3
 8003690:	69ba      	ldr	r2, [r7, #24]
 8003692:	4013      	ands	r3, r2
 8003694:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	68da      	ldr	r2, [r3, #12]
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	005b      	lsls	r3, r3, #1
 800369e:	fa02 f303 	lsl.w	r3, r2, r3
 80036a2:	69ba      	ldr	r2, [r7, #24]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	69ba      	ldr	r2, [r7, #24]
 80036ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036b4:	2201      	movs	r2, #1
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	fa02 f303 	lsl.w	r3, r2, r3
 80036bc:	43db      	mvns	r3, r3
 80036be:	69ba      	ldr	r2, [r7, #24]
 80036c0:	4013      	ands	r3, r2
 80036c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	091b      	lsrs	r3, r3, #4
 80036ca:	f003 0201 	and.w	r2, r3, #1
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	fa02 f303 	lsl.w	r3, r2, r3
 80036d4:	69ba      	ldr	r2, [r7, #24]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	69ba      	ldr	r2, [r7, #24]
 80036de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f003 0303 	and.w	r3, r3, #3
 80036e8:	2b03      	cmp	r3, #3
 80036ea:	d017      	beq.n	800371c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	005b      	lsls	r3, r3, #1
 80036f6:	2203      	movs	r2, #3
 80036f8:	fa02 f303 	lsl.w	r3, r2, r3
 80036fc:	43db      	mvns	r3, r3
 80036fe:	69ba      	ldr	r2, [r7, #24]
 8003700:	4013      	ands	r3, r2
 8003702:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	689a      	ldr	r2, [r3, #8]
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	005b      	lsls	r3, r3, #1
 800370c:	fa02 f303 	lsl.w	r3, r2, r3
 8003710:	69ba      	ldr	r2, [r7, #24]
 8003712:	4313      	orrs	r3, r2
 8003714:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	69ba      	ldr	r2, [r7, #24]
 800371a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f003 0303 	and.w	r3, r3, #3
 8003724:	2b02      	cmp	r3, #2
 8003726:	d123      	bne.n	8003770 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	08da      	lsrs	r2, r3, #3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	3208      	adds	r2, #8
 8003730:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003734:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	f003 0307 	and.w	r3, r3, #7
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	220f      	movs	r2, #15
 8003740:	fa02 f303 	lsl.w	r3, r2, r3
 8003744:	43db      	mvns	r3, r3
 8003746:	69ba      	ldr	r2, [r7, #24]
 8003748:	4013      	ands	r3, r2
 800374a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	691a      	ldr	r2, [r3, #16]
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	f003 0307 	and.w	r3, r3, #7
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	fa02 f303 	lsl.w	r3, r2, r3
 800375c:	69ba      	ldr	r2, [r7, #24]
 800375e:	4313      	orrs	r3, r2
 8003760:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	08da      	lsrs	r2, r3, #3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	3208      	adds	r2, #8
 800376a:	69b9      	ldr	r1, [r7, #24]
 800376c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	005b      	lsls	r3, r3, #1
 800377a:	2203      	movs	r2, #3
 800377c:	fa02 f303 	lsl.w	r3, r2, r3
 8003780:	43db      	mvns	r3, r3
 8003782:	69ba      	ldr	r2, [r7, #24]
 8003784:	4013      	ands	r3, r2
 8003786:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f003 0203 	and.w	r2, r3, #3
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	005b      	lsls	r3, r3, #1
 8003794:	fa02 f303 	lsl.w	r3, r2, r3
 8003798:	69ba      	ldr	r2, [r7, #24]
 800379a:	4313      	orrs	r3, r2
 800379c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	69ba      	ldr	r2, [r7, #24]
 80037a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	f000 80c0 	beq.w	8003932 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037b2:	2300      	movs	r3, #0
 80037b4:	60fb      	str	r3, [r7, #12]
 80037b6:	4b66      	ldr	r3, [pc, #408]	; (8003950 <HAL_GPIO_Init+0x324>)
 80037b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ba:	4a65      	ldr	r2, [pc, #404]	; (8003950 <HAL_GPIO_Init+0x324>)
 80037bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037c0:	6453      	str	r3, [r2, #68]	; 0x44
 80037c2:	4b63      	ldr	r3, [pc, #396]	; (8003950 <HAL_GPIO_Init+0x324>)
 80037c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037ca:	60fb      	str	r3, [r7, #12]
 80037cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80037ce:	4a61      	ldr	r2, [pc, #388]	; (8003954 <HAL_GPIO_Init+0x328>)
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	089b      	lsrs	r3, r3, #2
 80037d4:	3302      	adds	r3, #2
 80037d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	f003 0303 	and.w	r3, r3, #3
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	220f      	movs	r2, #15
 80037e6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ea:	43db      	mvns	r3, r3
 80037ec:	69ba      	ldr	r2, [r7, #24]
 80037ee:	4013      	ands	r3, r2
 80037f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4a58      	ldr	r2, [pc, #352]	; (8003958 <HAL_GPIO_Init+0x32c>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d037      	beq.n	800386a <HAL_GPIO_Init+0x23e>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4a57      	ldr	r2, [pc, #348]	; (800395c <HAL_GPIO_Init+0x330>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d031      	beq.n	8003866 <HAL_GPIO_Init+0x23a>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4a56      	ldr	r2, [pc, #344]	; (8003960 <HAL_GPIO_Init+0x334>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d02b      	beq.n	8003862 <HAL_GPIO_Init+0x236>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4a55      	ldr	r2, [pc, #340]	; (8003964 <HAL_GPIO_Init+0x338>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d025      	beq.n	800385e <HAL_GPIO_Init+0x232>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a54      	ldr	r2, [pc, #336]	; (8003968 <HAL_GPIO_Init+0x33c>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d01f      	beq.n	800385a <HAL_GPIO_Init+0x22e>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4a53      	ldr	r2, [pc, #332]	; (800396c <HAL_GPIO_Init+0x340>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d019      	beq.n	8003856 <HAL_GPIO_Init+0x22a>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a52      	ldr	r2, [pc, #328]	; (8003970 <HAL_GPIO_Init+0x344>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d013      	beq.n	8003852 <HAL_GPIO_Init+0x226>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4a51      	ldr	r2, [pc, #324]	; (8003974 <HAL_GPIO_Init+0x348>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d00d      	beq.n	800384e <HAL_GPIO_Init+0x222>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a50      	ldr	r2, [pc, #320]	; (8003978 <HAL_GPIO_Init+0x34c>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d007      	beq.n	800384a <HAL_GPIO_Init+0x21e>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a4f      	ldr	r2, [pc, #316]	; (800397c <HAL_GPIO_Init+0x350>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d101      	bne.n	8003846 <HAL_GPIO_Init+0x21a>
 8003842:	2309      	movs	r3, #9
 8003844:	e012      	b.n	800386c <HAL_GPIO_Init+0x240>
 8003846:	230a      	movs	r3, #10
 8003848:	e010      	b.n	800386c <HAL_GPIO_Init+0x240>
 800384a:	2308      	movs	r3, #8
 800384c:	e00e      	b.n	800386c <HAL_GPIO_Init+0x240>
 800384e:	2307      	movs	r3, #7
 8003850:	e00c      	b.n	800386c <HAL_GPIO_Init+0x240>
 8003852:	2306      	movs	r3, #6
 8003854:	e00a      	b.n	800386c <HAL_GPIO_Init+0x240>
 8003856:	2305      	movs	r3, #5
 8003858:	e008      	b.n	800386c <HAL_GPIO_Init+0x240>
 800385a:	2304      	movs	r3, #4
 800385c:	e006      	b.n	800386c <HAL_GPIO_Init+0x240>
 800385e:	2303      	movs	r3, #3
 8003860:	e004      	b.n	800386c <HAL_GPIO_Init+0x240>
 8003862:	2302      	movs	r3, #2
 8003864:	e002      	b.n	800386c <HAL_GPIO_Init+0x240>
 8003866:	2301      	movs	r3, #1
 8003868:	e000      	b.n	800386c <HAL_GPIO_Init+0x240>
 800386a:	2300      	movs	r3, #0
 800386c:	69fa      	ldr	r2, [r7, #28]
 800386e:	f002 0203 	and.w	r2, r2, #3
 8003872:	0092      	lsls	r2, r2, #2
 8003874:	4093      	lsls	r3, r2
 8003876:	69ba      	ldr	r2, [r7, #24]
 8003878:	4313      	orrs	r3, r2
 800387a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800387c:	4935      	ldr	r1, [pc, #212]	; (8003954 <HAL_GPIO_Init+0x328>)
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	089b      	lsrs	r3, r3, #2
 8003882:	3302      	adds	r3, #2
 8003884:	69ba      	ldr	r2, [r7, #24]
 8003886:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800388a:	4b3d      	ldr	r3, [pc, #244]	; (8003980 <HAL_GPIO_Init+0x354>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	43db      	mvns	r3, r3
 8003894:	69ba      	ldr	r2, [r7, #24]
 8003896:	4013      	ands	r3, r2
 8003898:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d003      	beq.n	80038ae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80038a6:	69ba      	ldr	r2, [r7, #24]
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80038ae:	4a34      	ldr	r2, [pc, #208]	; (8003980 <HAL_GPIO_Init+0x354>)
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80038b4:	4b32      	ldr	r3, [pc, #200]	; (8003980 <HAL_GPIO_Init+0x354>)
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	43db      	mvns	r3, r3
 80038be:	69ba      	ldr	r2, [r7, #24]
 80038c0:	4013      	ands	r3, r2
 80038c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d003      	beq.n	80038d8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80038d0:	69ba      	ldr	r2, [r7, #24]
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80038d8:	4a29      	ldr	r2, [pc, #164]	; (8003980 <HAL_GPIO_Init+0x354>)
 80038da:	69bb      	ldr	r3, [r7, #24]
 80038dc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038de:	4b28      	ldr	r3, [pc, #160]	; (8003980 <HAL_GPIO_Init+0x354>)
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	43db      	mvns	r3, r3
 80038e8:	69ba      	ldr	r2, [r7, #24]
 80038ea:	4013      	ands	r3, r2
 80038ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d003      	beq.n	8003902 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80038fa:	69ba      	ldr	r2, [r7, #24]
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	4313      	orrs	r3, r2
 8003900:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003902:	4a1f      	ldr	r2, [pc, #124]	; (8003980 <HAL_GPIO_Init+0x354>)
 8003904:	69bb      	ldr	r3, [r7, #24]
 8003906:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003908:	4b1d      	ldr	r3, [pc, #116]	; (8003980 <HAL_GPIO_Init+0x354>)
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	43db      	mvns	r3, r3
 8003912:	69ba      	ldr	r2, [r7, #24]
 8003914:	4013      	ands	r3, r2
 8003916:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d003      	beq.n	800392c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003924:	69ba      	ldr	r2, [r7, #24]
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	4313      	orrs	r3, r2
 800392a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800392c:	4a14      	ldr	r2, [pc, #80]	; (8003980 <HAL_GPIO_Init+0x354>)
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	3301      	adds	r3, #1
 8003936:	61fb      	str	r3, [r7, #28]
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	2b0f      	cmp	r3, #15
 800393c:	f67f ae84 	bls.w	8003648 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003940:	bf00      	nop
 8003942:	bf00      	nop
 8003944:	3724      	adds	r7, #36	; 0x24
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr
 800394e:	bf00      	nop
 8003950:	40023800 	.word	0x40023800
 8003954:	40013800 	.word	0x40013800
 8003958:	40020000 	.word	0x40020000
 800395c:	40020400 	.word	0x40020400
 8003960:	40020800 	.word	0x40020800
 8003964:	40020c00 	.word	0x40020c00
 8003968:	40021000 	.word	0x40021000
 800396c:	40021400 	.word	0x40021400
 8003970:	40021800 	.word	0x40021800
 8003974:	40021c00 	.word	0x40021c00
 8003978:	40022000 	.word	0x40022000
 800397c:	40022400 	.word	0x40022400
 8003980:	40013c00 	.word	0x40013c00

08003984 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	460b      	mov	r3, r1
 800398e:	807b      	strh	r3, [r7, #2]
 8003990:	4613      	mov	r3, r2
 8003992:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003994:	787b      	ldrb	r3, [r7, #1]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d003      	beq.n	80039a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800399a:	887a      	ldrh	r2, [r7, #2]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80039a0:	e003      	b.n	80039aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80039a2:	887b      	ldrh	r3, [r7, #2]
 80039a4:	041a      	lsls	r2, r3, #16
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	619a      	str	r2, [r3, #24]
}
 80039aa:	bf00      	nop
 80039ac:	370c      	adds	r7, #12
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr
	...

080039b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d101      	bne.n	80039ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e12b      	b.n	8003c22 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d106      	bne.n	80039e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f7fd ff9c 	bl	800191c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2224      	movs	r2, #36	; 0x24
 80039e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f022 0201 	bic.w	r2, r2, #1
 80039fa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a0a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a1a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003a1c:	f000 fdac 	bl	8004578 <HAL_RCC_GetPCLK1Freq>
 8003a20:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	4a81      	ldr	r2, [pc, #516]	; (8003c2c <HAL_I2C_Init+0x274>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d807      	bhi.n	8003a3c <HAL_I2C_Init+0x84>
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	4a80      	ldr	r2, [pc, #512]	; (8003c30 <HAL_I2C_Init+0x278>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	bf94      	ite	ls
 8003a34:	2301      	movls	r3, #1
 8003a36:	2300      	movhi	r3, #0
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	e006      	b.n	8003a4a <HAL_I2C_Init+0x92>
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	4a7d      	ldr	r2, [pc, #500]	; (8003c34 <HAL_I2C_Init+0x27c>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	bf94      	ite	ls
 8003a44:	2301      	movls	r3, #1
 8003a46:	2300      	movhi	r3, #0
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d001      	beq.n	8003a52 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e0e7      	b.n	8003c22 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	4a78      	ldr	r2, [pc, #480]	; (8003c38 <HAL_I2C_Init+0x280>)
 8003a56:	fba2 2303 	umull	r2, r3, r2, r3
 8003a5a:	0c9b      	lsrs	r3, r3, #18
 8003a5c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68ba      	ldr	r2, [r7, #8]
 8003a6e:	430a      	orrs	r2, r1
 8003a70:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	6a1b      	ldr	r3, [r3, #32]
 8003a78:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	4a6a      	ldr	r2, [pc, #424]	; (8003c2c <HAL_I2C_Init+0x274>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d802      	bhi.n	8003a8c <HAL_I2C_Init+0xd4>
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	3301      	adds	r3, #1
 8003a8a:	e009      	b.n	8003aa0 <HAL_I2C_Init+0xe8>
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003a92:	fb02 f303 	mul.w	r3, r2, r3
 8003a96:	4a69      	ldr	r2, [pc, #420]	; (8003c3c <HAL_I2C_Init+0x284>)
 8003a98:	fba2 2303 	umull	r2, r3, r2, r3
 8003a9c:	099b      	lsrs	r3, r3, #6
 8003a9e:	3301      	adds	r3, #1
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	6812      	ldr	r2, [r2, #0]
 8003aa4:	430b      	orrs	r3, r1
 8003aa6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	69db      	ldr	r3, [r3, #28]
 8003aae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003ab2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	495c      	ldr	r1, [pc, #368]	; (8003c2c <HAL_I2C_Init+0x274>)
 8003abc:	428b      	cmp	r3, r1
 8003abe:	d819      	bhi.n	8003af4 <HAL_I2C_Init+0x13c>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	1e59      	subs	r1, r3, #1
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	005b      	lsls	r3, r3, #1
 8003aca:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ace:	1c59      	adds	r1, r3, #1
 8003ad0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003ad4:	400b      	ands	r3, r1
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d00a      	beq.n	8003af0 <HAL_I2C_Init+0x138>
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	1e59      	subs	r1, r3, #1
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	005b      	lsls	r3, r3, #1
 8003ae4:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ae8:	3301      	adds	r3, #1
 8003aea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003aee:	e051      	b.n	8003b94 <HAL_I2C_Init+0x1dc>
 8003af0:	2304      	movs	r3, #4
 8003af2:	e04f      	b.n	8003b94 <HAL_I2C_Init+0x1dc>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d111      	bne.n	8003b20 <HAL_I2C_Init+0x168>
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	1e58      	subs	r0, r3, #1
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6859      	ldr	r1, [r3, #4]
 8003b04:	460b      	mov	r3, r1
 8003b06:	005b      	lsls	r3, r3, #1
 8003b08:	440b      	add	r3, r1
 8003b0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b0e:	3301      	adds	r3, #1
 8003b10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	bf0c      	ite	eq
 8003b18:	2301      	moveq	r3, #1
 8003b1a:	2300      	movne	r3, #0
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	e012      	b.n	8003b46 <HAL_I2C_Init+0x18e>
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	1e58      	subs	r0, r3, #1
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6859      	ldr	r1, [r3, #4]
 8003b28:	460b      	mov	r3, r1
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	440b      	add	r3, r1
 8003b2e:	0099      	lsls	r1, r3, #2
 8003b30:	440b      	add	r3, r1
 8003b32:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b36:	3301      	adds	r3, #1
 8003b38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	bf0c      	ite	eq
 8003b40:	2301      	moveq	r3, #1
 8003b42:	2300      	movne	r3, #0
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d001      	beq.n	8003b4e <HAL_I2C_Init+0x196>
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e022      	b.n	8003b94 <HAL_I2C_Init+0x1dc>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d10e      	bne.n	8003b74 <HAL_I2C_Init+0x1bc>
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	1e58      	subs	r0, r3, #1
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6859      	ldr	r1, [r3, #4]
 8003b5e:	460b      	mov	r3, r1
 8003b60:	005b      	lsls	r3, r3, #1
 8003b62:	440b      	add	r3, r1
 8003b64:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b68:	3301      	adds	r3, #1
 8003b6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b72:	e00f      	b.n	8003b94 <HAL_I2C_Init+0x1dc>
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	1e58      	subs	r0, r3, #1
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6859      	ldr	r1, [r3, #4]
 8003b7c:	460b      	mov	r3, r1
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	440b      	add	r3, r1
 8003b82:	0099      	lsls	r1, r3, #2
 8003b84:	440b      	add	r3, r1
 8003b86:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b90:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b94:	6879      	ldr	r1, [r7, #4]
 8003b96:	6809      	ldr	r1, [r1, #0]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	69da      	ldr	r2, [r3, #28]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a1b      	ldr	r3, [r3, #32]
 8003bae:	431a      	orrs	r2, r3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	430a      	orrs	r2, r1
 8003bb6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003bc2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	6911      	ldr	r1, [r2, #16]
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	68d2      	ldr	r2, [r2, #12]
 8003bce:	4311      	orrs	r1, r2
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	6812      	ldr	r2, [r2, #0]
 8003bd4:	430b      	orrs	r3, r1
 8003bd6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	695a      	ldr	r2, [r3, #20]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	699b      	ldr	r3, [r3, #24]
 8003bea:	431a      	orrs	r2, r3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	430a      	orrs	r2, r1
 8003bf2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f042 0201 	orr.w	r2, r2, #1
 8003c02:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2220      	movs	r2, #32
 8003c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c20:	2300      	movs	r3, #0
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3710      	adds	r7, #16
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	000186a0 	.word	0x000186a0
 8003c30:	001e847f 	.word	0x001e847f
 8003c34:	003d08ff 	.word	0x003d08ff
 8003c38:	431bde83 	.word	0x431bde83
 8003c3c:	10624dd3 	.word	0x10624dd3

08003c40 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	2b20      	cmp	r3, #32
 8003c54:	d129      	bne.n	8003caa <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2224      	movs	r2, #36	; 0x24
 8003c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f022 0201 	bic.w	r2, r2, #1
 8003c6c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f022 0210 	bic.w	r2, r2, #16
 8003c7c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	683a      	ldr	r2, [r7, #0]
 8003c8a:	430a      	orrs	r2, r1
 8003c8c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f042 0201 	orr.w	r2, r2, #1
 8003c9c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2220      	movs	r2, #32
 8003ca2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	e000      	b.n	8003cac <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003caa:	2302      	movs	r3, #2
  }
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	370c      	adds	r7, #12
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b085      	sub	sp, #20
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	2b20      	cmp	r3, #32
 8003cd0:	d12a      	bne.n	8003d28 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2224      	movs	r2, #36	; 0x24
 8003cd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f022 0201 	bic.w	r2, r2, #1
 8003ce8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf0:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003cf2:	89fb      	ldrh	r3, [r7, #14]
 8003cf4:	f023 030f 	bic.w	r3, r3, #15
 8003cf8:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	b29a      	uxth	r2, r3
 8003cfe:	89fb      	ldrh	r3, [r7, #14]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	89fa      	ldrh	r2, [r7, #14]
 8003d0a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f042 0201 	orr.w	r2, r2, #1
 8003d1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2220      	movs	r2, #32
 8003d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003d24:	2300      	movs	r3, #0
 8003d26:	e000      	b.n	8003d2a <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003d28:	2302      	movs	r3, #2
  }
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3714      	adds	r7, #20
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr
	...

08003d38 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b086      	sub	sp, #24
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d101      	bne.n	8003d4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e264      	b.n	8004214 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0301 	and.w	r3, r3, #1
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d075      	beq.n	8003e42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d56:	4ba3      	ldr	r3, [pc, #652]	; (8003fe4 <HAL_RCC_OscConfig+0x2ac>)
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	f003 030c 	and.w	r3, r3, #12
 8003d5e:	2b04      	cmp	r3, #4
 8003d60:	d00c      	beq.n	8003d7c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d62:	4ba0      	ldr	r3, [pc, #640]	; (8003fe4 <HAL_RCC_OscConfig+0x2ac>)
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d6a:	2b08      	cmp	r3, #8
 8003d6c:	d112      	bne.n	8003d94 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d6e:	4b9d      	ldr	r3, [pc, #628]	; (8003fe4 <HAL_RCC_OscConfig+0x2ac>)
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d7a:	d10b      	bne.n	8003d94 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d7c:	4b99      	ldr	r3, [pc, #612]	; (8003fe4 <HAL_RCC_OscConfig+0x2ac>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d05b      	beq.n	8003e40 <HAL_RCC_OscConfig+0x108>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d157      	bne.n	8003e40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e23f      	b.n	8004214 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d9c:	d106      	bne.n	8003dac <HAL_RCC_OscConfig+0x74>
 8003d9e:	4b91      	ldr	r3, [pc, #580]	; (8003fe4 <HAL_RCC_OscConfig+0x2ac>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a90      	ldr	r2, [pc, #576]	; (8003fe4 <HAL_RCC_OscConfig+0x2ac>)
 8003da4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003da8:	6013      	str	r3, [r2, #0]
 8003daa:	e01d      	b.n	8003de8 <HAL_RCC_OscConfig+0xb0>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003db4:	d10c      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x98>
 8003db6:	4b8b      	ldr	r3, [pc, #556]	; (8003fe4 <HAL_RCC_OscConfig+0x2ac>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a8a      	ldr	r2, [pc, #552]	; (8003fe4 <HAL_RCC_OscConfig+0x2ac>)
 8003dbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003dc0:	6013      	str	r3, [r2, #0]
 8003dc2:	4b88      	ldr	r3, [pc, #544]	; (8003fe4 <HAL_RCC_OscConfig+0x2ac>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a87      	ldr	r2, [pc, #540]	; (8003fe4 <HAL_RCC_OscConfig+0x2ac>)
 8003dc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dcc:	6013      	str	r3, [r2, #0]
 8003dce:	e00b      	b.n	8003de8 <HAL_RCC_OscConfig+0xb0>
 8003dd0:	4b84      	ldr	r3, [pc, #528]	; (8003fe4 <HAL_RCC_OscConfig+0x2ac>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a83      	ldr	r2, [pc, #524]	; (8003fe4 <HAL_RCC_OscConfig+0x2ac>)
 8003dd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dda:	6013      	str	r3, [r2, #0]
 8003ddc:	4b81      	ldr	r3, [pc, #516]	; (8003fe4 <HAL_RCC_OscConfig+0x2ac>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a80      	ldr	r2, [pc, #512]	; (8003fe4 <HAL_RCC_OscConfig+0x2ac>)
 8003de2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003de6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d013      	beq.n	8003e18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003df0:	f7fe fab8 	bl	8002364 <HAL_GetTick>
 8003df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003df6:	e008      	b.n	8003e0a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003df8:	f7fe fab4 	bl	8002364 <HAL_GetTick>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	2b64      	cmp	r3, #100	; 0x64
 8003e04:	d901      	bls.n	8003e0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e204      	b.n	8004214 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e0a:	4b76      	ldr	r3, [pc, #472]	; (8003fe4 <HAL_RCC_OscConfig+0x2ac>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d0f0      	beq.n	8003df8 <HAL_RCC_OscConfig+0xc0>
 8003e16:	e014      	b.n	8003e42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e18:	f7fe faa4 	bl	8002364 <HAL_GetTick>
 8003e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e1e:	e008      	b.n	8003e32 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e20:	f7fe faa0 	bl	8002364 <HAL_GetTick>
 8003e24:	4602      	mov	r2, r0
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	1ad3      	subs	r3, r2, r3
 8003e2a:	2b64      	cmp	r3, #100	; 0x64
 8003e2c:	d901      	bls.n	8003e32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	e1f0      	b.n	8004214 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e32:	4b6c      	ldr	r3, [pc, #432]	; (8003fe4 <HAL_RCC_OscConfig+0x2ac>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d1f0      	bne.n	8003e20 <HAL_RCC_OscConfig+0xe8>
 8003e3e:	e000      	b.n	8003e42 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 0302 	and.w	r3, r3, #2
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d063      	beq.n	8003f16 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e4e:	4b65      	ldr	r3, [pc, #404]	; (8003fe4 <HAL_RCC_OscConfig+0x2ac>)
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	f003 030c 	and.w	r3, r3, #12
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d00b      	beq.n	8003e72 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e5a:	4b62      	ldr	r3, [pc, #392]	; (8003fe4 <HAL_RCC_OscConfig+0x2ac>)
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e62:	2b08      	cmp	r3, #8
 8003e64:	d11c      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e66:	4b5f      	ldr	r3, [pc, #380]	; (8003fe4 <HAL_RCC_OscConfig+0x2ac>)
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d116      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e72:	4b5c      	ldr	r3, [pc, #368]	; (8003fe4 <HAL_RCC_OscConfig+0x2ac>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0302 	and.w	r3, r3, #2
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d005      	beq.n	8003e8a <HAL_RCC_OscConfig+0x152>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	68db      	ldr	r3, [r3, #12]
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d001      	beq.n	8003e8a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e1c4      	b.n	8004214 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e8a:	4b56      	ldr	r3, [pc, #344]	; (8003fe4 <HAL_RCC_OscConfig+0x2ac>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	00db      	lsls	r3, r3, #3
 8003e98:	4952      	ldr	r1, [pc, #328]	; (8003fe4 <HAL_RCC_OscConfig+0x2ac>)
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e9e:	e03a      	b.n	8003f16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d020      	beq.n	8003eea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ea8:	4b4f      	ldr	r3, [pc, #316]	; (8003fe8 <HAL_RCC_OscConfig+0x2b0>)
 8003eaa:	2201      	movs	r2, #1
 8003eac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eae:	f7fe fa59 	bl	8002364 <HAL_GetTick>
 8003eb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eb4:	e008      	b.n	8003ec8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003eb6:	f7fe fa55 	bl	8002364 <HAL_GetTick>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	1ad3      	subs	r3, r2, r3
 8003ec0:	2b02      	cmp	r3, #2
 8003ec2:	d901      	bls.n	8003ec8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ec4:	2303      	movs	r3, #3
 8003ec6:	e1a5      	b.n	8004214 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ec8:	4b46      	ldr	r3, [pc, #280]	; (8003fe4 <HAL_RCC_OscConfig+0x2ac>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0302 	and.w	r3, r3, #2
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d0f0      	beq.n	8003eb6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ed4:	4b43      	ldr	r3, [pc, #268]	; (8003fe4 <HAL_RCC_OscConfig+0x2ac>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	691b      	ldr	r3, [r3, #16]
 8003ee0:	00db      	lsls	r3, r3, #3
 8003ee2:	4940      	ldr	r1, [pc, #256]	; (8003fe4 <HAL_RCC_OscConfig+0x2ac>)
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	600b      	str	r3, [r1, #0]
 8003ee8:	e015      	b.n	8003f16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003eea:	4b3f      	ldr	r3, [pc, #252]	; (8003fe8 <HAL_RCC_OscConfig+0x2b0>)
 8003eec:	2200      	movs	r2, #0
 8003eee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef0:	f7fe fa38 	bl	8002364 <HAL_GetTick>
 8003ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ef6:	e008      	b.n	8003f0a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ef8:	f7fe fa34 	bl	8002364 <HAL_GetTick>
 8003efc:	4602      	mov	r2, r0
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d901      	bls.n	8003f0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e184      	b.n	8004214 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f0a:	4b36      	ldr	r3, [pc, #216]	; (8003fe4 <HAL_RCC_OscConfig+0x2ac>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0302 	and.w	r3, r3, #2
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d1f0      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0308 	and.w	r3, r3, #8
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d030      	beq.n	8003f84 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	695b      	ldr	r3, [r3, #20]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d016      	beq.n	8003f58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f2a:	4b30      	ldr	r3, [pc, #192]	; (8003fec <HAL_RCC_OscConfig+0x2b4>)
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f30:	f7fe fa18 	bl	8002364 <HAL_GetTick>
 8003f34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f36:	e008      	b.n	8003f4a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f38:	f7fe fa14 	bl	8002364 <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d901      	bls.n	8003f4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003f46:	2303      	movs	r3, #3
 8003f48:	e164      	b.n	8004214 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f4a:	4b26      	ldr	r3, [pc, #152]	; (8003fe4 <HAL_RCC_OscConfig+0x2ac>)
 8003f4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f4e:	f003 0302 	and.w	r3, r3, #2
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d0f0      	beq.n	8003f38 <HAL_RCC_OscConfig+0x200>
 8003f56:	e015      	b.n	8003f84 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f58:	4b24      	ldr	r3, [pc, #144]	; (8003fec <HAL_RCC_OscConfig+0x2b4>)
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f5e:	f7fe fa01 	bl	8002364 <HAL_GetTick>
 8003f62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f64:	e008      	b.n	8003f78 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f66:	f7fe f9fd 	bl	8002364 <HAL_GetTick>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	1ad3      	subs	r3, r2, r3
 8003f70:	2b02      	cmp	r3, #2
 8003f72:	d901      	bls.n	8003f78 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003f74:	2303      	movs	r3, #3
 8003f76:	e14d      	b.n	8004214 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f78:	4b1a      	ldr	r3, [pc, #104]	; (8003fe4 <HAL_RCC_OscConfig+0x2ac>)
 8003f7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f7c:	f003 0302 	and.w	r3, r3, #2
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d1f0      	bne.n	8003f66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 0304 	and.w	r3, r3, #4
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	f000 80a0 	beq.w	80040d2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f92:	2300      	movs	r3, #0
 8003f94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f96:	4b13      	ldr	r3, [pc, #76]	; (8003fe4 <HAL_RCC_OscConfig+0x2ac>)
 8003f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d10f      	bne.n	8003fc2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	60bb      	str	r3, [r7, #8]
 8003fa6:	4b0f      	ldr	r3, [pc, #60]	; (8003fe4 <HAL_RCC_OscConfig+0x2ac>)
 8003fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003faa:	4a0e      	ldr	r2, [pc, #56]	; (8003fe4 <HAL_RCC_OscConfig+0x2ac>)
 8003fac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fb0:	6413      	str	r3, [r2, #64]	; 0x40
 8003fb2:	4b0c      	ldr	r3, [pc, #48]	; (8003fe4 <HAL_RCC_OscConfig+0x2ac>)
 8003fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fba:	60bb      	str	r3, [r7, #8]
 8003fbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fc2:	4b0b      	ldr	r3, [pc, #44]	; (8003ff0 <HAL_RCC_OscConfig+0x2b8>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d121      	bne.n	8004012 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fce:	4b08      	ldr	r3, [pc, #32]	; (8003ff0 <HAL_RCC_OscConfig+0x2b8>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a07      	ldr	r2, [pc, #28]	; (8003ff0 <HAL_RCC_OscConfig+0x2b8>)
 8003fd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fda:	f7fe f9c3 	bl	8002364 <HAL_GetTick>
 8003fde:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fe0:	e011      	b.n	8004006 <HAL_RCC_OscConfig+0x2ce>
 8003fe2:	bf00      	nop
 8003fe4:	40023800 	.word	0x40023800
 8003fe8:	42470000 	.word	0x42470000
 8003fec:	42470e80 	.word	0x42470e80
 8003ff0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ff4:	f7fe f9b6 	bl	8002364 <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	2b02      	cmp	r3, #2
 8004000:	d901      	bls.n	8004006 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e106      	b.n	8004214 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004006:	4b85      	ldr	r3, [pc, #532]	; (800421c <HAL_RCC_OscConfig+0x4e4>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800400e:	2b00      	cmp	r3, #0
 8004010:	d0f0      	beq.n	8003ff4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	2b01      	cmp	r3, #1
 8004018:	d106      	bne.n	8004028 <HAL_RCC_OscConfig+0x2f0>
 800401a:	4b81      	ldr	r3, [pc, #516]	; (8004220 <HAL_RCC_OscConfig+0x4e8>)
 800401c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800401e:	4a80      	ldr	r2, [pc, #512]	; (8004220 <HAL_RCC_OscConfig+0x4e8>)
 8004020:	f043 0301 	orr.w	r3, r3, #1
 8004024:	6713      	str	r3, [r2, #112]	; 0x70
 8004026:	e01c      	b.n	8004062 <HAL_RCC_OscConfig+0x32a>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	2b05      	cmp	r3, #5
 800402e:	d10c      	bne.n	800404a <HAL_RCC_OscConfig+0x312>
 8004030:	4b7b      	ldr	r3, [pc, #492]	; (8004220 <HAL_RCC_OscConfig+0x4e8>)
 8004032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004034:	4a7a      	ldr	r2, [pc, #488]	; (8004220 <HAL_RCC_OscConfig+0x4e8>)
 8004036:	f043 0304 	orr.w	r3, r3, #4
 800403a:	6713      	str	r3, [r2, #112]	; 0x70
 800403c:	4b78      	ldr	r3, [pc, #480]	; (8004220 <HAL_RCC_OscConfig+0x4e8>)
 800403e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004040:	4a77      	ldr	r2, [pc, #476]	; (8004220 <HAL_RCC_OscConfig+0x4e8>)
 8004042:	f043 0301 	orr.w	r3, r3, #1
 8004046:	6713      	str	r3, [r2, #112]	; 0x70
 8004048:	e00b      	b.n	8004062 <HAL_RCC_OscConfig+0x32a>
 800404a:	4b75      	ldr	r3, [pc, #468]	; (8004220 <HAL_RCC_OscConfig+0x4e8>)
 800404c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800404e:	4a74      	ldr	r2, [pc, #464]	; (8004220 <HAL_RCC_OscConfig+0x4e8>)
 8004050:	f023 0301 	bic.w	r3, r3, #1
 8004054:	6713      	str	r3, [r2, #112]	; 0x70
 8004056:	4b72      	ldr	r3, [pc, #456]	; (8004220 <HAL_RCC_OscConfig+0x4e8>)
 8004058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800405a:	4a71      	ldr	r2, [pc, #452]	; (8004220 <HAL_RCC_OscConfig+0x4e8>)
 800405c:	f023 0304 	bic.w	r3, r3, #4
 8004060:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d015      	beq.n	8004096 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800406a:	f7fe f97b 	bl	8002364 <HAL_GetTick>
 800406e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004070:	e00a      	b.n	8004088 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004072:	f7fe f977 	bl	8002364 <HAL_GetTick>
 8004076:	4602      	mov	r2, r0
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004080:	4293      	cmp	r3, r2
 8004082:	d901      	bls.n	8004088 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004084:	2303      	movs	r3, #3
 8004086:	e0c5      	b.n	8004214 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004088:	4b65      	ldr	r3, [pc, #404]	; (8004220 <HAL_RCC_OscConfig+0x4e8>)
 800408a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800408c:	f003 0302 	and.w	r3, r3, #2
 8004090:	2b00      	cmp	r3, #0
 8004092:	d0ee      	beq.n	8004072 <HAL_RCC_OscConfig+0x33a>
 8004094:	e014      	b.n	80040c0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004096:	f7fe f965 	bl	8002364 <HAL_GetTick>
 800409a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800409c:	e00a      	b.n	80040b4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800409e:	f7fe f961 	bl	8002364 <HAL_GetTick>
 80040a2:	4602      	mov	r2, r0
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	1ad3      	subs	r3, r2, r3
 80040a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d901      	bls.n	80040b4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80040b0:	2303      	movs	r3, #3
 80040b2:	e0af      	b.n	8004214 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040b4:	4b5a      	ldr	r3, [pc, #360]	; (8004220 <HAL_RCC_OscConfig+0x4e8>)
 80040b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040b8:	f003 0302 	and.w	r3, r3, #2
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d1ee      	bne.n	800409e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040c0:	7dfb      	ldrb	r3, [r7, #23]
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d105      	bne.n	80040d2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040c6:	4b56      	ldr	r3, [pc, #344]	; (8004220 <HAL_RCC_OscConfig+0x4e8>)
 80040c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ca:	4a55      	ldr	r2, [pc, #340]	; (8004220 <HAL_RCC_OscConfig+0x4e8>)
 80040cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040d0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	699b      	ldr	r3, [r3, #24]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	f000 809b 	beq.w	8004212 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80040dc:	4b50      	ldr	r3, [pc, #320]	; (8004220 <HAL_RCC_OscConfig+0x4e8>)
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	f003 030c 	and.w	r3, r3, #12
 80040e4:	2b08      	cmp	r3, #8
 80040e6:	d05c      	beq.n	80041a2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	699b      	ldr	r3, [r3, #24]
 80040ec:	2b02      	cmp	r3, #2
 80040ee:	d141      	bne.n	8004174 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040f0:	4b4c      	ldr	r3, [pc, #304]	; (8004224 <HAL_RCC_OscConfig+0x4ec>)
 80040f2:	2200      	movs	r2, #0
 80040f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040f6:	f7fe f935 	bl	8002364 <HAL_GetTick>
 80040fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040fc:	e008      	b.n	8004110 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040fe:	f7fe f931 	bl	8002364 <HAL_GetTick>
 8004102:	4602      	mov	r2, r0
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	2b02      	cmp	r3, #2
 800410a:	d901      	bls.n	8004110 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800410c:	2303      	movs	r3, #3
 800410e:	e081      	b.n	8004214 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004110:	4b43      	ldr	r3, [pc, #268]	; (8004220 <HAL_RCC_OscConfig+0x4e8>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004118:	2b00      	cmp	r3, #0
 800411a:	d1f0      	bne.n	80040fe <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	69da      	ldr	r2, [r3, #28]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6a1b      	ldr	r3, [r3, #32]
 8004124:	431a      	orrs	r2, r3
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412a:	019b      	lsls	r3, r3, #6
 800412c:	431a      	orrs	r2, r3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004132:	085b      	lsrs	r3, r3, #1
 8004134:	3b01      	subs	r3, #1
 8004136:	041b      	lsls	r3, r3, #16
 8004138:	431a      	orrs	r2, r3
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800413e:	061b      	lsls	r3, r3, #24
 8004140:	4937      	ldr	r1, [pc, #220]	; (8004220 <HAL_RCC_OscConfig+0x4e8>)
 8004142:	4313      	orrs	r3, r2
 8004144:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004146:	4b37      	ldr	r3, [pc, #220]	; (8004224 <HAL_RCC_OscConfig+0x4ec>)
 8004148:	2201      	movs	r2, #1
 800414a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800414c:	f7fe f90a 	bl	8002364 <HAL_GetTick>
 8004150:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004152:	e008      	b.n	8004166 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004154:	f7fe f906 	bl	8002364 <HAL_GetTick>
 8004158:	4602      	mov	r2, r0
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	2b02      	cmp	r3, #2
 8004160:	d901      	bls.n	8004166 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	e056      	b.n	8004214 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004166:	4b2e      	ldr	r3, [pc, #184]	; (8004220 <HAL_RCC_OscConfig+0x4e8>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d0f0      	beq.n	8004154 <HAL_RCC_OscConfig+0x41c>
 8004172:	e04e      	b.n	8004212 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004174:	4b2b      	ldr	r3, [pc, #172]	; (8004224 <HAL_RCC_OscConfig+0x4ec>)
 8004176:	2200      	movs	r2, #0
 8004178:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800417a:	f7fe f8f3 	bl	8002364 <HAL_GetTick>
 800417e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004180:	e008      	b.n	8004194 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004182:	f7fe f8ef 	bl	8002364 <HAL_GetTick>
 8004186:	4602      	mov	r2, r0
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	1ad3      	subs	r3, r2, r3
 800418c:	2b02      	cmp	r3, #2
 800418e:	d901      	bls.n	8004194 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004190:	2303      	movs	r3, #3
 8004192:	e03f      	b.n	8004214 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004194:	4b22      	ldr	r3, [pc, #136]	; (8004220 <HAL_RCC_OscConfig+0x4e8>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800419c:	2b00      	cmp	r3, #0
 800419e:	d1f0      	bne.n	8004182 <HAL_RCC_OscConfig+0x44a>
 80041a0:	e037      	b.n	8004212 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	699b      	ldr	r3, [r3, #24]
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d101      	bne.n	80041ae <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e032      	b.n	8004214 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80041ae:	4b1c      	ldr	r3, [pc, #112]	; (8004220 <HAL_RCC_OscConfig+0x4e8>)
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	699b      	ldr	r3, [r3, #24]
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d028      	beq.n	800420e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d121      	bne.n	800420e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d11a      	bne.n	800420e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041d8:	68fa      	ldr	r2, [r7, #12]
 80041da:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80041de:	4013      	ands	r3, r2
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80041e4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d111      	bne.n	800420e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f4:	085b      	lsrs	r3, r3, #1
 80041f6:	3b01      	subs	r3, #1
 80041f8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d107      	bne.n	800420e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004208:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800420a:	429a      	cmp	r2, r3
 800420c:	d001      	beq.n	8004212 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e000      	b.n	8004214 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004212:	2300      	movs	r3, #0
}
 8004214:	4618      	mov	r0, r3
 8004216:	3718      	adds	r7, #24
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}
 800421c:	40007000 	.word	0x40007000
 8004220:	40023800 	.word	0x40023800
 8004224:	42470060 	.word	0x42470060

08004228 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b084      	sub	sp, #16
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d101      	bne.n	800423c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	e0cc      	b.n	80043d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800423c:	4b68      	ldr	r3, [pc, #416]	; (80043e0 <HAL_RCC_ClockConfig+0x1b8>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 030f 	and.w	r3, r3, #15
 8004244:	683a      	ldr	r2, [r7, #0]
 8004246:	429a      	cmp	r2, r3
 8004248:	d90c      	bls.n	8004264 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800424a:	4b65      	ldr	r3, [pc, #404]	; (80043e0 <HAL_RCC_ClockConfig+0x1b8>)
 800424c:	683a      	ldr	r2, [r7, #0]
 800424e:	b2d2      	uxtb	r2, r2
 8004250:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004252:	4b63      	ldr	r3, [pc, #396]	; (80043e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 030f 	and.w	r3, r3, #15
 800425a:	683a      	ldr	r2, [r7, #0]
 800425c:	429a      	cmp	r2, r3
 800425e:	d001      	beq.n	8004264 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e0b8      	b.n	80043d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 0302 	and.w	r3, r3, #2
 800426c:	2b00      	cmp	r3, #0
 800426e:	d020      	beq.n	80042b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0304 	and.w	r3, r3, #4
 8004278:	2b00      	cmp	r3, #0
 800427a:	d005      	beq.n	8004288 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800427c:	4b59      	ldr	r3, [pc, #356]	; (80043e4 <HAL_RCC_ClockConfig+0x1bc>)
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	4a58      	ldr	r2, [pc, #352]	; (80043e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004282:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004286:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0308 	and.w	r3, r3, #8
 8004290:	2b00      	cmp	r3, #0
 8004292:	d005      	beq.n	80042a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004294:	4b53      	ldr	r3, [pc, #332]	; (80043e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	4a52      	ldr	r2, [pc, #328]	; (80043e4 <HAL_RCC_ClockConfig+0x1bc>)
 800429a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800429e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042a0:	4b50      	ldr	r3, [pc, #320]	; (80043e4 <HAL_RCC_ClockConfig+0x1bc>)
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	494d      	ldr	r1, [pc, #308]	; (80043e4 <HAL_RCC_ClockConfig+0x1bc>)
 80042ae:	4313      	orrs	r3, r2
 80042b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0301 	and.w	r3, r3, #1
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d044      	beq.n	8004348 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d107      	bne.n	80042d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042c6:	4b47      	ldr	r3, [pc, #284]	; (80043e4 <HAL_RCC_ClockConfig+0x1bc>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d119      	bne.n	8004306 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e07f      	b.n	80043d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d003      	beq.n	80042e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042e2:	2b03      	cmp	r3, #3
 80042e4:	d107      	bne.n	80042f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042e6:	4b3f      	ldr	r3, [pc, #252]	; (80043e4 <HAL_RCC_ClockConfig+0x1bc>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d109      	bne.n	8004306 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e06f      	b.n	80043d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042f6:	4b3b      	ldr	r3, [pc, #236]	; (80043e4 <HAL_RCC_ClockConfig+0x1bc>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0302 	and.w	r3, r3, #2
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d101      	bne.n	8004306 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e067      	b.n	80043d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004306:	4b37      	ldr	r3, [pc, #220]	; (80043e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	f023 0203 	bic.w	r2, r3, #3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	4934      	ldr	r1, [pc, #208]	; (80043e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004314:	4313      	orrs	r3, r2
 8004316:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004318:	f7fe f824 	bl	8002364 <HAL_GetTick>
 800431c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800431e:	e00a      	b.n	8004336 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004320:	f7fe f820 	bl	8002364 <HAL_GetTick>
 8004324:	4602      	mov	r2, r0
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	f241 3288 	movw	r2, #5000	; 0x1388
 800432e:	4293      	cmp	r3, r2
 8004330:	d901      	bls.n	8004336 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e04f      	b.n	80043d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004336:	4b2b      	ldr	r3, [pc, #172]	; (80043e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	f003 020c 	and.w	r2, r3, #12
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	429a      	cmp	r2, r3
 8004346:	d1eb      	bne.n	8004320 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004348:	4b25      	ldr	r3, [pc, #148]	; (80043e0 <HAL_RCC_ClockConfig+0x1b8>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 030f 	and.w	r3, r3, #15
 8004350:	683a      	ldr	r2, [r7, #0]
 8004352:	429a      	cmp	r2, r3
 8004354:	d20c      	bcs.n	8004370 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004356:	4b22      	ldr	r3, [pc, #136]	; (80043e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004358:	683a      	ldr	r2, [r7, #0]
 800435a:	b2d2      	uxtb	r2, r2
 800435c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800435e:	4b20      	ldr	r3, [pc, #128]	; (80043e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 030f 	and.w	r3, r3, #15
 8004366:	683a      	ldr	r2, [r7, #0]
 8004368:	429a      	cmp	r2, r3
 800436a:	d001      	beq.n	8004370 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	e032      	b.n	80043d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 0304 	and.w	r3, r3, #4
 8004378:	2b00      	cmp	r3, #0
 800437a:	d008      	beq.n	800438e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800437c:	4b19      	ldr	r3, [pc, #100]	; (80043e4 <HAL_RCC_ClockConfig+0x1bc>)
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	4916      	ldr	r1, [pc, #88]	; (80043e4 <HAL_RCC_ClockConfig+0x1bc>)
 800438a:	4313      	orrs	r3, r2
 800438c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 0308 	and.w	r3, r3, #8
 8004396:	2b00      	cmp	r3, #0
 8004398:	d009      	beq.n	80043ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800439a:	4b12      	ldr	r3, [pc, #72]	; (80043e4 <HAL_RCC_ClockConfig+0x1bc>)
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	691b      	ldr	r3, [r3, #16]
 80043a6:	00db      	lsls	r3, r3, #3
 80043a8:	490e      	ldr	r1, [pc, #56]	; (80043e4 <HAL_RCC_ClockConfig+0x1bc>)
 80043aa:	4313      	orrs	r3, r2
 80043ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80043ae:	f000 f821 	bl	80043f4 <HAL_RCC_GetSysClockFreq>
 80043b2:	4602      	mov	r2, r0
 80043b4:	4b0b      	ldr	r3, [pc, #44]	; (80043e4 <HAL_RCC_ClockConfig+0x1bc>)
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	091b      	lsrs	r3, r3, #4
 80043ba:	f003 030f 	and.w	r3, r3, #15
 80043be:	490a      	ldr	r1, [pc, #40]	; (80043e8 <HAL_RCC_ClockConfig+0x1c0>)
 80043c0:	5ccb      	ldrb	r3, [r1, r3]
 80043c2:	fa22 f303 	lsr.w	r3, r2, r3
 80043c6:	4a09      	ldr	r2, [pc, #36]	; (80043ec <HAL_RCC_ClockConfig+0x1c4>)
 80043c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80043ca:	4b09      	ldr	r3, [pc, #36]	; (80043f0 <HAL_RCC_ClockConfig+0x1c8>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4618      	mov	r0, r3
 80043d0:	f7fd ff84 	bl	80022dc <HAL_InitTick>

  return HAL_OK;
 80043d4:	2300      	movs	r3, #0
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3710      	adds	r7, #16
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	40023c00 	.word	0x40023c00
 80043e4:	40023800 	.word	0x40023800
 80043e8:	08005dd4 	.word	0x08005dd4
 80043ec:	20000000 	.word	0x20000000
 80043f0:	20000004 	.word	0x20000004

080043f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043f4:	b5b0      	push	{r4, r5, r7, lr}
 80043f6:	b084      	sub	sp, #16
 80043f8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80043fa:	2100      	movs	r1, #0
 80043fc:	6079      	str	r1, [r7, #4]
 80043fe:	2100      	movs	r1, #0
 8004400:	60f9      	str	r1, [r7, #12]
 8004402:	2100      	movs	r1, #0
 8004404:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004406:	2100      	movs	r1, #0
 8004408:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800440a:	4952      	ldr	r1, [pc, #328]	; (8004554 <HAL_RCC_GetSysClockFreq+0x160>)
 800440c:	6889      	ldr	r1, [r1, #8]
 800440e:	f001 010c 	and.w	r1, r1, #12
 8004412:	2908      	cmp	r1, #8
 8004414:	d00d      	beq.n	8004432 <HAL_RCC_GetSysClockFreq+0x3e>
 8004416:	2908      	cmp	r1, #8
 8004418:	f200 8094 	bhi.w	8004544 <HAL_RCC_GetSysClockFreq+0x150>
 800441c:	2900      	cmp	r1, #0
 800441e:	d002      	beq.n	8004426 <HAL_RCC_GetSysClockFreq+0x32>
 8004420:	2904      	cmp	r1, #4
 8004422:	d003      	beq.n	800442c <HAL_RCC_GetSysClockFreq+0x38>
 8004424:	e08e      	b.n	8004544 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004426:	4b4c      	ldr	r3, [pc, #304]	; (8004558 <HAL_RCC_GetSysClockFreq+0x164>)
 8004428:	60bb      	str	r3, [r7, #8]
       break;
 800442a:	e08e      	b.n	800454a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800442c:	4b4b      	ldr	r3, [pc, #300]	; (800455c <HAL_RCC_GetSysClockFreq+0x168>)
 800442e:	60bb      	str	r3, [r7, #8]
      break;
 8004430:	e08b      	b.n	800454a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004432:	4948      	ldr	r1, [pc, #288]	; (8004554 <HAL_RCC_GetSysClockFreq+0x160>)
 8004434:	6849      	ldr	r1, [r1, #4]
 8004436:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800443a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800443c:	4945      	ldr	r1, [pc, #276]	; (8004554 <HAL_RCC_GetSysClockFreq+0x160>)
 800443e:	6849      	ldr	r1, [r1, #4]
 8004440:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004444:	2900      	cmp	r1, #0
 8004446:	d024      	beq.n	8004492 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004448:	4942      	ldr	r1, [pc, #264]	; (8004554 <HAL_RCC_GetSysClockFreq+0x160>)
 800444a:	6849      	ldr	r1, [r1, #4]
 800444c:	0989      	lsrs	r1, r1, #6
 800444e:	4608      	mov	r0, r1
 8004450:	f04f 0100 	mov.w	r1, #0
 8004454:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004458:	f04f 0500 	mov.w	r5, #0
 800445c:	ea00 0204 	and.w	r2, r0, r4
 8004460:	ea01 0305 	and.w	r3, r1, r5
 8004464:	493d      	ldr	r1, [pc, #244]	; (800455c <HAL_RCC_GetSysClockFreq+0x168>)
 8004466:	fb01 f003 	mul.w	r0, r1, r3
 800446a:	2100      	movs	r1, #0
 800446c:	fb01 f102 	mul.w	r1, r1, r2
 8004470:	1844      	adds	r4, r0, r1
 8004472:	493a      	ldr	r1, [pc, #232]	; (800455c <HAL_RCC_GetSysClockFreq+0x168>)
 8004474:	fba2 0101 	umull	r0, r1, r2, r1
 8004478:	1863      	adds	r3, r4, r1
 800447a:	4619      	mov	r1, r3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	461a      	mov	r2, r3
 8004480:	f04f 0300 	mov.w	r3, #0
 8004484:	f7fb feb2 	bl	80001ec <__aeabi_uldivmod>
 8004488:	4602      	mov	r2, r0
 800448a:	460b      	mov	r3, r1
 800448c:	4613      	mov	r3, r2
 800448e:	60fb      	str	r3, [r7, #12]
 8004490:	e04a      	b.n	8004528 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004492:	4b30      	ldr	r3, [pc, #192]	; (8004554 <HAL_RCC_GetSysClockFreq+0x160>)
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	099b      	lsrs	r3, r3, #6
 8004498:	461a      	mov	r2, r3
 800449a:	f04f 0300 	mov.w	r3, #0
 800449e:	f240 10ff 	movw	r0, #511	; 0x1ff
 80044a2:	f04f 0100 	mov.w	r1, #0
 80044a6:	ea02 0400 	and.w	r4, r2, r0
 80044aa:	ea03 0501 	and.w	r5, r3, r1
 80044ae:	4620      	mov	r0, r4
 80044b0:	4629      	mov	r1, r5
 80044b2:	f04f 0200 	mov.w	r2, #0
 80044b6:	f04f 0300 	mov.w	r3, #0
 80044ba:	014b      	lsls	r3, r1, #5
 80044bc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80044c0:	0142      	lsls	r2, r0, #5
 80044c2:	4610      	mov	r0, r2
 80044c4:	4619      	mov	r1, r3
 80044c6:	1b00      	subs	r0, r0, r4
 80044c8:	eb61 0105 	sbc.w	r1, r1, r5
 80044cc:	f04f 0200 	mov.w	r2, #0
 80044d0:	f04f 0300 	mov.w	r3, #0
 80044d4:	018b      	lsls	r3, r1, #6
 80044d6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80044da:	0182      	lsls	r2, r0, #6
 80044dc:	1a12      	subs	r2, r2, r0
 80044de:	eb63 0301 	sbc.w	r3, r3, r1
 80044e2:	f04f 0000 	mov.w	r0, #0
 80044e6:	f04f 0100 	mov.w	r1, #0
 80044ea:	00d9      	lsls	r1, r3, #3
 80044ec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80044f0:	00d0      	lsls	r0, r2, #3
 80044f2:	4602      	mov	r2, r0
 80044f4:	460b      	mov	r3, r1
 80044f6:	1912      	adds	r2, r2, r4
 80044f8:	eb45 0303 	adc.w	r3, r5, r3
 80044fc:	f04f 0000 	mov.w	r0, #0
 8004500:	f04f 0100 	mov.w	r1, #0
 8004504:	0299      	lsls	r1, r3, #10
 8004506:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800450a:	0290      	lsls	r0, r2, #10
 800450c:	4602      	mov	r2, r0
 800450e:	460b      	mov	r3, r1
 8004510:	4610      	mov	r0, r2
 8004512:	4619      	mov	r1, r3
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	461a      	mov	r2, r3
 8004518:	f04f 0300 	mov.w	r3, #0
 800451c:	f7fb fe66 	bl	80001ec <__aeabi_uldivmod>
 8004520:	4602      	mov	r2, r0
 8004522:	460b      	mov	r3, r1
 8004524:	4613      	mov	r3, r2
 8004526:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004528:	4b0a      	ldr	r3, [pc, #40]	; (8004554 <HAL_RCC_GetSysClockFreq+0x160>)
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	0c1b      	lsrs	r3, r3, #16
 800452e:	f003 0303 	and.w	r3, r3, #3
 8004532:	3301      	adds	r3, #1
 8004534:	005b      	lsls	r3, r3, #1
 8004536:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004538:	68fa      	ldr	r2, [r7, #12]
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004540:	60bb      	str	r3, [r7, #8]
      break;
 8004542:	e002      	b.n	800454a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004544:	4b04      	ldr	r3, [pc, #16]	; (8004558 <HAL_RCC_GetSysClockFreq+0x164>)
 8004546:	60bb      	str	r3, [r7, #8]
      break;
 8004548:	bf00      	nop
    }
  }
  return sysclockfreq;
 800454a:	68bb      	ldr	r3, [r7, #8]
}
 800454c:	4618      	mov	r0, r3
 800454e:	3710      	adds	r7, #16
 8004550:	46bd      	mov	sp, r7
 8004552:	bdb0      	pop	{r4, r5, r7, pc}
 8004554:	40023800 	.word	0x40023800
 8004558:	00f42400 	.word	0x00f42400
 800455c:	00b71b00 	.word	0x00b71b00

08004560 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004560:	b480      	push	{r7}
 8004562:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004564:	4b03      	ldr	r3, [pc, #12]	; (8004574 <HAL_RCC_GetHCLKFreq+0x14>)
 8004566:	681b      	ldr	r3, [r3, #0]
}
 8004568:	4618      	mov	r0, r3
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr
 8004572:	bf00      	nop
 8004574:	20000000 	.word	0x20000000

08004578 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800457c:	f7ff fff0 	bl	8004560 <HAL_RCC_GetHCLKFreq>
 8004580:	4602      	mov	r2, r0
 8004582:	4b05      	ldr	r3, [pc, #20]	; (8004598 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	0a9b      	lsrs	r3, r3, #10
 8004588:	f003 0307 	and.w	r3, r3, #7
 800458c:	4903      	ldr	r1, [pc, #12]	; (800459c <HAL_RCC_GetPCLK1Freq+0x24>)
 800458e:	5ccb      	ldrb	r3, [r1, r3]
 8004590:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004594:	4618      	mov	r0, r3
 8004596:	bd80      	pop	{r7, pc}
 8004598:	40023800 	.word	0x40023800
 800459c:	08005de4 	.word	0x08005de4

080045a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80045a4:	f7ff ffdc 	bl	8004560 <HAL_RCC_GetHCLKFreq>
 80045a8:	4602      	mov	r2, r0
 80045aa:	4b05      	ldr	r3, [pc, #20]	; (80045c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	0b5b      	lsrs	r3, r3, #13
 80045b0:	f003 0307 	and.w	r3, r3, #7
 80045b4:	4903      	ldr	r1, [pc, #12]	; (80045c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80045b6:	5ccb      	ldrb	r3, [r1, r3]
 80045b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045bc:	4618      	mov	r0, r3
 80045be:	bd80      	pop	{r7, pc}
 80045c0:	40023800 	.word	0x40023800
 80045c4:	08005de4 	.word	0x08005de4

080045c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b082      	sub	sp, #8
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d101      	bne.n	80045da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e07b      	b.n	80046d2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d108      	bne.n	80045f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045ea:	d009      	beq.n	8004600 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	61da      	str	r2, [r3, #28]
 80045f2:	e005      	b.n	8004600 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2200      	movs	r2, #0
 80045f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2200      	movs	r2, #0
 80045fe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2200      	movs	r2, #0
 8004604:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800460c:	b2db      	uxtb	r3, r3
 800460e:	2b00      	cmp	r3, #0
 8004610:	d106      	bne.n	8004620 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f7fd f9e8 	bl	80019f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2202      	movs	r2, #2
 8004624:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004636:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004648:	431a      	orrs	r2, r3
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004652:	431a      	orrs	r2, r3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	691b      	ldr	r3, [r3, #16]
 8004658:	f003 0302 	and.w	r3, r3, #2
 800465c:	431a      	orrs	r2, r3
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	695b      	ldr	r3, [r3, #20]
 8004662:	f003 0301 	and.w	r3, r3, #1
 8004666:	431a      	orrs	r2, r3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	699b      	ldr	r3, [r3, #24]
 800466c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004670:	431a      	orrs	r2, r3
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	69db      	ldr	r3, [r3, #28]
 8004676:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800467a:	431a      	orrs	r2, r3
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6a1b      	ldr	r3, [r3, #32]
 8004680:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004684:	ea42 0103 	orr.w	r1, r2, r3
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800468c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	430a      	orrs	r2, r1
 8004696:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	699b      	ldr	r3, [r3, #24]
 800469c:	0c1b      	lsrs	r3, r3, #16
 800469e:	f003 0104 	and.w	r1, r3, #4
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a6:	f003 0210 	and.w	r2, r3, #16
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	430a      	orrs	r2, r1
 80046b0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	69da      	ldr	r2, [r3, #28]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046c0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2201      	movs	r2, #1
 80046cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3708      	adds	r7, #8
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}

080046da <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80046da:	b580      	push	{r7, lr}
 80046dc:	b082      	sub	sp, #8
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d101      	bne.n	80046ec <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e041      	b.n	8004770 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d106      	bne.n	8004706 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f7fd f9bd 	bl	8001a80 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2202      	movs	r2, #2
 800470a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	3304      	adds	r3, #4
 8004716:	4619      	mov	r1, r3
 8004718:	4610      	mov	r0, r2
 800471a:	f000 f8ef 	bl	80048fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2201      	movs	r2, #1
 8004722:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2201      	movs	r2, #1
 800472a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2201      	movs	r2, #1
 8004732:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2201      	movs	r2, #1
 800473a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2201      	movs	r2, #1
 8004742:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2201      	movs	r2, #1
 800474a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2201      	movs	r2, #1
 8004752:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2201      	movs	r2, #1
 800475a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2201      	movs	r2, #1
 8004762:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2201      	movs	r2, #1
 800476a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800476e:	2300      	movs	r3, #0
}
 8004770:	4618      	mov	r0, r3
 8004772:	3708      	adds	r7, #8
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}

08004778 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b086      	sub	sp, #24
 800477c:	af00      	add	r7, sp, #0
 800477e:	60f8      	str	r0, [r7, #12]
 8004780:	60b9      	str	r1, [r7, #8]
 8004782:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004784:	2300      	movs	r3, #0
 8004786:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800478e:	2b01      	cmp	r3, #1
 8004790:	d101      	bne.n	8004796 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004792:	2302      	movs	r3, #2
 8004794:	e0ae      	b.n	80048f4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2201      	movs	r2, #1
 800479a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2b0c      	cmp	r3, #12
 80047a2:	f200 809f 	bhi.w	80048e4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80047a6:	a201      	add	r2, pc, #4	; (adr r2, 80047ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 80047a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ac:	080047e1 	.word	0x080047e1
 80047b0:	080048e5 	.word	0x080048e5
 80047b4:	080048e5 	.word	0x080048e5
 80047b8:	080048e5 	.word	0x080048e5
 80047bc:	08004821 	.word	0x08004821
 80047c0:	080048e5 	.word	0x080048e5
 80047c4:	080048e5 	.word	0x080048e5
 80047c8:	080048e5 	.word	0x080048e5
 80047cc:	08004863 	.word	0x08004863
 80047d0:	080048e5 	.word	0x080048e5
 80047d4:	080048e5 	.word	0x080048e5
 80047d8:	080048e5 	.word	0x080048e5
 80047dc:	080048a3 	.word	0x080048a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	68b9      	ldr	r1, [r7, #8]
 80047e6:	4618      	mov	r0, r3
 80047e8:	f000 f928 	bl	8004a3c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	699a      	ldr	r2, [r3, #24]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f042 0208 	orr.w	r2, r2, #8
 80047fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	699a      	ldr	r2, [r3, #24]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f022 0204 	bic.w	r2, r2, #4
 800480a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	6999      	ldr	r1, [r3, #24]
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	691a      	ldr	r2, [r3, #16]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	430a      	orrs	r2, r1
 800481c:	619a      	str	r2, [r3, #24]
      break;
 800481e:	e064      	b.n	80048ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	68b9      	ldr	r1, [r7, #8]
 8004826:	4618      	mov	r0, r3
 8004828:	f000 f978 	bl	8004b1c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	699a      	ldr	r2, [r3, #24]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800483a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	699a      	ldr	r2, [r3, #24]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800484a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	6999      	ldr	r1, [r3, #24]
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	021a      	lsls	r2, r3, #8
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	430a      	orrs	r2, r1
 800485e:	619a      	str	r2, [r3, #24]
      break;
 8004860:	e043      	b.n	80048ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	68b9      	ldr	r1, [r7, #8]
 8004868:	4618      	mov	r0, r3
 800486a:	f000 f9cd 	bl	8004c08 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	69da      	ldr	r2, [r3, #28]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f042 0208 	orr.w	r2, r2, #8
 800487c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	69da      	ldr	r2, [r3, #28]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f022 0204 	bic.w	r2, r2, #4
 800488c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	69d9      	ldr	r1, [r3, #28]
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	691a      	ldr	r2, [r3, #16]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	430a      	orrs	r2, r1
 800489e:	61da      	str	r2, [r3, #28]
      break;
 80048a0:	e023      	b.n	80048ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	68b9      	ldr	r1, [r7, #8]
 80048a8:	4618      	mov	r0, r3
 80048aa:	f000 fa21 	bl	8004cf0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	69da      	ldr	r2, [r3, #28]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	69da      	ldr	r2, [r3, #28]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	69d9      	ldr	r1, [r3, #28]
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	691b      	ldr	r3, [r3, #16]
 80048d8:	021a      	lsls	r2, r3, #8
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	430a      	orrs	r2, r1
 80048e0:	61da      	str	r2, [r3, #28]
      break;
 80048e2:	e002      	b.n	80048ea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	75fb      	strb	r3, [r7, #23]
      break;
 80048e8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80048f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3718      	adds	r7, #24
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}

080048fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b085      	sub	sp, #20
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	4a40      	ldr	r2, [pc, #256]	; (8004a10 <TIM_Base_SetConfig+0x114>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d013      	beq.n	800493c <TIM_Base_SetConfig+0x40>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800491a:	d00f      	beq.n	800493c <TIM_Base_SetConfig+0x40>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	4a3d      	ldr	r2, [pc, #244]	; (8004a14 <TIM_Base_SetConfig+0x118>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d00b      	beq.n	800493c <TIM_Base_SetConfig+0x40>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	4a3c      	ldr	r2, [pc, #240]	; (8004a18 <TIM_Base_SetConfig+0x11c>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d007      	beq.n	800493c <TIM_Base_SetConfig+0x40>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	4a3b      	ldr	r2, [pc, #236]	; (8004a1c <TIM_Base_SetConfig+0x120>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d003      	beq.n	800493c <TIM_Base_SetConfig+0x40>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	4a3a      	ldr	r2, [pc, #232]	; (8004a20 <TIM_Base_SetConfig+0x124>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d108      	bne.n	800494e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004942:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	68fa      	ldr	r2, [r7, #12]
 800494a:	4313      	orrs	r3, r2
 800494c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4a2f      	ldr	r2, [pc, #188]	; (8004a10 <TIM_Base_SetConfig+0x114>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d02b      	beq.n	80049ae <TIM_Base_SetConfig+0xb2>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800495c:	d027      	beq.n	80049ae <TIM_Base_SetConfig+0xb2>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	4a2c      	ldr	r2, [pc, #176]	; (8004a14 <TIM_Base_SetConfig+0x118>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d023      	beq.n	80049ae <TIM_Base_SetConfig+0xb2>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4a2b      	ldr	r2, [pc, #172]	; (8004a18 <TIM_Base_SetConfig+0x11c>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d01f      	beq.n	80049ae <TIM_Base_SetConfig+0xb2>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4a2a      	ldr	r2, [pc, #168]	; (8004a1c <TIM_Base_SetConfig+0x120>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d01b      	beq.n	80049ae <TIM_Base_SetConfig+0xb2>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4a29      	ldr	r2, [pc, #164]	; (8004a20 <TIM_Base_SetConfig+0x124>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d017      	beq.n	80049ae <TIM_Base_SetConfig+0xb2>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4a28      	ldr	r2, [pc, #160]	; (8004a24 <TIM_Base_SetConfig+0x128>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d013      	beq.n	80049ae <TIM_Base_SetConfig+0xb2>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	4a27      	ldr	r2, [pc, #156]	; (8004a28 <TIM_Base_SetConfig+0x12c>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d00f      	beq.n	80049ae <TIM_Base_SetConfig+0xb2>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4a26      	ldr	r2, [pc, #152]	; (8004a2c <TIM_Base_SetConfig+0x130>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d00b      	beq.n	80049ae <TIM_Base_SetConfig+0xb2>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4a25      	ldr	r2, [pc, #148]	; (8004a30 <TIM_Base_SetConfig+0x134>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d007      	beq.n	80049ae <TIM_Base_SetConfig+0xb2>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a24      	ldr	r2, [pc, #144]	; (8004a34 <TIM_Base_SetConfig+0x138>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d003      	beq.n	80049ae <TIM_Base_SetConfig+0xb2>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a23      	ldr	r2, [pc, #140]	; (8004a38 <TIM_Base_SetConfig+0x13c>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d108      	bne.n	80049c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	68fa      	ldr	r2, [r7, #12]
 80049bc:	4313      	orrs	r3, r2
 80049be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	695b      	ldr	r3, [r3, #20]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	68fa      	ldr	r2, [r7, #12]
 80049d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	689a      	ldr	r2, [r3, #8]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	4a0a      	ldr	r2, [pc, #40]	; (8004a10 <TIM_Base_SetConfig+0x114>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d003      	beq.n	80049f4 <TIM_Base_SetConfig+0xf8>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	4a0c      	ldr	r2, [pc, #48]	; (8004a20 <TIM_Base_SetConfig+0x124>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d103      	bne.n	80049fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	691a      	ldr	r2, [r3, #16]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	615a      	str	r2, [r3, #20]
}
 8004a02:	bf00      	nop
 8004a04:	3714      	adds	r7, #20
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr
 8004a0e:	bf00      	nop
 8004a10:	40010000 	.word	0x40010000
 8004a14:	40000400 	.word	0x40000400
 8004a18:	40000800 	.word	0x40000800
 8004a1c:	40000c00 	.word	0x40000c00
 8004a20:	40010400 	.word	0x40010400
 8004a24:	40014000 	.word	0x40014000
 8004a28:	40014400 	.word	0x40014400
 8004a2c:	40014800 	.word	0x40014800
 8004a30:	40001800 	.word	0x40001800
 8004a34:	40001c00 	.word	0x40001c00
 8004a38:	40002000 	.word	0x40002000

08004a3c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b087      	sub	sp, #28
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6a1b      	ldr	r3, [r3, #32]
 8004a4a:	f023 0201 	bic.w	r2, r3, #1
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a1b      	ldr	r3, [r3, #32]
 8004a56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	699b      	ldr	r3, [r3, #24]
 8004a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f023 0303 	bic.w	r3, r3, #3
 8004a72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	68fa      	ldr	r2, [r7, #12]
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	f023 0302 	bic.w	r3, r3, #2
 8004a84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	697a      	ldr	r2, [r7, #20]
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	4a20      	ldr	r2, [pc, #128]	; (8004b14 <TIM_OC1_SetConfig+0xd8>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d003      	beq.n	8004aa0 <TIM_OC1_SetConfig+0x64>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	4a1f      	ldr	r2, [pc, #124]	; (8004b18 <TIM_OC1_SetConfig+0xdc>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d10c      	bne.n	8004aba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	f023 0308 	bic.w	r3, r3, #8
 8004aa6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	697a      	ldr	r2, [r7, #20]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	f023 0304 	bic.w	r3, r3, #4
 8004ab8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4a15      	ldr	r2, [pc, #84]	; (8004b14 <TIM_OC1_SetConfig+0xd8>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d003      	beq.n	8004aca <TIM_OC1_SetConfig+0x8e>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	4a14      	ldr	r2, [pc, #80]	; (8004b18 <TIM_OC1_SetConfig+0xdc>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d111      	bne.n	8004aee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ad0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ad8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	695b      	ldr	r3, [r3, #20]
 8004ade:	693a      	ldr	r2, [r7, #16]
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	699b      	ldr	r3, [r3, #24]
 8004ae8:	693a      	ldr	r2, [r7, #16]
 8004aea:	4313      	orrs	r3, r2
 8004aec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	693a      	ldr	r2, [r7, #16]
 8004af2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	68fa      	ldr	r2, [r7, #12]
 8004af8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	685a      	ldr	r2, [r3, #4]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	697a      	ldr	r2, [r7, #20]
 8004b06:	621a      	str	r2, [r3, #32]
}
 8004b08:	bf00      	nop
 8004b0a:	371c      	adds	r7, #28
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr
 8004b14:	40010000 	.word	0x40010000
 8004b18:	40010400 	.word	0x40010400

08004b1c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b087      	sub	sp, #28
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6a1b      	ldr	r3, [r3, #32]
 8004b2a:	f023 0210 	bic.w	r2, r3, #16
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6a1b      	ldr	r3, [r3, #32]
 8004b36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	699b      	ldr	r3, [r3, #24]
 8004b42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	021b      	lsls	r3, r3, #8
 8004b5a:	68fa      	ldr	r2, [r7, #12]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	f023 0320 	bic.w	r3, r3, #32
 8004b66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	011b      	lsls	r3, r3, #4
 8004b6e:	697a      	ldr	r2, [r7, #20]
 8004b70:	4313      	orrs	r3, r2
 8004b72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	4a22      	ldr	r2, [pc, #136]	; (8004c00 <TIM_OC2_SetConfig+0xe4>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d003      	beq.n	8004b84 <TIM_OC2_SetConfig+0x68>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	4a21      	ldr	r2, [pc, #132]	; (8004c04 <TIM_OC2_SetConfig+0xe8>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d10d      	bne.n	8004ba0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	011b      	lsls	r3, r3, #4
 8004b92:	697a      	ldr	r2, [r7, #20]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b9e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	4a17      	ldr	r2, [pc, #92]	; (8004c00 <TIM_OC2_SetConfig+0xe4>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d003      	beq.n	8004bb0 <TIM_OC2_SetConfig+0x94>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4a16      	ldr	r2, [pc, #88]	; (8004c04 <TIM_OC2_SetConfig+0xe8>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d113      	bne.n	8004bd8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004bb6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004bbe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	695b      	ldr	r3, [r3, #20]
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	693a      	ldr	r2, [r7, #16]
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	699b      	ldr	r3, [r3, #24]
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	693a      	ldr	r2, [r7, #16]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	693a      	ldr	r2, [r7, #16]
 8004bdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	68fa      	ldr	r2, [r7, #12]
 8004be2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	685a      	ldr	r2, [r3, #4]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	697a      	ldr	r2, [r7, #20]
 8004bf0:	621a      	str	r2, [r3, #32]
}
 8004bf2:	bf00      	nop
 8004bf4:	371c      	adds	r7, #28
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr
 8004bfe:	bf00      	nop
 8004c00:	40010000 	.word	0x40010000
 8004c04:	40010400 	.word	0x40010400

08004c08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b087      	sub	sp, #28
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a1b      	ldr	r3, [r3, #32]
 8004c16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a1b      	ldr	r3, [r3, #32]
 8004c22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	69db      	ldr	r3, [r3, #28]
 8004c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f023 0303 	bic.w	r3, r3, #3
 8004c3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	68fa      	ldr	r2, [r7, #12]
 8004c46:	4313      	orrs	r3, r2
 8004c48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	021b      	lsls	r3, r3, #8
 8004c58:	697a      	ldr	r2, [r7, #20]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4a21      	ldr	r2, [pc, #132]	; (8004ce8 <TIM_OC3_SetConfig+0xe0>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d003      	beq.n	8004c6e <TIM_OC3_SetConfig+0x66>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4a20      	ldr	r2, [pc, #128]	; (8004cec <TIM_OC3_SetConfig+0xe4>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d10d      	bne.n	8004c8a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	68db      	ldr	r3, [r3, #12]
 8004c7a:	021b      	lsls	r3, r3, #8
 8004c7c:	697a      	ldr	r2, [r7, #20]
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4a16      	ldr	r2, [pc, #88]	; (8004ce8 <TIM_OC3_SetConfig+0xe0>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d003      	beq.n	8004c9a <TIM_OC3_SetConfig+0x92>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4a15      	ldr	r2, [pc, #84]	; (8004cec <TIM_OC3_SetConfig+0xe4>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d113      	bne.n	8004cc2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ca0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ca8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	695b      	ldr	r3, [r3, #20]
 8004cae:	011b      	lsls	r3, r3, #4
 8004cb0:	693a      	ldr	r2, [r7, #16]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	699b      	ldr	r3, [r3, #24]
 8004cba:	011b      	lsls	r3, r3, #4
 8004cbc:	693a      	ldr	r2, [r7, #16]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	693a      	ldr	r2, [r7, #16]
 8004cc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	68fa      	ldr	r2, [r7, #12]
 8004ccc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	685a      	ldr	r2, [r3, #4]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	697a      	ldr	r2, [r7, #20]
 8004cda:	621a      	str	r2, [r3, #32]
}
 8004cdc:	bf00      	nop
 8004cde:	371c      	adds	r7, #28
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr
 8004ce8:	40010000 	.word	0x40010000
 8004cec:	40010400 	.word	0x40010400

08004cf0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b087      	sub	sp, #28
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6a1b      	ldr	r3, [r3, #32]
 8004cfe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6a1b      	ldr	r3, [r3, #32]
 8004d0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	69db      	ldr	r3, [r3, #28]
 8004d16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	021b      	lsls	r3, r3, #8
 8004d2e:	68fa      	ldr	r2, [r7, #12]
 8004d30:	4313      	orrs	r3, r2
 8004d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	031b      	lsls	r3, r3, #12
 8004d42:	693a      	ldr	r2, [r7, #16]
 8004d44:	4313      	orrs	r3, r2
 8004d46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	4a12      	ldr	r2, [pc, #72]	; (8004d94 <TIM_OC4_SetConfig+0xa4>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d003      	beq.n	8004d58 <TIM_OC4_SetConfig+0x68>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	4a11      	ldr	r2, [pc, #68]	; (8004d98 <TIM_OC4_SetConfig+0xa8>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d109      	bne.n	8004d6c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d5e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	695b      	ldr	r3, [r3, #20]
 8004d64:	019b      	lsls	r3, r3, #6
 8004d66:	697a      	ldr	r2, [r7, #20]
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	697a      	ldr	r2, [r7, #20]
 8004d70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	68fa      	ldr	r2, [r7, #12]
 8004d76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	685a      	ldr	r2, [r3, #4]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	693a      	ldr	r2, [r7, #16]
 8004d84:	621a      	str	r2, [r3, #32]
}
 8004d86:	bf00      	nop
 8004d88:	371c      	adds	r7, #28
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr
 8004d92:	bf00      	nop
 8004d94:	40010000 	.word	0x40010000
 8004d98:	40010400 	.word	0x40010400

08004d9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b085      	sub	sp, #20
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d101      	bne.n	8004db4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004db0:	2302      	movs	r3, #2
 8004db2:	e05a      	b.n	8004e6a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2201      	movs	r2, #1
 8004db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2202      	movs	r2, #2
 8004dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dda:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	68fa      	ldr	r2, [r7, #12]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	68fa      	ldr	r2, [r7, #12]
 8004dec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a21      	ldr	r2, [pc, #132]	; (8004e78 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d022      	beq.n	8004e3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e00:	d01d      	beq.n	8004e3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a1d      	ldr	r2, [pc, #116]	; (8004e7c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d018      	beq.n	8004e3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a1b      	ldr	r2, [pc, #108]	; (8004e80 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d013      	beq.n	8004e3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a1a      	ldr	r2, [pc, #104]	; (8004e84 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d00e      	beq.n	8004e3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a18      	ldr	r2, [pc, #96]	; (8004e88 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d009      	beq.n	8004e3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a17      	ldr	r2, [pc, #92]	; (8004e8c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d004      	beq.n	8004e3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a15      	ldr	r2, [pc, #84]	; (8004e90 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d10c      	bne.n	8004e58 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	68ba      	ldr	r2, [r7, #8]
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	68ba      	ldr	r2, [r7, #8]
 8004e56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2200      	movs	r2, #0
 8004e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e68:	2300      	movs	r3, #0
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3714      	adds	r7, #20
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr
 8004e76:	bf00      	nop
 8004e78:	40010000 	.word	0x40010000
 8004e7c:	40000400 	.word	0x40000400
 8004e80:	40000800 	.word	0x40000800
 8004e84:	40000c00 	.word	0x40000c00
 8004e88:	40010400 	.word	0x40010400
 8004e8c:	40014000 	.word	0x40014000
 8004e90:	40001800 	.word	0x40001800

08004e94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b082      	sub	sp, #8
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d101      	bne.n	8004ea6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e03f      	b.n	8004f26 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d106      	bne.n	8004ec0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f7fc ff30 	bl	8001d20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2224      	movs	r2, #36	; 0x24
 8004ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	68da      	ldr	r2, [r3, #12]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ed6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f000 fd7b 	bl	80059d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	691a      	ldr	r2, [r3, #16]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004eec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	695a      	ldr	r2, [r3, #20]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004efc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	68da      	ldr	r2, [r3, #12]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2220      	movs	r2, #32
 8004f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2220      	movs	r2, #32
 8004f20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004f24:	2300      	movs	r3, #0
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3708      	adds	r7, #8
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}

08004f2e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f2e:	b580      	push	{r7, lr}
 8004f30:	b08a      	sub	sp, #40	; 0x28
 8004f32:	af02      	add	r7, sp, #8
 8004f34:	60f8      	str	r0, [r7, #12]
 8004f36:	60b9      	str	r1, [r7, #8]
 8004f38:	603b      	str	r3, [r7, #0]
 8004f3a:	4613      	mov	r3, r2
 8004f3c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	2b20      	cmp	r3, #32
 8004f4c:	d17c      	bne.n	8005048 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d002      	beq.n	8004f5a <HAL_UART_Transmit+0x2c>
 8004f54:	88fb      	ldrh	r3, [r7, #6]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d101      	bne.n	8004f5e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e075      	b.n	800504a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d101      	bne.n	8004f6c <HAL_UART_Transmit+0x3e>
 8004f68:	2302      	movs	r3, #2
 8004f6a:	e06e      	b.n	800504a <HAL_UART_Transmit+0x11c>
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2200      	movs	r2, #0
 8004f78:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2221      	movs	r2, #33	; 0x21
 8004f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f82:	f7fd f9ef 	bl	8002364 <HAL_GetTick>
 8004f86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	88fa      	ldrh	r2, [r7, #6]
 8004f8c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	88fa      	ldrh	r2, [r7, #6]
 8004f92:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f9c:	d108      	bne.n	8004fb0 <HAL_UART_Transmit+0x82>
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	691b      	ldr	r3, [r3, #16]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d104      	bne.n	8004fb0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	61bb      	str	r3, [r7, #24]
 8004fae:	e003      	b.n	8004fb8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004fc0:	e02a      	b.n	8005018 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	9300      	str	r3, [sp, #0]
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	2180      	movs	r1, #128	; 0x80
 8004fcc:	68f8      	ldr	r0, [r7, #12]
 8004fce:	f000 faf9 	bl	80055c4 <UART_WaitOnFlagUntilTimeout>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d001      	beq.n	8004fdc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004fd8:	2303      	movs	r3, #3
 8004fda:	e036      	b.n	800504a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004fdc:	69fb      	ldr	r3, [r7, #28]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d10b      	bne.n	8004ffa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004fe2:	69bb      	ldr	r3, [r7, #24]
 8004fe4:	881b      	ldrh	r3, [r3, #0]
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ff0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004ff2:	69bb      	ldr	r3, [r7, #24]
 8004ff4:	3302      	adds	r3, #2
 8004ff6:	61bb      	str	r3, [r7, #24]
 8004ff8:	e007      	b.n	800500a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	781a      	ldrb	r2, [r3, #0]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005004:	69fb      	ldr	r3, [r7, #28]
 8005006:	3301      	adds	r3, #1
 8005008:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800500e:	b29b      	uxth	r3, r3
 8005010:	3b01      	subs	r3, #1
 8005012:	b29a      	uxth	r2, r3
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800501c:	b29b      	uxth	r3, r3
 800501e:	2b00      	cmp	r3, #0
 8005020:	d1cf      	bne.n	8004fc2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	9300      	str	r3, [sp, #0]
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	2200      	movs	r2, #0
 800502a:	2140      	movs	r1, #64	; 0x40
 800502c:	68f8      	ldr	r0, [r7, #12]
 800502e:	f000 fac9 	bl	80055c4 <UART_WaitOnFlagUntilTimeout>
 8005032:	4603      	mov	r3, r0
 8005034:	2b00      	cmp	r3, #0
 8005036:	d001      	beq.n	800503c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005038:	2303      	movs	r3, #3
 800503a:	e006      	b.n	800504a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2220      	movs	r2, #32
 8005040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005044:	2300      	movs	r3, #0
 8005046:	e000      	b.n	800504a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005048:	2302      	movs	r3, #2
  }
}
 800504a:	4618      	mov	r0, r3
 800504c:	3720      	adds	r7, #32
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
	...

08005054 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b0ba      	sub	sp, #232	; 0xe8
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	695b      	ldr	r3, [r3, #20]
 8005076:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800507a:	2300      	movs	r3, #0
 800507c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005080:	2300      	movs	r3, #0
 8005082:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005086:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800508a:	f003 030f 	and.w	r3, r3, #15
 800508e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005092:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005096:	2b00      	cmp	r3, #0
 8005098:	d10f      	bne.n	80050ba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800509a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800509e:	f003 0320 	and.w	r3, r3, #32
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d009      	beq.n	80050ba <HAL_UART_IRQHandler+0x66>
 80050a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050aa:	f003 0320 	and.w	r3, r3, #32
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d003      	beq.n	80050ba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f000 fbd3 	bl	800585e <UART_Receive_IT>
      return;
 80050b8:	e256      	b.n	8005568 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80050ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80050be:	2b00      	cmp	r3, #0
 80050c0:	f000 80de 	beq.w	8005280 <HAL_UART_IRQHandler+0x22c>
 80050c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050c8:	f003 0301 	and.w	r3, r3, #1
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d106      	bne.n	80050de <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80050d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050d4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80050d8:	2b00      	cmp	r3, #0
 80050da:	f000 80d1 	beq.w	8005280 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80050de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050e2:	f003 0301 	and.w	r3, r3, #1
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d00b      	beq.n	8005102 <HAL_UART_IRQHandler+0xae>
 80050ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d005      	beq.n	8005102 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050fa:	f043 0201 	orr.w	r2, r3, #1
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005102:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005106:	f003 0304 	and.w	r3, r3, #4
 800510a:	2b00      	cmp	r3, #0
 800510c:	d00b      	beq.n	8005126 <HAL_UART_IRQHandler+0xd2>
 800510e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005112:	f003 0301 	and.w	r3, r3, #1
 8005116:	2b00      	cmp	r3, #0
 8005118:	d005      	beq.n	8005126 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511e:	f043 0202 	orr.w	r2, r3, #2
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005126:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800512a:	f003 0302 	and.w	r3, r3, #2
 800512e:	2b00      	cmp	r3, #0
 8005130:	d00b      	beq.n	800514a <HAL_UART_IRQHandler+0xf6>
 8005132:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005136:	f003 0301 	and.w	r3, r3, #1
 800513a:	2b00      	cmp	r3, #0
 800513c:	d005      	beq.n	800514a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005142:	f043 0204 	orr.w	r2, r3, #4
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800514a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800514e:	f003 0308 	and.w	r3, r3, #8
 8005152:	2b00      	cmp	r3, #0
 8005154:	d011      	beq.n	800517a <HAL_UART_IRQHandler+0x126>
 8005156:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800515a:	f003 0320 	and.w	r3, r3, #32
 800515e:	2b00      	cmp	r3, #0
 8005160:	d105      	bne.n	800516e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005162:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005166:	f003 0301 	and.w	r3, r3, #1
 800516a:	2b00      	cmp	r3, #0
 800516c:	d005      	beq.n	800517a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005172:	f043 0208 	orr.w	r2, r3, #8
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800517e:	2b00      	cmp	r3, #0
 8005180:	f000 81ed 	beq.w	800555e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005184:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005188:	f003 0320 	and.w	r3, r3, #32
 800518c:	2b00      	cmp	r3, #0
 800518e:	d008      	beq.n	80051a2 <HAL_UART_IRQHandler+0x14e>
 8005190:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005194:	f003 0320 	and.w	r3, r3, #32
 8005198:	2b00      	cmp	r3, #0
 800519a:	d002      	beq.n	80051a2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f000 fb5e 	bl	800585e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	695b      	ldr	r3, [r3, #20]
 80051a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ac:	2b40      	cmp	r3, #64	; 0x40
 80051ae:	bf0c      	ite	eq
 80051b0:	2301      	moveq	r3, #1
 80051b2:	2300      	movne	r3, #0
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051be:	f003 0308 	and.w	r3, r3, #8
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d103      	bne.n	80051ce <HAL_UART_IRQHandler+0x17a>
 80051c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d04f      	beq.n	800526e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f000 fa66 	bl	80056a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	695b      	ldr	r3, [r3, #20]
 80051da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051de:	2b40      	cmp	r3, #64	; 0x40
 80051e0:	d141      	bne.n	8005266 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	3314      	adds	r3, #20
 80051e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80051f0:	e853 3f00 	ldrex	r3, [r3]
 80051f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80051f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80051fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005200:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	3314      	adds	r3, #20
 800520a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800520e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005212:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005216:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800521a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800521e:	e841 2300 	strex	r3, r2, [r1]
 8005222:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005226:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800522a:	2b00      	cmp	r3, #0
 800522c:	d1d9      	bne.n	80051e2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005232:	2b00      	cmp	r3, #0
 8005234:	d013      	beq.n	800525e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800523a:	4a7d      	ldr	r2, [pc, #500]	; (8005430 <HAL_UART_IRQHandler+0x3dc>)
 800523c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005242:	4618      	mov	r0, r3
 8005244:	f7fd ff65 	bl	8003112 <HAL_DMA_Abort_IT>
 8005248:	4603      	mov	r3, r0
 800524a:	2b00      	cmp	r3, #0
 800524c:	d016      	beq.n	800527c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005252:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005258:	4610      	mov	r0, r2
 800525a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800525c:	e00e      	b.n	800527c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f000 f99a 	bl	8005598 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005264:	e00a      	b.n	800527c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f000 f996 	bl	8005598 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800526c:	e006      	b.n	800527c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f000 f992 	bl	8005598 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2200      	movs	r2, #0
 8005278:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800527a:	e170      	b.n	800555e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800527c:	bf00      	nop
    return;
 800527e:	e16e      	b.n	800555e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005284:	2b01      	cmp	r3, #1
 8005286:	f040 814a 	bne.w	800551e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800528a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800528e:	f003 0310 	and.w	r3, r3, #16
 8005292:	2b00      	cmp	r3, #0
 8005294:	f000 8143 	beq.w	800551e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005298:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800529c:	f003 0310 	and.w	r3, r3, #16
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	f000 813c 	beq.w	800551e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80052a6:	2300      	movs	r3, #0
 80052a8:	60bb      	str	r3, [r7, #8]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	60bb      	str	r3, [r7, #8]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	60bb      	str	r3, [r7, #8]
 80052ba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	695b      	ldr	r3, [r3, #20]
 80052c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052c6:	2b40      	cmp	r3, #64	; 0x40
 80052c8:	f040 80b4 	bne.w	8005434 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80052d8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80052dc:	2b00      	cmp	r3, #0
 80052de:	f000 8140 	beq.w	8005562 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80052e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80052ea:	429a      	cmp	r2, r3
 80052ec:	f080 8139 	bcs.w	8005562 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80052f6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052fc:	69db      	ldr	r3, [r3, #28]
 80052fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005302:	f000 8088 	beq.w	8005416 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	330c      	adds	r3, #12
 800530c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005310:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005314:	e853 3f00 	ldrex	r3, [r3]
 8005318:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800531c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005320:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005324:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	330c      	adds	r3, #12
 800532e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005332:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005336:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800533a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800533e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005342:	e841 2300 	strex	r3, r2, [r1]
 8005346:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800534a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800534e:	2b00      	cmp	r3, #0
 8005350:	d1d9      	bne.n	8005306 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	3314      	adds	r3, #20
 8005358:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800535a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800535c:	e853 3f00 	ldrex	r3, [r3]
 8005360:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005362:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005364:	f023 0301 	bic.w	r3, r3, #1
 8005368:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	3314      	adds	r3, #20
 8005372:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005376:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800537a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800537c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800537e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005382:	e841 2300 	strex	r3, r2, [r1]
 8005386:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005388:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800538a:	2b00      	cmp	r3, #0
 800538c:	d1e1      	bne.n	8005352 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	3314      	adds	r3, #20
 8005394:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005396:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005398:	e853 3f00 	ldrex	r3, [r3]
 800539c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800539e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	3314      	adds	r3, #20
 80053ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80053b2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80053b4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80053b8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80053ba:	e841 2300 	strex	r3, r2, [r1]
 80053be:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80053c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d1e3      	bne.n	800538e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2220      	movs	r2, #32
 80053ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2200      	movs	r2, #0
 80053d2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	330c      	adds	r3, #12
 80053da:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053de:	e853 3f00 	ldrex	r3, [r3]
 80053e2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80053e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053e6:	f023 0310 	bic.w	r3, r3, #16
 80053ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	330c      	adds	r3, #12
 80053f4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80053f8:	65ba      	str	r2, [r7, #88]	; 0x58
 80053fa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053fc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80053fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005400:	e841 2300 	strex	r3, r2, [r1]
 8005404:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005406:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005408:	2b00      	cmp	r3, #0
 800540a:	d1e3      	bne.n	80053d4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005410:	4618      	mov	r0, r3
 8005412:	f7fd fe0e 	bl	8003032 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800541e:	b29b      	uxth	r3, r3
 8005420:	1ad3      	subs	r3, r2, r3
 8005422:	b29b      	uxth	r3, r3
 8005424:	4619      	mov	r1, r3
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 f8c0 	bl	80055ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800542c:	e099      	b.n	8005562 <HAL_UART_IRQHandler+0x50e>
 800542e:	bf00      	nop
 8005430:	08005767 	.word	0x08005767
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800543c:	b29b      	uxth	r3, r3
 800543e:	1ad3      	subs	r3, r2, r3
 8005440:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005448:	b29b      	uxth	r3, r3
 800544a:	2b00      	cmp	r3, #0
 800544c:	f000 808b 	beq.w	8005566 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005450:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005454:	2b00      	cmp	r3, #0
 8005456:	f000 8086 	beq.w	8005566 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	330c      	adds	r3, #12
 8005460:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005464:	e853 3f00 	ldrex	r3, [r3]
 8005468:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800546a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800546c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005470:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	330c      	adds	r3, #12
 800547a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800547e:	647a      	str	r2, [r7, #68]	; 0x44
 8005480:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005482:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005484:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005486:	e841 2300 	strex	r3, r2, [r1]
 800548a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800548c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800548e:	2b00      	cmp	r3, #0
 8005490:	d1e3      	bne.n	800545a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	3314      	adds	r3, #20
 8005498:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800549a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800549c:	e853 3f00 	ldrex	r3, [r3]
 80054a0:	623b      	str	r3, [r7, #32]
   return(result);
 80054a2:	6a3b      	ldr	r3, [r7, #32]
 80054a4:	f023 0301 	bic.w	r3, r3, #1
 80054a8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	3314      	adds	r3, #20
 80054b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80054b6:	633a      	str	r2, [r7, #48]	; 0x30
 80054b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80054bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054be:	e841 2300 	strex	r3, r2, [r1]
 80054c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80054c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d1e3      	bne.n	8005492 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2220      	movs	r2, #32
 80054ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2200      	movs	r2, #0
 80054d6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	330c      	adds	r3, #12
 80054de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	e853 3f00 	ldrex	r3, [r3]
 80054e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f023 0310 	bic.w	r3, r3, #16
 80054ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	330c      	adds	r3, #12
 80054f8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80054fc:	61fa      	str	r2, [r7, #28]
 80054fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005500:	69b9      	ldr	r1, [r7, #24]
 8005502:	69fa      	ldr	r2, [r7, #28]
 8005504:	e841 2300 	strex	r3, r2, [r1]
 8005508:	617b      	str	r3, [r7, #20]
   return(result);
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d1e3      	bne.n	80054d8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005510:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005514:	4619      	mov	r1, r3
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f000 f848 	bl	80055ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800551c:	e023      	b.n	8005566 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800551e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005526:	2b00      	cmp	r3, #0
 8005528:	d009      	beq.n	800553e <HAL_UART_IRQHandler+0x4ea>
 800552a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800552e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005532:	2b00      	cmp	r3, #0
 8005534:	d003      	beq.n	800553e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f000 f929 	bl	800578e <UART_Transmit_IT>
    return;
 800553c:	e014      	b.n	8005568 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800553e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005546:	2b00      	cmp	r3, #0
 8005548:	d00e      	beq.n	8005568 <HAL_UART_IRQHandler+0x514>
 800554a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800554e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005552:	2b00      	cmp	r3, #0
 8005554:	d008      	beq.n	8005568 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f000 f969 	bl	800582e <UART_EndTransmit_IT>
    return;
 800555c:	e004      	b.n	8005568 <HAL_UART_IRQHandler+0x514>
    return;
 800555e:	bf00      	nop
 8005560:	e002      	b.n	8005568 <HAL_UART_IRQHandler+0x514>
      return;
 8005562:	bf00      	nop
 8005564:	e000      	b.n	8005568 <HAL_UART_IRQHandler+0x514>
      return;
 8005566:	bf00      	nop
  }
}
 8005568:	37e8      	adds	r7, #232	; 0xe8
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}
 800556e:	bf00      	nop

08005570 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005570:	b480      	push	{r7}
 8005572:	b083      	sub	sp, #12
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005578:	bf00      	nop
 800557a:	370c      	adds	r7, #12
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr

08005584 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005584:	b480      	push	{r7}
 8005586:	b083      	sub	sp, #12
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800558c:	bf00      	nop
 800558e:	370c      	adds	r7, #12
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr

08005598 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005598:	b480      	push	{r7}
 800559a:	b083      	sub	sp, #12
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80055a0:	bf00      	nop
 80055a2:	370c      	adds	r7, #12
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr

080055ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b083      	sub	sp, #12
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
 80055b4:	460b      	mov	r3, r1
 80055b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80055b8:	bf00      	nop
 80055ba:	370c      	adds	r7, #12
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr

080055c4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b090      	sub	sp, #64	; 0x40
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	60f8      	str	r0, [r7, #12]
 80055cc:	60b9      	str	r1, [r7, #8]
 80055ce:	603b      	str	r3, [r7, #0]
 80055d0:	4613      	mov	r3, r2
 80055d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055d4:	e050      	b.n	8005678 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055dc:	d04c      	beq.n	8005678 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80055de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d007      	beq.n	80055f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80055e4:	f7fc febe 	bl	8002364 <HAL_GetTick>
 80055e8:	4602      	mov	r2, r0
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	1ad3      	subs	r3, r2, r3
 80055ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d241      	bcs.n	8005678 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	330c      	adds	r3, #12
 80055fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055fe:	e853 3f00 	ldrex	r3, [r3]
 8005602:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005606:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800560a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	330c      	adds	r3, #12
 8005612:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005614:	637a      	str	r2, [r7, #52]	; 0x34
 8005616:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005618:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800561a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800561c:	e841 2300 	strex	r3, r2, [r1]
 8005620:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005624:	2b00      	cmp	r3, #0
 8005626:	d1e5      	bne.n	80055f4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	3314      	adds	r3, #20
 800562e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	e853 3f00 	ldrex	r3, [r3]
 8005636:	613b      	str	r3, [r7, #16]
   return(result);
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	f023 0301 	bic.w	r3, r3, #1
 800563e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	3314      	adds	r3, #20
 8005646:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005648:	623a      	str	r2, [r7, #32]
 800564a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800564c:	69f9      	ldr	r1, [r7, #28]
 800564e:	6a3a      	ldr	r2, [r7, #32]
 8005650:	e841 2300 	strex	r3, r2, [r1]
 8005654:	61bb      	str	r3, [r7, #24]
   return(result);
 8005656:	69bb      	ldr	r3, [r7, #24]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d1e5      	bne.n	8005628 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2220      	movs	r2, #32
 8005660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2220      	movs	r2, #32
 8005668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2200      	movs	r2, #0
 8005670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005674:	2303      	movs	r3, #3
 8005676:	e00f      	b.n	8005698 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	4013      	ands	r3, r2
 8005682:	68ba      	ldr	r2, [r7, #8]
 8005684:	429a      	cmp	r2, r3
 8005686:	bf0c      	ite	eq
 8005688:	2301      	moveq	r3, #1
 800568a:	2300      	movne	r3, #0
 800568c:	b2db      	uxtb	r3, r3
 800568e:	461a      	mov	r2, r3
 8005690:	79fb      	ldrb	r3, [r7, #7]
 8005692:	429a      	cmp	r2, r3
 8005694:	d09f      	beq.n	80055d6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005696:	2300      	movs	r3, #0
}
 8005698:	4618      	mov	r0, r3
 800569a:	3740      	adds	r7, #64	; 0x40
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}

080056a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b095      	sub	sp, #84	; 0x54
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	330c      	adds	r3, #12
 80056ae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056b2:	e853 3f00 	ldrex	r3, [r3]
 80056b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80056b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80056be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	330c      	adds	r3, #12
 80056c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80056c8:	643a      	str	r2, [r7, #64]	; 0x40
 80056ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80056ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80056d0:	e841 2300 	strex	r3, r2, [r1]
 80056d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80056d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d1e5      	bne.n	80056a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	3314      	adds	r3, #20
 80056e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e4:	6a3b      	ldr	r3, [r7, #32]
 80056e6:	e853 3f00 	ldrex	r3, [r3]
 80056ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80056ec:	69fb      	ldr	r3, [r7, #28]
 80056ee:	f023 0301 	bic.w	r3, r3, #1
 80056f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	3314      	adds	r3, #20
 80056fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80056fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80056fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005700:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005702:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005704:	e841 2300 	strex	r3, r2, [r1]
 8005708:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800570a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570c:	2b00      	cmp	r3, #0
 800570e:	d1e5      	bne.n	80056dc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005714:	2b01      	cmp	r3, #1
 8005716:	d119      	bne.n	800574c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	330c      	adds	r3, #12
 800571e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	e853 3f00 	ldrex	r3, [r3]
 8005726:	60bb      	str	r3, [r7, #8]
   return(result);
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	f023 0310 	bic.w	r3, r3, #16
 800572e:	647b      	str	r3, [r7, #68]	; 0x44
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	330c      	adds	r3, #12
 8005736:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005738:	61ba      	str	r2, [r7, #24]
 800573a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800573c:	6979      	ldr	r1, [r7, #20]
 800573e:	69ba      	ldr	r2, [r7, #24]
 8005740:	e841 2300 	strex	r3, r2, [r1]
 8005744:	613b      	str	r3, [r7, #16]
   return(result);
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d1e5      	bne.n	8005718 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2220      	movs	r2, #32
 8005750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2200      	movs	r2, #0
 8005758:	631a      	str	r2, [r3, #48]	; 0x30
}
 800575a:	bf00      	nop
 800575c:	3754      	adds	r7, #84	; 0x54
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr

08005766 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005766:	b580      	push	{r7, lr}
 8005768:	b084      	sub	sp, #16
 800576a:	af00      	add	r7, sp, #0
 800576c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005772:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2200      	movs	r2, #0
 8005778:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2200      	movs	r2, #0
 800577e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005780:	68f8      	ldr	r0, [r7, #12]
 8005782:	f7ff ff09 	bl	8005598 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005786:	bf00      	nop
 8005788:	3710      	adds	r7, #16
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}

0800578e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800578e:	b480      	push	{r7}
 8005790:	b085      	sub	sp, #20
 8005792:	af00      	add	r7, sp, #0
 8005794:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800579c:	b2db      	uxtb	r3, r3
 800579e:	2b21      	cmp	r3, #33	; 0x21
 80057a0:	d13e      	bne.n	8005820 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057aa:	d114      	bne.n	80057d6 <UART_Transmit_IT+0x48>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	691b      	ldr	r3, [r3, #16]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d110      	bne.n	80057d6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6a1b      	ldr	r3, [r3, #32]
 80057b8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	881b      	ldrh	r3, [r3, #0]
 80057be:	461a      	mov	r2, r3
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80057c8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6a1b      	ldr	r3, [r3, #32]
 80057ce:	1c9a      	adds	r2, r3, #2
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	621a      	str	r2, [r3, #32]
 80057d4:	e008      	b.n	80057e8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6a1b      	ldr	r3, [r3, #32]
 80057da:	1c59      	adds	r1, r3, #1
 80057dc:	687a      	ldr	r2, [r7, #4]
 80057de:	6211      	str	r1, [r2, #32]
 80057e0:	781a      	ldrb	r2, [r3, #0]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	3b01      	subs	r3, #1
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	687a      	ldr	r2, [r7, #4]
 80057f4:	4619      	mov	r1, r3
 80057f6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d10f      	bne.n	800581c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	68da      	ldr	r2, [r3, #12]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800580a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	68da      	ldr	r2, [r3, #12]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800581a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800581c:	2300      	movs	r3, #0
 800581e:	e000      	b.n	8005822 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005820:	2302      	movs	r3, #2
  }
}
 8005822:	4618      	mov	r0, r3
 8005824:	3714      	adds	r7, #20
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr

0800582e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800582e:	b580      	push	{r7, lr}
 8005830:	b082      	sub	sp, #8
 8005832:	af00      	add	r7, sp, #0
 8005834:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	68da      	ldr	r2, [r3, #12]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005844:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2220      	movs	r2, #32
 800584a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f7ff fe8e 	bl	8005570 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005854:	2300      	movs	r3, #0
}
 8005856:	4618      	mov	r0, r3
 8005858:	3708      	adds	r7, #8
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}

0800585e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800585e:	b580      	push	{r7, lr}
 8005860:	b08c      	sub	sp, #48	; 0x30
 8005862:	af00      	add	r7, sp, #0
 8005864:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800586c:	b2db      	uxtb	r3, r3
 800586e:	2b22      	cmp	r3, #34	; 0x22
 8005870:	f040 80ab 	bne.w	80059ca <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800587c:	d117      	bne.n	80058ae <UART_Receive_IT+0x50>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	691b      	ldr	r3, [r3, #16]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d113      	bne.n	80058ae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005886:	2300      	movs	r3, #0
 8005888:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800588e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	b29b      	uxth	r3, r3
 8005898:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800589c:	b29a      	uxth	r2, r3
 800589e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058a0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058a6:	1c9a      	adds	r2, r3, #2
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	629a      	str	r2, [r3, #40]	; 0x28
 80058ac:	e026      	b.n	80058fc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80058b4:	2300      	movs	r3, #0
 80058b6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058c0:	d007      	beq.n	80058d2 <UART_Receive_IT+0x74>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d10a      	bne.n	80058e0 <UART_Receive_IT+0x82>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	691b      	ldr	r3, [r3, #16]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d106      	bne.n	80058e0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	b2da      	uxtb	r2, r3
 80058da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058dc:	701a      	strb	r2, [r3, #0]
 80058de:	e008      	b.n	80058f2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	b2db      	uxtb	r3, r3
 80058e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058ec:	b2da      	uxtb	r2, r3
 80058ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058f0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058f6:	1c5a      	adds	r2, r3, #1
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005900:	b29b      	uxth	r3, r3
 8005902:	3b01      	subs	r3, #1
 8005904:	b29b      	uxth	r3, r3
 8005906:	687a      	ldr	r2, [r7, #4]
 8005908:	4619      	mov	r1, r3
 800590a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800590c:	2b00      	cmp	r3, #0
 800590e:	d15a      	bne.n	80059c6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	68da      	ldr	r2, [r3, #12]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f022 0220 	bic.w	r2, r2, #32
 800591e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	68da      	ldr	r2, [r3, #12]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800592e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	695a      	ldr	r2, [r3, #20]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f022 0201 	bic.w	r2, r2, #1
 800593e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2220      	movs	r2, #32
 8005944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800594c:	2b01      	cmp	r3, #1
 800594e:	d135      	bne.n	80059bc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2200      	movs	r2, #0
 8005954:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	330c      	adds	r3, #12
 800595c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	e853 3f00 	ldrex	r3, [r3]
 8005964:	613b      	str	r3, [r7, #16]
   return(result);
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	f023 0310 	bic.w	r3, r3, #16
 800596c:	627b      	str	r3, [r7, #36]	; 0x24
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	330c      	adds	r3, #12
 8005974:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005976:	623a      	str	r2, [r7, #32]
 8005978:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800597a:	69f9      	ldr	r1, [r7, #28]
 800597c:	6a3a      	ldr	r2, [r7, #32]
 800597e:	e841 2300 	strex	r3, r2, [r1]
 8005982:	61bb      	str	r3, [r7, #24]
   return(result);
 8005984:	69bb      	ldr	r3, [r7, #24]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d1e5      	bne.n	8005956 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f003 0310 	and.w	r3, r3, #16
 8005994:	2b10      	cmp	r3, #16
 8005996:	d10a      	bne.n	80059ae <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005998:	2300      	movs	r3, #0
 800599a:	60fb      	str	r3, [r7, #12]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	60fb      	str	r3, [r7, #12]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	60fb      	str	r3, [r7, #12]
 80059ac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80059b2:	4619      	mov	r1, r3
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f7ff fdf9 	bl	80055ac <HAL_UARTEx_RxEventCallback>
 80059ba:	e002      	b.n	80059c2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f7ff fde1 	bl	8005584 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80059c2:	2300      	movs	r3, #0
 80059c4:	e002      	b.n	80059cc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80059c6:	2300      	movs	r3, #0
 80059c8:	e000      	b.n	80059cc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80059ca:	2302      	movs	r3, #2
  }
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3730      	adds	r7, #48	; 0x30
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}

080059d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059d8:	b09f      	sub	sp, #124	; 0x7c
 80059da:	af00      	add	r7, sp, #0
 80059dc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	691b      	ldr	r3, [r3, #16]
 80059e4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80059e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059ea:	68d9      	ldr	r1, [r3, #12]
 80059ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	ea40 0301 	orr.w	r3, r0, r1
 80059f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80059f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059f8:	689a      	ldr	r2, [r3, #8]
 80059fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059fc:	691b      	ldr	r3, [r3, #16]
 80059fe:	431a      	orrs	r2, r3
 8005a00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a02:	695b      	ldr	r3, [r3, #20]
 8005a04:	431a      	orrs	r2, r3
 8005a06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a08:	69db      	ldr	r3, [r3, #28]
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005a0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005a18:	f021 010c 	bic.w	r1, r1, #12
 8005a1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a22:	430b      	orrs	r3, r1
 8005a24:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	695b      	ldr	r3, [r3, #20]
 8005a2c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005a30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a32:	6999      	ldr	r1, [r3, #24]
 8005a34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	ea40 0301 	orr.w	r3, r0, r1
 8005a3c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005a3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	4bc5      	ldr	r3, [pc, #788]	; (8005d58 <UART_SetConfig+0x384>)
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d004      	beq.n	8005a52 <UART_SetConfig+0x7e>
 8005a48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	4bc3      	ldr	r3, [pc, #780]	; (8005d5c <UART_SetConfig+0x388>)
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d103      	bne.n	8005a5a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005a52:	f7fe fda5 	bl	80045a0 <HAL_RCC_GetPCLK2Freq>
 8005a56:	6778      	str	r0, [r7, #116]	; 0x74
 8005a58:	e002      	b.n	8005a60 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005a5a:	f7fe fd8d 	bl	8004578 <HAL_RCC_GetPCLK1Freq>
 8005a5e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a62:	69db      	ldr	r3, [r3, #28]
 8005a64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a68:	f040 80b6 	bne.w	8005bd8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005a6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a6e:	461c      	mov	r4, r3
 8005a70:	f04f 0500 	mov.w	r5, #0
 8005a74:	4622      	mov	r2, r4
 8005a76:	462b      	mov	r3, r5
 8005a78:	1891      	adds	r1, r2, r2
 8005a7a:	6439      	str	r1, [r7, #64]	; 0x40
 8005a7c:	415b      	adcs	r3, r3
 8005a7e:	647b      	str	r3, [r7, #68]	; 0x44
 8005a80:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005a84:	1912      	adds	r2, r2, r4
 8005a86:	eb45 0303 	adc.w	r3, r5, r3
 8005a8a:	f04f 0000 	mov.w	r0, #0
 8005a8e:	f04f 0100 	mov.w	r1, #0
 8005a92:	00d9      	lsls	r1, r3, #3
 8005a94:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005a98:	00d0      	lsls	r0, r2, #3
 8005a9a:	4602      	mov	r2, r0
 8005a9c:	460b      	mov	r3, r1
 8005a9e:	1911      	adds	r1, r2, r4
 8005aa0:	6639      	str	r1, [r7, #96]	; 0x60
 8005aa2:	416b      	adcs	r3, r5
 8005aa4:	667b      	str	r3, [r7, #100]	; 0x64
 8005aa6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	461a      	mov	r2, r3
 8005aac:	f04f 0300 	mov.w	r3, #0
 8005ab0:	1891      	adds	r1, r2, r2
 8005ab2:	63b9      	str	r1, [r7, #56]	; 0x38
 8005ab4:	415b      	adcs	r3, r3
 8005ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ab8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005abc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005ac0:	f7fa fb94 	bl	80001ec <__aeabi_uldivmod>
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	460b      	mov	r3, r1
 8005ac8:	4ba5      	ldr	r3, [pc, #660]	; (8005d60 <UART_SetConfig+0x38c>)
 8005aca:	fba3 2302 	umull	r2, r3, r3, r2
 8005ace:	095b      	lsrs	r3, r3, #5
 8005ad0:	011e      	lsls	r6, r3, #4
 8005ad2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ad4:	461c      	mov	r4, r3
 8005ad6:	f04f 0500 	mov.w	r5, #0
 8005ada:	4622      	mov	r2, r4
 8005adc:	462b      	mov	r3, r5
 8005ade:	1891      	adds	r1, r2, r2
 8005ae0:	6339      	str	r1, [r7, #48]	; 0x30
 8005ae2:	415b      	adcs	r3, r3
 8005ae4:	637b      	str	r3, [r7, #52]	; 0x34
 8005ae6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005aea:	1912      	adds	r2, r2, r4
 8005aec:	eb45 0303 	adc.w	r3, r5, r3
 8005af0:	f04f 0000 	mov.w	r0, #0
 8005af4:	f04f 0100 	mov.w	r1, #0
 8005af8:	00d9      	lsls	r1, r3, #3
 8005afa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005afe:	00d0      	lsls	r0, r2, #3
 8005b00:	4602      	mov	r2, r0
 8005b02:	460b      	mov	r3, r1
 8005b04:	1911      	adds	r1, r2, r4
 8005b06:	65b9      	str	r1, [r7, #88]	; 0x58
 8005b08:	416b      	adcs	r3, r5
 8005b0a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	461a      	mov	r2, r3
 8005b12:	f04f 0300 	mov.w	r3, #0
 8005b16:	1891      	adds	r1, r2, r2
 8005b18:	62b9      	str	r1, [r7, #40]	; 0x28
 8005b1a:	415b      	adcs	r3, r3
 8005b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b1e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005b22:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005b26:	f7fa fb61 	bl	80001ec <__aeabi_uldivmod>
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	460b      	mov	r3, r1
 8005b2e:	4b8c      	ldr	r3, [pc, #560]	; (8005d60 <UART_SetConfig+0x38c>)
 8005b30:	fba3 1302 	umull	r1, r3, r3, r2
 8005b34:	095b      	lsrs	r3, r3, #5
 8005b36:	2164      	movs	r1, #100	; 0x64
 8005b38:	fb01 f303 	mul.w	r3, r1, r3
 8005b3c:	1ad3      	subs	r3, r2, r3
 8005b3e:	00db      	lsls	r3, r3, #3
 8005b40:	3332      	adds	r3, #50	; 0x32
 8005b42:	4a87      	ldr	r2, [pc, #540]	; (8005d60 <UART_SetConfig+0x38c>)
 8005b44:	fba2 2303 	umull	r2, r3, r2, r3
 8005b48:	095b      	lsrs	r3, r3, #5
 8005b4a:	005b      	lsls	r3, r3, #1
 8005b4c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005b50:	441e      	add	r6, r3
 8005b52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b54:	4618      	mov	r0, r3
 8005b56:	f04f 0100 	mov.w	r1, #0
 8005b5a:	4602      	mov	r2, r0
 8005b5c:	460b      	mov	r3, r1
 8005b5e:	1894      	adds	r4, r2, r2
 8005b60:	623c      	str	r4, [r7, #32]
 8005b62:	415b      	adcs	r3, r3
 8005b64:	627b      	str	r3, [r7, #36]	; 0x24
 8005b66:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005b6a:	1812      	adds	r2, r2, r0
 8005b6c:	eb41 0303 	adc.w	r3, r1, r3
 8005b70:	f04f 0400 	mov.w	r4, #0
 8005b74:	f04f 0500 	mov.w	r5, #0
 8005b78:	00dd      	lsls	r5, r3, #3
 8005b7a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005b7e:	00d4      	lsls	r4, r2, #3
 8005b80:	4622      	mov	r2, r4
 8005b82:	462b      	mov	r3, r5
 8005b84:	1814      	adds	r4, r2, r0
 8005b86:	653c      	str	r4, [r7, #80]	; 0x50
 8005b88:	414b      	adcs	r3, r1
 8005b8a:	657b      	str	r3, [r7, #84]	; 0x54
 8005b8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	461a      	mov	r2, r3
 8005b92:	f04f 0300 	mov.w	r3, #0
 8005b96:	1891      	adds	r1, r2, r2
 8005b98:	61b9      	str	r1, [r7, #24]
 8005b9a:	415b      	adcs	r3, r3
 8005b9c:	61fb      	str	r3, [r7, #28]
 8005b9e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ba2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005ba6:	f7fa fb21 	bl	80001ec <__aeabi_uldivmod>
 8005baa:	4602      	mov	r2, r0
 8005bac:	460b      	mov	r3, r1
 8005bae:	4b6c      	ldr	r3, [pc, #432]	; (8005d60 <UART_SetConfig+0x38c>)
 8005bb0:	fba3 1302 	umull	r1, r3, r3, r2
 8005bb4:	095b      	lsrs	r3, r3, #5
 8005bb6:	2164      	movs	r1, #100	; 0x64
 8005bb8:	fb01 f303 	mul.w	r3, r1, r3
 8005bbc:	1ad3      	subs	r3, r2, r3
 8005bbe:	00db      	lsls	r3, r3, #3
 8005bc0:	3332      	adds	r3, #50	; 0x32
 8005bc2:	4a67      	ldr	r2, [pc, #412]	; (8005d60 <UART_SetConfig+0x38c>)
 8005bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8005bc8:	095b      	lsrs	r3, r3, #5
 8005bca:	f003 0207 	and.w	r2, r3, #7
 8005bce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4432      	add	r2, r6
 8005bd4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005bd6:	e0b9      	b.n	8005d4c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005bd8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bda:	461c      	mov	r4, r3
 8005bdc:	f04f 0500 	mov.w	r5, #0
 8005be0:	4622      	mov	r2, r4
 8005be2:	462b      	mov	r3, r5
 8005be4:	1891      	adds	r1, r2, r2
 8005be6:	6139      	str	r1, [r7, #16]
 8005be8:	415b      	adcs	r3, r3
 8005bea:	617b      	str	r3, [r7, #20]
 8005bec:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005bf0:	1912      	adds	r2, r2, r4
 8005bf2:	eb45 0303 	adc.w	r3, r5, r3
 8005bf6:	f04f 0000 	mov.w	r0, #0
 8005bfa:	f04f 0100 	mov.w	r1, #0
 8005bfe:	00d9      	lsls	r1, r3, #3
 8005c00:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005c04:	00d0      	lsls	r0, r2, #3
 8005c06:	4602      	mov	r2, r0
 8005c08:	460b      	mov	r3, r1
 8005c0a:	eb12 0804 	adds.w	r8, r2, r4
 8005c0e:	eb43 0905 	adc.w	r9, r3, r5
 8005c12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	4618      	mov	r0, r3
 8005c18:	f04f 0100 	mov.w	r1, #0
 8005c1c:	f04f 0200 	mov.w	r2, #0
 8005c20:	f04f 0300 	mov.w	r3, #0
 8005c24:	008b      	lsls	r3, r1, #2
 8005c26:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005c2a:	0082      	lsls	r2, r0, #2
 8005c2c:	4640      	mov	r0, r8
 8005c2e:	4649      	mov	r1, r9
 8005c30:	f7fa fadc 	bl	80001ec <__aeabi_uldivmod>
 8005c34:	4602      	mov	r2, r0
 8005c36:	460b      	mov	r3, r1
 8005c38:	4b49      	ldr	r3, [pc, #292]	; (8005d60 <UART_SetConfig+0x38c>)
 8005c3a:	fba3 2302 	umull	r2, r3, r3, r2
 8005c3e:	095b      	lsrs	r3, r3, #5
 8005c40:	011e      	lsls	r6, r3, #4
 8005c42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c44:	4618      	mov	r0, r3
 8005c46:	f04f 0100 	mov.w	r1, #0
 8005c4a:	4602      	mov	r2, r0
 8005c4c:	460b      	mov	r3, r1
 8005c4e:	1894      	adds	r4, r2, r2
 8005c50:	60bc      	str	r4, [r7, #8]
 8005c52:	415b      	adcs	r3, r3
 8005c54:	60fb      	str	r3, [r7, #12]
 8005c56:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005c5a:	1812      	adds	r2, r2, r0
 8005c5c:	eb41 0303 	adc.w	r3, r1, r3
 8005c60:	f04f 0400 	mov.w	r4, #0
 8005c64:	f04f 0500 	mov.w	r5, #0
 8005c68:	00dd      	lsls	r5, r3, #3
 8005c6a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005c6e:	00d4      	lsls	r4, r2, #3
 8005c70:	4622      	mov	r2, r4
 8005c72:	462b      	mov	r3, r5
 8005c74:	1814      	adds	r4, r2, r0
 8005c76:	64bc      	str	r4, [r7, #72]	; 0x48
 8005c78:	414b      	adcs	r3, r1
 8005c7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	4618      	mov	r0, r3
 8005c82:	f04f 0100 	mov.w	r1, #0
 8005c86:	f04f 0200 	mov.w	r2, #0
 8005c8a:	f04f 0300 	mov.w	r3, #0
 8005c8e:	008b      	lsls	r3, r1, #2
 8005c90:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005c94:	0082      	lsls	r2, r0, #2
 8005c96:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005c9a:	f7fa faa7 	bl	80001ec <__aeabi_uldivmod>
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	460b      	mov	r3, r1
 8005ca2:	4b2f      	ldr	r3, [pc, #188]	; (8005d60 <UART_SetConfig+0x38c>)
 8005ca4:	fba3 1302 	umull	r1, r3, r3, r2
 8005ca8:	095b      	lsrs	r3, r3, #5
 8005caa:	2164      	movs	r1, #100	; 0x64
 8005cac:	fb01 f303 	mul.w	r3, r1, r3
 8005cb0:	1ad3      	subs	r3, r2, r3
 8005cb2:	011b      	lsls	r3, r3, #4
 8005cb4:	3332      	adds	r3, #50	; 0x32
 8005cb6:	4a2a      	ldr	r2, [pc, #168]	; (8005d60 <UART_SetConfig+0x38c>)
 8005cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8005cbc:	095b      	lsrs	r3, r3, #5
 8005cbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005cc2:	441e      	add	r6, r3
 8005cc4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f04f 0100 	mov.w	r1, #0
 8005ccc:	4602      	mov	r2, r0
 8005cce:	460b      	mov	r3, r1
 8005cd0:	1894      	adds	r4, r2, r2
 8005cd2:	603c      	str	r4, [r7, #0]
 8005cd4:	415b      	adcs	r3, r3
 8005cd6:	607b      	str	r3, [r7, #4]
 8005cd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005cdc:	1812      	adds	r2, r2, r0
 8005cde:	eb41 0303 	adc.w	r3, r1, r3
 8005ce2:	f04f 0400 	mov.w	r4, #0
 8005ce6:	f04f 0500 	mov.w	r5, #0
 8005cea:	00dd      	lsls	r5, r3, #3
 8005cec:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005cf0:	00d4      	lsls	r4, r2, #3
 8005cf2:	4622      	mov	r2, r4
 8005cf4:	462b      	mov	r3, r5
 8005cf6:	eb12 0a00 	adds.w	sl, r2, r0
 8005cfa:	eb43 0b01 	adc.w	fp, r3, r1
 8005cfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	4618      	mov	r0, r3
 8005d04:	f04f 0100 	mov.w	r1, #0
 8005d08:	f04f 0200 	mov.w	r2, #0
 8005d0c:	f04f 0300 	mov.w	r3, #0
 8005d10:	008b      	lsls	r3, r1, #2
 8005d12:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005d16:	0082      	lsls	r2, r0, #2
 8005d18:	4650      	mov	r0, sl
 8005d1a:	4659      	mov	r1, fp
 8005d1c:	f7fa fa66 	bl	80001ec <__aeabi_uldivmod>
 8005d20:	4602      	mov	r2, r0
 8005d22:	460b      	mov	r3, r1
 8005d24:	4b0e      	ldr	r3, [pc, #56]	; (8005d60 <UART_SetConfig+0x38c>)
 8005d26:	fba3 1302 	umull	r1, r3, r3, r2
 8005d2a:	095b      	lsrs	r3, r3, #5
 8005d2c:	2164      	movs	r1, #100	; 0x64
 8005d2e:	fb01 f303 	mul.w	r3, r1, r3
 8005d32:	1ad3      	subs	r3, r2, r3
 8005d34:	011b      	lsls	r3, r3, #4
 8005d36:	3332      	adds	r3, #50	; 0x32
 8005d38:	4a09      	ldr	r2, [pc, #36]	; (8005d60 <UART_SetConfig+0x38c>)
 8005d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d3e:	095b      	lsrs	r3, r3, #5
 8005d40:	f003 020f 	and.w	r2, r3, #15
 8005d44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4432      	add	r2, r6
 8005d4a:	609a      	str	r2, [r3, #8]
}
 8005d4c:	bf00      	nop
 8005d4e:	377c      	adds	r7, #124	; 0x7c
 8005d50:	46bd      	mov	sp, r7
 8005d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d56:	bf00      	nop
 8005d58:	40011000 	.word	0x40011000
 8005d5c:	40011400 	.word	0x40011400
 8005d60:	51eb851f 	.word	0x51eb851f

08005d64 <__libc_init_array>:
 8005d64:	b570      	push	{r4, r5, r6, lr}
 8005d66:	4d0d      	ldr	r5, [pc, #52]	; (8005d9c <__libc_init_array+0x38>)
 8005d68:	4c0d      	ldr	r4, [pc, #52]	; (8005da0 <__libc_init_array+0x3c>)
 8005d6a:	1b64      	subs	r4, r4, r5
 8005d6c:	10a4      	asrs	r4, r4, #2
 8005d6e:	2600      	movs	r6, #0
 8005d70:	42a6      	cmp	r6, r4
 8005d72:	d109      	bne.n	8005d88 <__libc_init_array+0x24>
 8005d74:	4d0b      	ldr	r5, [pc, #44]	; (8005da4 <__libc_init_array+0x40>)
 8005d76:	4c0c      	ldr	r4, [pc, #48]	; (8005da8 <__libc_init_array+0x44>)
 8005d78:	f000 f820 	bl	8005dbc <_init>
 8005d7c:	1b64      	subs	r4, r4, r5
 8005d7e:	10a4      	asrs	r4, r4, #2
 8005d80:	2600      	movs	r6, #0
 8005d82:	42a6      	cmp	r6, r4
 8005d84:	d105      	bne.n	8005d92 <__libc_init_array+0x2e>
 8005d86:	bd70      	pop	{r4, r5, r6, pc}
 8005d88:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d8c:	4798      	blx	r3
 8005d8e:	3601      	adds	r6, #1
 8005d90:	e7ee      	b.n	8005d70 <__libc_init_array+0xc>
 8005d92:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d96:	4798      	blx	r3
 8005d98:	3601      	adds	r6, #1
 8005d9a:	e7f2      	b.n	8005d82 <__libc_init_array+0x1e>
 8005d9c:	08005dfc 	.word	0x08005dfc
 8005da0:	08005dfc 	.word	0x08005dfc
 8005da4:	08005dfc 	.word	0x08005dfc
 8005da8:	08005e00 	.word	0x08005e00

08005dac <memset>:
 8005dac:	4402      	add	r2, r0
 8005dae:	4603      	mov	r3, r0
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d100      	bne.n	8005db6 <memset+0xa>
 8005db4:	4770      	bx	lr
 8005db6:	f803 1b01 	strb.w	r1, [r3], #1
 8005dba:	e7f9      	b.n	8005db0 <memset+0x4>

08005dbc <_init>:
 8005dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dbe:	bf00      	nop
 8005dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dc2:	bc08      	pop	{r3}
 8005dc4:	469e      	mov	lr, r3
 8005dc6:	4770      	bx	lr

08005dc8 <_fini>:
 8005dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dca:	bf00      	nop
 8005dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dce:	bc08      	pop	{r3}
 8005dd0:	469e      	mov	lr, r3
 8005dd2:	4770      	bx	lr
