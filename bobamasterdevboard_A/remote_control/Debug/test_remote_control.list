
test_remote_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a98  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08004c44  08004c44  00014c44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c64  08004c64  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004c64  08004c64  00014c64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c6c  08004c6c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c6c  08004c6c  00014c6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c70  08004c70  00014c70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004c74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000544  2000000c  08004c80  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000550  08004c80  00020550  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014343  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027c0  00000000  00000000  0003437f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff0  00000000  00000000  00036b40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ed8  00000000  00000000  00037b30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000247b8  00000000  00000000  00038a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001014e  00000000  00000000  0005d1c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc983  00000000  00000000  0006d30e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00149c91  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042f4  00000000  00000000  00149ce4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08004c2c 	.word	0x08004c2c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08004c2c 	.word	0x08004c2c

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96e 	b.w	80004e0 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468c      	mov	ip, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	f040 8083 	bne.w	8000332 <__udivmoddi4+0x116>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d947      	bls.n	80002c2 <__udivmoddi4+0xa6>
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	b142      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000238:	f1c2 0020 	rsb	r0, r2, #32
 800023c:	fa24 f000 	lsr.w	r0, r4, r0
 8000240:	4091      	lsls	r1, r2
 8000242:	4097      	lsls	r7, r2
 8000244:	ea40 0c01 	orr.w	ip, r0, r1
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbbc f6f8 	udiv	r6, ip, r8
 8000254:	fa1f fe87 	uxth.w	lr, r7
 8000258:	fb08 c116 	mls	r1, r8, r6, ip
 800025c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000260:	fb06 f10e 	mul.w	r1, r6, lr
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18fb      	adds	r3, r7, r3
 800026a:	f106 30ff 	add.w	r0, r6, #4294967295
 800026e:	f080 8119 	bcs.w	80004a4 <__udivmoddi4+0x288>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8116 	bls.w	80004a4 <__udivmoddi4+0x288>
 8000278:	3e02      	subs	r6, #2
 800027a:	443b      	add	r3, r7
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0f8 	udiv	r0, r3, r8
 8000284:	fb08 3310 	mls	r3, r8, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000290:	45a6      	cmp	lr, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	193c      	adds	r4, r7, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 8105 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 800029e:	45a6      	cmp	lr, r4
 80002a0:	f240 8102 	bls.w	80004a8 <__udivmoddi4+0x28c>
 80002a4:	3802      	subs	r0, #2
 80002a6:	443c      	add	r4, r7
 80002a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ac:	eba4 040e 	sub.w	r4, r4, lr
 80002b0:	2600      	movs	r6, #0
 80002b2:	b11d      	cbz	r5, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c5 4300 	strd	r4, r3, [r5]
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	b902      	cbnz	r2, 80002c6 <__udivmoddi4+0xaa>
 80002c4:	deff      	udf	#255	; 0xff
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	2a00      	cmp	r2, #0
 80002cc:	d150      	bne.n	8000370 <__udivmoddi4+0x154>
 80002ce:	1bcb      	subs	r3, r1, r7
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f f887 	uxth.w	r8, r7
 80002d8:	2601      	movs	r6, #1
 80002da:	fbb3 fcfe 	udiv	ip, r3, lr
 80002de:	0c21      	lsrs	r1, r4, #16
 80002e0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002e8:	fb08 f30c 	mul.w	r3, r8, ip
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d907      	bls.n	8000300 <__udivmoddi4+0xe4>
 80002f0:	1879      	adds	r1, r7, r1
 80002f2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0xe2>
 80002f8:	428b      	cmp	r3, r1
 80002fa:	f200 80e9 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 80002fe:	4684      	mov	ip, r0
 8000300:	1ac9      	subs	r1, r1, r3
 8000302:	b2a3      	uxth	r3, r4
 8000304:	fbb1 f0fe 	udiv	r0, r1, lr
 8000308:	fb0e 1110 	mls	r1, lr, r0, r1
 800030c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000310:	fb08 f800 	mul.w	r8, r8, r0
 8000314:	45a0      	cmp	r8, r4
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x10c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x10a>
 8000320:	45a0      	cmp	r8, r4
 8000322:	f200 80d9 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 8000326:	4618      	mov	r0, r3
 8000328:	eba4 0408 	sub.w	r4, r4, r8
 800032c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000330:	e7bf      	b.n	80002b2 <__udivmoddi4+0x96>
 8000332:	428b      	cmp	r3, r1
 8000334:	d909      	bls.n	800034a <__udivmoddi4+0x12e>
 8000336:	2d00      	cmp	r5, #0
 8000338:	f000 80b1 	beq.w	800049e <__udivmoddi4+0x282>
 800033c:	2600      	movs	r6, #0
 800033e:	e9c5 0100 	strd	r0, r1, [r5]
 8000342:	4630      	mov	r0, r6
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	fab3 f683 	clz	r6, r3
 800034e:	2e00      	cmp	r6, #0
 8000350:	d14a      	bne.n	80003e8 <__udivmoddi4+0x1cc>
 8000352:	428b      	cmp	r3, r1
 8000354:	d302      	bcc.n	800035c <__udivmoddi4+0x140>
 8000356:	4282      	cmp	r2, r0
 8000358:	f200 80b8 	bhi.w	80004cc <__udivmoddi4+0x2b0>
 800035c:	1a84      	subs	r4, r0, r2
 800035e:	eb61 0103 	sbc.w	r1, r1, r3
 8000362:	2001      	movs	r0, #1
 8000364:	468c      	mov	ip, r1
 8000366:	2d00      	cmp	r5, #0
 8000368:	d0a8      	beq.n	80002bc <__udivmoddi4+0xa0>
 800036a:	e9c5 4c00 	strd	r4, ip, [r5]
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0xa0>
 8000370:	f1c2 0320 	rsb	r3, r2, #32
 8000374:	fa20 f603 	lsr.w	r6, r0, r3
 8000378:	4097      	lsls	r7, r2
 800037a:	fa01 f002 	lsl.w	r0, r1, r2
 800037e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000382:	40d9      	lsrs	r1, r3
 8000384:	4330      	orrs	r0, r6
 8000386:	0c03      	lsrs	r3, r0, #16
 8000388:	fbb1 f6fe 	udiv	r6, r1, lr
 800038c:	fa1f f887 	uxth.w	r8, r7
 8000390:	fb0e 1116 	mls	r1, lr, r6, r1
 8000394:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000398:	fb06 f108 	mul.w	r1, r6, r8
 800039c:	4299      	cmp	r1, r3
 800039e:	fa04 f402 	lsl.w	r4, r4, r2
 80003a2:	d909      	bls.n	80003b8 <__udivmoddi4+0x19c>
 80003a4:	18fb      	adds	r3, r7, r3
 80003a6:	f106 3cff 	add.w	ip, r6, #4294967295
 80003aa:	f080 808d 	bcs.w	80004c8 <__udivmoddi4+0x2ac>
 80003ae:	4299      	cmp	r1, r3
 80003b0:	f240 808a 	bls.w	80004c8 <__udivmoddi4+0x2ac>
 80003b4:	3e02      	subs	r6, #2
 80003b6:	443b      	add	r3, r7
 80003b8:	1a5b      	subs	r3, r3, r1
 80003ba:	b281      	uxth	r1, r0
 80003bc:	fbb3 f0fe 	udiv	r0, r3, lr
 80003c0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003c8:	fb00 f308 	mul.w	r3, r0, r8
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x1c4>
 80003d0:	1879      	adds	r1, r7, r1
 80003d2:	f100 3cff 	add.w	ip, r0, #4294967295
 80003d6:	d273      	bcs.n	80004c0 <__udivmoddi4+0x2a4>
 80003d8:	428b      	cmp	r3, r1
 80003da:	d971      	bls.n	80004c0 <__udivmoddi4+0x2a4>
 80003dc:	3802      	subs	r0, #2
 80003de:	4439      	add	r1, r7
 80003e0:	1acb      	subs	r3, r1, r3
 80003e2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003e6:	e778      	b.n	80002da <__udivmoddi4+0xbe>
 80003e8:	f1c6 0c20 	rsb	ip, r6, #32
 80003ec:	fa03 f406 	lsl.w	r4, r3, r6
 80003f0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f4:	431c      	orrs	r4, r3
 80003f6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003fa:	fa01 f306 	lsl.w	r3, r1, r6
 80003fe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000402:	fa21 f10c 	lsr.w	r1, r1, ip
 8000406:	431f      	orrs	r7, r3
 8000408:	0c3b      	lsrs	r3, r7, #16
 800040a:	fbb1 f9fe 	udiv	r9, r1, lr
 800040e:	fa1f f884 	uxth.w	r8, r4
 8000412:	fb0e 1119 	mls	r1, lr, r9, r1
 8000416:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800041a:	fb09 fa08 	mul.w	sl, r9, r8
 800041e:	458a      	cmp	sl, r1
 8000420:	fa02 f206 	lsl.w	r2, r2, r6
 8000424:	fa00 f306 	lsl.w	r3, r0, r6
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x220>
 800042a:	1861      	adds	r1, r4, r1
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d248      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000432:	458a      	cmp	sl, r1
 8000434:	d946      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	4421      	add	r1, r4
 800043c:	eba1 010a 	sub.w	r1, r1, sl
 8000440:	b2bf      	uxth	r7, r7
 8000442:	fbb1 f0fe 	udiv	r0, r1, lr
 8000446:	fb0e 1110 	mls	r1, lr, r0, r1
 800044a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45b8      	cmp	r8, r7
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x24a>
 8000456:	19e7      	adds	r7, r4, r7
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d22e      	bcs.n	80004bc <__udivmoddi4+0x2a0>
 800045e:	45b8      	cmp	r8, r7
 8000460:	d92c      	bls.n	80004bc <__udivmoddi4+0x2a0>
 8000462:	3802      	subs	r0, #2
 8000464:	4427      	add	r7, r4
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba7 0708 	sub.w	r7, r7, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454f      	cmp	r7, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	4649      	mov	r1, r9
 8000478:	d31a      	bcc.n	80004b0 <__udivmoddi4+0x294>
 800047a:	d017      	beq.n	80004ac <__udivmoddi4+0x290>
 800047c:	b15d      	cbz	r5, 8000496 <__udivmoddi4+0x27a>
 800047e:	ebb3 020e 	subs.w	r2, r3, lr
 8000482:	eb67 0701 	sbc.w	r7, r7, r1
 8000486:	fa07 fc0c 	lsl.w	ip, r7, ip
 800048a:	40f2      	lsrs	r2, r6
 800048c:	ea4c 0202 	orr.w	r2, ip, r2
 8000490:	40f7      	lsrs	r7, r6
 8000492:	e9c5 2700 	strd	r2, r7, [r5]
 8000496:	2600      	movs	r6, #0
 8000498:	4631      	mov	r1, r6
 800049a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049e:	462e      	mov	r6, r5
 80004a0:	4628      	mov	r0, r5
 80004a2:	e70b      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a4:	4606      	mov	r6, r0
 80004a6:	e6e9      	b.n	800027c <__udivmoddi4+0x60>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e6fd      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004ac:	4543      	cmp	r3, r8
 80004ae:	d2e5      	bcs.n	800047c <__udivmoddi4+0x260>
 80004b0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b4:	eb69 0104 	sbc.w	r1, r9, r4
 80004b8:	3801      	subs	r0, #1
 80004ba:	e7df      	b.n	800047c <__udivmoddi4+0x260>
 80004bc:	4608      	mov	r0, r1
 80004be:	e7d2      	b.n	8000466 <__udivmoddi4+0x24a>
 80004c0:	4660      	mov	r0, ip
 80004c2:	e78d      	b.n	80003e0 <__udivmoddi4+0x1c4>
 80004c4:	4681      	mov	r9, r0
 80004c6:	e7b9      	b.n	800043c <__udivmoddi4+0x220>
 80004c8:	4666      	mov	r6, ip
 80004ca:	e775      	b.n	80003b8 <__udivmoddi4+0x19c>
 80004cc:	4630      	mov	r0, r6
 80004ce:	e74a      	b.n	8000366 <__udivmoddi4+0x14a>
 80004d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d4:	4439      	add	r1, r7
 80004d6:	e713      	b.n	8000300 <__udivmoddi4+0xe4>
 80004d8:	3802      	subs	r0, #2
 80004da:	443c      	add	r4, r7
 80004dc:	e724      	b.n	8000328 <__udivmoddi4+0x10c>
 80004de:	bf00      	nop

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  count = 0; // keep count in while loop and reset every 10s
 80004e8:	4b13      	ldr	r3, [pc, #76]	; (8000538 <main+0x54>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ee:	f001 fab3 	bl	8001a58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f2:	f000 f823 	bl	800053c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f6:	f000 fb85 	bl	8000c04 <MX_GPIO_Init>
  MX_DMA_Init();
 80004fa:	f000 fb45 	bl	8000b88 <MX_DMA_Init>
  MX_SPI5_Init();
 80004fe:	f000 f887 	bl	8000610 <MX_SPI5_Init>
  MX_TIM2_Init();
 8000502:	f000 f8bb 	bl	800067c <MX_TIM2_Init>
  MX_TIM4_Init();
 8000506:	f000 f98d 	bl	8000824 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 800050a:	f000 fabd 	bl	8000a88 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800050e:	f000 fae7 	bl	8000ae0 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8000512:	f000 fb0f 	bl	8000b34 <MX_USART6_UART_Init>
  MX_TIM3_Init();
 8000516:	f000 f92b 	bl	8000770 <MX_TIM3_Init>
  MX_TIM12_Init();
 800051a:	f000 fa6f 	bl	80009fc <MX_TIM12_Init>
  MX_TIM5_Init();
 800051e:	f000 f9fd 	bl	800091c <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  led_off();
 8000522:	f000 fc9d 	bl	8000e60 <led_off>
  power_on();
 8000526:	f000 fcaf 	bl	8000e88 <power_on>
  dbus_uart_init();
 800052a:	f000 fe75 	bl	8001218 <dbus_uart_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_Delay(1);
 800052e:	2001      	movs	r0, #1
 8000530:	f001 fb04 	bl	8001b3c <HAL_Delay>
 8000534:	e7fb      	b.n	800052e <main+0x4a>
 8000536:	bf00      	nop
 8000538:	200002c8 	.word	0x200002c8

0800053c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b094      	sub	sp, #80	; 0x50
 8000540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000542:	f107 0320 	add.w	r3, r7, #32
 8000546:	2230      	movs	r2, #48	; 0x30
 8000548:	2100      	movs	r1, #0
 800054a:	4618      	mov	r0, r3
 800054c:	f004 fb66 	bl	8004c1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000550:	f107 030c 	add.w	r3, r7, #12
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
 8000558:	605a      	str	r2, [r3, #4]
 800055a:	609a      	str	r2, [r3, #8]
 800055c:	60da      	str	r2, [r3, #12]
 800055e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000560:	2300      	movs	r3, #0
 8000562:	60bb      	str	r3, [r7, #8]
 8000564:	4b28      	ldr	r3, [pc, #160]	; (8000608 <SystemClock_Config+0xcc>)
 8000566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000568:	4a27      	ldr	r2, [pc, #156]	; (8000608 <SystemClock_Config+0xcc>)
 800056a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800056e:	6413      	str	r3, [r2, #64]	; 0x40
 8000570:	4b25      	ldr	r3, [pc, #148]	; (8000608 <SystemClock_Config+0xcc>)
 8000572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000574:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000578:	60bb      	str	r3, [r7, #8]
 800057a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800057c:	2300      	movs	r3, #0
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	4b22      	ldr	r3, [pc, #136]	; (800060c <SystemClock_Config+0xd0>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a21      	ldr	r2, [pc, #132]	; (800060c <SystemClock_Config+0xd0>)
 8000586:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800058a:	6013      	str	r3, [r2, #0]
 800058c:	4b1f      	ldr	r3, [pc, #124]	; (800060c <SystemClock_Config+0xd0>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000594:	607b      	str	r3, [r7, #4]
 8000596:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000598:	2301      	movs	r3, #1
 800059a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800059c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a2:	2302      	movs	r3, #2
 80005a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 80005ac:	2306      	movs	r3, #6
 80005ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005b0:	23a8      	movs	r3, #168	; 0xa8
 80005b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005b4:	2302      	movs	r3, #2
 80005b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005b8:	2304      	movs	r3, #4
 80005ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005bc:	f107 0320 	add.w	r3, r7, #32
 80005c0:	4618      	mov	r0, r3
 80005c2:	f002 fc7b 	bl	8002ebc <HAL_RCC_OscConfig>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005cc:	f000 fbde 	bl	8000d8c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d0:	230f      	movs	r3, #15
 80005d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d4:	2302      	movs	r3, #2
 80005d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d8:	2300      	movs	r3, #0
 80005da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005dc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005e6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005e8:	f107 030c 	add.w	r3, r7, #12
 80005ec:	2105      	movs	r1, #5
 80005ee:	4618      	mov	r0, r3
 80005f0:	f002 fed4 	bl	800339c <HAL_RCC_ClockConfig>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005fa:	f000 fbc7 	bl	8000d8c <Error_Handler>
  }
}
 80005fe:	bf00      	nop
 8000600:	3750      	adds	r7, #80	; 0x50
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	40023800 	.word	0x40023800
 800060c:	40007000 	.word	0x40007000

08000610 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000614:	4b17      	ldr	r3, [pc, #92]	; (8000674 <MX_SPI5_Init+0x64>)
 8000616:	4a18      	ldr	r2, [pc, #96]	; (8000678 <MX_SPI5_Init+0x68>)
 8000618:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800061a:	4b16      	ldr	r3, [pc, #88]	; (8000674 <MX_SPI5_Init+0x64>)
 800061c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000620:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000622:	4b14      	ldr	r3, [pc, #80]	; (8000674 <MX_SPI5_Init+0x64>)
 8000624:	2200      	movs	r2, #0
 8000626:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000628:	4b12      	ldr	r3, [pc, #72]	; (8000674 <MX_SPI5_Init+0x64>)
 800062a:	2200      	movs	r2, #0
 800062c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800062e:	4b11      	ldr	r3, [pc, #68]	; (8000674 <MX_SPI5_Init+0x64>)
 8000630:	2200      	movs	r2, #0
 8000632:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000634:	4b0f      	ldr	r3, [pc, #60]	; (8000674 <MX_SPI5_Init+0x64>)
 8000636:	2200      	movs	r2, #0
 8000638:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800063a:	4b0e      	ldr	r3, [pc, #56]	; (8000674 <MX_SPI5_Init+0x64>)
 800063c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000640:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000642:	4b0c      	ldr	r3, [pc, #48]	; (8000674 <MX_SPI5_Init+0x64>)
 8000644:	2230      	movs	r2, #48	; 0x30
 8000646:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000648:	4b0a      	ldr	r3, [pc, #40]	; (8000674 <MX_SPI5_Init+0x64>)
 800064a:	2200      	movs	r2, #0
 800064c:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800064e:	4b09      	ldr	r3, [pc, #36]	; (8000674 <MX_SPI5_Init+0x64>)
 8000650:	2200      	movs	r2, #0
 8000652:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000654:	4b07      	ldr	r3, [pc, #28]	; (8000674 <MX_SPI5_Init+0x64>)
 8000656:	2200      	movs	r2, #0
 8000658:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800065a:	4b06      	ldr	r3, [pc, #24]	; (8000674 <MX_SPI5_Init+0x64>)
 800065c:	220a      	movs	r2, #10
 800065e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000660:	4804      	ldr	r0, [pc, #16]	; (8000674 <MX_SPI5_Init+0x64>)
 8000662:	f003 f86b 	bl	800373c <HAL_SPI_Init>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 800066c:	f000 fb8e 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000670:	bf00      	nop
 8000672:	bd80      	pop	{r7, pc}
 8000674:	20000088 	.word	0x20000088
 8000678:	40015000 	.word	0x40015000

0800067c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b08a      	sub	sp, #40	; 0x28
 8000680:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000682:	f107 0320 	add.w	r3, r7, #32
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
 800068a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800068c:	1d3b      	adds	r3, r7, #4
 800068e:	2200      	movs	r2, #0
 8000690:	601a      	str	r2, [r3, #0]
 8000692:	605a      	str	r2, [r3, #4]
 8000694:	609a      	str	r2, [r3, #8]
 8000696:	60da      	str	r2, [r3, #12]
 8000698:	611a      	str	r2, [r3, #16]
 800069a:	615a      	str	r2, [r3, #20]
 800069c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800069e:	4b33      	ldr	r3, [pc, #204]	; (800076c <MX_TIM2_Init+0xf0>)
 80006a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006a4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = TIM_PSC_APB1;
 80006a6:	4b31      	ldr	r3, [pc, #196]	; (800076c <MX_TIM2_Init+0xf0>)
 80006a8:	2253      	movs	r2, #83	; 0x53
 80006aa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ac:	4b2f      	ldr	r3, [pc, #188]	; (800076c <MX_TIM2_Init+0xf0>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = PWM_RESOLUTION-1;
 80006b2:	4b2e      	ldr	r3, [pc, #184]	; (800076c <MX_TIM2_Init+0xf0>)
 80006b4:	f640 12c3 	movw	r2, #2499	; 0x9c3
 80006b8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006ba:	4b2c      	ldr	r3, [pc, #176]	; (800076c <MX_TIM2_Init+0xf0>)
 80006bc:	2200      	movs	r2, #0
 80006be:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006c0:	4b2a      	ldr	r3, [pc, #168]	; (800076c <MX_TIM2_Init+0xf0>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80006c6:	4829      	ldr	r0, [pc, #164]	; (800076c <MX_TIM2_Init+0xf0>)
 80006c8:	f003 f89c 	bl	8003804 <HAL_TIM_PWM_Init>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80006d2:	f000 fb5b 	bl	8000d8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006d6:	2300      	movs	r3, #0
 80006d8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006da:	2300      	movs	r3, #0
 80006dc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006de:	f107 0320 	add.w	r3, r7, #32
 80006e2:	4619      	mov	r1, r3
 80006e4:	4821      	ldr	r0, [pc, #132]	; (800076c <MX_TIM2_Init+0xf0>)
 80006e6:	f003 fbcf 	bl	8003e88 <HAL_TIMEx_MasterConfigSynchronization>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80006f0:	f000 fb4c 	bl	8000d8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006f4:	2360      	movs	r3, #96	; 0x60
 80006f6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = PWM_DEFAULT_DUTY;
 80006f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006fc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006fe:	2300      	movs	r3, #0
 8000700:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000702:	2300      	movs	r3, #0
 8000704:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000706:	1d3b      	adds	r3, r7, #4
 8000708:	2200      	movs	r2, #0
 800070a:	4619      	mov	r1, r3
 800070c:	4817      	ldr	r0, [pc, #92]	; (800076c <MX_TIM2_Init+0xf0>)
 800070e:	f003 f8a5 	bl	800385c <HAL_TIM_PWM_ConfigChannel>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000718:	f000 fb38 	bl	8000d8c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800071c:	1d3b      	adds	r3, r7, #4
 800071e:	2204      	movs	r2, #4
 8000720:	4619      	mov	r1, r3
 8000722:	4812      	ldr	r0, [pc, #72]	; (800076c <MX_TIM2_Init+0xf0>)
 8000724:	f003 f89a 	bl	800385c <HAL_TIM_PWM_ConfigChannel>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 800072e:	f000 fb2d 	bl	8000d8c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000732:	1d3b      	adds	r3, r7, #4
 8000734:	2208      	movs	r2, #8
 8000736:	4619      	mov	r1, r3
 8000738:	480c      	ldr	r0, [pc, #48]	; (800076c <MX_TIM2_Init+0xf0>)
 800073a:	f003 f88f 	bl	800385c <HAL_TIM_PWM_ConfigChannel>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 8000744:	f000 fb22 	bl	8000d8c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000748:	1d3b      	adds	r3, r7, #4
 800074a:	220c      	movs	r2, #12
 800074c:	4619      	mov	r1, r3
 800074e:	4807      	ldr	r0, [pc, #28]	; (800076c <MX_TIM2_Init+0xf0>)
 8000750:	f003 f884 	bl	800385c <HAL_TIM_PWM_ConfigChannel>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_TIM2_Init+0xe2>
  {
    Error_Handler();
 800075a:	f000 fb17 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800075e:	4803      	ldr	r0, [pc, #12]	; (800076c <MX_TIM2_Init+0xf0>)
 8000760:	f000 fe66 	bl	8001430 <HAL_TIM_MspPostInit>

}
 8000764:	bf00      	nop
 8000766:	3728      	adds	r7, #40	; 0x28
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	200003d4 	.word	0x200003d4

08000770 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b08a      	sub	sp, #40	; 0x28
 8000774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000776:	f107 0320 	add.w	r3, r7, #32
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000780:	1d3b      	adds	r3, r7, #4
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]
 8000788:	609a      	str	r2, [r3, #8]
 800078a:	60da      	str	r2, [r3, #12]
 800078c:	611a      	str	r2, [r3, #16]
 800078e:	615a      	str	r2, [r3, #20]
 8000790:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000792:	4b22      	ldr	r3, [pc, #136]	; (800081c <MX_TIM3_Init+0xac>)
 8000794:	4a22      	ldr	r2, [pc, #136]	; (8000820 <MX_TIM3_Init+0xb0>)
 8000796:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000798:	4b20      	ldr	r3, [pc, #128]	; (800081c <MX_TIM3_Init+0xac>)
 800079a:	2200      	movs	r2, #0
 800079c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800079e:	4b1f      	ldr	r3, [pc, #124]	; (800081c <MX_TIM3_Init+0xac>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4999;
 80007a4:	4b1d      	ldr	r3, [pc, #116]	; (800081c <MX_TIM3_Init+0xac>)
 80007a6:	f241 3287 	movw	r2, #4999	; 0x1387
 80007aa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ac:	4b1b      	ldr	r3, [pc, #108]	; (800081c <MX_TIM3_Init+0xac>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007b2:	4b1a      	ldr	r3, [pc, #104]	; (800081c <MX_TIM3_Init+0xac>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80007b8:	4818      	ldr	r0, [pc, #96]	; (800081c <MX_TIM3_Init+0xac>)
 80007ba:	f003 f823 	bl	8003804 <HAL_TIM_PWM_Init>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80007c4:	f000 fae2 	bl	8000d8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007c8:	2300      	movs	r3, #0
 80007ca:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007cc:	2300      	movs	r3, #0
 80007ce:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007d0:	f107 0320 	add.w	r3, r7, #32
 80007d4:	4619      	mov	r1, r3
 80007d6:	4811      	ldr	r0, [pc, #68]	; (800081c <MX_TIM3_Init+0xac>)
 80007d8:	f003 fb56 	bl	8003e88 <HAL_TIMEx_MasterConfigSynchronization>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80007e2:	f000 fad3 	bl	8000d8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007e6:	2360      	movs	r3, #96	; 0x60
 80007e8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80007ea:	2300      	movs	r3, #0
 80007ec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007ee:	2300      	movs	r3, #0
 80007f0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007f2:	2300      	movs	r3, #0
 80007f4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007f6:	1d3b      	adds	r3, r7, #4
 80007f8:	2204      	movs	r2, #4
 80007fa:	4619      	mov	r1, r3
 80007fc:	4807      	ldr	r0, [pc, #28]	; (800081c <MX_TIM3_Init+0xac>)
 80007fe:	f003 f82d 	bl	800385c <HAL_TIM_PWM_ConfigChannel>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000808:	f000 fac0 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800080c:	4803      	ldr	r0, [pc, #12]	; (800081c <MX_TIM3_Init+0xac>)
 800080e:	f000 fe0f 	bl	8001430 <HAL_TIM_MspPostInit>

}
 8000812:	bf00      	nop
 8000814:	3728      	adds	r7, #40	; 0x28
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	20000160 	.word	0x20000160
 8000820:	40000400 	.word	0x40000400

08000824 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b08a      	sub	sp, #40	; 0x28
 8000828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800082a:	f107 0320 	add.w	r3, r7, #32
 800082e:	2200      	movs	r2, #0
 8000830:	601a      	str	r2, [r3, #0]
 8000832:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000834:	1d3b      	adds	r3, r7, #4
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	609a      	str	r2, [r3, #8]
 800083e:	60da      	str	r2, [r3, #12]
 8000840:	611a      	str	r2, [r3, #16]
 8000842:	615a      	str	r2, [r3, #20]
 8000844:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000846:	4b33      	ldr	r3, [pc, #204]	; (8000914 <MX_TIM4_Init+0xf0>)
 8000848:	4a33      	ldr	r2, [pc, #204]	; (8000918 <MX_TIM4_Init+0xf4>)
 800084a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = TIM_PSC_APB1;
 800084c:	4b31      	ldr	r3, [pc, #196]	; (8000914 <MX_TIM4_Init+0xf0>)
 800084e:	2253      	movs	r2, #83	; 0x53
 8000850:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000852:	4b30      	ldr	r3, [pc, #192]	; (8000914 <MX_TIM4_Init+0xf0>)
 8000854:	2200      	movs	r2, #0
 8000856:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = PWM_RESOLUTION-1;
 8000858:	4b2e      	ldr	r3, [pc, #184]	; (8000914 <MX_TIM4_Init+0xf0>)
 800085a:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800085e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000860:	4b2c      	ldr	r3, [pc, #176]	; (8000914 <MX_TIM4_Init+0xf0>)
 8000862:	2200      	movs	r2, #0
 8000864:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000866:	4b2b      	ldr	r3, [pc, #172]	; (8000914 <MX_TIM4_Init+0xf0>)
 8000868:	2200      	movs	r2, #0
 800086a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800086c:	4829      	ldr	r0, [pc, #164]	; (8000914 <MX_TIM4_Init+0xf0>)
 800086e:	f002 ffc9 	bl	8003804 <HAL_TIM_PWM_Init>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8000878:	f000 fa88 	bl	8000d8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800087c:	2300      	movs	r3, #0
 800087e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000880:	2300      	movs	r3, #0
 8000882:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000884:	f107 0320 	add.w	r3, r7, #32
 8000888:	4619      	mov	r1, r3
 800088a:	4822      	ldr	r0, [pc, #136]	; (8000914 <MX_TIM4_Init+0xf0>)
 800088c:	f003 fafc 	bl	8003e88 <HAL_TIMEx_MasterConfigSynchronization>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8000896:	f000 fa79 	bl	8000d8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800089a:	2360      	movs	r3, #96	; 0x60
 800089c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = PWM_DEFAULT_DUTY;
 800089e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008a2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008a4:	2300      	movs	r3, #0
 80008a6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008a8:	2300      	movs	r3, #0
 80008aa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008ac:	1d3b      	adds	r3, r7, #4
 80008ae:	2200      	movs	r2, #0
 80008b0:	4619      	mov	r1, r3
 80008b2:	4818      	ldr	r0, [pc, #96]	; (8000914 <MX_TIM4_Init+0xf0>)
 80008b4:	f002 ffd2 	bl	800385c <HAL_TIM_PWM_ConfigChannel>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80008be:	f000 fa65 	bl	8000d8c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008c2:	1d3b      	adds	r3, r7, #4
 80008c4:	2204      	movs	r2, #4
 80008c6:	4619      	mov	r1, r3
 80008c8:	4812      	ldr	r0, [pc, #72]	; (8000914 <MX_TIM4_Init+0xf0>)
 80008ca:	f002 ffc7 	bl	800385c <HAL_TIM_PWM_ConfigChannel>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 80008d4:	f000 fa5a 	bl	8000d8c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80008d8:	1d3b      	adds	r3, r7, #4
 80008da:	2208      	movs	r2, #8
 80008dc:	4619      	mov	r1, r3
 80008de:	480d      	ldr	r0, [pc, #52]	; (8000914 <MX_TIM4_Init+0xf0>)
 80008e0:	f002 ffbc 	bl	800385c <HAL_TIM_PWM_ConfigChannel>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 80008ea:	f000 fa4f 	bl	8000d8c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80008ee:	1d3b      	adds	r3, r7, #4
 80008f0:	220c      	movs	r2, #12
 80008f2:	4619      	mov	r1, r3
 80008f4:	4807      	ldr	r0, [pc, #28]	; (8000914 <MX_TIM4_Init+0xf0>)
 80008f6:	f002 ffb1 	bl	800385c <HAL_TIM_PWM_ConfigChannel>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 8000900:	f000 fa44 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000904:	4803      	ldr	r0, [pc, #12]	; (8000914 <MX_TIM4_Init+0xf0>)
 8000906:	f000 fd93 	bl	8001430 <HAL_TIM_MspPostInit>

}
 800090a:	bf00      	nop
 800090c:	3728      	adds	r7, #40	; 0x28
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	200000e0 	.word	0x200000e0
 8000918:	40000800 	.word	0x40000800

0800091c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b08a      	sub	sp, #40	; 0x28
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000922:	f107 0320 	add.w	r3, r7, #32
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800092c:	1d3b      	adds	r3, r7, #4
 800092e:	2200      	movs	r2, #0
 8000930:	601a      	str	r2, [r3, #0]
 8000932:	605a      	str	r2, [r3, #4]
 8000934:	609a      	str	r2, [r3, #8]
 8000936:	60da      	str	r2, [r3, #12]
 8000938:	611a      	str	r2, [r3, #16]
 800093a:	615a      	str	r2, [r3, #20]
 800093c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800093e:	4b2d      	ldr	r3, [pc, #180]	; (80009f4 <MX_TIM5_Init+0xd8>)
 8000940:	4a2d      	ldr	r2, [pc, #180]	; (80009f8 <MX_TIM5_Init+0xdc>)
 8000942:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000944:	4b2b      	ldr	r3, [pc, #172]	; (80009f4 <MX_TIM5_Init+0xd8>)
 8000946:	2200      	movs	r2, #0
 8000948:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800094a:	4b2a      	ldr	r3, [pc, #168]	; (80009f4 <MX_TIM5_Init+0xd8>)
 800094c:	2200      	movs	r2, #0
 800094e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000950:	4b28      	ldr	r3, [pc, #160]	; (80009f4 <MX_TIM5_Init+0xd8>)
 8000952:	f04f 32ff 	mov.w	r2, #4294967295
 8000956:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000958:	4b26      	ldr	r3, [pc, #152]	; (80009f4 <MX_TIM5_Init+0xd8>)
 800095a:	2200      	movs	r2, #0
 800095c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800095e:	4b25      	ldr	r3, [pc, #148]	; (80009f4 <MX_TIM5_Init+0xd8>)
 8000960:	2200      	movs	r2, #0
 8000962:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000964:	4823      	ldr	r0, [pc, #140]	; (80009f4 <MX_TIM5_Init+0xd8>)
 8000966:	f002 ff4d 	bl	8003804 <HAL_TIM_PWM_Init>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8000970:	f000 fa0c 	bl	8000d8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000974:	2300      	movs	r3, #0
 8000976:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000978:	2300      	movs	r3, #0
 800097a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800097c:	f107 0320 	add.w	r3, r7, #32
 8000980:	4619      	mov	r1, r3
 8000982:	481c      	ldr	r0, [pc, #112]	; (80009f4 <MX_TIM5_Init+0xd8>)
 8000984:	f003 fa80 	bl	8003e88 <HAL_TIMEx_MasterConfigSynchronization>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 800098e:	f000 f9fd 	bl	8000d8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000992:	2360      	movs	r3, #96	; 0x60
 8000994:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000996:	2300      	movs	r3, #0
 8000998:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800099a:	2300      	movs	r3, #0
 800099c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800099e:	2300      	movs	r3, #0
 80009a0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009a2:	1d3b      	adds	r3, r7, #4
 80009a4:	2200      	movs	r2, #0
 80009a6:	4619      	mov	r1, r3
 80009a8:	4812      	ldr	r0, [pc, #72]	; (80009f4 <MX_TIM5_Init+0xd8>)
 80009aa:	f002 ff57 	bl	800385c <HAL_TIM_PWM_ConfigChannel>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 80009b4:	f000 f9ea 	bl	8000d8c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009b8:	1d3b      	adds	r3, r7, #4
 80009ba:	2204      	movs	r2, #4
 80009bc:	4619      	mov	r1, r3
 80009be:	480d      	ldr	r0, [pc, #52]	; (80009f4 <MX_TIM5_Init+0xd8>)
 80009c0:	f002 ff4c 	bl	800385c <HAL_TIM_PWM_ConfigChannel>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 80009ca:	f000 f9df 	bl	8000d8c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80009ce:	1d3b      	adds	r3, r7, #4
 80009d0:	2208      	movs	r2, #8
 80009d2:	4619      	mov	r1, r3
 80009d4:	4807      	ldr	r0, [pc, #28]	; (80009f4 <MX_TIM5_Init+0xd8>)
 80009d6:	f002 ff41 	bl	800385c <HAL_TIM_PWM_ConfigChannel>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_TIM5_Init+0xc8>
  {
    Error_Handler();
 80009e0:	f000 f9d4 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80009e4:	4803      	ldr	r0, [pc, #12]	; (80009f4 <MX_TIM5_Init+0xd8>)
 80009e6:	f000 fd23 	bl	8001430 <HAL_TIM_MspPostInit>

}
 80009ea:	bf00      	nop
 80009ec:	3728      	adds	r7, #40	; 0x28
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	20000120 	.word	0x20000120
 80009f8:	40000c00 	.word	0x40000c00

080009fc <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b088      	sub	sp, #32
 8000a00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a02:	1d3b      	adds	r3, r7, #4
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
 8000a08:	605a      	str	r2, [r3, #4]
 8000a0a:	609a      	str	r2, [r3, #8]
 8000a0c:	60da      	str	r2, [r3, #12]
 8000a0e:	611a      	str	r2, [r3, #16]
 8000a10:	615a      	str	r2, [r3, #20]
 8000a12:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8000a14:	4b1a      	ldr	r3, [pc, #104]	; (8000a80 <MX_TIM12_Init+0x84>)
 8000a16:	4a1b      	ldr	r2, [pc, #108]	; (8000a84 <MX_TIM12_Init+0x88>)
 8000a18:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 3;
 8000a1a:	4b19      	ldr	r3, [pc, #100]	; (8000a80 <MX_TIM12_Init+0x84>)
 8000a1c:	2203      	movs	r2, #3
 8000a1e:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a20:	4b17      	ldr	r3, [pc, #92]	; (8000a80 <MX_TIM12_Init+0x84>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 7777;
 8000a26:	4b16      	ldr	r3, [pc, #88]	; (8000a80 <MX_TIM12_Init+0x84>)
 8000a28:	f641 6261 	movw	r2, #7777	; 0x1e61
 8000a2c:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a2e:	4b14      	ldr	r3, [pc, #80]	; (8000a80 <MX_TIM12_Init+0x84>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a34:	4b12      	ldr	r3, [pc, #72]	; (8000a80 <MX_TIM12_Init+0x84>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8000a3a:	4811      	ldr	r0, [pc, #68]	; (8000a80 <MX_TIM12_Init+0x84>)
 8000a3c:	f002 fee2 	bl	8003804 <HAL_TIM_PWM_Init>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8000a46:	f000 f9a1 	bl	8000d8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a4a:	2360      	movs	r3, #96	; 0x60
 8000a4c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a52:	2300      	movs	r3, #0
 8000a54:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a56:	2300      	movs	r3, #0
 8000a58:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a5a:	1d3b      	adds	r3, r7, #4
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4807      	ldr	r0, [pc, #28]	; (8000a80 <MX_TIM12_Init+0x84>)
 8000a62:	f002 fefb 	bl	800385c <HAL_TIM_PWM_ConfigChannel>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8000a6c:	f000 f98e 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8000a70:	4803      	ldr	r0, [pc, #12]	; (8000a80 <MX_TIM12_Init+0x84>)
 8000a72:	f000 fcdd 	bl	8001430 <HAL_TIM_MspPostInit>

}
 8000a76:	bf00      	nop
 8000a78:	3720      	adds	r7, #32
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	2000047c 	.word	0x2000047c
 8000a84:	40001800 	.word	0x40001800

08000a88 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a8c:	4b11      	ldr	r3, [pc, #68]	; (8000ad4 <MX_USART1_UART_Init+0x4c>)
 8000a8e:	4a12      	ldr	r2, [pc, #72]	; (8000ad8 <MX_USART1_UART_Init+0x50>)
 8000a90:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 100000;
 8000a92:	4b10      	ldr	r3, [pc, #64]	; (8000ad4 <MX_USART1_UART_Init+0x4c>)
 8000a94:	4a11      	ldr	r2, [pc, #68]	; (8000adc <MX_USART1_UART_Init+0x54>)
 8000a96:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a98:	4b0e      	ldr	r3, [pc, #56]	; (8000ad4 <MX_USART1_UART_Init+0x4c>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a9e:	4b0d      	ldr	r3, [pc, #52]	; (8000ad4 <MX_USART1_UART_Init+0x4c>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8000aa4:	4b0b      	ldr	r3, [pc, #44]	; (8000ad4 <MX_USART1_UART_Init+0x4c>)
 8000aa6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000aaa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000aac:	4b09      	ldr	r3, [pc, #36]	; (8000ad4 <MX_USART1_UART_Init+0x4c>)
 8000aae:	220c      	movs	r2, #12
 8000ab0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ab2:	4b08      	ldr	r3, [pc, #32]	; (8000ad4 <MX_USART1_UART_Init+0x4c>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ab8:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <MX_USART1_UART_Init+0x4c>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000abe:	4805      	ldr	r0, [pc, #20]	; (8000ad4 <MX_USART1_UART_Init+0x4c>)
 8000ac0:	f003 fa5e 	bl	8003f80 <HAL_UART_Init>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000aca:	f000 f95f 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	20000288 	.word	0x20000288
 8000ad8:	40011000 	.word	0x40011000
 8000adc:	000186a0 	.word	0x000186a0

08000ae0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ae4:	4b11      	ldr	r3, [pc, #68]	; (8000b2c <MX_USART2_UART_Init+0x4c>)
 8000ae6:	4a12      	ldr	r2, [pc, #72]	; (8000b30 <MX_USART2_UART_Init+0x50>)
 8000ae8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000aea:	4b10      	ldr	r3, [pc, #64]	; (8000b2c <MX_USART2_UART_Init+0x4c>)
 8000aec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000af0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000af2:	4b0e      	ldr	r3, [pc, #56]	; (8000b2c <MX_USART2_UART_Init+0x4c>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000af8:	4b0c      	ldr	r3, [pc, #48]	; (8000b2c <MX_USART2_UART_Init+0x4c>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000afe:	4b0b      	ldr	r3, [pc, #44]	; (8000b2c <MX_USART2_UART_Init+0x4c>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b04:	4b09      	ldr	r3, [pc, #36]	; (8000b2c <MX_USART2_UART_Init+0x4c>)
 8000b06:	220c      	movs	r2, #12
 8000b08:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b0a:	4b08      	ldr	r3, [pc, #32]	; (8000b2c <MX_USART2_UART_Init+0x4c>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b10:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <MX_USART2_UART_Init+0x4c>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b16:	4805      	ldr	r0, [pc, #20]	; (8000b2c <MX_USART2_UART_Init+0x4c>)
 8000b18:	f003 fa32 	bl	8003f80 <HAL_UART_Init>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b22:	f000 f933 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	20000414 	.word	0x20000414
 8000b30:	40004400 	.word	0x40004400

08000b34 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000b38:	4b11      	ldr	r3, [pc, #68]	; (8000b80 <MX_USART6_UART_Init+0x4c>)
 8000b3a:	4a12      	ldr	r2, [pc, #72]	; (8000b84 <MX_USART6_UART_Init+0x50>)
 8000b3c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000b3e:	4b10      	ldr	r3, [pc, #64]	; (8000b80 <MX_USART6_UART_Init+0x4c>)
 8000b40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b44:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000b46:	4b0e      	ldr	r3, [pc, #56]	; (8000b80 <MX_USART6_UART_Init+0x4c>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000b4c:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <MX_USART6_UART_Init+0x4c>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000b52:	4b0b      	ldr	r3, [pc, #44]	; (8000b80 <MX_USART6_UART_Init+0x4c>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000b58:	4b09      	ldr	r3, [pc, #36]	; (8000b80 <MX_USART6_UART_Init+0x4c>)
 8000b5a:	220c      	movs	r2, #12
 8000b5c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b5e:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <MX_USART6_UART_Init+0x4c>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b64:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <MX_USART6_UART_Init+0x4c>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000b6a:	4805      	ldr	r0, [pc, #20]	; (8000b80 <MX_USART6_UART_Init+0x4c>)
 8000b6c:	f003 fa08 	bl	8003f80 <HAL_UART_Init>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000b76:	f000 f909 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	200002cc 	.word	0x200002cc
 8000b84:	40011400 	.word	0x40011400

08000b88 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	607b      	str	r3, [r7, #4]
 8000b92:	4b1b      	ldr	r3, [pc, #108]	; (8000c00 <MX_DMA_Init+0x78>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	4a1a      	ldr	r2, [pc, #104]	; (8000c00 <MX_DMA_Init+0x78>)
 8000b98:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9e:	4b18      	ldr	r3, [pc, #96]	; (8000c00 <MX_DMA_Init+0x78>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ba6:	607b      	str	r3, [r7, #4]
 8000ba8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	603b      	str	r3, [r7, #0]
 8000bae:	4b14      	ldr	r3, [pc, #80]	; (8000c00 <MX_DMA_Init+0x78>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	4a13      	ldr	r2, [pc, #76]	; (8000c00 <MX_DMA_Init+0x78>)
 8000bb4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bba:	4b11      	ldr	r3, [pc, #68]	; (8000c00 <MX_DMA_Init+0x78>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bc2:	603b      	str	r3, [r7, #0]
 8000bc4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	2100      	movs	r1, #0
 8000bca:	2010      	movs	r0, #16
 8000bcc:	f001 fbf7 	bl	80023be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000bd0:	2010      	movs	r0, #16
 8000bd2:	f001 fc10 	bl	80023f6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	2100      	movs	r1, #0
 8000bda:	2011      	movs	r0, #17
 8000bdc:	f001 fbef 	bl	80023be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000be0:	2011      	movs	r0, #17
 8000be2:	f001 fc08 	bl	80023f6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000be6:	2200      	movs	r2, #0
 8000be8:	2100      	movs	r1, #0
 8000bea:	203a      	movs	r0, #58	; 0x3a
 8000bec:	f001 fbe7 	bl	80023be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000bf0:	203a      	movs	r0, #58	; 0x3a
 8000bf2:	f001 fc00 	bl	80023f6 <HAL_NVIC_EnableIRQ>

}
 8000bf6:	bf00      	nop
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	40023800 	.word	0x40023800

08000c04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b08c      	sub	sp, #48	; 0x30
 8000c08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0a:	f107 031c 	add.w	r3, r7, #28
 8000c0e:	2200      	movs	r2, #0
 8000c10:	601a      	str	r2, [r3, #0]
 8000c12:	605a      	str	r2, [r3, #4]
 8000c14:	609a      	str	r2, [r3, #8]
 8000c16:	60da      	str	r2, [r3, #12]
 8000c18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	61bb      	str	r3, [r7, #24]
 8000c1e:	4b57      	ldr	r3, [pc, #348]	; (8000d7c <MX_GPIO_Init+0x178>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	4a56      	ldr	r2, [pc, #344]	; (8000d7c <MX_GPIO_Init+0x178>)
 8000c24:	f043 0310 	orr.w	r3, r3, #16
 8000c28:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2a:	4b54      	ldr	r3, [pc, #336]	; (8000d7c <MX_GPIO_Init+0x178>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	f003 0310 	and.w	r3, r3, #16
 8000c32:	61bb      	str	r3, [r7, #24]
 8000c34:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	617b      	str	r3, [r7, #20]
 8000c3a:	4b50      	ldr	r3, [pc, #320]	; (8000d7c <MX_GPIO_Init+0x178>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	4a4f      	ldr	r2, [pc, #316]	; (8000d7c <MX_GPIO_Init+0x178>)
 8000c40:	f043 0302 	orr.w	r3, r3, #2
 8000c44:	6313      	str	r3, [r2, #48]	; 0x30
 8000c46:	4b4d      	ldr	r3, [pc, #308]	; (8000d7c <MX_GPIO_Init+0x178>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	f003 0302 	and.w	r3, r3, #2
 8000c4e:	617b      	str	r3, [r7, #20]
 8000c50:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	613b      	str	r3, [r7, #16]
 8000c56:	4b49      	ldr	r3, [pc, #292]	; (8000d7c <MX_GPIO_Init+0x178>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	4a48      	ldr	r2, [pc, #288]	; (8000d7c <MX_GPIO_Init+0x178>)
 8000c5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c60:	6313      	str	r3, [r2, #48]	; 0x30
 8000c62:	4b46      	ldr	r3, [pc, #280]	; (8000d7c <MX_GPIO_Init+0x178>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c6a:	613b      	str	r3, [r7, #16]
 8000c6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	60fb      	str	r3, [r7, #12]
 8000c72:	4b42      	ldr	r3, [pc, #264]	; (8000d7c <MX_GPIO_Init+0x178>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	4a41      	ldr	r2, [pc, #260]	; (8000d7c <MX_GPIO_Init+0x178>)
 8000c78:	f043 0301 	orr.w	r3, r3, #1
 8000c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7e:	4b3f      	ldr	r3, [pc, #252]	; (8000d7c <MX_GPIO_Init+0x178>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	f003 0301 	and.w	r3, r3, #1
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	60bb      	str	r3, [r7, #8]
 8000c8e:	4b3b      	ldr	r3, [pc, #236]	; (8000d7c <MX_GPIO_Init+0x178>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	4a3a      	ldr	r2, [pc, #232]	; (8000d7c <MX_GPIO_Init+0x178>)
 8000c94:	f043 0308 	orr.w	r3, r3, #8
 8000c98:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9a:	4b38      	ldr	r3, [pc, #224]	; (8000d7c <MX_GPIO_Init+0x178>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	f003 0308 	and.w	r3, r3, #8
 8000ca2:	60bb      	str	r3, [r7, #8]
 8000ca4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	607b      	str	r3, [r7, #4]
 8000caa:	4b34      	ldr	r3, [pc, #208]	; (8000d7c <MX_GPIO_Init+0x178>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	4a33      	ldr	r2, [pc, #204]	; (8000d7c <MX_GPIO_Init+0x178>)
 8000cb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb6:	4b31      	ldr	r3, [pc, #196]	; (8000d7c <MX_GPIO_Init+0x178>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cbe:	607b      	str	r3, [r7, #4]
 8000cc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	603b      	str	r3, [r7, #0]
 8000cc6:	4b2d      	ldr	r3, [pc, #180]	; (8000d7c <MX_GPIO_Init+0x178>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	4a2c      	ldr	r2, [pc, #176]	; (8000d7c <MX_GPIO_Init+0x178>)
 8000ccc:	f043 0320 	orr.w	r3, r3, #32
 8000cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd2:	4b2a      	ldr	r3, [pc, #168]	; (8000d7c <MX_GPIO_Init+0x178>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	f003 0320 	and.w	r3, r3, #32
 8000cda:	603b      	str	r3, [r7, #0]
 8000cdc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, IST_INT_Pin|IST_RST_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	f640 010c 	movw	r1, #2060	; 0x80c
 8000ce4:	4826      	ldr	r0, [pc, #152]	; (8000d80 <MX_GPIO_Init+0x17c>)
 8000ce6:	f002 f8cf 	bl	8002e88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000cea:	2200      	movs	r2, #0
 8000cec:	213c      	movs	r1, #60	; 0x3c
 8000cee:	4825      	ldr	r0, [pc, #148]	; (8000d84 <MX_GPIO_Init+0x180>)
 8000cf0:	f002 f8ca 	bl	8002e88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6|LED_GREEN_Pin, GPIO_PIN_RESET);
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	f244 0140 	movw	r1, #16448	; 0x4040
 8000cfa:	4823      	ldr	r0, [pc, #140]	; (8000d88 <MX_GPIO_Init+0x184>)
 8000cfc:	f002 f8c4 	bl	8002e88 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : IST_INT_Pin IST_RST_Pin */
  GPIO_InitStruct.Pin = IST_INT_Pin|IST_RST_Pin;
 8000d00:	230c      	movs	r3, #12
 8000d02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d04:	2301      	movs	r3, #1
 8000d06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d0c:	2303      	movs	r3, #3
 8000d0e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d10:	f107 031c 	add.w	r3, r7, #28
 8000d14:	4619      	mov	r1, r3
 8000d16:	481a      	ldr	r0, [pc, #104]	; (8000d80 <MX_GPIO_Init+0x17c>)
 8000d18:	f001 ff0a 	bl	8002b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH2 PH3 PH4 PH5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000d1c:	233c      	movs	r3, #60	; 0x3c
 8000d1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d20:	2301      	movs	r3, #1
 8000d22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d2c:	f107 031c 	add.w	r3, r7, #28
 8000d30:	4619      	mov	r1, r3
 8000d32:	4814      	ldr	r0, [pc, #80]	; (8000d84 <MX_GPIO_Init+0x180>)
 8000d34:	f001 fefc 	bl	8002b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 LED_GREEN_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_6|LED_GREEN_Pin;
 8000d38:	f244 0340 	movw	r3, #16448	; 0x4040
 8000d3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d46:	2300      	movs	r3, #0
 8000d48:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d4a:	f107 031c 	add.w	r3, r7, #28
 8000d4e:	4619      	mov	r1, r3
 8000d50:	480d      	ldr	r0, [pc, #52]	; (8000d88 <MX_GPIO_Init+0x184>)
 8000d52:	f001 feed 	bl	8002b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8000d56:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d60:	2300      	movs	r3, #0
 8000d62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d64:	2300      	movs	r3, #0
 8000d66:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000d68:	f107 031c 	add.w	r3, r7, #28
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4804      	ldr	r0, [pc, #16]	; (8000d80 <MX_GPIO_Init+0x17c>)
 8000d70:	f001 fede 	bl	8002b30 <HAL_GPIO_Init>

}
 8000d74:	bf00      	nop
 8000d76:	3730      	adds	r7, #48	; 0x30
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	40023800 	.word	0x40023800
 8000d80:	40021000 	.word	0x40021000
 8000d84:	40021c00 	.word	0x40021c00
 8000d88:	40021400 	.word	0x40021400

08000d8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
	...

08000d9c <HAL_CAN_RxFifo0MsgPendingCallback>:
    else
        while (HAL_CAN_IsTxMessagePending(hcan, pTxMailbox));
}


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b08c      	sub	sp, #48	; 0x30
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef rx_header;
    uint8_t rx_data[CAN_DATA_SIZE];

    HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, rx_data);
 8000da4:	f107 0308 	add.w	r3, r7, #8
 8000da8:	f107 0210 	add.w	r2, r7, #16
 8000dac:	2100      	movs	r1, #0
 8000dae:	6878      	ldr	r0, [r7, #4]
 8000db0:	f000 fee8 	bl	8001b84 <HAL_CAN_GetRxMessage>
    uint8_t idx = rx_header.StdId - CAN_RX_ID_START;
 8000db4:	693b      	ldr	r3, [r7, #16]
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	3b01      	subs	r3, #1
 8000dba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    get_motor_measure(&motors[idx], rx_data);
 8000dbe:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000dc2:	4613      	mov	r3, r2
 8000dc4:	005b      	lsls	r3, r3, #1
 8000dc6:	4413      	add	r3, r2
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	4a06      	ldr	r2, [pc, #24]	; (8000de4 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8000dcc:	4413      	add	r3, r2
 8000dce:	f107 0208 	add.w	r2, r7, #8
 8000dd2:	4611      	mov	r1, r2
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f000 f807 	bl	8000de8 <get_motor_measure>

}
 8000dda:	bf00      	nop
 8000ddc:	3730      	adds	r7, #48	; 0x30
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	200004bc 	.word	0x200004bc

08000de8 <get_motor_measure>:

void get_motor_measure(motor_measure_t* m, uint8_t data[CAN_DATA_SIZE]){
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	6039      	str	r1, [r7, #0]
    (m)->last_ecd = (m)->ecd;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	881b      	ldrh	r3, [r3, #0]
 8000df6:	b21a      	sxth	r2, r3
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	811a      	strh	r2, [r3, #8]
    (m)->ecd = (uint16_t)((data)[0] << 8 | (data)[1]);
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	021b      	lsls	r3, r3, #8
 8000e02:	b21a      	sxth	r2, r3
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	3301      	adds	r3, #1
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	b21b      	sxth	r3, r3
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	b21b      	sxth	r3, r3
 8000e10:	b29a      	uxth	r2, r3
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	801a      	strh	r2, [r3, #0]
    (m)->speed_rpm = (uint16_t)((data)[2] << 8 | (data)[3]);
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	3302      	adds	r3, #2
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	021b      	lsls	r3, r3, #8
 8000e1e:	b21a      	sxth	r2, r3
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	3303      	adds	r3, #3
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	b21b      	sxth	r3, r3
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	b21a      	sxth	r2, r3
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	805a      	strh	r2, [r3, #2]
    (m)->given_current = (uint16_t)((data)[4] << 8 | (data)[5]);
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	3304      	adds	r3, #4
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	021b      	lsls	r3, r3, #8
 8000e38:	b21a      	sxth	r2, r3
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	3305      	adds	r3, #5
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	b21b      	sxth	r3, r3
 8000e42:	4313      	orrs	r3, r2
 8000e44:	b21a      	sxth	r2, r3
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	809a      	strh	r2, [r3, #4]
    (m)->temperature = (data)[6];
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	799a      	ldrb	r2, [r3, #6]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	719a      	strb	r2, [r3, #6]
}
 8000e52:	bf00      	nop
 8000e54:	370c      	adds	r7, #12
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
	...

08000e60 <led_off>:
 */


#include "rm_gpio.h"

void led_off(void){
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8000e64:	2201      	movs	r2, #1
 8000e66:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e6a:	4805      	ldr	r0, [pc, #20]	; (8000e80 <led_off+0x20>)
 8000e6c:	f002 f80c 	bl	8002e88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8000e70:	2201      	movs	r2, #1
 8000e72:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e76:	4803      	ldr	r0, [pc, #12]	; (8000e84 <led_off+0x24>)
 8000e78:	f002 f806 	bl	8002e88 <HAL_GPIO_WritePin>
}
 8000e7c:	bf00      	nop
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	40021400 	.word	0x40021400
 8000e84:	40021000 	.word	0x40021000

08000e88 <power_on>:

void power_on(void){
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOH, GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5, GPIO_PIN_SET);
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	213c      	movs	r1, #60	; 0x3c
 8000e90:	4802      	ldr	r0, [pc, #8]	; (8000e9c <power_on+0x14>)
 8000e92:	f001 fff9 	bl	8002e88 <HAL_GPIO_WritePin>
}
 8000e96:	bf00      	nop
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40021c00 	.word	0x40021c00

08000ea0 <uart_receive_dma_no_it>:
  * @param[in]  pData: receive buff
  * @param[in]  Size:  buff size
  * @retval     set success or fail
  */
static int uart_receive_dma_no_it(UART_HandleTypeDef* huart, uint8_t* pData, uint32_t Size)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b086      	sub	sp, #24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
  uint32_t tmp1 = 0;
 8000eac:	2300      	movs	r3, #0
 8000eae:	617b      	str	r3, [r7, #20]

  tmp1 = huart->RxState;
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	617b      	str	r3, [r7, #20]

	if (tmp1 == HAL_UART_STATE_READY)
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	2b20      	cmp	r3, #32
 8000ebe:	d125      	bne.n	8000f0c <uart_receive_dma_no_it+0x6c>
	{
		if ((pData == NULL) || (Size == 0))
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d002      	beq.n	8000ecc <uart_receive_dma_no_it+0x2c>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d101      	bne.n	8000ed0 <uart_receive_dma_no_it+0x30>
		{
			return HAL_ERROR;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	e01e      	b.n	8000f0e <uart_receive_dma_no_it+0x6e>
		}

		huart->pRxBuffPtr = pData;
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	68ba      	ldr	r2, [r7, #8]
 8000ed4:	629a      	str	r2, [r3, #40]	; 0x28
		huart->RxXferSize = Size;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	b29a      	uxth	r2, r3
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	859a      	strh	r2, [r3, #44]	; 0x2c
		huart->ErrorCode  = HAL_UART_ERROR_NONE;
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	63da      	str	r2, [r3, #60]	; 0x3c

		/* Enable the DMA Stream */
		HAL_DMA_Start(huart->hdmarx, (uint32_t)&huart->Instance->DR, (uint32_t)pData, Size);
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	3304      	adds	r3, #4
 8000eee:	4619      	mov	r1, r3
 8000ef0:	68ba      	ldr	r2, [r7, #8]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	f001 fb54 	bl	80025a0 <HAL_DMA_Start>

		/*
		 * Enable the DMA transfer for the receiver request by setting the DMAR bit
		 * in the UART CR3 register
		 */
		SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	695a      	ldr	r2, [r3, #20]
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000f06:	615a      	str	r2, [r3, #20]

		return HAL_OK;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	e000      	b.n	8000f0e <uart_receive_dma_no_it+0x6e>
	}
	else
	{
		return HAL_BUSY;
 8000f0c:	2302      	movs	r3, #2
	}
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3718      	adds	r7, #24
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <dma_current_data_counter>:
  * @param[in]  dma_stream: where y can be 1 or 2 to select the DMA and x can be 0
  *             to 7 to select the DMA Stream.
  * @retval     The number of remaining data units in the current DMAy Streamx transfer.
  */
uint16_t dma_current_data_counter(DMA_Stream_TypeDef *dma_stream)
{
 8000f16:	b480      	push	{r7}
 8000f18:	b083      	sub	sp, #12
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
  /* Return the number of remaining data units for DMAy Streamx */
  return ((uint16_t)(dma_stream->NDTR));
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	b29b      	uxth	r3, r3
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	370c      	adds	r7, #12
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr

08000f30 <rc_callback_handler>:
  * @param[out]  rc:   structure to save handled rc data
  * @param[in]   buff: the buff which saved raw rc data
  * @retval
  */
void rc_callback_handler(rc_info_t *rc, uint8_t *buff)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	6039      	str	r1, [r7, #0]
  rc->ch1 = (buff[0] | buff[1] << 8) & 0x07FF;
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	b21a      	sxth	r2, r3
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	3301      	adds	r3, #1
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	021b      	lsls	r3, r3, #8
 8000f48:	b21b      	sxth	r3, r3
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	b21b      	sxth	r3, r3
 8000f4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000f52:	b21a      	sxth	r2, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	801a      	strh	r2, [r3, #0]
  rc->ch1 -= 1024;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f5e:	b29b      	uxth	r3, r3
 8000f60:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8000f64:	b29b      	uxth	r3, r3
 8000f66:	b21a      	sxth	r2, r3
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	801a      	strh	r2, [r3, #0]
  rc->ch2 = (buff[1] >> 3 | buff[2] << 5) & 0x07FF;
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	3301      	adds	r3, #1
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	08db      	lsrs	r3, r3, #3
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	b21a      	sxth	r2, r3
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	3302      	adds	r3, #2
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	015b      	lsls	r3, r3, #5
 8000f80:	b21b      	sxth	r3, r3
 8000f82:	4313      	orrs	r3, r2
 8000f84:	b21b      	sxth	r3, r3
 8000f86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000f8a:	b21a      	sxth	r2, r3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	805a      	strh	r2, [r3, #2]
  rc->ch2 -= 1024;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000f96:	b29b      	uxth	r3, r3
 8000f98:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8000f9c:	b29b      	uxth	r3, r3
 8000f9e:	b21a      	sxth	r2, r3
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	805a      	strh	r2, [r3, #2]
  rc->ch3 = (buff[2] >> 6 | buff[3] << 2 | buff[4] << 10) & 0x07FF;
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	3302      	adds	r3, #2
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	099b      	lsrs	r3, r3, #6
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	b21a      	sxth	r2, r3
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	3303      	adds	r3, #3
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	b21b      	sxth	r3, r3
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	b21a      	sxth	r2, r3
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	3304      	adds	r3, #4
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	029b      	lsls	r3, r3, #10
 8000fc6:	b21b      	sxth	r3, r3
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	b21b      	sxth	r3, r3
 8000fcc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000fd0:	b21a      	sxth	r2, r3
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	809a      	strh	r2, [r3, #4]
  rc->ch3 -= 1024;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000fdc:	b29b      	uxth	r3, r3
 8000fde:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8000fe2:	b29b      	uxth	r3, r3
 8000fe4:	b21a      	sxth	r2, r3
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	809a      	strh	r2, [r3, #4]
  rc->ch4 = (buff[4] >> 1 | buff[5] << 7) & 0x07FF;
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	3304      	adds	r3, #4
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	085b      	lsrs	r3, r3, #1
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	b21a      	sxth	r2, r3
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	3305      	adds	r3, #5
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	01db      	lsls	r3, r3, #7
 8000ffe:	b21b      	sxth	r3, r3
 8001000:	4313      	orrs	r3, r2
 8001002:	b21b      	sxth	r3, r3
 8001004:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001008:	b21a      	sxth	r2, r3
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	80da      	strh	r2, [r3, #6]
  rc->ch4 -= 1024;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001014:	b29b      	uxth	r3, r3
 8001016:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800101a:	b29b      	uxth	r3, r3
 800101c:	b21a      	sxth	r2, r3
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	80da      	strh	r2, [r3, #6]

  rc->sw1 = ((buff[5] >> 4) & 0x000C) >> 2;
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	3305      	adds	r3, #5
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	091b      	lsrs	r3, r3, #4
 800102a:	b2db      	uxtb	r3, r3
 800102c:	109b      	asrs	r3, r3, #2
 800102e:	b2db      	uxtb	r3, r3
 8001030:	f003 0303 	and.w	r3, r3, #3
 8001034:	b2da      	uxtb	r2, r3
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	729a      	strb	r2, [r3, #10]
  rc->sw2 = (buff[5] >> 4) & 0x0003;
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	3305      	adds	r3, #5
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	091b      	lsrs	r3, r3, #4
 8001042:	b2db      	uxtb	r3, r3
 8001044:	f003 0303 	and.w	r3, r3, #3
 8001048:	b2da      	uxtb	r2, r3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	72da      	strb	r2, [r3, #11]

  if ((abs(rc->ch1) > 660) || \
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001054:	2b00      	cmp	r3, #0
 8001056:	bfb8      	it	lt
 8001058:	425b      	neglt	r3, r3
 800105a:	b29b      	uxth	r3, r3
 800105c:	f5b3 7f25 	cmp.w	r3, #660	; 0x294
 8001060:	d81d      	bhi.n	800109e <rc_callback_handler+0x16e>
      (abs(rc->ch2) > 660) || \
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001068:	2b00      	cmp	r3, #0
 800106a:	bfb8      	it	lt
 800106c:	425b      	neglt	r3, r3
 800106e:	b29b      	uxth	r3, r3
  if ((abs(rc->ch1) > 660) || \
 8001070:	f5b3 7f25 	cmp.w	r3, #660	; 0x294
 8001074:	d813      	bhi.n	800109e <rc_callback_handler+0x16e>
      (abs(rc->ch3) > 660) || \
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800107c:	2b00      	cmp	r3, #0
 800107e:	bfb8      	it	lt
 8001080:	425b      	neglt	r3, r3
 8001082:	b29b      	uxth	r3, r3
      (abs(rc->ch2) > 660) || \
 8001084:	f5b3 7f25 	cmp.w	r3, #660	; 0x294
 8001088:	d809      	bhi.n	800109e <rc_callback_handler+0x16e>
      (abs(rc->ch4) > 660))
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001090:	2b00      	cmp	r3, #0
 8001092:	bfb8      	it	lt
 8001094:	425b      	neglt	r3, r3
 8001096:	b29b      	uxth	r3, r3
      (abs(rc->ch3) > 660) || \
 8001098:	f5b3 7f25 	cmp.w	r3, #660	; 0x294
 800109c:	d904      	bls.n	80010a8 <rc_callback_handler+0x178>
  {
    memset(rc, 0, sizeof(rc_info_t));
 800109e:	2216      	movs	r2, #22
 80010a0:	2100      	movs	r1, #0
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f003 fdba 	bl	8004c1c <memset>
  }

  rc->mouse.x = buff[6] | (buff[7] << 8);                    //!< Mouse X axis
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	3306      	adds	r3, #6
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	b21a      	sxth	r2, r3
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	3307      	adds	r3, #7
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	021b      	lsls	r3, r3, #8
 80010b8:	b21b      	sxth	r3, r3
 80010ba:	4313      	orrs	r3, r2
 80010bc:	b21a      	sxth	r2, r3
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	819a      	strh	r2, [r3, #12]
  rc->mouse.y = buff[8] | (buff[9] << 8);                    //!< Mouse Y axis
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	3308      	adds	r3, #8
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	b21a      	sxth	r2, r3
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	3309      	adds	r3, #9
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	021b      	lsls	r3, r3, #8
 80010d2:	b21b      	sxth	r3, r3
 80010d4:	4313      	orrs	r3, r2
 80010d6:	b21a      	sxth	r2, r3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	81da      	strh	r2, [r3, #14]
  rc->mouse.z = buff[10] | (buff[11] << 8);                  //!< Mouse Z axis
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	330a      	adds	r3, #10
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	b21a      	sxth	r2, r3
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	330b      	adds	r3, #11
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	021b      	lsls	r3, r3, #8
 80010ec:	b21b      	sxth	r3, r3
 80010ee:	4313      	orrs	r3, r2
 80010f0:	b21a      	sxth	r2, r3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	821a      	strh	r2, [r3, #16]
  rc->mouse.l = buff[12];                                  //!< Mouse Left Is Press ?
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	7b1a      	ldrb	r2, [r3, #12]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	749a      	strb	r2, [r3, #18]
  rc->mouse.r = buff[13];                                  //!< Mouse Right Is Press ?
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	7b5a      	ldrb	r2, [r3, #13]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	74da      	strb	r2, [r3, #19]
  rc->kb.key_code = buff[14] | (buff[15] << 8);                    //!< KeyBoard value
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	330e      	adds	r3, #14
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	b21a      	sxth	r2, r3
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	330f      	adds	r3, #15
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	021b      	lsls	r3, r3, #8
 8001116:	b21b      	sxth	r3, r3
 8001118:	4313      	orrs	r3, r2
 800111a:	b21b      	sxth	r3, r3
 800111c:	b29a      	uxth	r2, r3
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	829a      	strh	r2, [r3, #20]
  rc->wheel = buff[16] | ( buff[17] << 8);
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	3310      	adds	r3, #16
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	b21a      	sxth	r2, r3
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	3311      	adds	r3, #17
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	021b      	lsls	r3, r3, #8
 8001132:	b21b      	sxth	r3, r3
 8001134:	4313      	orrs	r3, r2
 8001136:	b21a      	sxth	r2, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	811a      	strh	r2, [r3, #8]
  rc->wheel -= 1024;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001142:	b29b      	uxth	r3, r3
 8001144:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001148:	b29b      	uxth	r3, r3
 800114a:	b21a      	sxth	r2, r3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	811a      	strh	r2, [r3, #8]
}
 8001150:	bf00      	nop
 8001152:	3708      	adds	r7, #8
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}

08001158 <uart_rx_idle_callback>:
  * @brief      clear idle it flag after uart receive a frame data
  * @param[in]  huart: uart IRQHandler id
  * @retval
  */
static void uart_rx_idle_callback(UART_HandleTypeDef* huart)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
	/* clear idle it flag avoid idle interrupt all the time */
	__HAL_UART_CLEAR_IDLEFLAG(huart);
 8001160:	2300      	movs	r3, #0
 8001162:	60fb      	str	r3, [r7, #12]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	68fb      	ldr	r3, [r7, #12]

	/* handle received data in idle interrupt */
	if (huart == &DBUS_HUART)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a17      	ldr	r2, [pc, #92]	; (80011d8 <uart_rx_idle_callback+0x80>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d127      	bne.n	80011ce <uart_rx_idle_callback+0x76>
	{
		/* clear DMA transfer complete flag */
		__HAL_DMA_DISABLE(huart->hdmarx);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f022 0201 	bic.w	r2, r2, #1
 8001190:	601a      	str	r2, [r3, #0]

		/* handle dbus data dbus_buf from DMA */
		if ((DBUS_MAX_LEN - dma_current_data_counter(huart->hdmarx->Instance)) == DBUS_BUFLEN)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff febc 	bl	8000f16 <dma_current_data_counter>
 800119e:	4603      	mov	r3, r0
 80011a0:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
 80011a4:	2b12      	cmp	r3, #18
 80011a6:	d103      	bne.n	80011b0 <uart_rx_idle_callback+0x58>
		{
			rc_callback_handler(&rc, dbus_buf);
 80011a8:	490c      	ldr	r1, [pc, #48]	; (80011dc <uart_rx_idle_callback+0x84>)
 80011aa:	480d      	ldr	r0, [pc, #52]	; (80011e0 <uart_rx_idle_callback+0x88>)
 80011ac:	f7ff fec0 	bl	8000f30 <rc_callback_handler>
		}

		/* restart dma transmission */
		__HAL_DMA_SET_COUNTER(huart->hdmarx, DBUS_MAX_LEN);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	2224      	movs	r2, #36	; 0x24
 80011b8:	605a      	str	r2, [r3, #4]
		__HAL_DMA_ENABLE(huart->hdmarx);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f042 0201 	orr.w	r2, r2, #1
 80011cc:	601a      	str	r2, [r3, #0]
	}
}
 80011ce:	bf00      	nop
 80011d0:	3710      	adds	r7, #16
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	20000288 	.word	0x20000288
 80011dc:	20000528 	.word	0x20000528
 80011e0:	20000510 	.word	0x20000510

080011e4 <uart_receive_handler>:
  * @brief      callback this function when uart interrupt
  * @param[in]  huart: uart IRQHandler id
  * @retval
  */
void uart_receive_handler(UART_HandleTypeDef *huart)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
	if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) &&
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f003 0310 	and.w	r3, r3, #16
 80011f6:	2b10      	cmp	r3, #16
 80011f8:	d109      	bne.n	800120e <uart_receive_handler+0x2a>
			__HAL_UART_GET_IT_SOURCE(huart, UART_IT_IDLE))
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	f003 0310 	and.w	r3, r3, #16
	if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) &&
 8001204:	2b00      	cmp	r3, #0
 8001206:	d002      	beq.n	800120e <uart_receive_handler+0x2a>
	{
		uart_rx_idle_callback(huart);
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f7ff ffa5 	bl	8001158 <uart_rx_idle_callback>
	}
}
 800120e:	bf00      	nop
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
	...

08001218 <dbus_uart_init>:
  * @brief   initialize dbus uart device
  * @param
  * @retval
  */
void dbus_uart_init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
	/* open uart idle it */
	__HAL_UART_CLEAR_IDLEFLAG(&DBUS_HUART);
 800121e:	2300      	movs	r3, #0
 8001220:	607b      	str	r3, [r7, #4]
 8001222:	4b0d      	ldr	r3, [pc, #52]	; (8001258 <dbus_uart_init+0x40>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	607b      	str	r3, [r7, #4]
 800122a:	4b0b      	ldr	r3, [pc, #44]	; (8001258 <dbus_uart_init+0x40>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	607b      	str	r3, [r7, #4]
 8001232:	687b      	ldr	r3, [r7, #4]
	__HAL_UART_ENABLE_IT(&DBUS_HUART, UART_IT_IDLE);
 8001234:	4b08      	ldr	r3, [pc, #32]	; (8001258 <dbus_uart_init+0x40>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	68da      	ldr	r2, [r3, #12]
 800123a:	4b07      	ldr	r3, [pc, #28]	; (8001258 <dbus_uart_init+0x40>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f042 0210 	orr.w	r2, r2, #16
 8001242:	60da      	str	r2, [r3, #12]

	uart_receive_dma_no_it(&DBUS_HUART, dbus_buf, DBUS_MAX_LEN);
 8001244:	2224      	movs	r2, #36	; 0x24
 8001246:	4905      	ldr	r1, [pc, #20]	; (800125c <dbus_uart_init+0x44>)
 8001248:	4803      	ldr	r0, [pc, #12]	; (8001258 <dbus_uart_init+0x40>)
 800124a:	f7ff fe29 	bl	8000ea0 <uart_receive_dma_no_it>
}
 800124e:	bf00      	nop
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	20000288 	.word	0x20000288
 800125c:	20000528 	.word	0x20000528

08001260 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	607b      	str	r3, [r7, #4]
 800126a:	4b10      	ldr	r3, [pc, #64]	; (80012ac <HAL_MspInit+0x4c>)
 800126c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126e:	4a0f      	ldr	r2, [pc, #60]	; (80012ac <HAL_MspInit+0x4c>)
 8001270:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001274:	6453      	str	r3, [r2, #68]	; 0x44
 8001276:	4b0d      	ldr	r3, [pc, #52]	; (80012ac <HAL_MspInit+0x4c>)
 8001278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800127e:	607b      	str	r3, [r7, #4]
 8001280:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	603b      	str	r3, [r7, #0]
 8001286:	4b09      	ldr	r3, [pc, #36]	; (80012ac <HAL_MspInit+0x4c>)
 8001288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128a:	4a08      	ldr	r2, [pc, #32]	; (80012ac <HAL_MspInit+0x4c>)
 800128c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001290:	6413      	str	r3, [r2, #64]	; 0x40
 8001292:	4b06      	ldr	r3, [pc, #24]	; (80012ac <HAL_MspInit+0x4c>)
 8001294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800129a:	603b      	str	r3, [r7, #0]
 800129c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800129e:	bf00      	nop
 80012a0:	370c      	adds	r7, #12
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	40023800 	.word	0x40023800

080012b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b08a      	sub	sp, #40	; 0x28
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b8:	f107 0314 	add.w	r3, r7, #20
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	609a      	str	r2, [r3, #8]
 80012c4:	60da      	str	r2, [r3, #12]
 80012c6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a19      	ldr	r2, [pc, #100]	; (8001334 <HAL_SPI_MspInit+0x84>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d12c      	bne.n	800132c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	613b      	str	r3, [r7, #16]
 80012d6:	4b18      	ldr	r3, [pc, #96]	; (8001338 <HAL_SPI_MspInit+0x88>)
 80012d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012da:	4a17      	ldr	r2, [pc, #92]	; (8001338 <HAL_SPI_MspInit+0x88>)
 80012dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80012e0:	6453      	str	r3, [r2, #68]	; 0x44
 80012e2:	4b15      	ldr	r3, [pc, #84]	; (8001338 <HAL_SPI_MspInit+0x88>)
 80012e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012ea:	613b      	str	r3, [r7, #16]
 80012ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	60fb      	str	r3, [r7, #12]
 80012f2:	4b11      	ldr	r3, [pc, #68]	; (8001338 <HAL_SPI_MspInit+0x88>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	4a10      	ldr	r2, [pc, #64]	; (8001338 <HAL_SPI_MspInit+0x88>)
 80012f8:	f043 0320 	orr.w	r3, r3, #32
 80012fc:	6313      	str	r3, [r2, #48]	; 0x30
 80012fe:	4b0e      	ldr	r3, [pc, #56]	; (8001338 <HAL_SPI_MspInit+0x88>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	f003 0320 	and.w	r3, r3, #32
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF9     ------> SPI5_MOSI
    PF8     ------> SPI5_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_8;
 800130a:	f44f 7360 	mov.w	r3, #896	; 0x380
 800130e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001310:	2302      	movs	r3, #2
 8001312:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001314:	2300      	movs	r3, #0
 8001316:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001318:	2303      	movs	r3, #3
 800131a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800131c:	2305      	movs	r3, #5
 800131e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001320:	f107 0314 	add.w	r3, r7, #20
 8001324:	4619      	mov	r1, r3
 8001326:	4805      	ldr	r0, [pc, #20]	; (800133c <HAL_SPI_MspInit+0x8c>)
 8001328:	f001 fc02 	bl	8002b30 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 800132c:	bf00      	nop
 800132e:	3728      	adds	r7, #40	; 0x28
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	40015000 	.word	0x40015000
 8001338:	40023800 	.word	0x40023800
 800133c:	40021400 	.word	0x40021400

08001340 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001340:	b480      	push	{r7}
 8001342:	b089      	sub	sp, #36	; 0x24
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001350:	d10e      	bne.n	8001370 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	61fb      	str	r3, [r7, #28]
 8001356:	4b31      	ldr	r3, [pc, #196]	; (800141c <HAL_TIM_PWM_MspInit+0xdc>)
 8001358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135a:	4a30      	ldr	r2, [pc, #192]	; (800141c <HAL_TIM_PWM_MspInit+0xdc>)
 800135c:	f043 0301 	orr.w	r3, r3, #1
 8001360:	6413      	str	r3, [r2, #64]	; 0x40
 8001362:	4b2e      	ldr	r3, [pc, #184]	; (800141c <HAL_TIM_PWM_MspInit+0xdc>)
 8001364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	61fb      	str	r3, [r7, #28]
 800136c:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 800136e:	e04e      	b.n	800140e <HAL_TIM_PWM_MspInit+0xce>
  else if(htim_pwm->Instance==TIM3)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a2a      	ldr	r2, [pc, #168]	; (8001420 <HAL_TIM_PWM_MspInit+0xe0>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d10e      	bne.n	8001398 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	61bb      	str	r3, [r7, #24]
 800137e:	4b27      	ldr	r3, [pc, #156]	; (800141c <HAL_TIM_PWM_MspInit+0xdc>)
 8001380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001382:	4a26      	ldr	r2, [pc, #152]	; (800141c <HAL_TIM_PWM_MspInit+0xdc>)
 8001384:	f043 0302 	orr.w	r3, r3, #2
 8001388:	6413      	str	r3, [r2, #64]	; 0x40
 800138a:	4b24      	ldr	r3, [pc, #144]	; (800141c <HAL_TIM_PWM_MspInit+0xdc>)
 800138c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138e:	f003 0302 	and.w	r3, r3, #2
 8001392:	61bb      	str	r3, [r7, #24]
 8001394:	69bb      	ldr	r3, [r7, #24]
}
 8001396:	e03a      	b.n	800140e <HAL_TIM_PWM_MspInit+0xce>
  else if(htim_pwm->Instance==TIM4)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a21      	ldr	r2, [pc, #132]	; (8001424 <HAL_TIM_PWM_MspInit+0xe4>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d10e      	bne.n	80013c0 <HAL_TIM_PWM_MspInit+0x80>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80013a2:	2300      	movs	r3, #0
 80013a4:	617b      	str	r3, [r7, #20]
 80013a6:	4b1d      	ldr	r3, [pc, #116]	; (800141c <HAL_TIM_PWM_MspInit+0xdc>)
 80013a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013aa:	4a1c      	ldr	r2, [pc, #112]	; (800141c <HAL_TIM_PWM_MspInit+0xdc>)
 80013ac:	f043 0304 	orr.w	r3, r3, #4
 80013b0:	6413      	str	r3, [r2, #64]	; 0x40
 80013b2:	4b1a      	ldr	r3, [pc, #104]	; (800141c <HAL_TIM_PWM_MspInit+0xdc>)
 80013b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b6:	f003 0304 	and.w	r3, r3, #4
 80013ba:	617b      	str	r3, [r7, #20]
 80013bc:	697b      	ldr	r3, [r7, #20]
}
 80013be:	e026      	b.n	800140e <HAL_TIM_PWM_MspInit+0xce>
  else if(htim_pwm->Instance==TIM5)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a18      	ldr	r2, [pc, #96]	; (8001428 <HAL_TIM_PWM_MspInit+0xe8>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d10e      	bne.n	80013e8 <HAL_TIM_PWM_MspInit+0xa8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	613b      	str	r3, [r7, #16]
 80013ce:	4b13      	ldr	r3, [pc, #76]	; (800141c <HAL_TIM_PWM_MspInit+0xdc>)
 80013d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d2:	4a12      	ldr	r2, [pc, #72]	; (800141c <HAL_TIM_PWM_MspInit+0xdc>)
 80013d4:	f043 0308 	orr.w	r3, r3, #8
 80013d8:	6413      	str	r3, [r2, #64]	; 0x40
 80013da:	4b10      	ldr	r3, [pc, #64]	; (800141c <HAL_TIM_PWM_MspInit+0xdc>)
 80013dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013de:	f003 0308 	and.w	r3, r3, #8
 80013e2:	613b      	str	r3, [r7, #16]
 80013e4:	693b      	ldr	r3, [r7, #16]
}
 80013e6:	e012      	b.n	800140e <HAL_TIM_PWM_MspInit+0xce>
  else if(htim_pwm->Instance==TIM12)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a0f      	ldr	r2, [pc, #60]	; (800142c <HAL_TIM_PWM_MspInit+0xec>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d10d      	bne.n	800140e <HAL_TIM_PWM_MspInit+0xce>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	60fb      	str	r3, [r7, #12]
 80013f6:	4b09      	ldr	r3, [pc, #36]	; (800141c <HAL_TIM_PWM_MspInit+0xdc>)
 80013f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fa:	4a08      	ldr	r2, [pc, #32]	; (800141c <HAL_TIM_PWM_MspInit+0xdc>)
 80013fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001400:	6413      	str	r3, [r2, #64]	; 0x40
 8001402:	4b06      	ldr	r3, [pc, #24]	; (800141c <HAL_TIM_PWM_MspInit+0xdc>)
 8001404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	68fb      	ldr	r3, [r7, #12]
}
 800140e:	bf00      	nop
 8001410:	3724      	adds	r7, #36	; 0x24
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	40023800 	.word	0x40023800
 8001420:	40000400 	.word	0x40000400
 8001424:	40000800 	.word	0x40000800
 8001428:	40000c00 	.word	0x40000c00
 800142c:	40001800 	.word	0x40001800

08001430 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b08c      	sub	sp, #48	; 0x30
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001438:	f107 031c 	add.w	r3, r7, #28
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	605a      	str	r2, [r3, #4]
 8001442:	609a      	str	r2, [r3, #8]
 8001444:	60da      	str	r2, [r3, #12]
 8001446:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001450:	d11e      	bne.n	8001490 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	61bb      	str	r3, [r7, #24]
 8001456:	4b59      	ldr	r3, [pc, #356]	; (80015bc <HAL_TIM_MspPostInit+0x18c>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	4a58      	ldr	r2, [pc, #352]	; (80015bc <HAL_TIM_MspPostInit+0x18c>)
 800145c:	f043 0301 	orr.w	r3, r3, #1
 8001460:	6313      	str	r3, [r2, #48]	; 0x30
 8001462:	4b56      	ldr	r3, [pc, #344]	; (80015bc <HAL_TIM_MspPostInit+0x18c>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	f003 0301 	and.w	r3, r3, #1
 800146a:	61bb      	str	r3, [r7, #24]
 800146c:	69bb      	ldr	r3, [r7, #24]
    PA1     ------> TIM2_CH2
    PA0/WKUP     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 800146e:	230f      	movs	r3, #15
 8001470:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001472:	2302      	movs	r3, #2
 8001474:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	2300      	movs	r3, #0
 8001478:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147a:	2300      	movs	r3, #0
 800147c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800147e:	2301      	movs	r3, #1
 8001480:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001482:	f107 031c 	add.w	r3, r7, #28
 8001486:	4619      	mov	r1, r3
 8001488:	484d      	ldr	r0, [pc, #308]	; (80015c0 <HAL_TIM_MspPostInit+0x190>)
 800148a:	f001 fb51 	bl	8002b30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 800148e:	e090      	b.n	80015b2 <HAL_TIM_MspPostInit+0x182>
  else if(htim->Instance==TIM3)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a4b      	ldr	r2, [pc, #300]	; (80015c4 <HAL_TIM_MspPostInit+0x194>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d11e      	bne.n	80014d8 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	617b      	str	r3, [r7, #20]
 800149e:	4b47      	ldr	r3, [pc, #284]	; (80015bc <HAL_TIM_MspPostInit+0x18c>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	4a46      	ldr	r2, [pc, #280]	; (80015bc <HAL_TIM_MspPostInit+0x18c>)
 80014a4:	f043 0302 	orr.w	r3, r3, #2
 80014a8:	6313      	str	r3, [r2, #48]	; 0x30
 80014aa:	4b44      	ldr	r3, [pc, #272]	; (80015bc <HAL_TIM_MspPostInit+0x18c>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	f003 0302 	and.w	r3, r3, #2
 80014b2:	617b      	str	r3, [r7, #20]
 80014b4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80014b6:	2320      	movs	r3, #32
 80014b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ba:	2302      	movs	r3, #2
 80014bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014be:	2300      	movs	r3, #0
 80014c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c2:	2300      	movs	r3, #0
 80014c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80014c6:	2302      	movs	r3, #2
 80014c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ca:	f107 031c 	add.w	r3, r7, #28
 80014ce:	4619      	mov	r1, r3
 80014d0:	483d      	ldr	r0, [pc, #244]	; (80015c8 <HAL_TIM_MspPostInit+0x198>)
 80014d2:	f001 fb2d 	bl	8002b30 <HAL_GPIO_Init>
}
 80014d6:	e06c      	b.n	80015b2 <HAL_TIM_MspPostInit+0x182>
  else if(htim->Instance==TIM4)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a3b      	ldr	r2, [pc, #236]	; (80015cc <HAL_TIM_MspPostInit+0x19c>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d11f      	bne.n	8001522 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	613b      	str	r3, [r7, #16]
 80014e6:	4b35      	ldr	r3, [pc, #212]	; (80015bc <HAL_TIM_MspPostInit+0x18c>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	4a34      	ldr	r2, [pc, #208]	; (80015bc <HAL_TIM_MspPostInit+0x18c>)
 80014ec:	f043 0308 	orr.w	r3, r3, #8
 80014f0:	6313      	str	r3, [r2, #48]	; 0x30
 80014f2:	4b32      	ldr	r3, [pc, #200]	; (80015bc <HAL_TIM_MspPostInit+0x18c>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	f003 0308 	and.w	r3, r3, #8
 80014fa:	613b      	str	r3, [r7, #16]
 80014fc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12;
 80014fe:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001502:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001504:	2302      	movs	r3, #2
 8001506:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001508:	2300      	movs	r3, #0
 800150a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150c:	2300      	movs	r3, #0
 800150e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001510:	2302      	movs	r3, #2
 8001512:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001514:	f107 031c 	add.w	r3, r7, #28
 8001518:	4619      	mov	r1, r3
 800151a:	482d      	ldr	r0, [pc, #180]	; (80015d0 <HAL_TIM_MspPostInit+0x1a0>)
 800151c:	f001 fb08 	bl	8002b30 <HAL_GPIO_Init>
}
 8001520:	e047      	b.n	80015b2 <HAL_TIM_MspPostInit+0x182>
  else if(htim->Instance==TIM5)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a2b      	ldr	r2, [pc, #172]	; (80015d4 <HAL_TIM_MspPostInit+0x1a4>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d11f      	bne.n	800156c <HAL_TIM_MspPostInit+0x13c>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800152c:	2300      	movs	r3, #0
 800152e:	60fb      	str	r3, [r7, #12]
 8001530:	4b22      	ldr	r3, [pc, #136]	; (80015bc <HAL_TIM_MspPostInit+0x18c>)
 8001532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001534:	4a21      	ldr	r2, [pc, #132]	; (80015bc <HAL_TIM_MspPostInit+0x18c>)
 8001536:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800153a:	6313      	str	r3, [r2, #48]	; 0x30
 800153c:	4b1f      	ldr	r3, [pc, #124]	; (80015bc <HAL_TIM_MspPostInit+0x18c>)
 800153e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001540:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001544:	60fb      	str	r3, [r7, #12]
 8001546:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10;
 8001548:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800154c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800154e:	2302      	movs	r3, #2
 8001550:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001552:	2300      	movs	r3, #0
 8001554:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001556:	2300      	movs	r3, #0
 8001558:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800155a:	2302      	movs	r3, #2
 800155c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800155e:	f107 031c 	add.w	r3, r7, #28
 8001562:	4619      	mov	r1, r3
 8001564:	481c      	ldr	r0, [pc, #112]	; (80015d8 <HAL_TIM_MspPostInit+0x1a8>)
 8001566:	f001 fae3 	bl	8002b30 <HAL_GPIO_Init>
}
 800156a:	e022      	b.n	80015b2 <HAL_TIM_MspPostInit+0x182>
  else if(htim->Instance==TIM12)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a1a      	ldr	r2, [pc, #104]	; (80015dc <HAL_TIM_MspPostInit+0x1ac>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d11d      	bne.n	80015b2 <HAL_TIM_MspPostInit+0x182>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	60bb      	str	r3, [r7, #8]
 800157a:	4b10      	ldr	r3, [pc, #64]	; (80015bc <HAL_TIM_MspPostInit+0x18c>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	4a0f      	ldr	r2, [pc, #60]	; (80015bc <HAL_TIM_MspPostInit+0x18c>)
 8001580:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001584:	6313      	str	r3, [r2, #48]	; 0x30
 8001586:	4b0d      	ldr	r3, [pc, #52]	; (80015bc <HAL_TIM_MspPostInit+0x18c>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800158e:	60bb      	str	r3, [r7, #8]
 8001590:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001592:	2340      	movs	r3, #64	; 0x40
 8001594:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001596:	2302      	movs	r3, #2
 8001598:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159a:	2300      	movs	r3, #0
 800159c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159e:	2300      	movs	r3, #0
 80015a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80015a2:	2309      	movs	r3, #9
 80015a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80015a6:	f107 031c 	add.w	r3, r7, #28
 80015aa:	4619      	mov	r1, r3
 80015ac:	480a      	ldr	r0, [pc, #40]	; (80015d8 <HAL_TIM_MspPostInit+0x1a8>)
 80015ae:	f001 fabf 	bl	8002b30 <HAL_GPIO_Init>
}
 80015b2:	bf00      	nop
 80015b4:	3730      	adds	r7, #48	; 0x30
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	40023800 	.word	0x40023800
 80015c0:	40020000 	.word	0x40020000
 80015c4:	40000400 	.word	0x40000400
 80015c8:	40020400 	.word	0x40020400
 80015cc:	40000800 	.word	0x40000800
 80015d0:	40020c00 	.word	0x40020c00
 80015d4:	40000c00 	.word	0x40000c00
 80015d8:	40021c00 	.word	0x40021c00
 80015dc:	40001800 	.word	0x40001800

080015e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b08e      	sub	sp, #56	; 0x38
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	605a      	str	r2, [r3, #4]
 80015f2:	609a      	str	r2, [r3, #8]
 80015f4:	60da      	str	r2, [r3, #12]
 80015f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a9e      	ldr	r2, [pc, #632]	; (8001878 <HAL_UART_MspInit+0x298>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d164      	bne.n	80016cc <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	623b      	str	r3, [r7, #32]
 8001606:	4b9d      	ldr	r3, [pc, #628]	; (800187c <HAL_UART_MspInit+0x29c>)
 8001608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160a:	4a9c      	ldr	r2, [pc, #624]	; (800187c <HAL_UART_MspInit+0x29c>)
 800160c:	f043 0310 	orr.w	r3, r3, #16
 8001610:	6453      	str	r3, [r2, #68]	; 0x44
 8001612:	4b9a      	ldr	r3, [pc, #616]	; (800187c <HAL_UART_MspInit+0x29c>)
 8001614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001616:	f003 0310 	and.w	r3, r3, #16
 800161a:	623b      	str	r3, [r7, #32]
 800161c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	61fb      	str	r3, [r7, #28]
 8001622:	4b96      	ldr	r3, [pc, #600]	; (800187c <HAL_UART_MspInit+0x29c>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	4a95      	ldr	r2, [pc, #596]	; (800187c <HAL_UART_MspInit+0x29c>)
 8001628:	f043 0302 	orr.w	r3, r3, #2
 800162c:	6313      	str	r3, [r2, #48]	; 0x30
 800162e:	4b93      	ldr	r3, [pc, #588]	; (800187c <HAL_UART_MspInit+0x29c>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	f003 0302 	and.w	r3, r3, #2
 8001636:	61fb      	str	r3, [r7, #28]
 8001638:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 800163a:	23c0      	movs	r3, #192	; 0xc0
 800163c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163e:	2302      	movs	r3, #2
 8001640:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001642:	2300      	movs	r3, #0
 8001644:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001646:	2303      	movs	r3, #3
 8001648:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800164a:	2307      	movs	r3, #7
 800164c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800164e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001652:	4619      	mov	r1, r3
 8001654:	488a      	ldr	r0, [pc, #552]	; (8001880 <HAL_UART_MspInit+0x2a0>)
 8001656:	f001 fa6b 	bl	8002b30 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800165a:	4b8a      	ldr	r3, [pc, #552]	; (8001884 <HAL_UART_MspInit+0x2a4>)
 800165c:	4a8a      	ldr	r2, [pc, #552]	; (8001888 <HAL_UART_MspInit+0x2a8>)
 800165e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001660:	4b88      	ldr	r3, [pc, #544]	; (8001884 <HAL_UART_MspInit+0x2a4>)
 8001662:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001666:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001668:	4b86      	ldr	r3, [pc, #536]	; (8001884 <HAL_UART_MspInit+0x2a4>)
 800166a:	2200      	movs	r2, #0
 800166c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800166e:	4b85      	ldr	r3, [pc, #532]	; (8001884 <HAL_UART_MspInit+0x2a4>)
 8001670:	2200      	movs	r2, #0
 8001672:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001674:	4b83      	ldr	r3, [pc, #524]	; (8001884 <HAL_UART_MspInit+0x2a4>)
 8001676:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800167a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800167c:	4b81      	ldr	r3, [pc, #516]	; (8001884 <HAL_UART_MspInit+0x2a4>)
 800167e:	2200      	movs	r2, #0
 8001680:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001682:	4b80      	ldr	r3, [pc, #512]	; (8001884 <HAL_UART_MspInit+0x2a4>)
 8001684:	2200      	movs	r2, #0
 8001686:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001688:	4b7e      	ldr	r3, [pc, #504]	; (8001884 <HAL_UART_MspInit+0x2a4>)
 800168a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800168e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001690:	4b7c      	ldr	r3, [pc, #496]	; (8001884 <HAL_UART_MspInit+0x2a4>)
 8001692:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001696:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001698:	4b7a      	ldr	r3, [pc, #488]	; (8001884 <HAL_UART_MspInit+0x2a4>)
 800169a:	2200      	movs	r2, #0
 800169c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800169e:	4879      	ldr	r0, [pc, #484]	; (8001884 <HAL_UART_MspInit+0x2a4>)
 80016a0:	f000 fed0 	bl	8002444 <HAL_DMA_Init>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80016aa:	f7ff fb6f 	bl	8000d8c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4a74      	ldr	r2, [pc, #464]	; (8001884 <HAL_UART_MspInit+0x2a4>)
 80016b2:	635a      	str	r2, [r3, #52]	; 0x34
 80016b4:	4a73      	ldr	r2, [pc, #460]	; (8001884 <HAL_UART_MspInit+0x2a4>)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80016ba:	2200      	movs	r2, #0
 80016bc:	2100      	movs	r1, #0
 80016be:	2025      	movs	r0, #37	; 0x25
 80016c0:	f000 fe7d 	bl	80023be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80016c4:	2025      	movs	r0, #37	; 0x25
 80016c6:	f000 fe96 	bl	80023f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80016ca:	e0d0      	b.n	800186e <HAL_UART_MspInit+0x28e>
  else if(huart->Instance==USART2)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a6e      	ldr	r2, [pc, #440]	; (800188c <HAL_UART_MspInit+0x2ac>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	f040 8091 	bne.w	80017fa <HAL_UART_MspInit+0x21a>
    __HAL_RCC_USART2_CLK_ENABLE();
 80016d8:	2300      	movs	r3, #0
 80016da:	61bb      	str	r3, [r7, #24]
 80016dc:	4b67      	ldr	r3, [pc, #412]	; (800187c <HAL_UART_MspInit+0x29c>)
 80016de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e0:	4a66      	ldr	r2, [pc, #408]	; (800187c <HAL_UART_MspInit+0x29c>)
 80016e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016e6:	6413      	str	r3, [r2, #64]	; 0x40
 80016e8:	4b64      	ldr	r3, [pc, #400]	; (800187c <HAL_UART_MspInit+0x29c>)
 80016ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f0:	61bb      	str	r3, [r7, #24]
 80016f2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016f4:	2300      	movs	r3, #0
 80016f6:	617b      	str	r3, [r7, #20]
 80016f8:	4b60      	ldr	r3, [pc, #384]	; (800187c <HAL_UART_MspInit+0x29c>)
 80016fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fc:	4a5f      	ldr	r2, [pc, #380]	; (800187c <HAL_UART_MspInit+0x29c>)
 80016fe:	f043 0308 	orr.w	r3, r3, #8
 8001702:	6313      	str	r3, [r2, #48]	; 0x30
 8001704:	4b5d      	ldr	r3, [pc, #372]	; (800187c <HAL_UART_MspInit+0x29c>)
 8001706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001708:	f003 0308 	and.w	r3, r3, #8
 800170c:	617b      	str	r3, [r7, #20]
 800170e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5;
 8001710:	2360      	movs	r3, #96	; 0x60
 8001712:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001714:	2302      	movs	r3, #2
 8001716:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001718:	2300      	movs	r3, #0
 800171a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800171c:	2303      	movs	r3, #3
 800171e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001720:	2307      	movs	r3, #7
 8001722:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001724:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001728:	4619      	mov	r1, r3
 800172a:	4859      	ldr	r0, [pc, #356]	; (8001890 <HAL_UART_MspInit+0x2b0>)
 800172c:	f001 fa00 	bl	8002b30 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001730:	4b58      	ldr	r3, [pc, #352]	; (8001894 <HAL_UART_MspInit+0x2b4>)
 8001732:	4a59      	ldr	r2, [pc, #356]	; (8001898 <HAL_UART_MspInit+0x2b8>)
 8001734:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001736:	4b57      	ldr	r3, [pc, #348]	; (8001894 <HAL_UART_MspInit+0x2b4>)
 8001738:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800173c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800173e:	4b55      	ldr	r3, [pc, #340]	; (8001894 <HAL_UART_MspInit+0x2b4>)
 8001740:	2200      	movs	r2, #0
 8001742:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001744:	4b53      	ldr	r3, [pc, #332]	; (8001894 <HAL_UART_MspInit+0x2b4>)
 8001746:	2200      	movs	r2, #0
 8001748:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800174a:	4b52      	ldr	r3, [pc, #328]	; (8001894 <HAL_UART_MspInit+0x2b4>)
 800174c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001750:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001752:	4b50      	ldr	r3, [pc, #320]	; (8001894 <HAL_UART_MspInit+0x2b4>)
 8001754:	2200      	movs	r2, #0
 8001756:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001758:	4b4e      	ldr	r3, [pc, #312]	; (8001894 <HAL_UART_MspInit+0x2b4>)
 800175a:	2200      	movs	r2, #0
 800175c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800175e:	4b4d      	ldr	r3, [pc, #308]	; (8001894 <HAL_UART_MspInit+0x2b4>)
 8001760:	2200      	movs	r2, #0
 8001762:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001764:	4b4b      	ldr	r3, [pc, #300]	; (8001894 <HAL_UART_MspInit+0x2b4>)
 8001766:	2200      	movs	r2, #0
 8001768:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800176a:	4b4a      	ldr	r3, [pc, #296]	; (8001894 <HAL_UART_MspInit+0x2b4>)
 800176c:	2200      	movs	r2, #0
 800176e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001770:	4848      	ldr	r0, [pc, #288]	; (8001894 <HAL_UART_MspInit+0x2b4>)
 8001772:	f000 fe67 	bl	8002444 <HAL_DMA_Init>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <HAL_UART_MspInit+0x1a0>
      Error_Handler();
 800177c:	f7ff fb06 	bl	8000d8c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	4a44      	ldr	r2, [pc, #272]	; (8001894 <HAL_UART_MspInit+0x2b4>)
 8001784:	635a      	str	r2, [r3, #52]	; 0x34
 8001786:	4a43      	ldr	r2, [pc, #268]	; (8001894 <HAL_UART_MspInit+0x2b4>)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800178c:	4b43      	ldr	r3, [pc, #268]	; (800189c <HAL_UART_MspInit+0x2bc>)
 800178e:	4a44      	ldr	r2, [pc, #272]	; (80018a0 <HAL_UART_MspInit+0x2c0>)
 8001790:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001792:	4b42      	ldr	r3, [pc, #264]	; (800189c <HAL_UART_MspInit+0x2bc>)
 8001794:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001798:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800179a:	4b40      	ldr	r3, [pc, #256]	; (800189c <HAL_UART_MspInit+0x2bc>)
 800179c:	2240      	movs	r2, #64	; 0x40
 800179e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017a0:	4b3e      	ldr	r3, [pc, #248]	; (800189c <HAL_UART_MspInit+0x2bc>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80017a6:	4b3d      	ldr	r3, [pc, #244]	; (800189c <HAL_UART_MspInit+0x2bc>)
 80017a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017ac:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017ae:	4b3b      	ldr	r3, [pc, #236]	; (800189c <HAL_UART_MspInit+0x2bc>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017b4:	4b39      	ldr	r3, [pc, #228]	; (800189c <HAL_UART_MspInit+0x2bc>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80017ba:	4b38      	ldr	r3, [pc, #224]	; (800189c <HAL_UART_MspInit+0x2bc>)
 80017bc:	2200      	movs	r2, #0
 80017be:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80017c0:	4b36      	ldr	r3, [pc, #216]	; (800189c <HAL_UART_MspInit+0x2bc>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017c6:	4b35      	ldr	r3, [pc, #212]	; (800189c <HAL_UART_MspInit+0x2bc>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80017cc:	4833      	ldr	r0, [pc, #204]	; (800189c <HAL_UART_MspInit+0x2bc>)
 80017ce:	f000 fe39 	bl	8002444 <HAL_DMA_Init>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <HAL_UART_MspInit+0x1fc>
      Error_Handler();
 80017d8:	f7ff fad8 	bl	8000d8c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	4a2f      	ldr	r2, [pc, #188]	; (800189c <HAL_UART_MspInit+0x2bc>)
 80017e0:	631a      	str	r2, [r3, #48]	; 0x30
 80017e2:	4a2e      	ldr	r2, [pc, #184]	; (800189c <HAL_UART_MspInit+0x2bc>)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80017e8:	2200      	movs	r2, #0
 80017ea:	2100      	movs	r1, #0
 80017ec:	2026      	movs	r0, #38	; 0x26
 80017ee:	f000 fde6 	bl	80023be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80017f2:	2026      	movs	r0, #38	; 0x26
 80017f4:	f000 fdff 	bl	80023f6 <HAL_NVIC_EnableIRQ>
}
 80017f8:	e039      	b.n	800186e <HAL_UART_MspInit+0x28e>
  else if(huart->Instance==USART6)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a29      	ldr	r2, [pc, #164]	; (80018a4 <HAL_UART_MspInit+0x2c4>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d134      	bne.n	800186e <HAL_UART_MspInit+0x28e>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001804:	2300      	movs	r3, #0
 8001806:	613b      	str	r3, [r7, #16]
 8001808:	4b1c      	ldr	r3, [pc, #112]	; (800187c <HAL_UART_MspInit+0x29c>)
 800180a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800180c:	4a1b      	ldr	r2, [pc, #108]	; (800187c <HAL_UART_MspInit+0x29c>)
 800180e:	f043 0320 	orr.w	r3, r3, #32
 8001812:	6453      	str	r3, [r2, #68]	; 0x44
 8001814:	4b19      	ldr	r3, [pc, #100]	; (800187c <HAL_UART_MspInit+0x29c>)
 8001816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001818:	f003 0320 	and.w	r3, r3, #32
 800181c:	613b      	str	r3, [r7, #16]
 800181e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001820:	2300      	movs	r3, #0
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	4b15      	ldr	r3, [pc, #84]	; (800187c <HAL_UART_MspInit+0x29c>)
 8001826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001828:	4a14      	ldr	r2, [pc, #80]	; (800187c <HAL_UART_MspInit+0x29c>)
 800182a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800182e:	6313      	str	r3, [r2, #48]	; 0x30
 8001830:	4b12      	ldr	r3, [pc, #72]	; (800187c <HAL_UART_MspInit+0x29c>)
 8001832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001838:	60fb      	str	r3, [r7, #12]
 800183a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 800183c:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8001840:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001842:	2302      	movs	r3, #2
 8001844:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001846:	2300      	movs	r3, #0
 8001848:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800184a:	2303      	movs	r3, #3
 800184c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800184e:	2308      	movs	r3, #8
 8001850:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001852:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001856:	4619      	mov	r1, r3
 8001858:	4813      	ldr	r0, [pc, #76]	; (80018a8 <HAL_UART_MspInit+0x2c8>)
 800185a:	f001 f969 	bl	8002b30 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800185e:	2200      	movs	r2, #0
 8001860:	2100      	movs	r1, #0
 8001862:	2047      	movs	r0, #71	; 0x47
 8001864:	f000 fdab 	bl	80023be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001868:	2047      	movs	r0, #71	; 0x47
 800186a:	f000 fdc4 	bl	80023f6 <HAL_NVIC_EnableIRQ>
}
 800186e:	bf00      	nop
 8001870:	3738      	adds	r7, #56	; 0x38
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	40011000 	.word	0x40011000
 800187c:	40023800 	.word	0x40023800
 8001880:	40020400 	.word	0x40020400
 8001884:	200001c8 	.word	0x200001c8
 8001888:	40026440 	.word	0x40026440
 800188c:	40004400 	.word	0x40004400
 8001890:	40020c00 	.word	0x40020c00
 8001894:	20000028 	.word	0x20000028
 8001898:	40026088 	.word	0x40026088
 800189c:	20000228 	.word	0x20000228
 80018a0:	400260a0 	.word	0x400260a0
 80018a4:	40011400 	.word	0x40011400
 80018a8:	40021800 	.word	0x40021800

080018ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80018b0:	bf00      	nop
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr

080018ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018ba:	b480      	push	{r7}
 80018bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018be:	e7fe      	b.n	80018be <HardFault_Handler+0x4>

080018c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018c4:	e7fe      	b.n	80018c4 <MemManage_Handler+0x4>

080018c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018c6:	b480      	push	{r7}
 80018c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018ca:	e7fe      	b.n	80018ca <BusFault_Handler+0x4>

080018cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018d0:	e7fe      	b.n	80018d0 <UsageFault_Handler+0x4>

080018d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018d2:	b480      	push	{r7}
 80018d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018d6:	bf00      	nop
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018e4:	bf00      	nop
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr

080018ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018ee:	b480      	push	{r7}
 80018f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018f2:	bf00      	nop
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001900:	f000 f8fc 	bl	8001afc <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8001904:	f000 fd91 	bl	800242a <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001908:	bf00      	nop
 800190a:	bd80      	pop	{r7, pc}

0800190c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001910:	4802      	ldr	r0, [pc, #8]	; (800191c <DMA1_Stream5_IRQHandler+0x10>)
 8001912:	f000 fea3 	bl	800265c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	20000028 	.word	0x20000028

08001920 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001924:	4802      	ldr	r0, [pc, #8]	; (8001930 <DMA1_Stream6_IRQHandler+0x10>)
 8001926:	f000 fe99 	bl	800265c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800192a:	bf00      	nop
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	20000228 	.word	0x20000228

08001934 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001938:	4802      	ldr	r0, [pc, #8]	; (8001944 <CAN1_TX_IRQHandler+0x10>)
 800193a:	f000 fa35 	bl	8001da8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 800193e:	bf00      	nop
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	20000454 	.word	0x20000454

08001948 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800194c:	4802      	ldr	r0, [pc, #8]	; (8001958 <CAN1_RX0_IRQHandler+0x10>)
 800194e:	f000 fa2b 	bl	8001da8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001952:	bf00      	nop
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	20000454 	.word	0x20000454

0800195c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  uart_receive_handler(&huart1);
 8001960:	4803      	ldr	r0, [pc, #12]	; (8001970 <USART1_IRQHandler+0x14>)
 8001962:	f7ff fc3f 	bl	80011e4 <uart_receive_handler>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001966:	4802      	ldr	r0, [pc, #8]	; (8001970 <USART1_IRQHandler+0x14>)
 8001968:	f002 fb58 	bl	800401c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800196c:	bf00      	nop
 800196e:	bd80      	pop	{r7, pc}
 8001970:	20000288 	.word	0x20000288

08001974 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001978:	4802      	ldr	r0, [pc, #8]	; (8001984 <USART2_IRQHandler+0x10>)
 800197a:	f002 fb4f 	bl	800401c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800197e:	bf00      	nop
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	20000414 	.word	0x20000414

08001988 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800198c:	4802      	ldr	r0, [pc, #8]	; (8001998 <DMA2_Stream2_IRQHandler+0x10>)
 800198e:	f000 fe65 	bl	800265c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001992:	bf00      	nop
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	200001c8 	.word	0x200001c8

0800199c <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupts.
  */
void CAN2_TX_IRQHandler(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80019a0:	4802      	ldr	r0, [pc, #8]	; (80019ac <CAN2_TX_IRQHandler+0x10>)
 80019a2:	f000 fa01 	bl	8001da8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 80019a6:	bf00      	nop
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	200001a0 	.word	0x200001a0

080019b0 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80019b4:	4802      	ldr	r0, [pc, #8]	; (80019c0 <CAN2_RX0_IRQHandler+0x10>)
 80019b6:	f000 f9f7 	bl	8001da8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 80019ba:	bf00      	nop
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	200001a0 	.word	0x200001a0

080019c4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80019c8:	4802      	ldr	r0, [pc, #8]	; (80019d4 <USART6_IRQHandler+0x10>)
 80019ca:	f002 fb27 	bl	800401c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80019ce:	bf00      	nop
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	200002cc 	.word	0x200002cc

080019d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019dc:	4b08      	ldr	r3, [pc, #32]	; (8001a00 <SystemInit+0x28>)
 80019de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019e2:	4a07      	ldr	r2, [pc, #28]	; (8001a00 <SystemInit+0x28>)
 80019e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80019ec:	4b04      	ldr	r3, [pc, #16]	; (8001a00 <SystemInit+0x28>)
 80019ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80019f2:	609a      	str	r2, [r3, #8]
#endif
}
 80019f4:	bf00      	nop
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	e000ed00 	.word	0xe000ed00

08001a04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a3c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001a08:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001a0a:	e003      	b.n	8001a14 <LoopCopyDataInit>

08001a0c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001a0c:	4b0c      	ldr	r3, [pc, #48]	; (8001a40 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001a0e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001a10:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001a12:	3104      	adds	r1, #4

08001a14 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001a14:	480b      	ldr	r0, [pc, #44]	; (8001a44 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001a16:	4b0c      	ldr	r3, [pc, #48]	; (8001a48 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001a18:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001a1a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001a1c:	d3f6      	bcc.n	8001a0c <CopyDataInit>
  ldr  r2, =_sbss
 8001a1e:	4a0b      	ldr	r2, [pc, #44]	; (8001a4c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001a20:	e002      	b.n	8001a28 <LoopFillZerobss>

08001a22 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001a22:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001a24:	f842 3b04 	str.w	r3, [r2], #4

08001a28 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001a28:	4b09      	ldr	r3, [pc, #36]	; (8001a50 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001a2a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001a2c:	d3f9      	bcc.n	8001a22 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001a2e:	f7ff ffd3 	bl	80019d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a32:	f003 f8cf 	bl	8004bd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a36:	f7fe fd55 	bl	80004e4 <main>
  bx  lr    
 8001a3a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a3c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001a40:	08004c74 	.word	0x08004c74
  ldr  r0, =_sdata
 8001a44:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001a48:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001a4c:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001a50:	20000550 	.word	0x20000550

08001a54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a54:	e7fe      	b.n	8001a54 <ADC_IRQHandler>
	...

08001a58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a5c:	4b0e      	ldr	r3, [pc, #56]	; (8001a98 <HAL_Init+0x40>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a0d      	ldr	r2, [pc, #52]	; (8001a98 <HAL_Init+0x40>)
 8001a62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a68:	4b0b      	ldr	r3, [pc, #44]	; (8001a98 <HAL_Init+0x40>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a0a      	ldr	r2, [pc, #40]	; (8001a98 <HAL_Init+0x40>)
 8001a6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a74:	4b08      	ldr	r3, [pc, #32]	; (8001a98 <HAL_Init+0x40>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a07      	ldr	r2, [pc, #28]	; (8001a98 <HAL_Init+0x40>)
 8001a7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a80:	2003      	movs	r0, #3
 8001a82:	f000 fc91 	bl	80023a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a86:	2000      	movs	r0, #0
 8001a88:	f000 f808 	bl	8001a9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a8c:	f7ff fbe8 	bl	8001260 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	40023c00 	.word	0x40023c00

08001a9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001aa4:	4b12      	ldr	r3, [pc, #72]	; (8001af0 <HAL_InitTick+0x54>)
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	4b12      	ldr	r3, [pc, #72]	; (8001af4 <HAL_InitTick+0x58>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	4619      	mov	r1, r3
 8001aae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ab2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ab6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aba:	4618      	mov	r0, r3
 8001abc:	f000 fca9 	bl	8002412 <HAL_SYSTICK_Config>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e00e      	b.n	8001ae8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2b0f      	cmp	r3, #15
 8001ace:	d80a      	bhi.n	8001ae6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	6879      	ldr	r1, [r7, #4]
 8001ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ad8:	f000 fc71 	bl	80023be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001adc:	4a06      	ldr	r2, [pc, #24]	; (8001af8 <HAL_InitTick+0x5c>)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	e000      	b.n	8001ae8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	20000000 	.word	0x20000000
 8001af4:	20000008 	.word	0x20000008
 8001af8:	20000004 	.word	0x20000004

08001afc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b00:	4b06      	ldr	r3, [pc, #24]	; (8001b1c <HAL_IncTick+0x20>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	461a      	mov	r2, r3
 8001b06:	4b06      	ldr	r3, [pc, #24]	; (8001b20 <HAL_IncTick+0x24>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	4a04      	ldr	r2, [pc, #16]	; (8001b20 <HAL_IncTick+0x24>)
 8001b0e:	6013      	str	r3, [r2, #0]
}
 8001b10:	bf00      	nop
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	20000008 	.word	0x20000008
 8001b20:	2000054c 	.word	0x2000054c

08001b24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  return uwTick;
 8001b28:	4b03      	ldr	r3, [pc, #12]	; (8001b38 <HAL_GetTick+0x14>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	2000054c 	.word	0x2000054c

08001b3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b44:	f7ff ffee 	bl	8001b24 <HAL_GetTick>
 8001b48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b54:	d005      	beq.n	8001b62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b56:	4b0a      	ldr	r3, [pc, #40]	; (8001b80 <HAL_Delay+0x44>)
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	4413      	add	r3, r2
 8001b60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b62:	bf00      	nop
 8001b64:	f7ff ffde 	bl	8001b24 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	68fa      	ldr	r2, [r7, #12]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d8f7      	bhi.n	8001b64 <HAL_Delay+0x28>
  {
  }
}
 8001b74:	bf00      	nop
 8001b76:	bf00      	nop
 8001b78:	3710      	adds	r7, #16
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	20000008 	.word	0x20000008

08001b84 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001b84:	b480      	push	{r7}
 8001b86:	b087      	sub	sp, #28
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	60b9      	str	r1, [r7, #8]
 8001b8e:	607a      	str	r2, [r7, #4]
 8001b90:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b98:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001b9a:	7dfb      	ldrb	r3, [r7, #23]
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d003      	beq.n	8001ba8 <HAL_CAN_GetRxMessage+0x24>
 8001ba0:	7dfb      	ldrb	r3, [r7, #23]
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	f040 80f3 	bne.w	8001d8e <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d10e      	bne.n	8001bcc <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	f003 0303 	and.w	r3, r3, #3
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d116      	bne.n	8001bea <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e0e7      	b.n	8001d9c <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	691b      	ldr	r3, [r3, #16]
 8001bd2:	f003 0303 	and.w	r3, r3, #3
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d107      	bne.n	8001bea <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bde:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e0d8      	b.n	8001d9c <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	331b      	adds	r3, #27
 8001bf2:	011b      	lsls	r3, r3, #4
 8001bf4:	4413      	add	r3, r2
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0204 	and.w	r2, r3, #4
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d10c      	bne.n	8001c22 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	331b      	adds	r3, #27
 8001c10:	011b      	lsls	r3, r3, #4
 8001c12:	4413      	add	r3, r2
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	0d5b      	lsrs	r3, r3, #21
 8001c18:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	601a      	str	r2, [r3, #0]
 8001c20:	e00b      	b.n	8001c3a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	331b      	adds	r3, #27
 8001c2a:	011b      	lsls	r3, r3, #4
 8001c2c:	4413      	add	r3, r2
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	08db      	lsrs	r3, r3, #3
 8001c32:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	331b      	adds	r3, #27
 8001c42:	011b      	lsls	r3, r3, #4
 8001c44:	4413      	add	r3, r2
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0202 	and.w	r2, r3, #2
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	331b      	adds	r3, #27
 8001c58:	011b      	lsls	r3, r3, #4
 8001c5a:	4413      	add	r3, r2
 8001c5c:	3304      	adds	r3, #4
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 020f 	and.w	r2, r3, #15
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	331b      	adds	r3, #27
 8001c70:	011b      	lsls	r3, r3, #4
 8001c72:	4413      	add	r3, r2
 8001c74:	3304      	adds	r3, #4
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	0a1b      	lsrs	r3, r3, #8
 8001c7a:	b2da      	uxtb	r2, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	331b      	adds	r3, #27
 8001c88:	011b      	lsls	r3, r3, #4
 8001c8a:	4413      	add	r3, r2
 8001c8c:	3304      	adds	r3, #4
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	0c1b      	lsrs	r3, r3, #16
 8001c92:	b29a      	uxth	r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	011b      	lsls	r3, r3, #4
 8001ca0:	4413      	add	r3, r2
 8001ca2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	b2da      	uxtb	r2, r3
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	011b      	lsls	r3, r3, #4
 8001cb6:	4413      	add	r3, r2
 8001cb8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	0a1a      	lsrs	r2, r3, #8
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	b2d2      	uxtb	r2, r2
 8001cc6:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	011b      	lsls	r3, r3, #4
 8001cd0:	4413      	add	r3, r2
 8001cd2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	0c1a      	lsrs	r2, r3, #16
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	3302      	adds	r3, #2
 8001cde:	b2d2      	uxtb	r2, r2
 8001ce0:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	011b      	lsls	r3, r3, #4
 8001cea:	4413      	add	r3, r2
 8001cec:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	0e1a      	lsrs	r2, r3, #24
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	3303      	adds	r3, #3
 8001cf8:	b2d2      	uxtb	r2, r2
 8001cfa:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	011b      	lsls	r3, r3, #4
 8001d04:	4413      	add	r3, r2
 8001d06:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	3304      	adds	r3, #4
 8001d10:	b2d2      	uxtb	r2, r2
 8001d12:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	011b      	lsls	r3, r3, #4
 8001d1c:	4413      	add	r3, r2
 8001d1e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	0a1a      	lsrs	r2, r3, #8
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	3305      	adds	r3, #5
 8001d2a:	b2d2      	uxtb	r2, r2
 8001d2c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	011b      	lsls	r3, r3, #4
 8001d36:	4413      	add	r3, r2
 8001d38:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	0c1a      	lsrs	r2, r3, #16
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	3306      	adds	r3, #6
 8001d44:	b2d2      	uxtb	r2, r2
 8001d46:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	011b      	lsls	r3, r3, #4
 8001d50:	4413      	add	r3, r2
 8001d52:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	0e1a      	lsrs	r2, r3, #24
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	3307      	adds	r3, #7
 8001d5e:	b2d2      	uxtb	r2, r2
 8001d60:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d108      	bne.n	8001d7a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	68da      	ldr	r2, [r3, #12]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f042 0220 	orr.w	r2, r2, #32
 8001d76:	60da      	str	r2, [r3, #12]
 8001d78:	e007      	b.n	8001d8a <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	691a      	ldr	r2, [r3, #16]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f042 0220 	orr.w	r2, r2, #32
 8001d88:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	e006      	b.n	8001d9c <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d92:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
  }
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	371c      	adds	r7, #28
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b08a      	sub	sp, #40	; 0x28
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001db0:	2300      	movs	r3, #0
 8001db2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	695b      	ldr	r3, [r3, #20]
 8001dba:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	691b      	ldr	r3, [r3, #16]
 8001dda:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	699b      	ldr	r3, [r3, #24]
 8001de2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001de4:	6a3b      	ldr	r3, [r7, #32]
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d07c      	beq.n	8001ee8 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	f003 0301 	and.w	r3, r3, #1
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d023      	beq.n	8001e40 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	f003 0302 	and.w	r3, r3, #2
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d003      	beq.n	8001e12 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f000 f983 	bl	8002116 <HAL_CAN_TxMailbox0CompleteCallback>
 8001e10:	e016      	b.n	8001e40 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	f003 0304 	and.w	r3, r3, #4
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d004      	beq.n	8001e26 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e22:	627b      	str	r3, [r7, #36]	; 0x24
 8001e24:	e00c      	b.n	8001e40 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	f003 0308 	and.w	r3, r3, #8
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d004      	beq.n	8001e3a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e32:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e36:	627b      	str	r3, [r7, #36]	; 0x24
 8001e38:	e002      	b.n	8001e40 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f000 f989 	bl	8002152 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d024      	beq.n	8001e94 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e52:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d003      	beq.n	8001e66 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f000 f963 	bl	800212a <HAL_CAN_TxMailbox1CompleteCallback>
 8001e64:	e016      	b.n	8001e94 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d004      	beq.n	8001e7a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e72:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001e76:	627b      	str	r3, [r7, #36]	; 0x24
 8001e78:	e00c      	b.n	8001e94 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d004      	beq.n	8001e8e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e8a:	627b      	str	r3, [r7, #36]	; 0x24
 8001e8c:	e002      	b.n	8001e94 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f000 f969 	bl	8002166 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d024      	beq.n	8001ee8 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001ea6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d003      	beq.n	8001eba <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f000 f943 	bl	800213e <HAL_CAN_TxMailbox2CompleteCallback>
 8001eb8:	e016      	b.n	8001ee8 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d004      	beq.n	8001ece <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001eca:	627b      	str	r3, [r7, #36]	; 0x24
 8001ecc:	e00c      	b.n	8001ee8 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d004      	beq.n	8001ee2 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ede:	627b      	str	r3, [r7, #36]	; 0x24
 8001ee0:	e002      	b.n	8001ee8 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f000 f949 	bl	800217a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001ee8:	6a3b      	ldr	r3, [r7, #32]
 8001eea:	f003 0308 	and.w	r3, r3, #8
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d00c      	beq.n	8001f0c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	f003 0310 	and.w	r3, r3, #16
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d007      	beq.n	8001f0c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f02:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2210      	movs	r2, #16
 8001f0a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001f0c:	6a3b      	ldr	r3, [r7, #32]
 8001f0e:	f003 0304 	and.w	r3, r3, #4
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d00b      	beq.n	8001f2e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	f003 0308 	and.w	r3, r3, #8
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d006      	beq.n	8001f2e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2208      	movs	r2, #8
 8001f26:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f000 f930 	bl	800218e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001f2e:	6a3b      	ldr	r3, [r7, #32]
 8001f30:	f003 0302 	and.w	r3, r3, #2
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d009      	beq.n	8001f4c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	f003 0303 	and.w	r3, r3, #3
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d002      	beq.n	8001f4c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f7fe ff28 	bl	8000d9c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001f4c:	6a3b      	ldr	r3, [r7, #32]
 8001f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d00c      	beq.n	8001f70 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	f003 0310 	and.w	r3, r3, #16
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d007      	beq.n	8001f70 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f66:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2210      	movs	r2, #16
 8001f6e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001f70:	6a3b      	ldr	r3, [r7, #32]
 8001f72:	f003 0320 	and.w	r3, r3, #32
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d00b      	beq.n	8001f92 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	f003 0308 	and.w	r3, r3, #8
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d006      	beq.n	8001f92 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2208      	movs	r2, #8
 8001f8a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f000 f912 	bl	80021b6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001f92:	6a3b      	ldr	r3, [r7, #32]
 8001f94:	f003 0310 	and.w	r3, r3, #16
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d009      	beq.n	8001fb0 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	691b      	ldr	r3, [r3, #16]
 8001fa2:	f003 0303 	and.w	r3, r3, #3
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d002      	beq.n	8001fb0 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f000 f8f9 	bl	80021a2 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001fb0:	6a3b      	ldr	r3, [r7, #32]
 8001fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d00b      	beq.n	8001fd2 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	f003 0310 	and.w	r3, r3, #16
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d006      	beq.n	8001fd2 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2210      	movs	r2, #16
 8001fca:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f000 f8fc 	bl	80021ca <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001fd2:	6a3b      	ldr	r3, [r7, #32]
 8001fd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d00b      	beq.n	8001ff4 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	f003 0308 	and.w	r3, r3, #8
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d006      	beq.n	8001ff4 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	2208      	movs	r2, #8
 8001fec:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f000 f8f5 	bl	80021de <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001ff4:	6a3b      	ldr	r3, [r7, #32]
 8001ff6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d07b      	beq.n	80020f6 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	f003 0304 	and.w	r3, r3, #4
 8002004:	2b00      	cmp	r3, #0
 8002006:	d072      	beq.n	80020ee <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002008:	6a3b      	ldr	r3, [r7, #32]
 800200a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800200e:	2b00      	cmp	r3, #0
 8002010:	d008      	beq.n	8002024 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002018:	2b00      	cmp	r3, #0
 800201a:	d003      	beq.n	8002024 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800201c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201e:	f043 0301 	orr.w	r3, r3, #1
 8002022:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002024:	6a3b      	ldr	r3, [r7, #32]
 8002026:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800202a:	2b00      	cmp	r3, #0
 800202c:	d008      	beq.n	8002040 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002034:	2b00      	cmp	r3, #0
 8002036:	d003      	beq.n	8002040 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203a:	f043 0302 	orr.w	r3, r3, #2
 800203e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002040:	6a3b      	ldr	r3, [r7, #32]
 8002042:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002046:	2b00      	cmp	r3, #0
 8002048:	d008      	beq.n	800205c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002050:	2b00      	cmp	r3, #0
 8002052:	d003      	beq.n	800205c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002056:	f043 0304 	orr.w	r3, r3, #4
 800205a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800205c:	6a3b      	ldr	r3, [r7, #32]
 800205e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002062:	2b00      	cmp	r3, #0
 8002064:	d043      	beq.n	80020ee <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800206c:	2b00      	cmp	r3, #0
 800206e:	d03e      	beq.n	80020ee <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002076:	2b60      	cmp	r3, #96	; 0x60
 8002078:	d02b      	beq.n	80020d2 <HAL_CAN_IRQHandler+0x32a>
 800207a:	2b60      	cmp	r3, #96	; 0x60
 800207c:	d82e      	bhi.n	80020dc <HAL_CAN_IRQHandler+0x334>
 800207e:	2b50      	cmp	r3, #80	; 0x50
 8002080:	d022      	beq.n	80020c8 <HAL_CAN_IRQHandler+0x320>
 8002082:	2b50      	cmp	r3, #80	; 0x50
 8002084:	d82a      	bhi.n	80020dc <HAL_CAN_IRQHandler+0x334>
 8002086:	2b40      	cmp	r3, #64	; 0x40
 8002088:	d019      	beq.n	80020be <HAL_CAN_IRQHandler+0x316>
 800208a:	2b40      	cmp	r3, #64	; 0x40
 800208c:	d826      	bhi.n	80020dc <HAL_CAN_IRQHandler+0x334>
 800208e:	2b30      	cmp	r3, #48	; 0x30
 8002090:	d010      	beq.n	80020b4 <HAL_CAN_IRQHandler+0x30c>
 8002092:	2b30      	cmp	r3, #48	; 0x30
 8002094:	d822      	bhi.n	80020dc <HAL_CAN_IRQHandler+0x334>
 8002096:	2b10      	cmp	r3, #16
 8002098:	d002      	beq.n	80020a0 <HAL_CAN_IRQHandler+0x2f8>
 800209a:	2b20      	cmp	r3, #32
 800209c:	d005      	beq.n	80020aa <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800209e:	e01d      	b.n	80020dc <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80020a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a2:	f043 0308 	orr.w	r3, r3, #8
 80020a6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80020a8:	e019      	b.n	80020de <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80020aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ac:	f043 0310 	orr.w	r3, r3, #16
 80020b0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80020b2:	e014      	b.n	80020de <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80020b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b6:	f043 0320 	orr.w	r3, r3, #32
 80020ba:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80020bc:	e00f      	b.n	80020de <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80020be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020c4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80020c6:	e00a      	b.n	80020de <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80020c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020ce:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80020d0:	e005      	b.n	80020de <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80020d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020d8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80020da:	e000      	b.n	80020de <HAL_CAN_IRQHandler+0x336>
            break;
 80020dc:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	699a      	ldr	r2, [r3, #24]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80020ec:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2204      	movs	r2, #4
 80020f4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80020f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d008      	beq.n	800210e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002102:	431a      	orrs	r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f000 f872 	bl	80021f2 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800210e:	bf00      	nop
 8002110:	3728      	adds	r7, #40	; 0x28
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002116:	b480      	push	{r7}
 8002118:	b083      	sub	sp, #12
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800211e:	bf00      	nop
 8002120:	370c      	adds	r7, #12
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr

0800212a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800212a:	b480      	push	{r7}
 800212c:	b083      	sub	sp, #12
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002132:	bf00      	nop
 8002134:	370c      	adds	r7, #12
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr

0800213e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800213e:	b480      	push	{r7}
 8002140:	b083      	sub	sp, #12
 8002142:	af00      	add	r7, sp, #0
 8002144:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002146:	bf00      	nop
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr

08002152 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002152:	b480      	push	{r7}
 8002154:	b083      	sub	sp, #12
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800215a:	bf00      	nop
 800215c:	370c      	adds	r7, #12
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr

08002166 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002166:	b480      	push	{r7}
 8002168:	b083      	sub	sp, #12
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800216e:	bf00      	nop
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr

0800217a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800217a:	b480      	push	{r7}
 800217c:	b083      	sub	sp, #12
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002182:	bf00      	nop
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr

0800218e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800218e:	b480      	push	{r7}
 8002190:	b083      	sub	sp, #12
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002196:	bf00      	nop
 8002198:	370c      	adds	r7, #12
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr

080021a2 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80021a2:	b480      	push	{r7}
 80021a4:	b083      	sub	sp, #12
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80021aa:	bf00      	nop
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr

080021b6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80021b6:	b480      	push	{r7}
 80021b8:	b083      	sub	sp, #12
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80021be:	bf00      	nop
 80021c0:	370c      	adds	r7, #12
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr

080021ca <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80021ca:	b480      	push	{r7}
 80021cc:	b083      	sub	sp, #12
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80021d2:	bf00      	nop
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr

080021de <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80021de:	b480      	push	{r7}
 80021e0:	b083      	sub	sp, #12
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80021e6:	bf00      	nop
 80021e8:	370c      	adds	r7, #12
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr

080021f2 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80021f2:	b480      	push	{r7}
 80021f4:	b083      	sub	sp, #12
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80021fa:	bf00      	nop
 80021fc:	370c      	adds	r7, #12
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
	...

08002208 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002208:	b480      	push	{r7}
 800220a:	b085      	sub	sp, #20
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f003 0307 	and.w	r3, r3, #7
 8002216:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002218:	4b0c      	ldr	r3, [pc, #48]	; (800224c <__NVIC_SetPriorityGrouping+0x44>)
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800221e:	68ba      	ldr	r2, [r7, #8]
 8002220:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002224:	4013      	ands	r3, r2
 8002226:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002230:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002234:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002238:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800223a:	4a04      	ldr	r2, [pc, #16]	; (800224c <__NVIC_SetPriorityGrouping+0x44>)
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	60d3      	str	r3, [r2, #12]
}
 8002240:	bf00      	nop
 8002242:	3714      	adds	r7, #20
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr
 800224c:	e000ed00 	.word	0xe000ed00

08002250 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002254:	4b04      	ldr	r3, [pc, #16]	; (8002268 <__NVIC_GetPriorityGrouping+0x18>)
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	0a1b      	lsrs	r3, r3, #8
 800225a:	f003 0307 	and.w	r3, r3, #7
}
 800225e:	4618      	mov	r0, r3
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr
 8002268:	e000ed00 	.word	0xe000ed00

0800226c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	4603      	mov	r3, r0
 8002274:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800227a:	2b00      	cmp	r3, #0
 800227c:	db0b      	blt.n	8002296 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800227e:	79fb      	ldrb	r3, [r7, #7]
 8002280:	f003 021f 	and.w	r2, r3, #31
 8002284:	4907      	ldr	r1, [pc, #28]	; (80022a4 <__NVIC_EnableIRQ+0x38>)
 8002286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800228a:	095b      	lsrs	r3, r3, #5
 800228c:	2001      	movs	r0, #1
 800228e:	fa00 f202 	lsl.w	r2, r0, r2
 8002292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002296:	bf00      	nop
 8002298:	370c      	adds	r7, #12
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	e000e100 	.word	0xe000e100

080022a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	4603      	mov	r3, r0
 80022b0:	6039      	str	r1, [r7, #0]
 80022b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	db0a      	blt.n	80022d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	b2da      	uxtb	r2, r3
 80022c0:	490c      	ldr	r1, [pc, #48]	; (80022f4 <__NVIC_SetPriority+0x4c>)
 80022c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c6:	0112      	lsls	r2, r2, #4
 80022c8:	b2d2      	uxtb	r2, r2
 80022ca:	440b      	add	r3, r1
 80022cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022d0:	e00a      	b.n	80022e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	b2da      	uxtb	r2, r3
 80022d6:	4908      	ldr	r1, [pc, #32]	; (80022f8 <__NVIC_SetPriority+0x50>)
 80022d8:	79fb      	ldrb	r3, [r7, #7]
 80022da:	f003 030f 	and.w	r3, r3, #15
 80022de:	3b04      	subs	r3, #4
 80022e0:	0112      	lsls	r2, r2, #4
 80022e2:	b2d2      	uxtb	r2, r2
 80022e4:	440b      	add	r3, r1
 80022e6:	761a      	strb	r2, [r3, #24]
}
 80022e8:	bf00      	nop
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr
 80022f4:	e000e100 	.word	0xe000e100
 80022f8:	e000ed00 	.word	0xe000ed00

080022fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b089      	sub	sp, #36	; 0x24
 8002300:	af00      	add	r7, sp, #0
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	60b9      	str	r1, [r7, #8]
 8002306:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	f003 0307 	and.w	r3, r3, #7
 800230e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	f1c3 0307 	rsb	r3, r3, #7
 8002316:	2b04      	cmp	r3, #4
 8002318:	bf28      	it	cs
 800231a:	2304      	movcs	r3, #4
 800231c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	3304      	adds	r3, #4
 8002322:	2b06      	cmp	r3, #6
 8002324:	d902      	bls.n	800232c <NVIC_EncodePriority+0x30>
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	3b03      	subs	r3, #3
 800232a:	e000      	b.n	800232e <NVIC_EncodePriority+0x32>
 800232c:	2300      	movs	r3, #0
 800232e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002330:	f04f 32ff 	mov.w	r2, #4294967295
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	fa02 f303 	lsl.w	r3, r2, r3
 800233a:	43da      	mvns	r2, r3
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	401a      	ands	r2, r3
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002344:	f04f 31ff 	mov.w	r1, #4294967295
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	fa01 f303 	lsl.w	r3, r1, r3
 800234e:	43d9      	mvns	r1, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002354:	4313      	orrs	r3, r2
         );
}
 8002356:	4618      	mov	r0, r3
 8002358:	3724      	adds	r7, #36	; 0x24
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
	...

08002364 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	3b01      	subs	r3, #1
 8002370:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002374:	d301      	bcc.n	800237a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002376:	2301      	movs	r3, #1
 8002378:	e00f      	b.n	800239a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800237a:	4a0a      	ldr	r2, [pc, #40]	; (80023a4 <SysTick_Config+0x40>)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	3b01      	subs	r3, #1
 8002380:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002382:	210f      	movs	r1, #15
 8002384:	f04f 30ff 	mov.w	r0, #4294967295
 8002388:	f7ff ff8e 	bl	80022a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800238c:	4b05      	ldr	r3, [pc, #20]	; (80023a4 <SysTick_Config+0x40>)
 800238e:	2200      	movs	r2, #0
 8002390:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002392:	4b04      	ldr	r3, [pc, #16]	; (80023a4 <SysTick_Config+0x40>)
 8002394:	2207      	movs	r2, #7
 8002396:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	e000e010 	.word	0xe000e010

080023a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f7ff ff29 	bl	8002208 <__NVIC_SetPriorityGrouping>
}
 80023b6:	bf00      	nop
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}

080023be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023be:	b580      	push	{r7, lr}
 80023c0:	b086      	sub	sp, #24
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	4603      	mov	r3, r0
 80023c6:	60b9      	str	r1, [r7, #8]
 80023c8:	607a      	str	r2, [r7, #4]
 80023ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023cc:	2300      	movs	r3, #0
 80023ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023d0:	f7ff ff3e 	bl	8002250 <__NVIC_GetPriorityGrouping>
 80023d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	68b9      	ldr	r1, [r7, #8]
 80023da:	6978      	ldr	r0, [r7, #20]
 80023dc:	f7ff ff8e 	bl	80022fc <NVIC_EncodePriority>
 80023e0:	4602      	mov	r2, r0
 80023e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023e6:	4611      	mov	r1, r2
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7ff ff5d 	bl	80022a8 <__NVIC_SetPriority>
}
 80023ee:	bf00      	nop
 80023f0:	3718      	adds	r7, #24
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b082      	sub	sp, #8
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	4603      	mov	r3, r0
 80023fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002404:	4618      	mov	r0, r3
 8002406:	f7ff ff31 	bl	800226c <__NVIC_EnableIRQ>
}
 800240a:	bf00      	nop
 800240c:	3708      	adds	r7, #8
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}

08002412 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002412:	b580      	push	{r7, lr}
 8002414:	b082      	sub	sp, #8
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f7ff ffa2 	bl	8002364 <SysTick_Config>
 8002420:	4603      	mov	r3, r0
}
 8002422:	4618      	mov	r0, r3
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800242a:	b580      	push	{r7, lr}
 800242c:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800242e:	f000 f802 	bl	8002436 <HAL_SYSTICK_Callback>
}
 8002432:	bf00      	nop
 8002434:	bd80      	pop	{r7, pc}

08002436 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8002436:	b480      	push	{r7}
 8002438:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800243a:	bf00      	nop
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b086      	sub	sp, #24
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800244c:	2300      	movs	r3, #0
 800244e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002450:	f7ff fb68 	bl	8001b24 <HAL_GetTick>
 8002454:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d101      	bne.n	8002460 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e099      	b.n	8002594 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2202      	movs	r2, #2
 800246c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f022 0201 	bic.w	r2, r2, #1
 800247e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002480:	e00f      	b.n	80024a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002482:	f7ff fb4f 	bl	8001b24 <HAL_GetTick>
 8002486:	4602      	mov	r2, r0
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	2b05      	cmp	r3, #5
 800248e:	d908      	bls.n	80024a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2220      	movs	r2, #32
 8002494:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2203      	movs	r2, #3
 800249a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e078      	b.n	8002594 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0301 	and.w	r3, r3, #1
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d1e8      	bne.n	8002482 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80024b8:	697a      	ldr	r2, [r7, #20]
 80024ba:	4b38      	ldr	r3, [pc, #224]	; (800259c <HAL_DMA_Init+0x158>)
 80024bc:	4013      	ands	r3, r2
 80024be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	685a      	ldr	r2, [r3, #4]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	691b      	ldr	r3, [r3, #16]
 80024d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	699b      	ldr	r3, [r3, #24]
 80024e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6a1b      	ldr	r3, [r3, #32]
 80024ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024ee:	697a      	ldr	r2, [r7, #20]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f8:	2b04      	cmp	r3, #4
 80024fa:	d107      	bne.n	800250c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002504:	4313      	orrs	r3, r2
 8002506:	697a      	ldr	r2, [r7, #20]
 8002508:	4313      	orrs	r3, r2
 800250a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	697a      	ldr	r2, [r7, #20]
 8002512:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	695b      	ldr	r3, [r3, #20]
 800251a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	f023 0307 	bic.w	r3, r3, #7
 8002522:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002528:	697a      	ldr	r2, [r7, #20]
 800252a:	4313      	orrs	r3, r2
 800252c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002532:	2b04      	cmp	r3, #4
 8002534:	d117      	bne.n	8002566 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800253a:	697a      	ldr	r2, [r7, #20]
 800253c:	4313      	orrs	r3, r2
 800253e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002544:	2b00      	cmp	r3, #0
 8002546:	d00e      	beq.n	8002566 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f000 fa75 	bl	8002a38 <DMA_CheckFifoParam>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d008      	beq.n	8002566 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2240      	movs	r2, #64	; 0x40
 8002558:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2201      	movs	r2, #1
 800255e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002562:	2301      	movs	r3, #1
 8002564:	e016      	b.n	8002594 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	697a      	ldr	r2, [r7, #20]
 800256c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f000 fa2c 	bl	80029cc <DMA_CalcBaseAndBitshift>
 8002574:	4603      	mov	r3, r0
 8002576:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800257c:	223f      	movs	r2, #63	; 0x3f
 800257e:	409a      	lsls	r2, r3
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2201      	movs	r2, #1
 800258e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002592:	2300      	movs	r3, #0
}
 8002594:	4618      	mov	r0, r3
 8002596:	3718      	adds	r7, #24
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	f010803f 	.word	0xf010803f

080025a0 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b086      	sub	sp, #24
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	60f8      	str	r0, [r7, #12]
 80025a8:	60b9      	str	r1, [r7, #8]
 80025aa:	607a      	str	r2, [r7, #4]
 80025ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025ae:	2300      	movs	r3, #0
 80025b0:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d101      	bne.n	80025c0 <HAL_DMA_Start+0x20>
 80025bc:	2302      	movs	r3, #2
 80025be:	e026      	b.n	800260e <HAL_DMA_Start+0x6e>
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d115      	bne.n	8002600 <HAL_DMA_Start+0x60>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2202      	movs	r2, #2
 80025d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2200      	movs	r2, #0
 80025e0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	68b9      	ldr	r1, [r7, #8]
 80025e8:	68f8      	ldr	r0, [r7, #12]
 80025ea:	f000 f9c1 	bl	8002970 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f042 0201 	orr.w	r2, r2, #1
 80025fc:	601a      	str	r2, [r3, #0]
 80025fe:	e005      	b.n	800260c <HAL_DMA_Start+0x6c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2200      	movs	r2, #0
 8002604:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002608:	2302      	movs	r3, #2
 800260a:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
 800260c:	7dfb      	ldrb	r3, [r7, #23]
}
 800260e:	4618      	mov	r0, r3
 8002610:	3718      	adds	r7, #24
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}

08002616 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002616:	b480      	push	{r7}
 8002618:	b083      	sub	sp, #12
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002624:	b2db      	uxtb	r3, r3
 8002626:	2b02      	cmp	r3, #2
 8002628:	d004      	beq.n	8002634 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2280      	movs	r2, #128	; 0x80
 800262e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e00c      	b.n	800264e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2205      	movs	r2, #5
 8002638:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f022 0201 	bic.w	r2, r2, #1
 800264a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800264c:	2300      	movs	r3, #0
}
 800264e:	4618      	mov	r0, r3
 8002650:	370c      	adds	r7, #12
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
	...

0800265c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b086      	sub	sp, #24
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002664:	2300      	movs	r3, #0
 8002666:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002668:	4b92      	ldr	r3, [pc, #584]	; (80028b4 <HAL_DMA_IRQHandler+0x258>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a92      	ldr	r2, [pc, #584]	; (80028b8 <HAL_DMA_IRQHandler+0x25c>)
 800266e:	fba2 2303 	umull	r2, r3, r2, r3
 8002672:	0a9b      	lsrs	r3, r3, #10
 8002674:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800267a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002686:	2208      	movs	r2, #8
 8002688:	409a      	lsls	r2, r3
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	4013      	ands	r3, r2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d01a      	beq.n	80026c8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0304 	and.w	r3, r3, #4
 800269c:	2b00      	cmp	r3, #0
 800269e:	d013      	beq.n	80026c8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f022 0204 	bic.w	r2, r2, #4
 80026ae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026b4:	2208      	movs	r2, #8
 80026b6:	409a      	lsls	r2, r3
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026c0:	f043 0201 	orr.w	r2, r3, #1
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026cc:	2201      	movs	r2, #1
 80026ce:	409a      	lsls	r2, r3
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	4013      	ands	r3, r2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d012      	beq.n	80026fe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	695b      	ldr	r3, [r3, #20]
 80026de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d00b      	beq.n	80026fe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ea:	2201      	movs	r2, #1
 80026ec:	409a      	lsls	r2, r3
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026f6:	f043 0202 	orr.w	r2, r3, #2
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002702:	2204      	movs	r2, #4
 8002704:	409a      	lsls	r2, r3
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	4013      	ands	r3, r2
 800270a:	2b00      	cmp	r3, #0
 800270c:	d012      	beq.n	8002734 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0302 	and.w	r3, r3, #2
 8002718:	2b00      	cmp	r3, #0
 800271a:	d00b      	beq.n	8002734 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002720:	2204      	movs	r2, #4
 8002722:	409a      	lsls	r2, r3
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800272c:	f043 0204 	orr.w	r2, r3, #4
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002738:	2210      	movs	r2, #16
 800273a:	409a      	lsls	r2, r3
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	4013      	ands	r3, r2
 8002740:	2b00      	cmp	r3, #0
 8002742:	d043      	beq.n	80027cc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0308 	and.w	r3, r3, #8
 800274e:	2b00      	cmp	r3, #0
 8002750:	d03c      	beq.n	80027cc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002756:	2210      	movs	r2, #16
 8002758:	409a      	lsls	r2, r3
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d018      	beq.n	800279e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d108      	bne.n	800278c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	2b00      	cmp	r3, #0
 8002780:	d024      	beq.n	80027cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	4798      	blx	r3
 800278a:	e01f      	b.n	80027cc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002790:	2b00      	cmp	r3, #0
 8002792:	d01b      	beq.n	80027cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	4798      	blx	r3
 800279c:	e016      	b.n	80027cc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d107      	bne.n	80027bc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f022 0208 	bic.w	r2, r2, #8
 80027ba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d003      	beq.n	80027cc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027d0:	2220      	movs	r2, #32
 80027d2:	409a      	lsls	r2, r3
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	4013      	ands	r3, r2
 80027d8:	2b00      	cmp	r3, #0
 80027da:	f000 808e 	beq.w	80028fa <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0310 	and.w	r3, r3, #16
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	f000 8086 	beq.w	80028fa <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027f2:	2220      	movs	r2, #32
 80027f4:	409a      	lsls	r2, r3
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2b05      	cmp	r3, #5
 8002804:	d136      	bne.n	8002874 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f022 0216 	bic.w	r2, r2, #22
 8002814:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	695a      	ldr	r2, [r3, #20]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002824:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282a:	2b00      	cmp	r3, #0
 800282c:	d103      	bne.n	8002836 <HAL_DMA_IRQHandler+0x1da>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002832:	2b00      	cmp	r3, #0
 8002834:	d007      	beq.n	8002846 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f022 0208 	bic.w	r2, r2, #8
 8002844:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800284a:	223f      	movs	r2, #63	; 0x3f
 800284c:	409a      	lsls	r2, r3
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2201      	movs	r2, #1
 800285e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002866:	2b00      	cmp	r3, #0
 8002868:	d07d      	beq.n	8002966 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	4798      	blx	r3
        }
        return;
 8002872:	e078      	b.n	8002966 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d01c      	beq.n	80028bc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d108      	bne.n	80028a2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002894:	2b00      	cmp	r3, #0
 8002896:	d030      	beq.n	80028fa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	4798      	blx	r3
 80028a0:	e02b      	b.n	80028fa <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d027      	beq.n	80028fa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	4798      	blx	r3
 80028b2:	e022      	b.n	80028fa <HAL_DMA_IRQHandler+0x29e>
 80028b4:	20000000 	.word	0x20000000
 80028b8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d10f      	bne.n	80028ea <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f022 0210 	bic.w	r2, r2, #16
 80028d8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2201      	movs	r2, #1
 80028e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d003      	beq.n	80028fa <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d032      	beq.n	8002968 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002906:	f003 0301 	and.w	r3, r3, #1
 800290a:	2b00      	cmp	r3, #0
 800290c:	d022      	beq.n	8002954 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2205      	movs	r2, #5
 8002912:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f022 0201 	bic.w	r2, r2, #1
 8002924:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	3301      	adds	r3, #1
 800292a:	60bb      	str	r3, [r7, #8]
 800292c:	697a      	ldr	r2, [r7, #20]
 800292e:	429a      	cmp	r2, r3
 8002930:	d307      	bcc.n	8002942 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0301 	and.w	r3, r3, #1
 800293c:	2b00      	cmp	r3, #0
 800293e:	d1f2      	bne.n	8002926 <HAL_DMA_IRQHandler+0x2ca>
 8002940:	e000      	b.n	8002944 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002942:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002958:	2b00      	cmp	r3, #0
 800295a:	d005      	beq.n	8002968 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	4798      	blx	r3
 8002964:	e000      	b.n	8002968 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002966:	bf00      	nop
    }
  }
}
 8002968:	3718      	adds	r7, #24
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop

08002970 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002970:	b480      	push	{r7}
 8002972:	b085      	sub	sp, #20
 8002974:	af00      	add	r7, sp, #0
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	60b9      	str	r1, [r7, #8]
 800297a:	607a      	str	r2, [r7, #4]
 800297c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800298c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	683a      	ldr	r2, [r7, #0]
 8002994:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	2b40      	cmp	r3, #64	; 0x40
 800299c:	d108      	bne.n	80029b0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	68ba      	ldr	r2, [r7, #8]
 80029ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80029ae:	e007      	b.n	80029c0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68ba      	ldr	r2, [r7, #8]
 80029b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	60da      	str	r2, [r3, #12]
}
 80029c0:	bf00      	nop
 80029c2:	3714      	adds	r7, #20
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr

080029cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b085      	sub	sp, #20
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	3b10      	subs	r3, #16
 80029dc:	4a14      	ldr	r2, [pc, #80]	; (8002a30 <DMA_CalcBaseAndBitshift+0x64>)
 80029de:	fba2 2303 	umull	r2, r3, r2, r3
 80029e2:	091b      	lsrs	r3, r3, #4
 80029e4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80029e6:	4a13      	ldr	r2, [pc, #76]	; (8002a34 <DMA_CalcBaseAndBitshift+0x68>)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	4413      	add	r3, r2
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	461a      	mov	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2b03      	cmp	r3, #3
 80029f8:	d909      	bls.n	8002a0e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a02:	f023 0303 	bic.w	r3, r3, #3
 8002a06:	1d1a      	adds	r2, r3, #4
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	659a      	str	r2, [r3, #88]	; 0x58
 8002a0c:	e007      	b.n	8002a1e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a16:	f023 0303 	bic.w	r3, r3, #3
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3714      	adds	r7, #20
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
 8002a2e:	bf00      	nop
 8002a30:	aaaaaaab 	.word	0xaaaaaaab
 8002a34:	08004c5c 	.word	0x08004c5c

08002a38 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b085      	sub	sp, #20
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a40:	2300      	movs	r3, #0
 8002a42:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a48:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	699b      	ldr	r3, [r3, #24]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d11f      	bne.n	8002a92 <DMA_CheckFifoParam+0x5a>
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	2b03      	cmp	r3, #3
 8002a56:	d856      	bhi.n	8002b06 <DMA_CheckFifoParam+0xce>
 8002a58:	a201      	add	r2, pc, #4	; (adr r2, 8002a60 <DMA_CheckFifoParam+0x28>)
 8002a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a5e:	bf00      	nop
 8002a60:	08002a71 	.word	0x08002a71
 8002a64:	08002a83 	.word	0x08002a83
 8002a68:	08002a71 	.word	0x08002a71
 8002a6c:	08002b07 	.word	0x08002b07
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d046      	beq.n	8002b0a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a80:	e043      	b.n	8002b0a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a86:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a8a:	d140      	bne.n	8002b0e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a90:	e03d      	b.n	8002b0e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	699b      	ldr	r3, [r3, #24]
 8002a96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a9a:	d121      	bne.n	8002ae0 <DMA_CheckFifoParam+0xa8>
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	2b03      	cmp	r3, #3
 8002aa0:	d837      	bhi.n	8002b12 <DMA_CheckFifoParam+0xda>
 8002aa2:	a201      	add	r2, pc, #4	; (adr r2, 8002aa8 <DMA_CheckFifoParam+0x70>)
 8002aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aa8:	08002ab9 	.word	0x08002ab9
 8002aac:	08002abf 	.word	0x08002abf
 8002ab0:	08002ab9 	.word	0x08002ab9
 8002ab4:	08002ad1 	.word	0x08002ad1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	73fb      	strb	r3, [r7, #15]
      break;
 8002abc:	e030      	b.n	8002b20 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d025      	beq.n	8002b16 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ace:	e022      	b.n	8002b16 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ad8:	d11f      	bne.n	8002b1a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002ade:	e01c      	b.n	8002b1a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d903      	bls.n	8002aee <DMA_CheckFifoParam+0xb6>
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	2b03      	cmp	r3, #3
 8002aea:	d003      	beq.n	8002af4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002aec:	e018      	b.n	8002b20 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	73fb      	strb	r3, [r7, #15]
      break;
 8002af2:	e015      	b.n	8002b20 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d00e      	beq.n	8002b1e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	73fb      	strb	r3, [r7, #15]
      break;
 8002b04:	e00b      	b.n	8002b1e <DMA_CheckFifoParam+0xe6>
      break;
 8002b06:	bf00      	nop
 8002b08:	e00a      	b.n	8002b20 <DMA_CheckFifoParam+0xe8>
      break;
 8002b0a:	bf00      	nop
 8002b0c:	e008      	b.n	8002b20 <DMA_CheckFifoParam+0xe8>
      break;
 8002b0e:	bf00      	nop
 8002b10:	e006      	b.n	8002b20 <DMA_CheckFifoParam+0xe8>
      break;
 8002b12:	bf00      	nop
 8002b14:	e004      	b.n	8002b20 <DMA_CheckFifoParam+0xe8>
      break;
 8002b16:	bf00      	nop
 8002b18:	e002      	b.n	8002b20 <DMA_CheckFifoParam+0xe8>
      break;   
 8002b1a:	bf00      	nop
 8002b1c:	e000      	b.n	8002b20 <DMA_CheckFifoParam+0xe8>
      break;
 8002b1e:	bf00      	nop
    }
  } 
  
  return status; 
 8002b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3714      	adds	r7, #20
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop

08002b30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b089      	sub	sp, #36	; 0x24
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b42:	2300      	movs	r3, #0
 8002b44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b46:	2300      	movs	r3, #0
 8002b48:	61fb      	str	r3, [r7, #28]
 8002b4a:	e177      	b.n	8002e3c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	fa02 f303 	lsl.w	r3, r2, r3
 8002b54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	697a      	ldr	r2, [r7, #20]
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b60:	693a      	ldr	r2, [r7, #16]
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	f040 8166 	bne.w	8002e36 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d00b      	beq.n	8002b8a <HAL_GPIO_Init+0x5a>
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d007      	beq.n	8002b8a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b7e:	2b11      	cmp	r3, #17
 8002b80:	d003      	beq.n	8002b8a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	2b12      	cmp	r3, #18
 8002b88:	d130      	bne.n	8002bec <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	005b      	lsls	r3, r3, #1
 8002b94:	2203      	movs	r2, #3
 8002b96:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9a:	43db      	mvns	r3, r3
 8002b9c:	69ba      	ldr	r2, [r7, #24]
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	68da      	ldr	r2, [r3, #12]
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	005b      	lsls	r3, r3, #1
 8002baa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bae:	69ba      	ldr	r2, [r7, #24]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	69ba      	ldr	r2, [r7, #24]
 8002bb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc8:	43db      	mvns	r3, r3
 8002bca:	69ba      	ldr	r2, [r7, #24]
 8002bcc:	4013      	ands	r3, r2
 8002bce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	091b      	lsrs	r3, r3, #4
 8002bd6:	f003 0201 	and.w	r2, r3, #1
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	69ba      	ldr	r2, [r7, #24]
 8002bea:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	005b      	lsls	r3, r3, #1
 8002bf6:	2203      	movs	r2, #3
 8002bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfc:	43db      	mvns	r3, r3
 8002bfe:	69ba      	ldr	r2, [r7, #24]
 8002c00:	4013      	ands	r3, r2
 8002c02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	689a      	ldr	r2, [r3, #8]
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	005b      	lsls	r3, r3, #1
 8002c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c10:	69ba      	ldr	r2, [r7, #24]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d003      	beq.n	8002c2c <HAL_GPIO_Init+0xfc>
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	2b12      	cmp	r3, #18
 8002c2a:	d123      	bne.n	8002c74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	08da      	lsrs	r2, r3, #3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	3208      	adds	r2, #8
 8002c34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	f003 0307 	and.w	r3, r3, #7
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	220f      	movs	r2, #15
 8002c44:	fa02 f303 	lsl.w	r3, r2, r3
 8002c48:	43db      	mvns	r3, r3
 8002c4a:	69ba      	ldr	r2, [r7, #24]
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	691a      	ldr	r2, [r3, #16]
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	f003 0307 	and.w	r3, r3, #7
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c60:	69ba      	ldr	r2, [r7, #24]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	08da      	lsrs	r2, r3, #3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	3208      	adds	r2, #8
 8002c6e:	69b9      	ldr	r1, [r7, #24]
 8002c70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	005b      	lsls	r3, r3, #1
 8002c7e:	2203      	movs	r2, #3
 8002c80:	fa02 f303 	lsl.w	r3, r2, r3
 8002c84:	43db      	mvns	r3, r3
 8002c86:	69ba      	ldr	r2, [r7, #24]
 8002c88:	4013      	ands	r3, r2
 8002c8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f003 0203 	and.w	r2, r3, #3
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	005b      	lsls	r3, r3, #1
 8002c98:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	f000 80c0 	beq.w	8002e36 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	60fb      	str	r3, [r7, #12]
 8002cba:	4b66      	ldr	r3, [pc, #408]	; (8002e54 <HAL_GPIO_Init+0x324>)
 8002cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cbe:	4a65      	ldr	r2, [pc, #404]	; (8002e54 <HAL_GPIO_Init+0x324>)
 8002cc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cc4:	6453      	str	r3, [r2, #68]	; 0x44
 8002cc6:	4b63      	ldr	r3, [pc, #396]	; (8002e54 <HAL_GPIO_Init+0x324>)
 8002cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cce:	60fb      	str	r3, [r7, #12]
 8002cd0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002cd2:	4a61      	ldr	r2, [pc, #388]	; (8002e58 <HAL_GPIO_Init+0x328>)
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	089b      	lsrs	r3, r3, #2
 8002cd8:	3302      	adds	r3, #2
 8002cda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	f003 0303 	and.w	r3, r3, #3
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	220f      	movs	r2, #15
 8002cea:	fa02 f303 	lsl.w	r3, r2, r3
 8002cee:	43db      	mvns	r3, r3
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a58      	ldr	r2, [pc, #352]	; (8002e5c <HAL_GPIO_Init+0x32c>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d037      	beq.n	8002d6e <HAL_GPIO_Init+0x23e>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a57      	ldr	r2, [pc, #348]	; (8002e60 <HAL_GPIO_Init+0x330>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d031      	beq.n	8002d6a <HAL_GPIO_Init+0x23a>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a56      	ldr	r2, [pc, #344]	; (8002e64 <HAL_GPIO_Init+0x334>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d02b      	beq.n	8002d66 <HAL_GPIO_Init+0x236>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a55      	ldr	r2, [pc, #340]	; (8002e68 <HAL_GPIO_Init+0x338>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d025      	beq.n	8002d62 <HAL_GPIO_Init+0x232>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a54      	ldr	r2, [pc, #336]	; (8002e6c <HAL_GPIO_Init+0x33c>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d01f      	beq.n	8002d5e <HAL_GPIO_Init+0x22e>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a53      	ldr	r2, [pc, #332]	; (8002e70 <HAL_GPIO_Init+0x340>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d019      	beq.n	8002d5a <HAL_GPIO_Init+0x22a>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a52      	ldr	r2, [pc, #328]	; (8002e74 <HAL_GPIO_Init+0x344>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d013      	beq.n	8002d56 <HAL_GPIO_Init+0x226>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a51      	ldr	r2, [pc, #324]	; (8002e78 <HAL_GPIO_Init+0x348>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d00d      	beq.n	8002d52 <HAL_GPIO_Init+0x222>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a50      	ldr	r2, [pc, #320]	; (8002e7c <HAL_GPIO_Init+0x34c>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d007      	beq.n	8002d4e <HAL_GPIO_Init+0x21e>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a4f      	ldr	r2, [pc, #316]	; (8002e80 <HAL_GPIO_Init+0x350>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d101      	bne.n	8002d4a <HAL_GPIO_Init+0x21a>
 8002d46:	2309      	movs	r3, #9
 8002d48:	e012      	b.n	8002d70 <HAL_GPIO_Init+0x240>
 8002d4a:	230a      	movs	r3, #10
 8002d4c:	e010      	b.n	8002d70 <HAL_GPIO_Init+0x240>
 8002d4e:	2308      	movs	r3, #8
 8002d50:	e00e      	b.n	8002d70 <HAL_GPIO_Init+0x240>
 8002d52:	2307      	movs	r3, #7
 8002d54:	e00c      	b.n	8002d70 <HAL_GPIO_Init+0x240>
 8002d56:	2306      	movs	r3, #6
 8002d58:	e00a      	b.n	8002d70 <HAL_GPIO_Init+0x240>
 8002d5a:	2305      	movs	r3, #5
 8002d5c:	e008      	b.n	8002d70 <HAL_GPIO_Init+0x240>
 8002d5e:	2304      	movs	r3, #4
 8002d60:	e006      	b.n	8002d70 <HAL_GPIO_Init+0x240>
 8002d62:	2303      	movs	r3, #3
 8002d64:	e004      	b.n	8002d70 <HAL_GPIO_Init+0x240>
 8002d66:	2302      	movs	r3, #2
 8002d68:	e002      	b.n	8002d70 <HAL_GPIO_Init+0x240>
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e000      	b.n	8002d70 <HAL_GPIO_Init+0x240>
 8002d6e:	2300      	movs	r3, #0
 8002d70:	69fa      	ldr	r2, [r7, #28]
 8002d72:	f002 0203 	and.w	r2, r2, #3
 8002d76:	0092      	lsls	r2, r2, #2
 8002d78:	4093      	lsls	r3, r2
 8002d7a:	69ba      	ldr	r2, [r7, #24]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d80:	4935      	ldr	r1, [pc, #212]	; (8002e58 <HAL_GPIO_Init+0x328>)
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	089b      	lsrs	r3, r3, #2
 8002d86:	3302      	adds	r3, #2
 8002d88:	69ba      	ldr	r2, [r7, #24]
 8002d8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d8e:	4b3d      	ldr	r3, [pc, #244]	; (8002e84 <HAL_GPIO_Init+0x354>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	43db      	mvns	r3, r3
 8002d98:	69ba      	ldr	r2, [r7, #24]
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d003      	beq.n	8002db2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002daa:	69ba      	ldr	r2, [r7, #24]
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002db2:	4a34      	ldr	r2, [pc, #208]	; (8002e84 <HAL_GPIO_Init+0x354>)
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002db8:	4b32      	ldr	r3, [pc, #200]	; (8002e84 <HAL_GPIO_Init+0x354>)
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	43db      	mvns	r3, r3
 8002dc2:	69ba      	ldr	r2, [r7, #24]
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d003      	beq.n	8002ddc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002dd4:	69ba      	ldr	r2, [r7, #24]
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ddc:	4a29      	ldr	r2, [pc, #164]	; (8002e84 <HAL_GPIO_Init+0x354>)
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002de2:	4b28      	ldr	r3, [pc, #160]	; (8002e84 <HAL_GPIO_Init+0x354>)
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	43db      	mvns	r3, r3
 8002dec:	69ba      	ldr	r2, [r7, #24]
 8002dee:	4013      	ands	r3, r2
 8002df0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d003      	beq.n	8002e06 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002dfe:	69ba      	ldr	r2, [r7, #24]
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e06:	4a1f      	ldr	r2, [pc, #124]	; (8002e84 <HAL_GPIO_Init+0x354>)
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e0c:	4b1d      	ldr	r3, [pc, #116]	; (8002e84 <HAL_GPIO_Init+0x354>)
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	43db      	mvns	r3, r3
 8002e16:	69ba      	ldr	r2, [r7, #24]
 8002e18:	4013      	ands	r3, r2
 8002e1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d003      	beq.n	8002e30 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002e28:	69ba      	ldr	r2, [r7, #24]
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e30:	4a14      	ldr	r2, [pc, #80]	; (8002e84 <HAL_GPIO_Init+0x354>)
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	3301      	adds	r3, #1
 8002e3a:	61fb      	str	r3, [r7, #28]
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	2b0f      	cmp	r3, #15
 8002e40:	f67f ae84 	bls.w	8002b4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e44:	bf00      	nop
 8002e46:	bf00      	nop
 8002e48:	3724      	adds	r7, #36	; 0x24
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	40023800 	.word	0x40023800
 8002e58:	40013800 	.word	0x40013800
 8002e5c:	40020000 	.word	0x40020000
 8002e60:	40020400 	.word	0x40020400
 8002e64:	40020800 	.word	0x40020800
 8002e68:	40020c00 	.word	0x40020c00
 8002e6c:	40021000 	.word	0x40021000
 8002e70:	40021400 	.word	0x40021400
 8002e74:	40021800 	.word	0x40021800
 8002e78:	40021c00 	.word	0x40021c00
 8002e7c:	40022000 	.word	0x40022000
 8002e80:	40022400 	.word	0x40022400
 8002e84:	40013c00 	.word	0x40013c00

08002e88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	460b      	mov	r3, r1
 8002e92:	807b      	strh	r3, [r7, #2]
 8002e94:	4613      	mov	r3, r2
 8002e96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e98:	787b      	ldrb	r3, [r7, #1]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d003      	beq.n	8002ea6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e9e:	887a      	ldrh	r2, [r7, #2]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ea4:	e003      	b.n	8002eae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ea6:	887b      	ldrh	r3, [r7, #2]
 8002ea8:	041a      	lsls	r2, r3, #16
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	619a      	str	r2, [r3, #24]
}
 8002eae:	bf00      	nop
 8002eb0:	370c      	adds	r7, #12
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr
	...

08002ebc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b086      	sub	sp, #24
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d101      	bne.n	8002ece <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e25b      	b.n	8003386 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0301 	and.w	r3, r3, #1
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d075      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002eda:	4ba3      	ldr	r3, [pc, #652]	; (8003168 <HAL_RCC_OscConfig+0x2ac>)
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	f003 030c 	and.w	r3, r3, #12
 8002ee2:	2b04      	cmp	r3, #4
 8002ee4:	d00c      	beq.n	8002f00 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ee6:	4ba0      	ldr	r3, [pc, #640]	; (8003168 <HAL_RCC_OscConfig+0x2ac>)
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002eee:	2b08      	cmp	r3, #8
 8002ef0:	d112      	bne.n	8002f18 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ef2:	4b9d      	ldr	r3, [pc, #628]	; (8003168 <HAL_RCC_OscConfig+0x2ac>)
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002efa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002efe:	d10b      	bne.n	8002f18 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f00:	4b99      	ldr	r3, [pc, #612]	; (8003168 <HAL_RCC_OscConfig+0x2ac>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d05b      	beq.n	8002fc4 <HAL_RCC_OscConfig+0x108>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d157      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e236      	b.n	8003386 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f20:	d106      	bne.n	8002f30 <HAL_RCC_OscConfig+0x74>
 8002f22:	4b91      	ldr	r3, [pc, #580]	; (8003168 <HAL_RCC_OscConfig+0x2ac>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a90      	ldr	r2, [pc, #576]	; (8003168 <HAL_RCC_OscConfig+0x2ac>)
 8002f28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f2c:	6013      	str	r3, [r2, #0]
 8002f2e:	e01d      	b.n	8002f6c <HAL_RCC_OscConfig+0xb0>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f38:	d10c      	bne.n	8002f54 <HAL_RCC_OscConfig+0x98>
 8002f3a:	4b8b      	ldr	r3, [pc, #556]	; (8003168 <HAL_RCC_OscConfig+0x2ac>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a8a      	ldr	r2, [pc, #552]	; (8003168 <HAL_RCC_OscConfig+0x2ac>)
 8002f40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f44:	6013      	str	r3, [r2, #0]
 8002f46:	4b88      	ldr	r3, [pc, #544]	; (8003168 <HAL_RCC_OscConfig+0x2ac>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a87      	ldr	r2, [pc, #540]	; (8003168 <HAL_RCC_OscConfig+0x2ac>)
 8002f4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f50:	6013      	str	r3, [r2, #0]
 8002f52:	e00b      	b.n	8002f6c <HAL_RCC_OscConfig+0xb0>
 8002f54:	4b84      	ldr	r3, [pc, #528]	; (8003168 <HAL_RCC_OscConfig+0x2ac>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a83      	ldr	r2, [pc, #524]	; (8003168 <HAL_RCC_OscConfig+0x2ac>)
 8002f5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f5e:	6013      	str	r3, [r2, #0]
 8002f60:	4b81      	ldr	r3, [pc, #516]	; (8003168 <HAL_RCC_OscConfig+0x2ac>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a80      	ldr	r2, [pc, #512]	; (8003168 <HAL_RCC_OscConfig+0x2ac>)
 8002f66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d013      	beq.n	8002f9c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f74:	f7fe fdd6 	bl	8001b24 <HAL_GetTick>
 8002f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f7a:	e008      	b.n	8002f8e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f7c:	f7fe fdd2 	bl	8001b24 <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	2b64      	cmp	r3, #100	; 0x64
 8002f88:	d901      	bls.n	8002f8e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e1fb      	b.n	8003386 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f8e:	4b76      	ldr	r3, [pc, #472]	; (8003168 <HAL_RCC_OscConfig+0x2ac>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d0f0      	beq.n	8002f7c <HAL_RCC_OscConfig+0xc0>
 8002f9a:	e014      	b.n	8002fc6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f9c:	f7fe fdc2 	bl	8001b24 <HAL_GetTick>
 8002fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fa2:	e008      	b.n	8002fb6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fa4:	f7fe fdbe 	bl	8001b24 <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	2b64      	cmp	r3, #100	; 0x64
 8002fb0:	d901      	bls.n	8002fb6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e1e7      	b.n	8003386 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fb6:	4b6c      	ldr	r3, [pc, #432]	; (8003168 <HAL_RCC_OscConfig+0x2ac>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d1f0      	bne.n	8002fa4 <HAL_RCC_OscConfig+0xe8>
 8002fc2:	e000      	b.n	8002fc6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0302 	and.w	r3, r3, #2
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d063      	beq.n	800309a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002fd2:	4b65      	ldr	r3, [pc, #404]	; (8003168 <HAL_RCC_OscConfig+0x2ac>)
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	f003 030c 	and.w	r3, r3, #12
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d00b      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fde:	4b62      	ldr	r3, [pc, #392]	; (8003168 <HAL_RCC_OscConfig+0x2ac>)
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002fe6:	2b08      	cmp	r3, #8
 8002fe8:	d11c      	bne.n	8003024 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fea:	4b5f      	ldr	r3, [pc, #380]	; (8003168 <HAL_RCC_OscConfig+0x2ac>)
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d116      	bne.n	8003024 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ff6:	4b5c      	ldr	r3, [pc, #368]	; (8003168 <HAL_RCC_OscConfig+0x2ac>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d005      	beq.n	800300e <HAL_RCC_OscConfig+0x152>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	2b01      	cmp	r3, #1
 8003008:	d001      	beq.n	800300e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e1bb      	b.n	8003386 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800300e:	4b56      	ldr	r3, [pc, #344]	; (8003168 <HAL_RCC_OscConfig+0x2ac>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	00db      	lsls	r3, r3, #3
 800301c:	4952      	ldr	r1, [pc, #328]	; (8003168 <HAL_RCC_OscConfig+0x2ac>)
 800301e:	4313      	orrs	r3, r2
 8003020:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003022:	e03a      	b.n	800309a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d020      	beq.n	800306e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800302c:	4b4f      	ldr	r3, [pc, #316]	; (800316c <HAL_RCC_OscConfig+0x2b0>)
 800302e:	2201      	movs	r2, #1
 8003030:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003032:	f7fe fd77 	bl	8001b24 <HAL_GetTick>
 8003036:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003038:	e008      	b.n	800304c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800303a:	f7fe fd73 	bl	8001b24 <HAL_GetTick>
 800303e:	4602      	mov	r2, r0
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	2b02      	cmp	r3, #2
 8003046:	d901      	bls.n	800304c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	e19c      	b.n	8003386 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800304c:	4b46      	ldr	r3, [pc, #280]	; (8003168 <HAL_RCC_OscConfig+0x2ac>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0302 	and.w	r3, r3, #2
 8003054:	2b00      	cmp	r3, #0
 8003056:	d0f0      	beq.n	800303a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003058:	4b43      	ldr	r3, [pc, #268]	; (8003168 <HAL_RCC_OscConfig+0x2ac>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	691b      	ldr	r3, [r3, #16]
 8003064:	00db      	lsls	r3, r3, #3
 8003066:	4940      	ldr	r1, [pc, #256]	; (8003168 <HAL_RCC_OscConfig+0x2ac>)
 8003068:	4313      	orrs	r3, r2
 800306a:	600b      	str	r3, [r1, #0]
 800306c:	e015      	b.n	800309a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800306e:	4b3f      	ldr	r3, [pc, #252]	; (800316c <HAL_RCC_OscConfig+0x2b0>)
 8003070:	2200      	movs	r2, #0
 8003072:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003074:	f7fe fd56 	bl	8001b24 <HAL_GetTick>
 8003078:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800307a:	e008      	b.n	800308e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800307c:	f7fe fd52 	bl	8001b24 <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b02      	cmp	r3, #2
 8003088:	d901      	bls.n	800308e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e17b      	b.n	8003386 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800308e:	4b36      	ldr	r3, [pc, #216]	; (8003168 <HAL_RCC_OscConfig+0x2ac>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0302 	and.w	r3, r3, #2
 8003096:	2b00      	cmp	r3, #0
 8003098:	d1f0      	bne.n	800307c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0308 	and.w	r3, r3, #8
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d030      	beq.n	8003108 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	695b      	ldr	r3, [r3, #20]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d016      	beq.n	80030dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030ae:	4b30      	ldr	r3, [pc, #192]	; (8003170 <HAL_RCC_OscConfig+0x2b4>)
 80030b0:	2201      	movs	r2, #1
 80030b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030b4:	f7fe fd36 	bl	8001b24 <HAL_GetTick>
 80030b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030ba:	e008      	b.n	80030ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030bc:	f7fe fd32 	bl	8001b24 <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d901      	bls.n	80030ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e15b      	b.n	8003386 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030ce:	4b26      	ldr	r3, [pc, #152]	; (8003168 <HAL_RCC_OscConfig+0x2ac>)
 80030d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d0f0      	beq.n	80030bc <HAL_RCC_OscConfig+0x200>
 80030da:	e015      	b.n	8003108 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030dc:	4b24      	ldr	r3, [pc, #144]	; (8003170 <HAL_RCC_OscConfig+0x2b4>)
 80030de:	2200      	movs	r2, #0
 80030e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030e2:	f7fe fd1f 	bl	8001b24 <HAL_GetTick>
 80030e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030e8:	e008      	b.n	80030fc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030ea:	f7fe fd1b 	bl	8001b24 <HAL_GetTick>
 80030ee:	4602      	mov	r2, r0
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d901      	bls.n	80030fc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80030f8:	2303      	movs	r3, #3
 80030fa:	e144      	b.n	8003386 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030fc:	4b1a      	ldr	r3, [pc, #104]	; (8003168 <HAL_RCC_OscConfig+0x2ac>)
 80030fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003100:	f003 0302 	and.w	r3, r3, #2
 8003104:	2b00      	cmp	r3, #0
 8003106:	d1f0      	bne.n	80030ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0304 	and.w	r3, r3, #4
 8003110:	2b00      	cmp	r3, #0
 8003112:	f000 80a0 	beq.w	8003256 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003116:	2300      	movs	r3, #0
 8003118:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800311a:	4b13      	ldr	r3, [pc, #76]	; (8003168 <HAL_RCC_OscConfig+0x2ac>)
 800311c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d10f      	bne.n	8003146 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003126:	2300      	movs	r3, #0
 8003128:	60bb      	str	r3, [r7, #8]
 800312a:	4b0f      	ldr	r3, [pc, #60]	; (8003168 <HAL_RCC_OscConfig+0x2ac>)
 800312c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312e:	4a0e      	ldr	r2, [pc, #56]	; (8003168 <HAL_RCC_OscConfig+0x2ac>)
 8003130:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003134:	6413      	str	r3, [r2, #64]	; 0x40
 8003136:	4b0c      	ldr	r3, [pc, #48]	; (8003168 <HAL_RCC_OscConfig+0x2ac>)
 8003138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800313e:	60bb      	str	r3, [r7, #8]
 8003140:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003142:	2301      	movs	r3, #1
 8003144:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003146:	4b0b      	ldr	r3, [pc, #44]	; (8003174 <HAL_RCC_OscConfig+0x2b8>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800314e:	2b00      	cmp	r3, #0
 8003150:	d121      	bne.n	8003196 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003152:	4b08      	ldr	r3, [pc, #32]	; (8003174 <HAL_RCC_OscConfig+0x2b8>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a07      	ldr	r2, [pc, #28]	; (8003174 <HAL_RCC_OscConfig+0x2b8>)
 8003158:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800315c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800315e:	f7fe fce1 	bl	8001b24 <HAL_GetTick>
 8003162:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003164:	e011      	b.n	800318a <HAL_RCC_OscConfig+0x2ce>
 8003166:	bf00      	nop
 8003168:	40023800 	.word	0x40023800
 800316c:	42470000 	.word	0x42470000
 8003170:	42470e80 	.word	0x42470e80
 8003174:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003178:	f7fe fcd4 	bl	8001b24 <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	2b02      	cmp	r3, #2
 8003184:	d901      	bls.n	800318a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e0fd      	b.n	8003386 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800318a:	4b81      	ldr	r3, [pc, #516]	; (8003390 <HAL_RCC_OscConfig+0x4d4>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003192:	2b00      	cmp	r3, #0
 8003194:	d0f0      	beq.n	8003178 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	2b01      	cmp	r3, #1
 800319c:	d106      	bne.n	80031ac <HAL_RCC_OscConfig+0x2f0>
 800319e:	4b7d      	ldr	r3, [pc, #500]	; (8003394 <HAL_RCC_OscConfig+0x4d8>)
 80031a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a2:	4a7c      	ldr	r2, [pc, #496]	; (8003394 <HAL_RCC_OscConfig+0x4d8>)
 80031a4:	f043 0301 	orr.w	r3, r3, #1
 80031a8:	6713      	str	r3, [r2, #112]	; 0x70
 80031aa:	e01c      	b.n	80031e6 <HAL_RCC_OscConfig+0x32a>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	2b05      	cmp	r3, #5
 80031b2:	d10c      	bne.n	80031ce <HAL_RCC_OscConfig+0x312>
 80031b4:	4b77      	ldr	r3, [pc, #476]	; (8003394 <HAL_RCC_OscConfig+0x4d8>)
 80031b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031b8:	4a76      	ldr	r2, [pc, #472]	; (8003394 <HAL_RCC_OscConfig+0x4d8>)
 80031ba:	f043 0304 	orr.w	r3, r3, #4
 80031be:	6713      	str	r3, [r2, #112]	; 0x70
 80031c0:	4b74      	ldr	r3, [pc, #464]	; (8003394 <HAL_RCC_OscConfig+0x4d8>)
 80031c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031c4:	4a73      	ldr	r2, [pc, #460]	; (8003394 <HAL_RCC_OscConfig+0x4d8>)
 80031c6:	f043 0301 	orr.w	r3, r3, #1
 80031ca:	6713      	str	r3, [r2, #112]	; 0x70
 80031cc:	e00b      	b.n	80031e6 <HAL_RCC_OscConfig+0x32a>
 80031ce:	4b71      	ldr	r3, [pc, #452]	; (8003394 <HAL_RCC_OscConfig+0x4d8>)
 80031d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d2:	4a70      	ldr	r2, [pc, #448]	; (8003394 <HAL_RCC_OscConfig+0x4d8>)
 80031d4:	f023 0301 	bic.w	r3, r3, #1
 80031d8:	6713      	str	r3, [r2, #112]	; 0x70
 80031da:	4b6e      	ldr	r3, [pc, #440]	; (8003394 <HAL_RCC_OscConfig+0x4d8>)
 80031dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031de:	4a6d      	ldr	r2, [pc, #436]	; (8003394 <HAL_RCC_OscConfig+0x4d8>)
 80031e0:	f023 0304 	bic.w	r3, r3, #4
 80031e4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d015      	beq.n	800321a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ee:	f7fe fc99 	bl	8001b24 <HAL_GetTick>
 80031f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031f4:	e00a      	b.n	800320c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031f6:	f7fe fc95 	bl	8001b24 <HAL_GetTick>
 80031fa:	4602      	mov	r2, r0
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	f241 3288 	movw	r2, #5000	; 0x1388
 8003204:	4293      	cmp	r3, r2
 8003206:	d901      	bls.n	800320c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	e0bc      	b.n	8003386 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800320c:	4b61      	ldr	r3, [pc, #388]	; (8003394 <HAL_RCC_OscConfig+0x4d8>)
 800320e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003210:	f003 0302 	and.w	r3, r3, #2
 8003214:	2b00      	cmp	r3, #0
 8003216:	d0ee      	beq.n	80031f6 <HAL_RCC_OscConfig+0x33a>
 8003218:	e014      	b.n	8003244 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800321a:	f7fe fc83 	bl	8001b24 <HAL_GetTick>
 800321e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003220:	e00a      	b.n	8003238 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003222:	f7fe fc7f 	bl	8001b24 <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003230:	4293      	cmp	r3, r2
 8003232:	d901      	bls.n	8003238 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003234:	2303      	movs	r3, #3
 8003236:	e0a6      	b.n	8003386 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003238:	4b56      	ldr	r3, [pc, #344]	; (8003394 <HAL_RCC_OscConfig+0x4d8>)
 800323a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800323c:	f003 0302 	and.w	r3, r3, #2
 8003240:	2b00      	cmp	r3, #0
 8003242:	d1ee      	bne.n	8003222 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003244:	7dfb      	ldrb	r3, [r7, #23]
 8003246:	2b01      	cmp	r3, #1
 8003248:	d105      	bne.n	8003256 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800324a:	4b52      	ldr	r3, [pc, #328]	; (8003394 <HAL_RCC_OscConfig+0x4d8>)
 800324c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324e:	4a51      	ldr	r2, [pc, #324]	; (8003394 <HAL_RCC_OscConfig+0x4d8>)
 8003250:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003254:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	699b      	ldr	r3, [r3, #24]
 800325a:	2b00      	cmp	r3, #0
 800325c:	f000 8092 	beq.w	8003384 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003260:	4b4c      	ldr	r3, [pc, #304]	; (8003394 <HAL_RCC_OscConfig+0x4d8>)
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	f003 030c 	and.w	r3, r3, #12
 8003268:	2b08      	cmp	r3, #8
 800326a:	d05c      	beq.n	8003326 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	699b      	ldr	r3, [r3, #24]
 8003270:	2b02      	cmp	r3, #2
 8003272:	d141      	bne.n	80032f8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003274:	4b48      	ldr	r3, [pc, #288]	; (8003398 <HAL_RCC_OscConfig+0x4dc>)
 8003276:	2200      	movs	r2, #0
 8003278:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800327a:	f7fe fc53 	bl	8001b24 <HAL_GetTick>
 800327e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003280:	e008      	b.n	8003294 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003282:	f7fe fc4f 	bl	8001b24 <HAL_GetTick>
 8003286:	4602      	mov	r2, r0
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	2b02      	cmp	r3, #2
 800328e:	d901      	bls.n	8003294 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003290:	2303      	movs	r3, #3
 8003292:	e078      	b.n	8003386 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003294:	4b3f      	ldr	r3, [pc, #252]	; (8003394 <HAL_RCC_OscConfig+0x4d8>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800329c:	2b00      	cmp	r3, #0
 800329e:	d1f0      	bne.n	8003282 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	69da      	ldr	r2, [r3, #28]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a1b      	ldr	r3, [r3, #32]
 80032a8:	431a      	orrs	r2, r3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ae:	019b      	lsls	r3, r3, #6
 80032b0:	431a      	orrs	r2, r3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b6:	085b      	lsrs	r3, r3, #1
 80032b8:	3b01      	subs	r3, #1
 80032ba:	041b      	lsls	r3, r3, #16
 80032bc:	431a      	orrs	r2, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c2:	061b      	lsls	r3, r3, #24
 80032c4:	4933      	ldr	r1, [pc, #204]	; (8003394 <HAL_RCC_OscConfig+0x4d8>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032ca:	4b33      	ldr	r3, [pc, #204]	; (8003398 <HAL_RCC_OscConfig+0x4dc>)
 80032cc:	2201      	movs	r2, #1
 80032ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032d0:	f7fe fc28 	bl	8001b24 <HAL_GetTick>
 80032d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032d6:	e008      	b.n	80032ea <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032d8:	f7fe fc24 	bl	8001b24 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d901      	bls.n	80032ea <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e04d      	b.n	8003386 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032ea:	4b2a      	ldr	r3, [pc, #168]	; (8003394 <HAL_RCC_OscConfig+0x4d8>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d0f0      	beq.n	80032d8 <HAL_RCC_OscConfig+0x41c>
 80032f6:	e045      	b.n	8003384 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032f8:	4b27      	ldr	r3, [pc, #156]	; (8003398 <HAL_RCC_OscConfig+0x4dc>)
 80032fa:	2200      	movs	r2, #0
 80032fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032fe:	f7fe fc11 	bl	8001b24 <HAL_GetTick>
 8003302:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003304:	e008      	b.n	8003318 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003306:	f7fe fc0d 	bl	8001b24 <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	2b02      	cmp	r3, #2
 8003312:	d901      	bls.n	8003318 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e036      	b.n	8003386 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003318:	4b1e      	ldr	r3, [pc, #120]	; (8003394 <HAL_RCC_OscConfig+0x4d8>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d1f0      	bne.n	8003306 <HAL_RCC_OscConfig+0x44a>
 8003324:	e02e      	b.n	8003384 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	699b      	ldr	r3, [r3, #24]
 800332a:	2b01      	cmp	r3, #1
 800332c:	d101      	bne.n	8003332 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e029      	b.n	8003386 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003332:	4b18      	ldr	r3, [pc, #96]	; (8003394 <HAL_RCC_OscConfig+0x4d8>)
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	69db      	ldr	r3, [r3, #28]
 8003342:	429a      	cmp	r2, r3
 8003344:	d11c      	bne.n	8003380 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003350:	429a      	cmp	r2, r3
 8003352:	d115      	bne.n	8003380 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003354:	68fa      	ldr	r2, [r7, #12]
 8003356:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800335a:	4013      	ands	r3, r2
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003360:	4293      	cmp	r3, r2
 8003362:	d10d      	bne.n	8003380 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800336e:	429a      	cmp	r2, r3
 8003370:	d106      	bne.n	8003380 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800337c:	429a      	cmp	r2, r3
 800337e:	d001      	beq.n	8003384 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e000      	b.n	8003386 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003384:	2300      	movs	r3, #0
}
 8003386:	4618      	mov	r0, r3
 8003388:	3718      	adds	r7, #24
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	40007000 	.word	0x40007000
 8003394:	40023800 	.word	0x40023800
 8003398:	42470060 	.word	0x42470060

0800339c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d101      	bne.n	80033b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e0cc      	b.n	800354a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033b0:	4b68      	ldr	r3, [pc, #416]	; (8003554 <HAL_RCC_ClockConfig+0x1b8>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 030f 	and.w	r3, r3, #15
 80033b8:	683a      	ldr	r2, [r7, #0]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d90c      	bls.n	80033d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033be:	4b65      	ldr	r3, [pc, #404]	; (8003554 <HAL_RCC_ClockConfig+0x1b8>)
 80033c0:	683a      	ldr	r2, [r7, #0]
 80033c2:	b2d2      	uxtb	r2, r2
 80033c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033c6:	4b63      	ldr	r3, [pc, #396]	; (8003554 <HAL_RCC_ClockConfig+0x1b8>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 030f 	and.w	r3, r3, #15
 80033ce:	683a      	ldr	r2, [r7, #0]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d001      	beq.n	80033d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e0b8      	b.n	800354a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0302 	and.w	r3, r3, #2
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d020      	beq.n	8003426 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0304 	and.w	r3, r3, #4
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d005      	beq.n	80033fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033f0:	4b59      	ldr	r3, [pc, #356]	; (8003558 <HAL_RCC_ClockConfig+0x1bc>)
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	4a58      	ldr	r2, [pc, #352]	; (8003558 <HAL_RCC_ClockConfig+0x1bc>)
 80033f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80033fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0308 	and.w	r3, r3, #8
 8003404:	2b00      	cmp	r3, #0
 8003406:	d005      	beq.n	8003414 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003408:	4b53      	ldr	r3, [pc, #332]	; (8003558 <HAL_RCC_ClockConfig+0x1bc>)
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	4a52      	ldr	r2, [pc, #328]	; (8003558 <HAL_RCC_ClockConfig+0x1bc>)
 800340e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003412:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003414:	4b50      	ldr	r3, [pc, #320]	; (8003558 <HAL_RCC_ClockConfig+0x1bc>)
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	494d      	ldr	r1, [pc, #308]	; (8003558 <HAL_RCC_ClockConfig+0x1bc>)
 8003422:	4313      	orrs	r3, r2
 8003424:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0301 	and.w	r3, r3, #1
 800342e:	2b00      	cmp	r3, #0
 8003430:	d044      	beq.n	80034bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	2b01      	cmp	r3, #1
 8003438:	d107      	bne.n	800344a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800343a:	4b47      	ldr	r3, [pc, #284]	; (8003558 <HAL_RCC_ClockConfig+0x1bc>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d119      	bne.n	800347a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e07f      	b.n	800354a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	2b02      	cmp	r3, #2
 8003450:	d003      	beq.n	800345a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003456:	2b03      	cmp	r3, #3
 8003458:	d107      	bne.n	800346a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800345a:	4b3f      	ldr	r3, [pc, #252]	; (8003558 <HAL_RCC_ClockConfig+0x1bc>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d109      	bne.n	800347a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e06f      	b.n	800354a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800346a:	4b3b      	ldr	r3, [pc, #236]	; (8003558 <HAL_RCC_ClockConfig+0x1bc>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0302 	and.w	r3, r3, #2
 8003472:	2b00      	cmp	r3, #0
 8003474:	d101      	bne.n	800347a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e067      	b.n	800354a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800347a:	4b37      	ldr	r3, [pc, #220]	; (8003558 <HAL_RCC_ClockConfig+0x1bc>)
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	f023 0203 	bic.w	r2, r3, #3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	4934      	ldr	r1, [pc, #208]	; (8003558 <HAL_RCC_ClockConfig+0x1bc>)
 8003488:	4313      	orrs	r3, r2
 800348a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800348c:	f7fe fb4a 	bl	8001b24 <HAL_GetTick>
 8003490:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003492:	e00a      	b.n	80034aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003494:	f7fe fb46 	bl	8001b24 <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	f241 3288 	movw	r2, #5000	; 0x1388
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d901      	bls.n	80034aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e04f      	b.n	800354a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034aa:	4b2b      	ldr	r3, [pc, #172]	; (8003558 <HAL_RCC_ClockConfig+0x1bc>)
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f003 020c 	and.w	r2, r3, #12
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d1eb      	bne.n	8003494 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034bc:	4b25      	ldr	r3, [pc, #148]	; (8003554 <HAL_RCC_ClockConfig+0x1b8>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 030f 	and.w	r3, r3, #15
 80034c4:	683a      	ldr	r2, [r7, #0]
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d20c      	bcs.n	80034e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ca:	4b22      	ldr	r3, [pc, #136]	; (8003554 <HAL_RCC_ClockConfig+0x1b8>)
 80034cc:	683a      	ldr	r2, [r7, #0]
 80034ce:	b2d2      	uxtb	r2, r2
 80034d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034d2:	4b20      	ldr	r3, [pc, #128]	; (8003554 <HAL_RCC_ClockConfig+0x1b8>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 030f 	and.w	r3, r3, #15
 80034da:	683a      	ldr	r2, [r7, #0]
 80034dc:	429a      	cmp	r2, r3
 80034de:	d001      	beq.n	80034e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e032      	b.n	800354a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0304 	and.w	r3, r3, #4
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d008      	beq.n	8003502 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034f0:	4b19      	ldr	r3, [pc, #100]	; (8003558 <HAL_RCC_ClockConfig+0x1bc>)
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	4916      	ldr	r1, [pc, #88]	; (8003558 <HAL_RCC_ClockConfig+0x1bc>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0308 	and.w	r3, r3, #8
 800350a:	2b00      	cmp	r3, #0
 800350c:	d009      	beq.n	8003522 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800350e:	4b12      	ldr	r3, [pc, #72]	; (8003558 <HAL_RCC_ClockConfig+0x1bc>)
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	691b      	ldr	r3, [r3, #16]
 800351a:	00db      	lsls	r3, r3, #3
 800351c:	490e      	ldr	r1, [pc, #56]	; (8003558 <HAL_RCC_ClockConfig+0x1bc>)
 800351e:	4313      	orrs	r3, r2
 8003520:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003522:	f000 f821 	bl	8003568 <HAL_RCC_GetSysClockFreq>
 8003526:	4602      	mov	r2, r0
 8003528:	4b0b      	ldr	r3, [pc, #44]	; (8003558 <HAL_RCC_ClockConfig+0x1bc>)
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	091b      	lsrs	r3, r3, #4
 800352e:	f003 030f 	and.w	r3, r3, #15
 8003532:	490a      	ldr	r1, [pc, #40]	; (800355c <HAL_RCC_ClockConfig+0x1c0>)
 8003534:	5ccb      	ldrb	r3, [r1, r3]
 8003536:	fa22 f303 	lsr.w	r3, r2, r3
 800353a:	4a09      	ldr	r2, [pc, #36]	; (8003560 <HAL_RCC_ClockConfig+0x1c4>)
 800353c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800353e:	4b09      	ldr	r3, [pc, #36]	; (8003564 <HAL_RCC_ClockConfig+0x1c8>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4618      	mov	r0, r3
 8003544:	f7fe faaa 	bl	8001a9c <HAL_InitTick>

  return HAL_OK;
 8003548:	2300      	movs	r3, #0
}
 800354a:	4618      	mov	r0, r3
 800354c:	3710      	adds	r7, #16
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	40023c00 	.word	0x40023c00
 8003558:	40023800 	.word	0x40023800
 800355c:	08004c44 	.word	0x08004c44
 8003560:	20000000 	.word	0x20000000
 8003564:	20000004 	.word	0x20000004

08003568 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003568:	b5b0      	push	{r4, r5, r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800356e:	2100      	movs	r1, #0
 8003570:	6079      	str	r1, [r7, #4]
 8003572:	2100      	movs	r1, #0
 8003574:	60f9      	str	r1, [r7, #12]
 8003576:	2100      	movs	r1, #0
 8003578:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800357a:	2100      	movs	r1, #0
 800357c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800357e:	4952      	ldr	r1, [pc, #328]	; (80036c8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003580:	6889      	ldr	r1, [r1, #8]
 8003582:	f001 010c 	and.w	r1, r1, #12
 8003586:	2908      	cmp	r1, #8
 8003588:	d00d      	beq.n	80035a6 <HAL_RCC_GetSysClockFreq+0x3e>
 800358a:	2908      	cmp	r1, #8
 800358c:	f200 8094 	bhi.w	80036b8 <HAL_RCC_GetSysClockFreq+0x150>
 8003590:	2900      	cmp	r1, #0
 8003592:	d002      	beq.n	800359a <HAL_RCC_GetSysClockFreq+0x32>
 8003594:	2904      	cmp	r1, #4
 8003596:	d003      	beq.n	80035a0 <HAL_RCC_GetSysClockFreq+0x38>
 8003598:	e08e      	b.n	80036b8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800359a:	4b4c      	ldr	r3, [pc, #304]	; (80036cc <HAL_RCC_GetSysClockFreq+0x164>)
 800359c:	60bb      	str	r3, [r7, #8]
       break;
 800359e:	e08e      	b.n	80036be <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035a0:	4b4b      	ldr	r3, [pc, #300]	; (80036d0 <HAL_RCC_GetSysClockFreq+0x168>)
 80035a2:	60bb      	str	r3, [r7, #8]
      break;
 80035a4:	e08b      	b.n	80036be <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035a6:	4948      	ldr	r1, [pc, #288]	; (80036c8 <HAL_RCC_GetSysClockFreq+0x160>)
 80035a8:	6849      	ldr	r1, [r1, #4]
 80035aa:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80035ae:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035b0:	4945      	ldr	r1, [pc, #276]	; (80036c8 <HAL_RCC_GetSysClockFreq+0x160>)
 80035b2:	6849      	ldr	r1, [r1, #4]
 80035b4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80035b8:	2900      	cmp	r1, #0
 80035ba:	d024      	beq.n	8003606 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035bc:	4942      	ldr	r1, [pc, #264]	; (80036c8 <HAL_RCC_GetSysClockFreq+0x160>)
 80035be:	6849      	ldr	r1, [r1, #4]
 80035c0:	0989      	lsrs	r1, r1, #6
 80035c2:	4608      	mov	r0, r1
 80035c4:	f04f 0100 	mov.w	r1, #0
 80035c8:	f240 14ff 	movw	r4, #511	; 0x1ff
 80035cc:	f04f 0500 	mov.w	r5, #0
 80035d0:	ea00 0204 	and.w	r2, r0, r4
 80035d4:	ea01 0305 	and.w	r3, r1, r5
 80035d8:	493d      	ldr	r1, [pc, #244]	; (80036d0 <HAL_RCC_GetSysClockFreq+0x168>)
 80035da:	fb01 f003 	mul.w	r0, r1, r3
 80035de:	2100      	movs	r1, #0
 80035e0:	fb01 f102 	mul.w	r1, r1, r2
 80035e4:	1844      	adds	r4, r0, r1
 80035e6:	493a      	ldr	r1, [pc, #232]	; (80036d0 <HAL_RCC_GetSysClockFreq+0x168>)
 80035e8:	fba2 0101 	umull	r0, r1, r2, r1
 80035ec:	1863      	adds	r3, r4, r1
 80035ee:	4619      	mov	r1, r3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	461a      	mov	r2, r3
 80035f4:	f04f 0300 	mov.w	r3, #0
 80035f8:	f7fc fdf8 	bl	80001ec <__aeabi_uldivmod>
 80035fc:	4602      	mov	r2, r0
 80035fe:	460b      	mov	r3, r1
 8003600:	4613      	mov	r3, r2
 8003602:	60fb      	str	r3, [r7, #12]
 8003604:	e04a      	b.n	800369c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003606:	4b30      	ldr	r3, [pc, #192]	; (80036c8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	099b      	lsrs	r3, r3, #6
 800360c:	461a      	mov	r2, r3
 800360e:	f04f 0300 	mov.w	r3, #0
 8003612:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003616:	f04f 0100 	mov.w	r1, #0
 800361a:	ea02 0400 	and.w	r4, r2, r0
 800361e:	ea03 0501 	and.w	r5, r3, r1
 8003622:	4620      	mov	r0, r4
 8003624:	4629      	mov	r1, r5
 8003626:	f04f 0200 	mov.w	r2, #0
 800362a:	f04f 0300 	mov.w	r3, #0
 800362e:	014b      	lsls	r3, r1, #5
 8003630:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003634:	0142      	lsls	r2, r0, #5
 8003636:	4610      	mov	r0, r2
 8003638:	4619      	mov	r1, r3
 800363a:	1b00      	subs	r0, r0, r4
 800363c:	eb61 0105 	sbc.w	r1, r1, r5
 8003640:	f04f 0200 	mov.w	r2, #0
 8003644:	f04f 0300 	mov.w	r3, #0
 8003648:	018b      	lsls	r3, r1, #6
 800364a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800364e:	0182      	lsls	r2, r0, #6
 8003650:	1a12      	subs	r2, r2, r0
 8003652:	eb63 0301 	sbc.w	r3, r3, r1
 8003656:	f04f 0000 	mov.w	r0, #0
 800365a:	f04f 0100 	mov.w	r1, #0
 800365e:	00d9      	lsls	r1, r3, #3
 8003660:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003664:	00d0      	lsls	r0, r2, #3
 8003666:	4602      	mov	r2, r0
 8003668:	460b      	mov	r3, r1
 800366a:	1912      	adds	r2, r2, r4
 800366c:	eb45 0303 	adc.w	r3, r5, r3
 8003670:	f04f 0000 	mov.w	r0, #0
 8003674:	f04f 0100 	mov.w	r1, #0
 8003678:	0299      	lsls	r1, r3, #10
 800367a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800367e:	0290      	lsls	r0, r2, #10
 8003680:	4602      	mov	r2, r0
 8003682:	460b      	mov	r3, r1
 8003684:	4610      	mov	r0, r2
 8003686:	4619      	mov	r1, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	461a      	mov	r2, r3
 800368c:	f04f 0300 	mov.w	r3, #0
 8003690:	f7fc fdac 	bl	80001ec <__aeabi_uldivmod>
 8003694:	4602      	mov	r2, r0
 8003696:	460b      	mov	r3, r1
 8003698:	4613      	mov	r3, r2
 800369a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800369c:	4b0a      	ldr	r3, [pc, #40]	; (80036c8 <HAL_RCC_GetSysClockFreq+0x160>)
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	0c1b      	lsrs	r3, r3, #16
 80036a2:	f003 0303 	and.w	r3, r3, #3
 80036a6:	3301      	adds	r3, #1
 80036a8:	005b      	lsls	r3, r3, #1
 80036aa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80036ac:	68fa      	ldr	r2, [r7, #12]
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036b4:	60bb      	str	r3, [r7, #8]
      break;
 80036b6:	e002      	b.n	80036be <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036b8:	4b04      	ldr	r3, [pc, #16]	; (80036cc <HAL_RCC_GetSysClockFreq+0x164>)
 80036ba:	60bb      	str	r3, [r7, #8]
      break;
 80036bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036be:	68bb      	ldr	r3, [r7, #8]
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3710      	adds	r7, #16
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bdb0      	pop	{r4, r5, r7, pc}
 80036c8:	40023800 	.word	0x40023800
 80036cc:	00f42400 	.word	0x00f42400
 80036d0:	00b71b00 	.word	0x00b71b00

080036d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036d4:	b480      	push	{r7}
 80036d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036d8:	4b03      	ldr	r3, [pc, #12]	; (80036e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80036da:	681b      	ldr	r3, [r3, #0]
}
 80036dc:	4618      	mov	r0, r3
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop
 80036e8:	20000000 	.word	0x20000000

080036ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80036f0:	f7ff fff0 	bl	80036d4 <HAL_RCC_GetHCLKFreq>
 80036f4:	4602      	mov	r2, r0
 80036f6:	4b05      	ldr	r3, [pc, #20]	; (800370c <HAL_RCC_GetPCLK1Freq+0x20>)
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	0a9b      	lsrs	r3, r3, #10
 80036fc:	f003 0307 	and.w	r3, r3, #7
 8003700:	4903      	ldr	r1, [pc, #12]	; (8003710 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003702:	5ccb      	ldrb	r3, [r1, r3]
 8003704:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003708:	4618      	mov	r0, r3
 800370a:	bd80      	pop	{r7, pc}
 800370c:	40023800 	.word	0x40023800
 8003710:	08004c54 	.word	0x08004c54

08003714 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003718:	f7ff ffdc 	bl	80036d4 <HAL_RCC_GetHCLKFreq>
 800371c:	4602      	mov	r2, r0
 800371e:	4b05      	ldr	r3, [pc, #20]	; (8003734 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	0b5b      	lsrs	r3, r3, #13
 8003724:	f003 0307 	and.w	r3, r3, #7
 8003728:	4903      	ldr	r1, [pc, #12]	; (8003738 <HAL_RCC_GetPCLK2Freq+0x24>)
 800372a:	5ccb      	ldrb	r3, [r1, r3]
 800372c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003730:	4618      	mov	r0, r3
 8003732:	bd80      	pop	{r7, pc}
 8003734:	40023800 	.word	0x40023800
 8003738:	08004c54 	.word	0x08004c54

0800373c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d101      	bne.n	800374e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e056      	b.n	80037fc <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800375a:	b2db      	uxtb	r3, r3
 800375c:	2b00      	cmp	r3, #0
 800375e:	d106      	bne.n	800376e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f7fd fda1 	bl	80012b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2202      	movs	r2, #2
 8003772:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003784:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685a      	ldr	r2, [r3, #4]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	431a      	orrs	r2, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	431a      	orrs	r2, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	431a      	orrs	r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	695b      	ldr	r3, [r3, #20]
 80037a0:	431a      	orrs	r2, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	699b      	ldr	r3, [r3, #24]
 80037a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037aa:	431a      	orrs	r2, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	69db      	ldr	r3, [r3, #28]
 80037b0:	431a      	orrs	r2, r3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a1b      	ldr	r3, [r3, #32]
 80037b6:	ea42 0103 	orr.w	r1, r2, r3
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	430a      	orrs	r2, r1
 80037c4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	699b      	ldr	r3, [r3, #24]
 80037ca:	0c1b      	lsrs	r3, r3, #16
 80037cc:	f003 0104 	and.w	r1, r3, #4
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	430a      	orrs	r2, r1
 80037da:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	69da      	ldr	r2, [r3, #28]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037ea:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2201      	movs	r2, #1
 80037f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80037fa:	2300      	movs	r3, #0
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3708      	adds	r7, #8
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}

08003804 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b082      	sub	sp, #8
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d101      	bne.n	8003816 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e01d      	b.n	8003852 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800381c:	b2db      	uxtb	r3, r3
 800381e:	2b00      	cmp	r3, #0
 8003820:	d106      	bne.n	8003830 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f7fd fd88 	bl	8001340 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2202      	movs	r2, #2
 8003834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	3304      	adds	r3, #4
 8003840:	4619      	mov	r1, r3
 8003842:	4610      	mov	r0, r2
 8003844:	f000 f8d0 	bl	80039e8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	3708      	adds	r7, #8
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
	...

0800385c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b084      	sub	sp, #16
 8003860:	af00      	add	r7, sp, #0
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	60b9      	str	r1, [r7, #8]
 8003866:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800386e:	2b01      	cmp	r3, #1
 8003870:	d101      	bne.n	8003876 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003872:	2302      	movs	r3, #2
 8003874:	e0b4      	b.n	80039e0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2201      	movs	r2, #1
 800387a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2202      	movs	r2, #2
 8003882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2b0c      	cmp	r3, #12
 800388a:	f200 809f 	bhi.w	80039cc <HAL_TIM_PWM_ConfigChannel+0x170>
 800388e:	a201      	add	r2, pc, #4	; (adr r2, 8003894 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003894:	080038c9 	.word	0x080038c9
 8003898:	080039cd 	.word	0x080039cd
 800389c:	080039cd 	.word	0x080039cd
 80038a0:	080039cd 	.word	0x080039cd
 80038a4:	08003909 	.word	0x08003909
 80038a8:	080039cd 	.word	0x080039cd
 80038ac:	080039cd 	.word	0x080039cd
 80038b0:	080039cd 	.word	0x080039cd
 80038b4:	0800394b 	.word	0x0800394b
 80038b8:	080039cd 	.word	0x080039cd
 80038bc:	080039cd 	.word	0x080039cd
 80038c0:	080039cd 	.word	0x080039cd
 80038c4:	0800398b 	.word	0x0800398b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	68b9      	ldr	r1, [r7, #8]
 80038ce:	4618      	mov	r0, r3
 80038d0:	f000 f92a 	bl	8003b28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	699a      	ldr	r2, [r3, #24]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f042 0208 	orr.w	r2, r2, #8
 80038e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	699a      	ldr	r2, [r3, #24]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f022 0204 	bic.w	r2, r2, #4
 80038f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	6999      	ldr	r1, [r3, #24]
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	691a      	ldr	r2, [r3, #16]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	430a      	orrs	r2, r1
 8003904:	619a      	str	r2, [r3, #24]
      break;
 8003906:	e062      	b.n	80039ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	68b9      	ldr	r1, [r7, #8]
 800390e:	4618      	mov	r0, r3
 8003910:	f000 f97a 	bl	8003c08 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	699a      	ldr	r2, [r3, #24]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003922:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	699a      	ldr	r2, [r3, #24]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003932:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	6999      	ldr	r1, [r3, #24]
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	691b      	ldr	r3, [r3, #16]
 800393e:	021a      	lsls	r2, r3, #8
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	430a      	orrs	r2, r1
 8003946:	619a      	str	r2, [r3, #24]
      break;
 8003948:	e041      	b.n	80039ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	68b9      	ldr	r1, [r7, #8]
 8003950:	4618      	mov	r0, r3
 8003952:	f000 f9cf 	bl	8003cf4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	69da      	ldr	r2, [r3, #28]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f042 0208 	orr.w	r2, r2, #8
 8003964:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	69da      	ldr	r2, [r3, #28]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f022 0204 	bic.w	r2, r2, #4
 8003974:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	69d9      	ldr	r1, [r3, #28]
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	691a      	ldr	r2, [r3, #16]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	430a      	orrs	r2, r1
 8003986:	61da      	str	r2, [r3, #28]
      break;
 8003988:	e021      	b.n	80039ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	68b9      	ldr	r1, [r7, #8]
 8003990:	4618      	mov	r0, r3
 8003992:	f000 fa23 	bl	8003ddc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	69da      	ldr	r2, [r3, #28]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	69da      	ldr	r2, [r3, #28]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	69d9      	ldr	r1, [r3, #28]
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	691b      	ldr	r3, [r3, #16]
 80039c0:	021a      	lsls	r2, r3, #8
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	430a      	orrs	r2, r1
 80039c8:	61da      	str	r2, [r3, #28]
      break;
 80039ca:	e000      	b.n	80039ce <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80039cc:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2201      	movs	r2, #1
 80039d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2200      	movs	r2, #0
 80039da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80039de:	2300      	movs	r3, #0
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3710      	adds	r7, #16
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b085      	sub	sp, #20
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4a40      	ldr	r2, [pc, #256]	; (8003afc <TIM_Base_SetConfig+0x114>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d013      	beq.n	8003a28 <TIM_Base_SetConfig+0x40>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a06:	d00f      	beq.n	8003a28 <TIM_Base_SetConfig+0x40>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	4a3d      	ldr	r2, [pc, #244]	; (8003b00 <TIM_Base_SetConfig+0x118>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d00b      	beq.n	8003a28 <TIM_Base_SetConfig+0x40>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4a3c      	ldr	r2, [pc, #240]	; (8003b04 <TIM_Base_SetConfig+0x11c>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d007      	beq.n	8003a28 <TIM_Base_SetConfig+0x40>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	4a3b      	ldr	r2, [pc, #236]	; (8003b08 <TIM_Base_SetConfig+0x120>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d003      	beq.n	8003a28 <TIM_Base_SetConfig+0x40>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	4a3a      	ldr	r2, [pc, #232]	; (8003b0c <TIM_Base_SetConfig+0x124>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d108      	bne.n	8003a3a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	68fa      	ldr	r2, [r7, #12]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a2f      	ldr	r2, [pc, #188]	; (8003afc <TIM_Base_SetConfig+0x114>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d02b      	beq.n	8003a9a <TIM_Base_SetConfig+0xb2>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a48:	d027      	beq.n	8003a9a <TIM_Base_SetConfig+0xb2>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a2c      	ldr	r2, [pc, #176]	; (8003b00 <TIM_Base_SetConfig+0x118>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d023      	beq.n	8003a9a <TIM_Base_SetConfig+0xb2>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a2b      	ldr	r2, [pc, #172]	; (8003b04 <TIM_Base_SetConfig+0x11c>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d01f      	beq.n	8003a9a <TIM_Base_SetConfig+0xb2>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a2a      	ldr	r2, [pc, #168]	; (8003b08 <TIM_Base_SetConfig+0x120>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d01b      	beq.n	8003a9a <TIM_Base_SetConfig+0xb2>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a29      	ldr	r2, [pc, #164]	; (8003b0c <TIM_Base_SetConfig+0x124>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d017      	beq.n	8003a9a <TIM_Base_SetConfig+0xb2>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a28      	ldr	r2, [pc, #160]	; (8003b10 <TIM_Base_SetConfig+0x128>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d013      	beq.n	8003a9a <TIM_Base_SetConfig+0xb2>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a27      	ldr	r2, [pc, #156]	; (8003b14 <TIM_Base_SetConfig+0x12c>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d00f      	beq.n	8003a9a <TIM_Base_SetConfig+0xb2>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a26      	ldr	r2, [pc, #152]	; (8003b18 <TIM_Base_SetConfig+0x130>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d00b      	beq.n	8003a9a <TIM_Base_SetConfig+0xb2>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a25      	ldr	r2, [pc, #148]	; (8003b1c <TIM_Base_SetConfig+0x134>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d007      	beq.n	8003a9a <TIM_Base_SetConfig+0xb2>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a24      	ldr	r2, [pc, #144]	; (8003b20 <TIM_Base_SetConfig+0x138>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d003      	beq.n	8003a9a <TIM_Base_SetConfig+0xb2>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a23      	ldr	r2, [pc, #140]	; (8003b24 <TIM_Base_SetConfig+0x13c>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d108      	bne.n	8003aac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003aa0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	68fa      	ldr	r2, [r7, #12]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	695b      	ldr	r3, [r3, #20]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	68fa      	ldr	r2, [r7, #12]
 8003abe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	689a      	ldr	r2, [r3, #8]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	4a0a      	ldr	r2, [pc, #40]	; (8003afc <TIM_Base_SetConfig+0x114>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d003      	beq.n	8003ae0 <TIM_Base_SetConfig+0xf8>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	4a0c      	ldr	r2, [pc, #48]	; (8003b0c <TIM_Base_SetConfig+0x124>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d103      	bne.n	8003ae8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	691a      	ldr	r2, [r3, #16]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	615a      	str	r2, [r3, #20]
}
 8003aee:	bf00      	nop
 8003af0:	3714      	adds	r7, #20
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr
 8003afa:	bf00      	nop
 8003afc:	40010000 	.word	0x40010000
 8003b00:	40000400 	.word	0x40000400
 8003b04:	40000800 	.word	0x40000800
 8003b08:	40000c00 	.word	0x40000c00
 8003b0c:	40010400 	.word	0x40010400
 8003b10:	40014000 	.word	0x40014000
 8003b14:	40014400 	.word	0x40014400
 8003b18:	40014800 	.word	0x40014800
 8003b1c:	40001800 	.word	0x40001800
 8003b20:	40001c00 	.word	0x40001c00
 8003b24:	40002000 	.word	0x40002000

08003b28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b087      	sub	sp, #28
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a1b      	ldr	r3, [r3, #32]
 8003b36:	f023 0201 	bic.w	r2, r3, #1
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6a1b      	ldr	r3, [r3, #32]
 8003b42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	699b      	ldr	r3, [r3, #24]
 8003b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f023 0303 	bic.w	r3, r3, #3
 8003b5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	68fa      	ldr	r2, [r7, #12]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	f023 0302 	bic.w	r3, r3, #2
 8003b70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	697a      	ldr	r2, [r7, #20]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4a20      	ldr	r2, [pc, #128]	; (8003c00 <TIM_OC1_SetConfig+0xd8>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d003      	beq.n	8003b8c <TIM_OC1_SetConfig+0x64>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	4a1f      	ldr	r2, [pc, #124]	; (8003c04 <TIM_OC1_SetConfig+0xdc>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d10c      	bne.n	8003ba6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	f023 0308 	bic.w	r3, r3, #8
 8003b92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	697a      	ldr	r2, [r7, #20]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	f023 0304 	bic.w	r3, r3, #4
 8003ba4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4a15      	ldr	r2, [pc, #84]	; (8003c00 <TIM_OC1_SetConfig+0xd8>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d003      	beq.n	8003bb6 <TIM_OC1_SetConfig+0x8e>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a14      	ldr	r2, [pc, #80]	; (8003c04 <TIM_OC1_SetConfig+0xdc>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d111      	bne.n	8003bda <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003bc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	695b      	ldr	r3, [r3, #20]
 8003bca:	693a      	ldr	r2, [r7, #16]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	699b      	ldr	r3, [r3, #24]
 8003bd4:	693a      	ldr	r2, [r7, #16]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	693a      	ldr	r2, [r7, #16]
 8003bde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	68fa      	ldr	r2, [r7, #12]
 8003be4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	685a      	ldr	r2, [r3, #4]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	697a      	ldr	r2, [r7, #20]
 8003bf2:	621a      	str	r2, [r3, #32]
}
 8003bf4:	bf00      	nop
 8003bf6:	371c      	adds	r7, #28
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr
 8003c00:	40010000 	.word	0x40010000
 8003c04:	40010400 	.word	0x40010400

08003c08 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b087      	sub	sp, #28
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6a1b      	ldr	r3, [r3, #32]
 8003c16:	f023 0210 	bic.w	r2, r3, #16
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6a1b      	ldr	r3, [r3, #32]
 8003c22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	699b      	ldr	r3, [r3, #24]
 8003c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	021b      	lsls	r3, r3, #8
 8003c46:	68fa      	ldr	r2, [r7, #12]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	f023 0320 	bic.w	r3, r3, #32
 8003c52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	011b      	lsls	r3, r3, #4
 8003c5a:	697a      	ldr	r2, [r7, #20]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	4a22      	ldr	r2, [pc, #136]	; (8003cec <TIM_OC2_SetConfig+0xe4>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d003      	beq.n	8003c70 <TIM_OC2_SetConfig+0x68>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	4a21      	ldr	r2, [pc, #132]	; (8003cf0 <TIM_OC2_SetConfig+0xe8>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d10d      	bne.n	8003c8c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	011b      	lsls	r3, r3, #4
 8003c7e:	697a      	ldr	r2, [r7, #20]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c8a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	4a17      	ldr	r2, [pc, #92]	; (8003cec <TIM_OC2_SetConfig+0xe4>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d003      	beq.n	8003c9c <TIM_OC2_SetConfig+0x94>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	4a16      	ldr	r2, [pc, #88]	; (8003cf0 <TIM_OC2_SetConfig+0xe8>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d113      	bne.n	8003cc4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ca2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003caa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	695b      	ldr	r3, [r3, #20]
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	693a      	ldr	r2, [r7, #16]
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	699b      	ldr	r3, [r3, #24]
 8003cbc:	009b      	lsls	r3, r3, #2
 8003cbe:	693a      	ldr	r2, [r7, #16]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	693a      	ldr	r2, [r7, #16]
 8003cc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	68fa      	ldr	r2, [r7, #12]
 8003cce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	685a      	ldr	r2, [r3, #4]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	697a      	ldr	r2, [r7, #20]
 8003cdc:	621a      	str	r2, [r3, #32]
}
 8003cde:	bf00      	nop
 8003ce0:	371c      	adds	r7, #28
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	40010000 	.word	0x40010000
 8003cf0:	40010400 	.word	0x40010400

08003cf4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b087      	sub	sp, #28
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6a1b      	ldr	r3, [r3, #32]
 8003d02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a1b      	ldr	r3, [r3, #32]
 8003d0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	69db      	ldr	r3, [r3, #28]
 8003d1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f023 0303 	bic.w	r3, r3, #3
 8003d2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	68fa      	ldr	r2, [r7, #12]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	021b      	lsls	r3, r3, #8
 8003d44:	697a      	ldr	r2, [r7, #20]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4a21      	ldr	r2, [pc, #132]	; (8003dd4 <TIM_OC3_SetConfig+0xe0>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d003      	beq.n	8003d5a <TIM_OC3_SetConfig+0x66>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4a20      	ldr	r2, [pc, #128]	; (8003dd8 <TIM_OC3_SetConfig+0xe4>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d10d      	bne.n	8003d76 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	021b      	lsls	r3, r3, #8
 8003d68:	697a      	ldr	r2, [r7, #20]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a16      	ldr	r2, [pc, #88]	; (8003dd4 <TIM_OC3_SetConfig+0xe0>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d003      	beq.n	8003d86 <TIM_OC3_SetConfig+0x92>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a15      	ldr	r2, [pc, #84]	; (8003dd8 <TIM_OC3_SetConfig+0xe4>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d113      	bne.n	8003dae <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	695b      	ldr	r3, [r3, #20]
 8003d9a:	011b      	lsls	r3, r3, #4
 8003d9c:	693a      	ldr	r2, [r7, #16]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	699b      	ldr	r3, [r3, #24]
 8003da6:	011b      	lsls	r3, r3, #4
 8003da8:	693a      	ldr	r2, [r7, #16]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	693a      	ldr	r2, [r7, #16]
 8003db2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	68fa      	ldr	r2, [r7, #12]
 8003db8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	685a      	ldr	r2, [r3, #4]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	697a      	ldr	r2, [r7, #20]
 8003dc6:	621a      	str	r2, [r3, #32]
}
 8003dc8:	bf00      	nop
 8003dca:	371c      	adds	r7, #28
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr
 8003dd4:	40010000 	.word	0x40010000
 8003dd8:	40010400 	.word	0x40010400

08003ddc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b087      	sub	sp, #28
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a1b      	ldr	r3, [r3, #32]
 8003dea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a1b      	ldr	r3, [r3, #32]
 8003df6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	69db      	ldr	r3, [r3, #28]
 8003e02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	021b      	lsls	r3, r3, #8
 8003e1a:	68fa      	ldr	r2, [r7, #12]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	031b      	lsls	r3, r3, #12
 8003e2e:	693a      	ldr	r2, [r7, #16]
 8003e30:	4313      	orrs	r3, r2
 8003e32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	4a12      	ldr	r2, [pc, #72]	; (8003e80 <TIM_OC4_SetConfig+0xa4>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d003      	beq.n	8003e44 <TIM_OC4_SetConfig+0x68>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	4a11      	ldr	r2, [pc, #68]	; (8003e84 <TIM_OC4_SetConfig+0xa8>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d109      	bne.n	8003e58 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e4a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	695b      	ldr	r3, [r3, #20]
 8003e50:	019b      	lsls	r3, r3, #6
 8003e52:	697a      	ldr	r2, [r7, #20]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	697a      	ldr	r2, [r7, #20]
 8003e5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	68fa      	ldr	r2, [r7, #12]
 8003e62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	685a      	ldr	r2, [r3, #4]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	693a      	ldr	r2, [r7, #16]
 8003e70:	621a      	str	r2, [r3, #32]
}
 8003e72:	bf00      	nop
 8003e74:	371c      	adds	r7, #28
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop
 8003e80:	40010000 	.word	0x40010000
 8003e84:	40010400 	.word	0x40010400

08003e88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b085      	sub	sp, #20
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d101      	bne.n	8003ea0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e9c:	2302      	movs	r3, #2
 8003e9e:	e05a      	b.n	8003f56 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2202      	movs	r2, #2
 8003eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ec6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	68fa      	ldr	r2, [r7, #12]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a21      	ldr	r2, [pc, #132]	; (8003f64 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d022      	beq.n	8003f2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eec:	d01d      	beq.n	8003f2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a1d      	ldr	r2, [pc, #116]	; (8003f68 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d018      	beq.n	8003f2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a1b      	ldr	r2, [pc, #108]	; (8003f6c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d013      	beq.n	8003f2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a1a      	ldr	r2, [pc, #104]	; (8003f70 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d00e      	beq.n	8003f2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a18      	ldr	r2, [pc, #96]	; (8003f74 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d009      	beq.n	8003f2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a17      	ldr	r2, [pc, #92]	; (8003f78 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d004      	beq.n	8003f2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a15      	ldr	r2, [pc, #84]	; (8003f7c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d10c      	bne.n	8003f44 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	68ba      	ldr	r2, [r7, #8]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	68ba      	ldr	r2, [r7, #8]
 8003f42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f54:	2300      	movs	r3, #0
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3714      	adds	r7, #20
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop
 8003f64:	40010000 	.word	0x40010000
 8003f68:	40000400 	.word	0x40000400
 8003f6c:	40000800 	.word	0x40000800
 8003f70:	40000c00 	.word	0x40000c00
 8003f74:	40010400 	.word	0x40010400
 8003f78:	40014000 	.word	0x40014000
 8003f7c:	40001800 	.word	0x40001800

08003f80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b082      	sub	sp, #8
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d101      	bne.n	8003f92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e03f      	b.n	8004012 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d106      	bne.n	8003fac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f7fd fb1a 	bl	80015e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2224      	movs	r2, #36	; 0x24
 8003fb0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	68da      	ldr	r2, [r3, #12]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003fc2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f000 fa69 	bl	800449c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	691a      	ldr	r2, [r3, #16]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fd8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	695a      	ldr	r2, [r3, #20]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003fe8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	68da      	ldr	r2, [r3, #12]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ff8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2220      	movs	r2, #32
 8004004:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2220      	movs	r2, #32
 800400c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004010:	2300      	movs	r3, #0
}
 8004012:	4618      	mov	r0, r3
 8004014:	3708      	adds	r7, #8
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
	...

0800401c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b088      	sub	sp, #32
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	695b      	ldr	r3, [r3, #20]
 800403a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800403c:	2300      	movs	r3, #0
 800403e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004040:	2300      	movs	r3, #0
 8004042:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	f003 030f 	and.w	r3, r3, #15
 800404a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d10d      	bne.n	800406e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	f003 0320 	and.w	r3, r3, #32
 8004058:	2b00      	cmp	r3, #0
 800405a:	d008      	beq.n	800406e <HAL_UART_IRQHandler+0x52>
 800405c:	69bb      	ldr	r3, [r7, #24]
 800405e:	f003 0320 	and.w	r3, r3, #32
 8004062:	2b00      	cmp	r3, #0
 8004064:	d003      	beq.n	800406e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f000 f996 	bl	8004398 <UART_Receive_IT>
      return;
 800406c:	e0d0      	b.n	8004210 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	2b00      	cmp	r3, #0
 8004072:	f000 80b0 	beq.w	80041d6 <HAL_UART_IRQHandler+0x1ba>
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	f003 0301 	and.w	r3, r3, #1
 800407c:	2b00      	cmp	r3, #0
 800407e:	d105      	bne.n	800408c <HAL_UART_IRQHandler+0x70>
 8004080:	69bb      	ldr	r3, [r7, #24]
 8004082:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004086:	2b00      	cmp	r3, #0
 8004088:	f000 80a5 	beq.w	80041d6 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	f003 0301 	and.w	r3, r3, #1
 8004092:	2b00      	cmp	r3, #0
 8004094:	d00a      	beq.n	80040ac <HAL_UART_IRQHandler+0x90>
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800409c:	2b00      	cmp	r3, #0
 800409e:	d005      	beq.n	80040ac <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040a4:	f043 0201 	orr.w	r2, r3, #1
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80040ac:	69fb      	ldr	r3, [r7, #28]
 80040ae:	f003 0304 	and.w	r3, r3, #4
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d00a      	beq.n	80040cc <HAL_UART_IRQHandler+0xb0>
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	f003 0301 	and.w	r3, r3, #1
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d005      	beq.n	80040cc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040c4:	f043 0202 	orr.w	r2, r3, #2
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	f003 0302 	and.w	r3, r3, #2
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d00a      	beq.n	80040ec <HAL_UART_IRQHandler+0xd0>
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	f003 0301 	and.w	r3, r3, #1
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d005      	beq.n	80040ec <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040e4:	f043 0204 	orr.w	r2, r3, #4
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80040ec:	69fb      	ldr	r3, [r7, #28]
 80040ee:	f003 0308 	and.w	r3, r3, #8
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d00f      	beq.n	8004116 <HAL_UART_IRQHandler+0xfa>
 80040f6:	69bb      	ldr	r3, [r7, #24]
 80040f8:	f003 0320 	and.w	r3, r3, #32
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d104      	bne.n	800410a <HAL_UART_IRQHandler+0xee>
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	f003 0301 	and.w	r3, r3, #1
 8004106:	2b00      	cmp	r3, #0
 8004108:	d005      	beq.n	8004116 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800410e:	f043 0208 	orr.w	r2, r3, #8
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800411a:	2b00      	cmp	r3, #0
 800411c:	d077      	beq.n	800420e <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	f003 0320 	and.w	r3, r3, #32
 8004124:	2b00      	cmp	r3, #0
 8004126:	d007      	beq.n	8004138 <HAL_UART_IRQHandler+0x11c>
 8004128:	69bb      	ldr	r3, [r7, #24]
 800412a:	f003 0320 	and.w	r3, r3, #32
 800412e:	2b00      	cmp	r3, #0
 8004130:	d002      	beq.n	8004138 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f000 f930 	bl	8004398 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	695b      	ldr	r3, [r3, #20]
 800413e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004142:	2b40      	cmp	r3, #64	; 0x40
 8004144:	bf0c      	ite	eq
 8004146:	2301      	moveq	r3, #1
 8004148:	2300      	movne	r3, #0
 800414a:	b2db      	uxtb	r3, r3
 800414c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004152:	f003 0308 	and.w	r3, r3, #8
 8004156:	2b00      	cmp	r3, #0
 8004158:	d102      	bne.n	8004160 <HAL_UART_IRQHandler+0x144>
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d031      	beq.n	80041c4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f000 f879 	bl	8004258 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	695b      	ldr	r3, [r3, #20]
 800416c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004170:	2b40      	cmp	r3, #64	; 0x40
 8004172:	d123      	bne.n	80041bc <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	695a      	ldr	r2, [r3, #20]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004182:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004188:	2b00      	cmp	r3, #0
 800418a:	d013      	beq.n	80041b4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004190:	4a21      	ldr	r2, [pc, #132]	; (8004218 <HAL_UART_IRQHandler+0x1fc>)
 8004192:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004198:	4618      	mov	r0, r3
 800419a:	f7fe fa3c 	bl	8002616 <HAL_DMA_Abort_IT>
 800419e:	4603      	mov	r3, r0
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d016      	beq.n	80041d2 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80041ae:	4610      	mov	r0, r2
 80041b0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041b2:	e00e      	b.n	80041d2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f000 f845 	bl	8004244 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041ba:	e00a      	b.n	80041d2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f000 f841 	bl	8004244 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041c2:	e006      	b.n	80041d2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f000 f83d 	bl	8004244 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80041d0:	e01d      	b.n	800420e <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041d2:	bf00      	nop
    return;
 80041d4:	e01b      	b.n	800420e <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80041d6:	69fb      	ldr	r3, [r7, #28]
 80041d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d008      	beq.n	80041f2 <HAL_UART_IRQHandler+0x1d6>
 80041e0:	69bb      	ldr	r3, [r7, #24]
 80041e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d003      	beq.n	80041f2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f000 f866 	bl	80042bc <UART_Transmit_IT>
    return;
 80041f0:	e00e      	b.n	8004210 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d009      	beq.n	8004210 <HAL_UART_IRQHandler+0x1f4>
 80041fc:	69bb      	ldr	r3, [r7, #24]
 80041fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004202:	2b00      	cmp	r3, #0
 8004204:	d004      	beq.n	8004210 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f000 f8ae 	bl	8004368 <UART_EndTransmit_IT>
    return;
 800420c:	e000      	b.n	8004210 <HAL_UART_IRQHandler+0x1f4>
    return;
 800420e:	bf00      	nop
  }
}
 8004210:	3720      	adds	r7, #32
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	08004295 	.word	0x08004295

0800421c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800421c:	b480      	push	{r7}
 800421e:	b083      	sub	sp, #12
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004224:	bf00      	nop
 8004226:	370c      	adds	r7, #12
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr

08004230 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004238:	bf00      	nop
 800423a:	370c      	adds	r7, #12
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr

08004244 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004244:	b480      	push	{r7}
 8004246:	b083      	sub	sp, #12
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800424c:	bf00      	nop
 800424e:	370c      	adds	r7, #12
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr

08004258 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	68da      	ldr	r2, [r3, #12]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800426e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	695a      	ldr	r2, [r3, #20]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f022 0201 	bic.w	r2, r2, #1
 800427e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2220      	movs	r2, #32
 8004284:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004288:	bf00      	nop
 800428a:	370c      	adds	r7, #12
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr

08004294 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b084      	sub	sp, #16
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2200      	movs	r2, #0
 80042a6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2200      	movs	r2, #0
 80042ac:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80042ae:	68f8      	ldr	r0, [r7, #12]
 80042b0:	f7ff ffc8 	bl	8004244 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042b4:	bf00      	nop
 80042b6:	3710      	adds	r7, #16
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}

080042bc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80042bc:	b480      	push	{r7}
 80042be:	b085      	sub	sp, #20
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	2b21      	cmp	r3, #33	; 0x21
 80042ce:	d144      	bne.n	800435a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042d8:	d11a      	bne.n	8004310 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a1b      	ldr	r3, [r3, #32]
 80042de:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	881b      	ldrh	r3, [r3, #0]
 80042e4:	461a      	mov	r2, r3
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042ee:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	691b      	ldr	r3, [r3, #16]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d105      	bne.n	8004304 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6a1b      	ldr	r3, [r3, #32]
 80042fc:	1c9a      	adds	r2, r3, #2
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	621a      	str	r2, [r3, #32]
 8004302:	e00e      	b.n	8004322 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6a1b      	ldr	r3, [r3, #32]
 8004308:	1c5a      	adds	r2, r3, #1
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	621a      	str	r2, [r3, #32]
 800430e:	e008      	b.n	8004322 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6a1b      	ldr	r3, [r3, #32]
 8004314:	1c59      	adds	r1, r3, #1
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	6211      	str	r1, [r2, #32]
 800431a:	781a      	ldrb	r2, [r3, #0]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004326:	b29b      	uxth	r3, r3
 8004328:	3b01      	subs	r3, #1
 800432a:	b29b      	uxth	r3, r3
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	4619      	mov	r1, r3
 8004330:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004332:	2b00      	cmp	r3, #0
 8004334:	d10f      	bne.n	8004356 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	68da      	ldr	r2, [r3, #12]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004344:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	68da      	ldr	r2, [r3, #12]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004354:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004356:	2300      	movs	r3, #0
 8004358:	e000      	b.n	800435c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800435a:	2302      	movs	r3, #2
  }
}
 800435c:	4618      	mov	r0, r3
 800435e:	3714      	adds	r7, #20
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr

08004368 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	68da      	ldr	r2, [r3, #12]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800437e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2220      	movs	r2, #32
 8004384:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	f7ff ff47 	bl	800421c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800438e:	2300      	movs	r3, #0
}
 8004390:	4618      	mov	r0, r3
 8004392:	3708      	adds	r7, #8
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}

08004398 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	2b22      	cmp	r3, #34	; 0x22
 80043aa:	d171      	bne.n	8004490 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043b4:	d123      	bne.n	80043fe <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ba:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	691b      	ldr	r3, [r3, #16]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d10e      	bne.n	80043e2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043d0:	b29a      	uxth	r2, r3
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043da:	1c9a      	adds	r2, r3, #2
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	629a      	str	r2, [r3, #40]	; 0x28
 80043e0:	e029      	b.n	8004436 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	b29a      	uxth	r2, r3
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043f6:	1c5a      	adds	r2, r3, #1
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	629a      	str	r2, [r3, #40]	; 0x28
 80043fc:	e01b      	b.n	8004436 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d10a      	bne.n	800441c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	6858      	ldr	r0, [r3, #4]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004410:	1c59      	adds	r1, r3, #1
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	6291      	str	r1, [r2, #40]	; 0x28
 8004416:	b2c2      	uxtb	r2, r0
 8004418:	701a      	strb	r2, [r3, #0]
 800441a:	e00c      	b.n	8004436 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	b2da      	uxtb	r2, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004428:	1c58      	adds	r0, r3, #1
 800442a:	6879      	ldr	r1, [r7, #4]
 800442c:	6288      	str	r0, [r1, #40]	; 0x28
 800442e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004432:	b2d2      	uxtb	r2, r2
 8004434:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800443a:	b29b      	uxth	r3, r3
 800443c:	3b01      	subs	r3, #1
 800443e:	b29b      	uxth	r3, r3
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	4619      	mov	r1, r3
 8004444:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004446:	2b00      	cmp	r3, #0
 8004448:	d120      	bne.n	800448c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	68da      	ldr	r2, [r3, #12]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f022 0220 	bic.w	r2, r2, #32
 8004458:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	68da      	ldr	r2, [r3, #12]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004468:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	695a      	ldr	r2, [r3, #20]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f022 0201 	bic.w	r2, r2, #1
 8004478:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2220      	movs	r2, #32
 800447e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f7ff fed4 	bl	8004230 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004488:	2300      	movs	r3, #0
 800448a:	e002      	b.n	8004492 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800448c:	2300      	movs	r3, #0
 800448e:	e000      	b.n	8004492 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004490:	2302      	movs	r3, #2
  }
}
 8004492:	4618      	mov	r0, r3
 8004494:	3710      	adds	r7, #16
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
	...

0800449c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800449c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044a0:	b0bd      	sub	sp, #244	; 0xf4
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	691b      	ldr	r3, [r3, #16]
 80044b0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80044b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044b8:	68d9      	ldr	r1, [r3, #12]
 80044ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	ea40 0301 	orr.w	r3, r0, r1
 80044c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80044c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044ca:	689a      	ldr	r2, [r3, #8]
 80044cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044d0:	691b      	ldr	r3, [r3, #16]
 80044d2:	431a      	orrs	r2, r3
 80044d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044d8:	695b      	ldr	r3, [r3, #20]
 80044da:	431a      	orrs	r2, r3
 80044dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044e0:	69db      	ldr	r3, [r3, #28]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 80044e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80044f4:	f021 010c 	bic.w	r1, r1, #12
 80044f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004502:	430b      	orrs	r3, r1
 8004504:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004506:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	695b      	ldr	r3, [r3, #20]
 800450e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004512:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004516:	6999      	ldr	r1, [r3, #24]
 8004518:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	ea40 0301 	orr.w	r3, r0, r1
 8004522:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004524:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004528:	69db      	ldr	r3, [r3, #28]
 800452a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800452e:	f040 81a5 	bne.w	800487c <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004532:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	4bcd      	ldr	r3, [pc, #820]	; (8004870 <UART_SetConfig+0x3d4>)
 800453a:	429a      	cmp	r2, r3
 800453c:	d006      	beq.n	800454c <UART_SetConfig+0xb0>
 800453e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	4bcb      	ldr	r3, [pc, #812]	; (8004874 <UART_SetConfig+0x3d8>)
 8004546:	429a      	cmp	r2, r3
 8004548:	f040 80cb 	bne.w	80046e2 <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800454c:	f7ff f8e2 	bl	8003714 <HAL_RCC_GetPCLK2Freq>
 8004550:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004554:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004558:	461c      	mov	r4, r3
 800455a:	f04f 0500 	mov.w	r5, #0
 800455e:	4622      	mov	r2, r4
 8004560:	462b      	mov	r3, r5
 8004562:	1891      	adds	r1, r2, r2
 8004564:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8004568:	415b      	adcs	r3, r3
 800456a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800456e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004572:	1912      	adds	r2, r2, r4
 8004574:	eb45 0303 	adc.w	r3, r5, r3
 8004578:	f04f 0000 	mov.w	r0, #0
 800457c:	f04f 0100 	mov.w	r1, #0
 8004580:	00d9      	lsls	r1, r3, #3
 8004582:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004586:	00d0      	lsls	r0, r2, #3
 8004588:	4602      	mov	r2, r0
 800458a:	460b      	mov	r3, r1
 800458c:	1911      	adds	r1, r2, r4
 800458e:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8004592:	416b      	adcs	r3, r5
 8004594:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004598:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	461a      	mov	r2, r3
 80045a0:	f04f 0300 	mov.w	r3, #0
 80045a4:	1891      	adds	r1, r2, r2
 80045a6:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 80045aa:	415b      	adcs	r3, r3
 80045ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80045b0:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80045b4:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 80045b8:	f7fb fe18 	bl	80001ec <__aeabi_uldivmod>
 80045bc:	4602      	mov	r2, r0
 80045be:	460b      	mov	r3, r1
 80045c0:	4bad      	ldr	r3, [pc, #692]	; (8004878 <UART_SetConfig+0x3dc>)
 80045c2:	fba3 2302 	umull	r2, r3, r3, r2
 80045c6:	095b      	lsrs	r3, r3, #5
 80045c8:	011e      	lsls	r6, r3, #4
 80045ca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80045ce:	461c      	mov	r4, r3
 80045d0:	f04f 0500 	mov.w	r5, #0
 80045d4:	4622      	mov	r2, r4
 80045d6:	462b      	mov	r3, r5
 80045d8:	1891      	adds	r1, r2, r2
 80045da:	67b9      	str	r1, [r7, #120]	; 0x78
 80045dc:	415b      	adcs	r3, r3
 80045de:	67fb      	str	r3, [r7, #124]	; 0x7c
 80045e0:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80045e4:	1912      	adds	r2, r2, r4
 80045e6:	eb45 0303 	adc.w	r3, r5, r3
 80045ea:	f04f 0000 	mov.w	r0, #0
 80045ee:	f04f 0100 	mov.w	r1, #0
 80045f2:	00d9      	lsls	r1, r3, #3
 80045f4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80045f8:	00d0      	lsls	r0, r2, #3
 80045fa:	4602      	mov	r2, r0
 80045fc:	460b      	mov	r3, r1
 80045fe:	1911      	adds	r1, r2, r4
 8004600:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8004604:	416b      	adcs	r3, r5
 8004606:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800460a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	461a      	mov	r2, r3
 8004612:	f04f 0300 	mov.w	r3, #0
 8004616:	1891      	adds	r1, r2, r2
 8004618:	6739      	str	r1, [r7, #112]	; 0x70
 800461a:	415b      	adcs	r3, r3
 800461c:	677b      	str	r3, [r7, #116]	; 0x74
 800461e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8004622:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8004626:	f7fb fde1 	bl	80001ec <__aeabi_uldivmod>
 800462a:	4602      	mov	r2, r0
 800462c:	460b      	mov	r3, r1
 800462e:	4b92      	ldr	r3, [pc, #584]	; (8004878 <UART_SetConfig+0x3dc>)
 8004630:	fba3 1302 	umull	r1, r3, r3, r2
 8004634:	095b      	lsrs	r3, r3, #5
 8004636:	2164      	movs	r1, #100	; 0x64
 8004638:	fb01 f303 	mul.w	r3, r1, r3
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	00db      	lsls	r3, r3, #3
 8004640:	3332      	adds	r3, #50	; 0x32
 8004642:	4a8d      	ldr	r2, [pc, #564]	; (8004878 <UART_SetConfig+0x3dc>)
 8004644:	fba2 2303 	umull	r2, r3, r2, r3
 8004648:	095b      	lsrs	r3, r3, #5
 800464a:	005b      	lsls	r3, r3, #1
 800464c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004650:	441e      	add	r6, r3
 8004652:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004656:	4618      	mov	r0, r3
 8004658:	f04f 0100 	mov.w	r1, #0
 800465c:	4602      	mov	r2, r0
 800465e:	460b      	mov	r3, r1
 8004660:	1894      	adds	r4, r2, r2
 8004662:	66bc      	str	r4, [r7, #104]	; 0x68
 8004664:	415b      	adcs	r3, r3
 8004666:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004668:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800466c:	1812      	adds	r2, r2, r0
 800466e:	eb41 0303 	adc.w	r3, r1, r3
 8004672:	f04f 0400 	mov.w	r4, #0
 8004676:	f04f 0500 	mov.w	r5, #0
 800467a:	00dd      	lsls	r5, r3, #3
 800467c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004680:	00d4      	lsls	r4, r2, #3
 8004682:	4622      	mov	r2, r4
 8004684:	462b      	mov	r3, r5
 8004686:	1814      	adds	r4, r2, r0
 8004688:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 800468c:	414b      	adcs	r3, r1
 800468e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004692:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	461a      	mov	r2, r3
 800469a:	f04f 0300 	mov.w	r3, #0
 800469e:	1891      	adds	r1, r2, r2
 80046a0:	6639      	str	r1, [r7, #96]	; 0x60
 80046a2:	415b      	adcs	r3, r3
 80046a4:	667b      	str	r3, [r7, #100]	; 0x64
 80046a6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80046aa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80046ae:	f7fb fd9d 	bl	80001ec <__aeabi_uldivmod>
 80046b2:	4602      	mov	r2, r0
 80046b4:	460b      	mov	r3, r1
 80046b6:	4b70      	ldr	r3, [pc, #448]	; (8004878 <UART_SetConfig+0x3dc>)
 80046b8:	fba3 1302 	umull	r1, r3, r3, r2
 80046bc:	095b      	lsrs	r3, r3, #5
 80046be:	2164      	movs	r1, #100	; 0x64
 80046c0:	fb01 f303 	mul.w	r3, r1, r3
 80046c4:	1ad3      	subs	r3, r2, r3
 80046c6:	00db      	lsls	r3, r3, #3
 80046c8:	3332      	adds	r3, #50	; 0x32
 80046ca:	4a6b      	ldr	r2, [pc, #428]	; (8004878 <UART_SetConfig+0x3dc>)
 80046cc:	fba2 2303 	umull	r2, r3, r2, r3
 80046d0:	095b      	lsrs	r3, r3, #5
 80046d2:	f003 0207 	and.w	r2, r3, #7
 80046d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4432      	add	r2, r6
 80046de:	609a      	str	r2, [r3, #8]
 80046e0:	e26d      	b.n	8004bbe <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80046e2:	f7ff f803 	bl	80036ec <HAL_RCC_GetPCLK1Freq>
 80046e6:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80046ea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80046ee:	461c      	mov	r4, r3
 80046f0:	f04f 0500 	mov.w	r5, #0
 80046f4:	4622      	mov	r2, r4
 80046f6:	462b      	mov	r3, r5
 80046f8:	1891      	adds	r1, r2, r2
 80046fa:	65b9      	str	r1, [r7, #88]	; 0x58
 80046fc:	415b      	adcs	r3, r3
 80046fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004700:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004704:	1912      	adds	r2, r2, r4
 8004706:	eb45 0303 	adc.w	r3, r5, r3
 800470a:	f04f 0000 	mov.w	r0, #0
 800470e:	f04f 0100 	mov.w	r1, #0
 8004712:	00d9      	lsls	r1, r3, #3
 8004714:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004718:	00d0      	lsls	r0, r2, #3
 800471a:	4602      	mov	r2, r0
 800471c:	460b      	mov	r3, r1
 800471e:	1911      	adds	r1, r2, r4
 8004720:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8004724:	416b      	adcs	r3, r5
 8004726:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800472a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	461a      	mov	r2, r3
 8004732:	f04f 0300 	mov.w	r3, #0
 8004736:	1891      	adds	r1, r2, r2
 8004738:	6539      	str	r1, [r7, #80]	; 0x50
 800473a:	415b      	adcs	r3, r3
 800473c:	657b      	str	r3, [r7, #84]	; 0x54
 800473e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004742:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8004746:	f7fb fd51 	bl	80001ec <__aeabi_uldivmod>
 800474a:	4602      	mov	r2, r0
 800474c:	460b      	mov	r3, r1
 800474e:	4b4a      	ldr	r3, [pc, #296]	; (8004878 <UART_SetConfig+0x3dc>)
 8004750:	fba3 2302 	umull	r2, r3, r3, r2
 8004754:	095b      	lsrs	r3, r3, #5
 8004756:	011e      	lsls	r6, r3, #4
 8004758:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800475c:	461c      	mov	r4, r3
 800475e:	f04f 0500 	mov.w	r5, #0
 8004762:	4622      	mov	r2, r4
 8004764:	462b      	mov	r3, r5
 8004766:	1891      	adds	r1, r2, r2
 8004768:	64b9      	str	r1, [r7, #72]	; 0x48
 800476a:	415b      	adcs	r3, r3
 800476c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800476e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004772:	1912      	adds	r2, r2, r4
 8004774:	eb45 0303 	adc.w	r3, r5, r3
 8004778:	f04f 0000 	mov.w	r0, #0
 800477c:	f04f 0100 	mov.w	r1, #0
 8004780:	00d9      	lsls	r1, r3, #3
 8004782:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004786:	00d0      	lsls	r0, r2, #3
 8004788:	4602      	mov	r2, r0
 800478a:	460b      	mov	r3, r1
 800478c:	1911      	adds	r1, r2, r4
 800478e:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8004792:	416b      	adcs	r3, r5
 8004794:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004798:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	461a      	mov	r2, r3
 80047a0:	f04f 0300 	mov.w	r3, #0
 80047a4:	1891      	adds	r1, r2, r2
 80047a6:	6439      	str	r1, [r7, #64]	; 0x40
 80047a8:	415b      	adcs	r3, r3
 80047aa:	647b      	str	r3, [r7, #68]	; 0x44
 80047ac:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80047b0:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80047b4:	f7fb fd1a 	bl	80001ec <__aeabi_uldivmod>
 80047b8:	4602      	mov	r2, r0
 80047ba:	460b      	mov	r3, r1
 80047bc:	4b2e      	ldr	r3, [pc, #184]	; (8004878 <UART_SetConfig+0x3dc>)
 80047be:	fba3 1302 	umull	r1, r3, r3, r2
 80047c2:	095b      	lsrs	r3, r3, #5
 80047c4:	2164      	movs	r1, #100	; 0x64
 80047c6:	fb01 f303 	mul.w	r3, r1, r3
 80047ca:	1ad3      	subs	r3, r2, r3
 80047cc:	00db      	lsls	r3, r3, #3
 80047ce:	3332      	adds	r3, #50	; 0x32
 80047d0:	4a29      	ldr	r2, [pc, #164]	; (8004878 <UART_SetConfig+0x3dc>)
 80047d2:	fba2 2303 	umull	r2, r3, r2, r3
 80047d6:	095b      	lsrs	r3, r3, #5
 80047d8:	005b      	lsls	r3, r3, #1
 80047da:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80047de:	441e      	add	r6, r3
 80047e0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80047e4:	4618      	mov	r0, r3
 80047e6:	f04f 0100 	mov.w	r1, #0
 80047ea:	4602      	mov	r2, r0
 80047ec:	460b      	mov	r3, r1
 80047ee:	1894      	adds	r4, r2, r2
 80047f0:	63bc      	str	r4, [r7, #56]	; 0x38
 80047f2:	415b      	adcs	r3, r3
 80047f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047f6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80047fa:	1812      	adds	r2, r2, r0
 80047fc:	eb41 0303 	adc.w	r3, r1, r3
 8004800:	f04f 0400 	mov.w	r4, #0
 8004804:	f04f 0500 	mov.w	r5, #0
 8004808:	00dd      	lsls	r5, r3, #3
 800480a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800480e:	00d4      	lsls	r4, r2, #3
 8004810:	4622      	mov	r2, r4
 8004812:	462b      	mov	r3, r5
 8004814:	1814      	adds	r4, r2, r0
 8004816:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 800481a:	414b      	adcs	r3, r1
 800481c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004820:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	461a      	mov	r2, r3
 8004828:	f04f 0300 	mov.w	r3, #0
 800482c:	1891      	adds	r1, r2, r2
 800482e:	6339      	str	r1, [r7, #48]	; 0x30
 8004830:	415b      	adcs	r3, r3
 8004832:	637b      	str	r3, [r7, #52]	; 0x34
 8004834:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004838:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800483c:	f7fb fcd6 	bl	80001ec <__aeabi_uldivmod>
 8004840:	4602      	mov	r2, r0
 8004842:	460b      	mov	r3, r1
 8004844:	4b0c      	ldr	r3, [pc, #48]	; (8004878 <UART_SetConfig+0x3dc>)
 8004846:	fba3 1302 	umull	r1, r3, r3, r2
 800484a:	095b      	lsrs	r3, r3, #5
 800484c:	2164      	movs	r1, #100	; 0x64
 800484e:	fb01 f303 	mul.w	r3, r1, r3
 8004852:	1ad3      	subs	r3, r2, r3
 8004854:	00db      	lsls	r3, r3, #3
 8004856:	3332      	adds	r3, #50	; 0x32
 8004858:	4a07      	ldr	r2, [pc, #28]	; (8004878 <UART_SetConfig+0x3dc>)
 800485a:	fba2 2303 	umull	r2, r3, r2, r3
 800485e:	095b      	lsrs	r3, r3, #5
 8004860:	f003 0207 	and.w	r2, r3, #7
 8004864:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4432      	add	r2, r6
 800486c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800486e:	e1a6      	b.n	8004bbe <UART_SetConfig+0x722>
 8004870:	40011000 	.word	0x40011000
 8004874:	40011400 	.word	0x40011400
 8004878:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800487c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	4bd1      	ldr	r3, [pc, #836]	; (8004bc8 <UART_SetConfig+0x72c>)
 8004884:	429a      	cmp	r2, r3
 8004886:	d006      	beq.n	8004896 <UART_SetConfig+0x3fa>
 8004888:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	4bcf      	ldr	r3, [pc, #828]	; (8004bcc <UART_SetConfig+0x730>)
 8004890:	429a      	cmp	r2, r3
 8004892:	f040 80ca 	bne.w	8004a2a <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004896:	f7fe ff3d 	bl	8003714 <HAL_RCC_GetPCLK2Freq>
 800489a:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800489e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80048a2:	461c      	mov	r4, r3
 80048a4:	f04f 0500 	mov.w	r5, #0
 80048a8:	4622      	mov	r2, r4
 80048aa:	462b      	mov	r3, r5
 80048ac:	1891      	adds	r1, r2, r2
 80048ae:	62b9      	str	r1, [r7, #40]	; 0x28
 80048b0:	415b      	adcs	r3, r3
 80048b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80048b8:	1912      	adds	r2, r2, r4
 80048ba:	eb45 0303 	adc.w	r3, r5, r3
 80048be:	f04f 0000 	mov.w	r0, #0
 80048c2:	f04f 0100 	mov.w	r1, #0
 80048c6:	00d9      	lsls	r1, r3, #3
 80048c8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80048cc:	00d0      	lsls	r0, r2, #3
 80048ce:	4602      	mov	r2, r0
 80048d0:	460b      	mov	r3, r1
 80048d2:	eb12 0a04 	adds.w	sl, r2, r4
 80048d6:	eb43 0b05 	adc.w	fp, r3, r5
 80048da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	4618      	mov	r0, r3
 80048e2:	f04f 0100 	mov.w	r1, #0
 80048e6:	f04f 0200 	mov.w	r2, #0
 80048ea:	f04f 0300 	mov.w	r3, #0
 80048ee:	008b      	lsls	r3, r1, #2
 80048f0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80048f4:	0082      	lsls	r2, r0, #2
 80048f6:	4650      	mov	r0, sl
 80048f8:	4659      	mov	r1, fp
 80048fa:	f7fb fc77 	bl	80001ec <__aeabi_uldivmod>
 80048fe:	4602      	mov	r2, r0
 8004900:	460b      	mov	r3, r1
 8004902:	4bb3      	ldr	r3, [pc, #716]	; (8004bd0 <UART_SetConfig+0x734>)
 8004904:	fba3 2302 	umull	r2, r3, r3, r2
 8004908:	095b      	lsrs	r3, r3, #5
 800490a:	011e      	lsls	r6, r3, #4
 800490c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004910:	4618      	mov	r0, r3
 8004912:	f04f 0100 	mov.w	r1, #0
 8004916:	4602      	mov	r2, r0
 8004918:	460b      	mov	r3, r1
 800491a:	1894      	adds	r4, r2, r2
 800491c:	623c      	str	r4, [r7, #32]
 800491e:	415b      	adcs	r3, r3
 8004920:	627b      	str	r3, [r7, #36]	; 0x24
 8004922:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004926:	1812      	adds	r2, r2, r0
 8004928:	eb41 0303 	adc.w	r3, r1, r3
 800492c:	f04f 0400 	mov.w	r4, #0
 8004930:	f04f 0500 	mov.w	r5, #0
 8004934:	00dd      	lsls	r5, r3, #3
 8004936:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800493a:	00d4      	lsls	r4, r2, #3
 800493c:	4622      	mov	r2, r4
 800493e:	462b      	mov	r3, r5
 8004940:	1814      	adds	r4, r2, r0
 8004942:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8004946:	414b      	adcs	r3, r1
 8004948:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800494c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	4618      	mov	r0, r3
 8004954:	f04f 0100 	mov.w	r1, #0
 8004958:	f04f 0200 	mov.w	r2, #0
 800495c:	f04f 0300 	mov.w	r3, #0
 8004960:	008b      	lsls	r3, r1, #2
 8004962:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004966:	0082      	lsls	r2, r0, #2
 8004968:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800496c:	f7fb fc3e 	bl	80001ec <__aeabi_uldivmod>
 8004970:	4602      	mov	r2, r0
 8004972:	460b      	mov	r3, r1
 8004974:	4b96      	ldr	r3, [pc, #600]	; (8004bd0 <UART_SetConfig+0x734>)
 8004976:	fba3 1302 	umull	r1, r3, r3, r2
 800497a:	095b      	lsrs	r3, r3, #5
 800497c:	2164      	movs	r1, #100	; 0x64
 800497e:	fb01 f303 	mul.w	r3, r1, r3
 8004982:	1ad3      	subs	r3, r2, r3
 8004984:	011b      	lsls	r3, r3, #4
 8004986:	3332      	adds	r3, #50	; 0x32
 8004988:	4a91      	ldr	r2, [pc, #580]	; (8004bd0 <UART_SetConfig+0x734>)
 800498a:	fba2 2303 	umull	r2, r3, r2, r3
 800498e:	095b      	lsrs	r3, r3, #5
 8004990:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004994:	441e      	add	r6, r3
 8004996:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800499a:	4618      	mov	r0, r3
 800499c:	f04f 0100 	mov.w	r1, #0
 80049a0:	4602      	mov	r2, r0
 80049a2:	460b      	mov	r3, r1
 80049a4:	1894      	adds	r4, r2, r2
 80049a6:	61bc      	str	r4, [r7, #24]
 80049a8:	415b      	adcs	r3, r3
 80049aa:	61fb      	str	r3, [r7, #28]
 80049ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049b0:	1812      	adds	r2, r2, r0
 80049b2:	eb41 0303 	adc.w	r3, r1, r3
 80049b6:	f04f 0400 	mov.w	r4, #0
 80049ba:	f04f 0500 	mov.w	r5, #0
 80049be:	00dd      	lsls	r5, r3, #3
 80049c0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80049c4:	00d4      	lsls	r4, r2, #3
 80049c6:	4622      	mov	r2, r4
 80049c8:	462b      	mov	r3, r5
 80049ca:	1814      	adds	r4, r2, r0
 80049cc:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 80049d0:	414b      	adcs	r3, r1
 80049d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80049d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	4618      	mov	r0, r3
 80049de:	f04f 0100 	mov.w	r1, #0
 80049e2:	f04f 0200 	mov.w	r2, #0
 80049e6:	f04f 0300 	mov.w	r3, #0
 80049ea:	008b      	lsls	r3, r1, #2
 80049ec:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80049f0:	0082      	lsls	r2, r0, #2
 80049f2:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80049f6:	f7fb fbf9 	bl	80001ec <__aeabi_uldivmod>
 80049fa:	4602      	mov	r2, r0
 80049fc:	460b      	mov	r3, r1
 80049fe:	4b74      	ldr	r3, [pc, #464]	; (8004bd0 <UART_SetConfig+0x734>)
 8004a00:	fba3 1302 	umull	r1, r3, r3, r2
 8004a04:	095b      	lsrs	r3, r3, #5
 8004a06:	2164      	movs	r1, #100	; 0x64
 8004a08:	fb01 f303 	mul.w	r3, r1, r3
 8004a0c:	1ad3      	subs	r3, r2, r3
 8004a0e:	011b      	lsls	r3, r3, #4
 8004a10:	3332      	adds	r3, #50	; 0x32
 8004a12:	4a6f      	ldr	r2, [pc, #444]	; (8004bd0 <UART_SetConfig+0x734>)
 8004a14:	fba2 2303 	umull	r2, r3, r2, r3
 8004a18:	095b      	lsrs	r3, r3, #5
 8004a1a:	f003 020f 	and.w	r2, r3, #15
 8004a1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4432      	add	r2, r6
 8004a26:	609a      	str	r2, [r3, #8]
 8004a28:	e0c9      	b.n	8004bbe <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a2a:	f7fe fe5f 	bl	80036ec <HAL_RCC_GetPCLK1Freq>
 8004a2e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a32:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004a36:	461c      	mov	r4, r3
 8004a38:	f04f 0500 	mov.w	r5, #0
 8004a3c:	4622      	mov	r2, r4
 8004a3e:	462b      	mov	r3, r5
 8004a40:	1891      	adds	r1, r2, r2
 8004a42:	6139      	str	r1, [r7, #16]
 8004a44:	415b      	adcs	r3, r3
 8004a46:	617b      	str	r3, [r7, #20]
 8004a48:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004a4c:	1912      	adds	r2, r2, r4
 8004a4e:	eb45 0303 	adc.w	r3, r5, r3
 8004a52:	f04f 0000 	mov.w	r0, #0
 8004a56:	f04f 0100 	mov.w	r1, #0
 8004a5a:	00d9      	lsls	r1, r3, #3
 8004a5c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a60:	00d0      	lsls	r0, r2, #3
 8004a62:	4602      	mov	r2, r0
 8004a64:	460b      	mov	r3, r1
 8004a66:	eb12 0804 	adds.w	r8, r2, r4
 8004a6a:	eb43 0905 	adc.w	r9, r3, r5
 8004a6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	4618      	mov	r0, r3
 8004a76:	f04f 0100 	mov.w	r1, #0
 8004a7a:	f04f 0200 	mov.w	r2, #0
 8004a7e:	f04f 0300 	mov.w	r3, #0
 8004a82:	008b      	lsls	r3, r1, #2
 8004a84:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004a88:	0082      	lsls	r2, r0, #2
 8004a8a:	4640      	mov	r0, r8
 8004a8c:	4649      	mov	r1, r9
 8004a8e:	f7fb fbad 	bl	80001ec <__aeabi_uldivmod>
 8004a92:	4602      	mov	r2, r0
 8004a94:	460b      	mov	r3, r1
 8004a96:	4b4e      	ldr	r3, [pc, #312]	; (8004bd0 <UART_SetConfig+0x734>)
 8004a98:	fba3 2302 	umull	r2, r3, r3, r2
 8004a9c:	095b      	lsrs	r3, r3, #5
 8004a9e:	011e      	lsls	r6, r3, #4
 8004aa0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f04f 0100 	mov.w	r1, #0
 8004aaa:	4602      	mov	r2, r0
 8004aac:	460b      	mov	r3, r1
 8004aae:	1894      	adds	r4, r2, r2
 8004ab0:	60bc      	str	r4, [r7, #8]
 8004ab2:	415b      	adcs	r3, r3
 8004ab4:	60fb      	str	r3, [r7, #12]
 8004ab6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004aba:	1812      	adds	r2, r2, r0
 8004abc:	eb41 0303 	adc.w	r3, r1, r3
 8004ac0:	f04f 0400 	mov.w	r4, #0
 8004ac4:	f04f 0500 	mov.w	r5, #0
 8004ac8:	00dd      	lsls	r5, r3, #3
 8004aca:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004ace:	00d4      	lsls	r4, r2, #3
 8004ad0:	4622      	mov	r2, r4
 8004ad2:	462b      	mov	r3, r5
 8004ad4:	1814      	adds	r4, r2, r0
 8004ad6:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8004ada:	414b      	adcs	r3, r1
 8004adc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004ae0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f04f 0100 	mov.w	r1, #0
 8004aec:	f04f 0200 	mov.w	r2, #0
 8004af0:	f04f 0300 	mov.w	r3, #0
 8004af4:	008b      	lsls	r3, r1, #2
 8004af6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004afa:	0082      	lsls	r2, r0, #2
 8004afc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004b00:	f7fb fb74 	bl	80001ec <__aeabi_uldivmod>
 8004b04:	4602      	mov	r2, r0
 8004b06:	460b      	mov	r3, r1
 8004b08:	4b31      	ldr	r3, [pc, #196]	; (8004bd0 <UART_SetConfig+0x734>)
 8004b0a:	fba3 1302 	umull	r1, r3, r3, r2
 8004b0e:	095b      	lsrs	r3, r3, #5
 8004b10:	2164      	movs	r1, #100	; 0x64
 8004b12:	fb01 f303 	mul.w	r3, r1, r3
 8004b16:	1ad3      	subs	r3, r2, r3
 8004b18:	011b      	lsls	r3, r3, #4
 8004b1a:	3332      	adds	r3, #50	; 0x32
 8004b1c:	4a2c      	ldr	r2, [pc, #176]	; (8004bd0 <UART_SetConfig+0x734>)
 8004b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b22:	095b      	lsrs	r3, r3, #5
 8004b24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b28:	441e      	add	r6, r3
 8004b2a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f04f 0100 	mov.w	r1, #0
 8004b34:	4602      	mov	r2, r0
 8004b36:	460b      	mov	r3, r1
 8004b38:	1894      	adds	r4, r2, r2
 8004b3a:	603c      	str	r4, [r7, #0]
 8004b3c:	415b      	adcs	r3, r3
 8004b3e:	607b      	str	r3, [r7, #4]
 8004b40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b44:	1812      	adds	r2, r2, r0
 8004b46:	eb41 0303 	adc.w	r3, r1, r3
 8004b4a:	f04f 0400 	mov.w	r4, #0
 8004b4e:	f04f 0500 	mov.w	r5, #0
 8004b52:	00dd      	lsls	r5, r3, #3
 8004b54:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004b58:	00d4      	lsls	r4, r2, #3
 8004b5a:	4622      	mov	r2, r4
 8004b5c:	462b      	mov	r3, r5
 8004b5e:	1814      	adds	r4, r2, r0
 8004b60:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8004b64:	414b      	adcs	r3, r1
 8004b66:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004b6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	4618      	mov	r0, r3
 8004b72:	f04f 0100 	mov.w	r1, #0
 8004b76:	f04f 0200 	mov.w	r2, #0
 8004b7a:	f04f 0300 	mov.w	r3, #0
 8004b7e:	008b      	lsls	r3, r1, #2
 8004b80:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004b84:	0082      	lsls	r2, r0, #2
 8004b86:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8004b8a:	f7fb fb2f 	bl	80001ec <__aeabi_uldivmod>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	460b      	mov	r3, r1
 8004b92:	4b0f      	ldr	r3, [pc, #60]	; (8004bd0 <UART_SetConfig+0x734>)
 8004b94:	fba3 1302 	umull	r1, r3, r3, r2
 8004b98:	095b      	lsrs	r3, r3, #5
 8004b9a:	2164      	movs	r1, #100	; 0x64
 8004b9c:	fb01 f303 	mul.w	r3, r1, r3
 8004ba0:	1ad3      	subs	r3, r2, r3
 8004ba2:	011b      	lsls	r3, r3, #4
 8004ba4:	3332      	adds	r3, #50	; 0x32
 8004ba6:	4a0a      	ldr	r2, [pc, #40]	; (8004bd0 <UART_SetConfig+0x734>)
 8004ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bac:	095b      	lsrs	r3, r3, #5
 8004bae:	f003 020f 	and.w	r2, r3, #15
 8004bb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4432      	add	r2, r6
 8004bba:	609a      	str	r2, [r3, #8]
}
 8004bbc:	e7ff      	b.n	8004bbe <UART_SetConfig+0x722>
 8004bbe:	bf00      	nop
 8004bc0:	37f4      	adds	r7, #244	; 0xf4
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bc8:	40011000 	.word	0x40011000
 8004bcc:	40011400 	.word	0x40011400
 8004bd0:	51eb851f 	.word	0x51eb851f

08004bd4 <__libc_init_array>:
 8004bd4:	b570      	push	{r4, r5, r6, lr}
 8004bd6:	4d0d      	ldr	r5, [pc, #52]	; (8004c0c <__libc_init_array+0x38>)
 8004bd8:	4c0d      	ldr	r4, [pc, #52]	; (8004c10 <__libc_init_array+0x3c>)
 8004bda:	1b64      	subs	r4, r4, r5
 8004bdc:	10a4      	asrs	r4, r4, #2
 8004bde:	2600      	movs	r6, #0
 8004be0:	42a6      	cmp	r6, r4
 8004be2:	d109      	bne.n	8004bf8 <__libc_init_array+0x24>
 8004be4:	4d0b      	ldr	r5, [pc, #44]	; (8004c14 <__libc_init_array+0x40>)
 8004be6:	4c0c      	ldr	r4, [pc, #48]	; (8004c18 <__libc_init_array+0x44>)
 8004be8:	f000 f820 	bl	8004c2c <_init>
 8004bec:	1b64      	subs	r4, r4, r5
 8004bee:	10a4      	asrs	r4, r4, #2
 8004bf0:	2600      	movs	r6, #0
 8004bf2:	42a6      	cmp	r6, r4
 8004bf4:	d105      	bne.n	8004c02 <__libc_init_array+0x2e>
 8004bf6:	bd70      	pop	{r4, r5, r6, pc}
 8004bf8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bfc:	4798      	blx	r3
 8004bfe:	3601      	adds	r6, #1
 8004c00:	e7ee      	b.n	8004be0 <__libc_init_array+0xc>
 8004c02:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c06:	4798      	blx	r3
 8004c08:	3601      	adds	r6, #1
 8004c0a:	e7f2      	b.n	8004bf2 <__libc_init_array+0x1e>
 8004c0c:	08004c6c 	.word	0x08004c6c
 8004c10:	08004c6c 	.word	0x08004c6c
 8004c14:	08004c6c 	.word	0x08004c6c
 8004c18:	08004c70 	.word	0x08004c70

08004c1c <memset>:
 8004c1c:	4402      	add	r2, r0
 8004c1e:	4603      	mov	r3, r0
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d100      	bne.n	8004c26 <memset+0xa>
 8004c24:	4770      	bx	lr
 8004c26:	f803 1b01 	strb.w	r1, [r3], #1
 8004c2a:	e7f9      	b.n	8004c20 <memset+0x4>

08004c2c <_init>:
 8004c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c2e:	bf00      	nop
 8004c30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c32:	bc08      	pop	{r3}
 8004c34:	469e      	mov	lr, r3
 8004c36:	4770      	bx	lr

08004c38 <_fini>:
 8004c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c3a:	bf00      	nop
 8004c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c3e:	bc08      	pop	{r3}
 8004c40:	469e      	mov	lr, r3
 8004c42:	4770      	bx	lr
