
test_remote_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b60  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08005d0c  08005d0c  00015d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d38  08005d38  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005d38  08005d38  00015d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d40  08005d40  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d40  08005d40  00015d40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d44  08005d44  00015d44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005d48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005a0  2000000c  08005d54  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005ac  08005d54  000205ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a5b2  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cb4  00000000  00000000  0003a5ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001388  00000000  00000000  0003d2a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012a8  00000000  00000000  0003e630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025141  00000000  00000000  0003f8d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001714c  00000000  00000000  00064a19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e0642  00000000  00000000  0007bb65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015c1a7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005370  00000000  00000000  0015c1fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08005cf4 	.word	0x08005cf4

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08005cf4 	.word	0x08005cf4

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96e 	b.w	80004e0 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468c      	mov	ip, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	f040 8083 	bne.w	8000332 <__udivmoddi4+0x116>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d947      	bls.n	80002c2 <__udivmoddi4+0xa6>
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	b142      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000238:	f1c2 0020 	rsb	r0, r2, #32
 800023c:	fa24 f000 	lsr.w	r0, r4, r0
 8000240:	4091      	lsls	r1, r2
 8000242:	4097      	lsls	r7, r2
 8000244:	ea40 0c01 	orr.w	ip, r0, r1
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbbc f6f8 	udiv	r6, ip, r8
 8000254:	fa1f fe87 	uxth.w	lr, r7
 8000258:	fb08 c116 	mls	r1, r8, r6, ip
 800025c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000260:	fb06 f10e 	mul.w	r1, r6, lr
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18fb      	adds	r3, r7, r3
 800026a:	f106 30ff 	add.w	r0, r6, #4294967295
 800026e:	f080 8119 	bcs.w	80004a4 <__udivmoddi4+0x288>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8116 	bls.w	80004a4 <__udivmoddi4+0x288>
 8000278:	3e02      	subs	r6, #2
 800027a:	443b      	add	r3, r7
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0f8 	udiv	r0, r3, r8
 8000284:	fb08 3310 	mls	r3, r8, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000290:	45a6      	cmp	lr, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	193c      	adds	r4, r7, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 8105 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 800029e:	45a6      	cmp	lr, r4
 80002a0:	f240 8102 	bls.w	80004a8 <__udivmoddi4+0x28c>
 80002a4:	3802      	subs	r0, #2
 80002a6:	443c      	add	r4, r7
 80002a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ac:	eba4 040e 	sub.w	r4, r4, lr
 80002b0:	2600      	movs	r6, #0
 80002b2:	b11d      	cbz	r5, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c5 4300 	strd	r4, r3, [r5]
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	b902      	cbnz	r2, 80002c6 <__udivmoddi4+0xaa>
 80002c4:	deff      	udf	#255	; 0xff
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	2a00      	cmp	r2, #0
 80002cc:	d150      	bne.n	8000370 <__udivmoddi4+0x154>
 80002ce:	1bcb      	subs	r3, r1, r7
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f f887 	uxth.w	r8, r7
 80002d8:	2601      	movs	r6, #1
 80002da:	fbb3 fcfe 	udiv	ip, r3, lr
 80002de:	0c21      	lsrs	r1, r4, #16
 80002e0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002e8:	fb08 f30c 	mul.w	r3, r8, ip
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d907      	bls.n	8000300 <__udivmoddi4+0xe4>
 80002f0:	1879      	adds	r1, r7, r1
 80002f2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0xe2>
 80002f8:	428b      	cmp	r3, r1
 80002fa:	f200 80e9 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 80002fe:	4684      	mov	ip, r0
 8000300:	1ac9      	subs	r1, r1, r3
 8000302:	b2a3      	uxth	r3, r4
 8000304:	fbb1 f0fe 	udiv	r0, r1, lr
 8000308:	fb0e 1110 	mls	r1, lr, r0, r1
 800030c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000310:	fb08 f800 	mul.w	r8, r8, r0
 8000314:	45a0      	cmp	r8, r4
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x10c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x10a>
 8000320:	45a0      	cmp	r8, r4
 8000322:	f200 80d9 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 8000326:	4618      	mov	r0, r3
 8000328:	eba4 0408 	sub.w	r4, r4, r8
 800032c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000330:	e7bf      	b.n	80002b2 <__udivmoddi4+0x96>
 8000332:	428b      	cmp	r3, r1
 8000334:	d909      	bls.n	800034a <__udivmoddi4+0x12e>
 8000336:	2d00      	cmp	r5, #0
 8000338:	f000 80b1 	beq.w	800049e <__udivmoddi4+0x282>
 800033c:	2600      	movs	r6, #0
 800033e:	e9c5 0100 	strd	r0, r1, [r5]
 8000342:	4630      	mov	r0, r6
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	fab3 f683 	clz	r6, r3
 800034e:	2e00      	cmp	r6, #0
 8000350:	d14a      	bne.n	80003e8 <__udivmoddi4+0x1cc>
 8000352:	428b      	cmp	r3, r1
 8000354:	d302      	bcc.n	800035c <__udivmoddi4+0x140>
 8000356:	4282      	cmp	r2, r0
 8000358:	f200 80b8 	bhi.w	80004cc <__udivmoddi4+0x2b0>
 800035c:	1a84      	subs	r4, r0, r2
 800035e:	eb61 0103 	sbc.w	r1, r1, r3
 8000362:	2001      	movs	r0, #1
 8000364:	468c      	mov	ip, r1
 8000366:	2d00      	cmp	r5, #0
 8000368:	d0a8      	beq.n	80002bc <__udivmoddi4+0xa0>
 800036a:	e9c5 4c00 	strd	r4, ip, [r5]
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0xa0>
 8000370:	f1c2 0320 	rsb	r3, r2, #32
 8000374:	fa20 f603 	lsr.w	r6, r0, r3
 8000378:	4097      	lsls	r7, r2
 800037a:	fa01 f002 	lsl.w	r0, r1, r2
 800037e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000382:	40d9      	lsrs	r1, r3
 8000384:	4330      	orrs	r0, r6
 8000386:	0c03      	lsrs	r3, r0, #16
 8000388:	fbb1 f6fe 	udiv	r6, r1, lr
 800038c:	fa1f f887 	uxth.w	r8, r7
 8000390:	fb0e 1116 	mls	r1, lr, r6, r1
 8000394:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000398:	fb06 f108 	mul.w	r1, r6, r8
 800039c:	4299      	cmp	r1, r3
 800039e:	fa04 f402 	lsl.w	r4, r4, r2
 80003a2:	d909      	bls.n	80003b8 <__udivmoddi4+0x19c>
 80003a4:	18fb      	adds	r3, r7, r3
 80003a6:	f106 3cff 	add.w	ip, r6, #4294967295
 80003aa:	f080 808d 	bcs.w	80004c8 <__udivmoddi4+0x2ac>
 80003ae:	4299      	cmp	r1, r3
 80003b0:	f240 808a 	bls.w	80004c8 <__udivmoddi4+0x2ac>
 80003b4:	3e02      	subs	r6, #2
 80003b6:	443b      	add	r3, r7
 80003b8:	1a5b      	subs	r3, r3, r1
 80003ba:	b281      	uxth	r1, r0
 80003bc:	fbb3 f0fe 	udiv	r0, r3, lr
 80003c0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003c8:	fb00 f308 	mul.w	r3, r0, r8
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x1c4>
 80003d0:	1879      	adds	r1, r7, r1
 80003d2:	f100 3cff 	add.w	ip, r0, #4294967295
 80003d6:	d273      	bcs.n	80004c0 <__udivmoddi4+0x2a4>
 80003d8:	428b      	cmp	r3, r1
 80003da:	d971      	bls.n	80004c0 <__udivmoddi4+0x2a4>
 80003dc:	3802      	subs	r0, #2
 80003de:	4439      	add	r1, r7
 80003e0:	1acb      	subs	r3, r1, r3
 80003e2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003e6:	e778      	b.n	80002da <__udivmoddi4+0xbe>
 80003e8:	f1c6 0c20 	rsb	ip, r6, #32
 80003ec:	fa03 f406 	lsl.w	r4, r3, r6
 80003f0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f4:	431c      	orrs	r4, r3
 80003f6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003fa:	fa01 f306 	lsl.w	r3, r1, r6
 80003fe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000402:	fa21 f10c 	lsr.w	r1, r1, ip
 8000406:	431f      	orrs	r7, r3
 8000408:	0c3b      	lsrs	r3, r7, #16
 800040a:	fbb1 f9fe 	udiv	r9, r1, lr
 800040e:	fa1f f884 	uxth.w	r8, r4
 8000412:	fb0e 1119 	mls	r1, lr, r9, r1
 8000416:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800041a:	fb09 fa08 	mul.w	sl, r9, r8
 800041e:	458a      	cmp	sl, r1
 8000420:	fa02 f206 	lsl.w	r2, r2, r6
 8000424:	fa00 f306 	lsl.w	r3, r0, r6
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x220>
 800042a:	1861      	adds	r1, r4, r1
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d248      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000432:	458a      	cmp	sl, r1
 8000434:	d946      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	4421      	add	r1, r4
 800043c:	eba1 010a 	sub.w	r1, r1, sl
 8000440:	b2bf      	uxth	r7, r7
 8000442:	fbb1 f0fe 	udiv	r0, r1, lr
 8000446:	fb0e 1110 	mls	r1, lr, r0, r1
 800044a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45b8      	cmp	r8, r7
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x24a>
 8000456:	19e7      	adds	r7, r4, r7
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d22e      	bcs.n	80004bc <__udivmoddi4+0x2a0>
 800045e:	45b8      	cmp	r8, r7
 8000460:	d92c      	bls.n	80004bc <__udivmoddi4+0x2a0>
 8000462:	3802      	subs	r0, #2
 8000464:	4427      	add	r7, r4
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba7 0708 	sub.w	r7, r7, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454f      	cmp	r7, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	4649      	mov	r1, r9
 8000478:	d31a      	bcc.n	80004b0 <__udivmoddi4+0x294>
 800047a:	d017      	beq.n	80004ac <__udivmoddi4+0x290>
 800047c:	b15d      	cbz	r5, 8000496 <__udivmoddi4+0x27a>
 800047e:	ebb3 020e 	subs.w	r2, r3, lr
 8000482:	eb67 0701 	sbc.w	r7, r7, r1
 8000486:	fa07 fc0c 	lsl.w	ip, r7, ip
 800048a:	40f2      	lsrs	r2, r6
 800048c:	ea4c 0202 	orr.w	r2, ip, r2
 8000490:	40f7      	lsrs	r7, r6
 8000492:	e9c5 2700 	strd	r2, r7, [r5]
 8000496:	2600      	movs	r6, #0
 8000498:	4631      	mov	r1, r6
 800049a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049e:	462e      	mov	r6, r5
 80004a0:	4628      	mov	r0, r5
 80004a2:	e70b      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a4:	4606      	mov	r6, r0
 80004a6:	e6e9      	b.n	800027c <__udivmoddi4+0x60>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e6fd      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004ac:	4543      	cmp	r3, r8
 80004ae:	d2e5      	bcs.n	800047c <__udivmoddi4+0x260>
 80004b0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b4:	eb69 0104 	sbc.w	r1, r9, r4
 80004b8:	3801      	subs	r0, #1
 80004ba:	e7df      	b.n	800047c <__udivmoddi4+0x260>
 80004bc:	4608      	mov	r0, r1
 80004be:	e7d2      	b.n	8000466 <__udivmoddi4+0x24a>
 80004c0:	4660      	mov	r0, ip
 80004c2:	e78d      	b.n	80003e0 <__udivmoddi4+0x1c4>
 80004c4:	4681      	mov	r9, r0
 80004c6:	e7b9      	b.n	800043c <__udivmoddi4+0x220>
 80004c8:	4666      	mov	r6, ip
 80004ca:	e775      	b.n	80003b8 <__udivmoddi4+0x19c>
 80004cc:	4630      	mov	r0, r6
 80004ce:	e74a      	b.n	8000366 <__udivmoddi4+0x14a>
 80004d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d4:	4439      	add	r1, r7
 80004d6:	e713      	b.n	8000300 <__udivmoddi4+0xe4>
 80004d8:	3802      	subs	r0, #2
 80004da:	443c      	add	r4, r7
 80004dc:	e724      	b.n	8000328 <__udivmoddi4+0x10c>
 80004de:	bf00      	nop

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <numdataToMSC>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

char numdataToMSC(int in){
 80004e4:	b480      	push	{r7}
 80004e6:	b085      	sub	sp, #20
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
	in += 660; // Fuck them negatives
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80004f2:	607b      	str	r3, [r7, #4]
	int carry = in / 94;
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	4a09      	ldr	r2, [pc, #36]	; (800051c <numdataToMSC+0x38>)
 80004f8:	fb82 1203 	smull	r1, r2, r2, r3
 80004fc:	441a      	add	r2, r3
 80004fe:	1192      	asrs	r2, r2, #6
 8000500:	17db      	asrs	r3, r3, #31
 8000502:	1ad3      	subs	r3, r2, r3
 8000504:	60fb      	str	r3, [r7, #12]
	char charCarry = (char)(carry+32);
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	b2db      	uxtb	r3, r3
 800050a:	3320      	adds	r3, #32
 800050c:	72fb      	strb	r3, [r7, #11]
	return charCarry;
 800050e:	7afb      	ldrb	r3, [r7, #11]
}
 8000510:	4618      	mov	r0, r3
 8000512:	3714      	adds	r7, #20
 8000514:	46bd      	mov	sp, r7
 8000516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051a:	4770      	bx	lr
 800051c:	ae4c415d 	.word	0xae4c415d

08000520 <numdataToLSC>:

char numdataToLSC(int in){
 8000520:	b480      	push	{r7}
 8000522:	b085      	sub	sp, #20
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
	in += 660; // Fuck them negatives
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800052e:	607b      	str	r3, [r7, #4]
	int remainder = in % 94;
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	4a0b      	ldr	r2, [pc, #44]	; (8000560 <numdataToLSC+0x40>)
 8000534:	fb82 1203 	smull	r1, r2, r2, r3
 8000538:	441a      	add	r2, r3
 800053a:	1191      	asrs	r1, r2, #6
 800053c:	17da      	asrs	r2, r3, #31
 800053e:	1a8a      	subs	r2, r1, r2
 8000540:	215e      	movs	r1, #94	; 0x5e
 8000542:	fb01 f202 	mul.w	r2, r1, r2
 8000546:	1a9b      	subs	r3, r3, r2
 8000548:	60fb      	str	r3, [r7, #12]
	char charRemainder = (char)(remainder+32);
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	b2db      	uxtb	r3, r3
 800054e:	3320      	adds	r3, #32
 8000550:	72fb      	strb	r3, [r7, #11]
	return charRemainder;
 8000552:	7afb      	ldrb	r3, [r7, #11]
}
 8000554:	4618      	mov	r0, r3
 8000556:	3714      	adds	r7, #20
 8000558:	46bd      	mov	sp, r7
 800055a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055e:	4770      	bx	lr
 8000560:	ae4c415d 	.word	0xae4c415d

08000564 <switchToChar>:

char switchToChar(int in) {
 8000564:	b480      	push	{r7}
 8000566:	b083      	sub	sp, #12
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
    in += 32;
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	3320      	adds	r3, #32
 8000570:	607b      	str	r3, [r7, #4]
    return (char)in;
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	b2db      	uxtb	r3, r3
}
 8000576:	4618      	mov	r0, r3
 8000578:	370c      	adds	r7, #12
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr
	...

08000584 <getRCVals>:

void getRCVals() {
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
	leftJoyX = rc.ch3;
 8000588:	4b13      	ldr	r3, [pc, #76]	; (80005d8 <getRCVals+0x54>)
 800058a:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800058e:	4b13      	ldr	r3, [pc, #76]	; (80005dc <getRCVals+0x58>)
 8000590:	801a      	strh	r2, [r3, #0]
	leftJoyY = rc.ch4;
 8000592:	4b11      	ldr	r3, [pc, #68]	; (80005d8 <getRCVals+0x54>)
 8000594:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8000598:	4b11      	ldr	r3, [pc, #68]	; (80005e0 <getRCVals+0x5c>)
 800059a:	801a      	strh	r2, [r3, #0]
	rightJoyX = rc.ch1;
 800059c:	4b0e      	ldr	r3, [pc, #56]	; (80005d8 <getRCVals+0x54>)
 800059e:	f9b3 2000 	ldrsh.w	r2, [r3]
 80005a2:	4b10      	ldr	r3, [pc, #64]	; (80005e4 <getRCVals+0x60>)
 80005a4:	801a      	strh	r2, [r3, #0]
	rightJoyY = rc.ch2;
 80005a6:	4b0c      	ldr	r3, [pc, #48]	; (80005d8 <getRCVals+0x54>)
 80005a8:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80005ac:	4b0e      	ldr	r3, [pc, #56]	; (80005e8 <getRCVals+0x64>)
 80005ae:	801a      	strh	r2, [r3, #0]

	wheel = rc.wheel;
 80005b0:	4b09      	ldr	r3, [pc, #36]	; (80005d8 <getRCVals+0x54>)
 80005b2:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 80005b6:	4b0d      	ldr	r3, [pc, #52]	; (80005ec <getRCVals+0x68>)
 80005b8:	801a      	strh	r2, [r3, #0]

	leftSwitch = rc.sw1;
 80005ba:	4b07      	ldr	r3, [pc, #28]	; (80005d8 <getRCVals+0x54>)
 80005bc:	7a9b      	ldrb	r3, [r3, #10]
 80005be:	b21a      	sxth	r2, r3
 80005c0:	4b0b      	ldr	r3, [pc, #44]	; (80005f0 <getRCVals+0x6c>)
 80005c2:	801a      	strh	r2, [r3, #0]
	rightSwitch = rc.sw2;
 80005c4:	4b04      	ldr	r3, [pc, #16]	; (80005d8 <getRCVals+0x54>)
 80005c6:	7adb      	ldrb	r3, [r3, #11]
 80005c8:	b21a      	sxth	r2, r3
 80005ca:	4b0a      	ldr	r3, [pc, #40]	; (80005f4 <getRCVals+0x70>)
 80005cc:	801a      	strh	r2, [r3, #0]

}
 80005ce:	bf00      	nop
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr
 80005d8:	2000056c 	.word	0x2000056c
 80005dc:	200001cc 	.word	0x200001cc
 80005e0:	200001ca 	.word	0x200001ca
 80005e4:	2000038c 	.word	0x2000038c
 80005e8:	200001c8 	.word	0x200001c8
 80005ec:	2000002c 	.word	0x2000002c
 80005f0:	200001ce 	.word	0x200001ce
 80005f4:	200004cc 	.word	0x200004cc

080005f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005fe:	f001 fde7 	bl	80021d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000602:	f000 f8ad 	bl	8000760 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000606:	f000 fcf9 	bl	8000ffc <MX_GPIO_Init>
  MX_DMA_Init();
 800060a:	f000 fcb9 	bl	8000f80 <MX_DMA_Init>
  MX_CAN1_Init();
 800060e:	f000 f911 	bl	8000834 <MX_CAN1_Init>
  MX_CAN2_Init();
 8000612:	f000 f945 	bl	80008a0 <MX_CAN2_Init>
  MX_SPI5_Init();
 8000616:	f000 f9b9 	bl	800098c <MX_SPI5_Init>
  MX_TIM2_Init();
 800061a:	f000 f9ed 	bl	80009f8 <MX_TIM2_Init>
  MX_TIM4_Init();
 800061e:	f000 faa9 	bl	8000b74 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000622:	f000 fc2d 	bl	8000e80 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000626:	f000 fc57 	bl	8000ed8 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 800062a:	f000 fc7f 	bl	8000f2c <MX_USART6_UART_Init>
  MX_TIM3_Init();
 800062e:	f000 fa47 	bl	8000ac0 <MX_TIM3_Init>
  MX_TIM12_Init();
 8000632:	f000 fb8b 	bl	8000d4c <MX_TIM12_Init>
  MX_TIM5_Init();
 8000636:	f000 fb19 	bl	8000c6c <MX_TIM5_Init>
  MX_I2C3_Init();
 800063a:	f000 f967 	bl	800090c <MX_I2C3_Init>
  MX_UART4_Init();
 800063e:	f000 fbcb 	bl	8000dd8 <MX_UART4_Init>
  MX_UART7_Init();
 8000642:	f000 fbf3 	bl	8000e2c <MX_UART7_Init>
  /* USER CODE BEGIN 2 */

  led_off();
 8000646:	f000 fe1d 	bl	8001284 <led_off>
  power_on();
 800064a:	f000 fe2f 	bl	80012ac <power_on>
  dbus_uart_init();
 800064e:	f000 fff5 	bl	800163c <dbus_uart_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  getRCVals();
 8000652:	f7ff ff97 	bl	8000584 <getRCVals>
	  char sendString[11] = {0,0,0,0,0,0,0,0,0,0,0};
 8000656:	4a39      	ldr	r2, [pc, #228]	; (800073c <main+0x144>)
 8000658:	1d3b      	adds	r3, r7, #4
 800065a:	ca07      	ldmia	r2, {r0, r1, r2}
 800065c:	c303      	stmia	r3!, {r0, r1}
 800065e:	801a      	strh	r2, [r3, #0]
 8000660:	3302      	adds	r3, #2
 8000662:	0c12      	lsrs	r2, r2, #16
 8000664:	701a      	strb	r2, [r3, #0]

	  sendString[0] = numdataToMSC(leftJoyX);
 8000666:	4b36      	ldr	r3, [pc, #216]	; (8000740 <main+0x148>)
 8000668:	f9b3 3000 	ldrsh.w	r3, [r3]
 800066c:	4618      	mov	r0, r3
 800066e:	f7ff ff39 	bl	80004e4 <numdataToMSC>
 8000672:	4603      	mov	r3, r0
 8000674:	713b      	strb	r3, [r7, #4]
	  sendString[1] = numdataToLSC(leftJoyX);
 8000676:	4b32      	ldr	r3, [pc, #200]	; (8000740 <main+0x148>)
 8000678:	f9b3 3000 	ldrsh.w	r3, [r3]
 800067c:	4618      	mov	r0, r3
 800067e:	f7ff ff4f 	bl	8000520 <numdataToLSC>
 8000682:	4603      	mov	r3, r0
 8000684:	717b      	strb	r3, [r7, #5]
	  sendString[2] = numdataToMSC(leftJoyY);
 8000686:	4b2f      	ldr	r3, [pc, #188]	; (8000744 <main+0x14c>)
 8000688:	f9b3 3000 	ldrsh.w	r3, [r3]
 800068c:	4618      	mov	r0, r3
 800068e:	f7ff ff29 	bl	80004e4 <numdataToMSC>
 8000692:	4603      	mov	r3, r0
 8000694:	71bb      	strb	r3, [r7, #6]
	  sendString[3] = numdataToLSC(leftJoyY);
 8000696:	4b2b      	ldr	r3, [pc, #172]	; (8000744 <main+0x14c>)
 8000698:	f9b3 3000 	ldrsh.w	r3, [r3]
 800069c:	4618      	mov	r0, r3
 800069e:	f7ff ff3f 	bl	8000520 <numdataToLSC>
 80006a2:	4603      	mov	r3, r0
 80006a4:	71fb      	strb	r3, [r7, #7]
	  sendString[4] = numdataToMSC(rightJoyX);
 80006a6:	4b28      	ldr	r3, [pc, #160]	; (8000748 <main+0x150>)
 80006a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006ac:	4618      	mov	r0, r3
 80006ae:	f7ff ff19 	bl	80004e4 <numdataToMSC>
 80006b2:	4603      	mov	r3, r0
 80006b4:	723b      	strb	r3, [r7, #8]
	  sendString[5] = numdataToLSC(rightJoyX);
 80006b6:	4b24      	ldr	r3, [pc, #144]	; (8000748 <main+0x150>)
 80006b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006bc:	4618      	mov	r0, r3
 80006be:	f7ff ff2f 	bl	8000520 <numdataToLSC>
 80006c2:	4603      	mov	r3, r0
 80006c4:	727b      	strb	r3, [r7, #9]
	  sendString[6] = numdataToMSC(rightJoyY);
 80006c6:	4b21      	ldr	r3, [pc, #132]	; (800074c <main+0x154>)
 80006c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006cc:	4618      	mov	r0, r3
 80006ce:	f7ff ff09 	bl	80004e4 <numdataToMSC>
 80006d2:	4603      	mov	r3, r0
 80006d4:	72bb      	strb	r3, [r7, #10]
	  sendString[7] = numdataToLSC(rightJoyY);
 80006d6:	4b1d      	ldr	r3, [pc, #116]	; (800074c <main+0x154>)
 80006d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006dc:	4618      	mov	r0, r3
 80006de:	f7ff ff1f 	bl	8000520 <numdataToLSC>
 80006e2:	4603      	mov	r3, r0
 80006e4:	72fb      	strb	r3, [r7, #11]
	  sendString[8] = numdataToMSC(wheel);
 80006e6:	4b1a      	ldr	r3, [pc, #104]	; (8000750 <main+0x158>)
 80006e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006ec:	4618      	mov	r0, r3
 80006ee:	f7ff fef9 	bl	80004e4 <numdataToMSC>
 80006f2:	4603      	mov	r3, r0
 80006f4:	733b      	strb	r3, [r7, #12]
	  sendString[9] = numdataToLSC(wheel);
 80006f6:	4b16      	ldr	r3, [pc, #88]	; (8000750 <main+0x158>)
 80006f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006fc:	4618      	mov	r0, r3
 80006fe:	f7ff ff0f 	bl	8000520 <numdataToLSC>
 8000702:	4603      	mov	r3, r0
 8000704:	737b      	strb	r3, [r7, #13]
	  sendString[10] = switchToChar(leftSwitch);
 8000706:	4b13      	ldr	r3, [pc, #76]	; (8000754 <main+0x15c>)
 8000708:	f9b3 3000 	ldrsh.w	r3, [r3]
 800070c:	4618      	mov	r0, r3
 800070e:	f7ff ff29 	bl	8000564 <switchToChar>
 8000712:	4603      	mov	r3, r0
 8000714:	73bb      	strb	r3, [r7, #14]
	  sendString[11] = switchToChar(rightSwitch);
 8000716:	4b10      	ldr	r3, [pc, #64]	; (8000758 <main+0x160>)
 8000718:	f9b3 3000 	ldrsh.w	r3, [r3]
 800071c:	4618      	mov	r0, r3
 800071e:	f7ff ff21 	bl	8000564 <switchToChar>
 8000722:	4603      	mov	r3, r0
 8000724:	73fb      	strb	r3, [r7, #15]

	  HAL_UART_Transmit(&huart7, sendString ,12,HAL_MAX_DELAY);
 8000726:	1d39      	adds	r1, r7, #4
 8000728:	f04f 33ff 	mov.w	r3, #4294967295
 800072c:	220c      	movs	r2, #12
 800072e:	480b      	ldr	r0, [pc, #44]	; (800075c <main+0x164>)
 8000730:	f004 fb99 	bl	8004e66 <HAL_UART_Transmit>
	  HAL_Delay(40); // Important as to not spam the Nucleo
 8000734:	2028      	movs	r0, #40	; 0x28
 8000736:	f001 fdbd 	bl	80022b4 <HAL_Delay>
  {
 800073a:	e78a      	b.n	8000652 <main+0x5a>
 800073c:	08005d0c 	.word	0x08005d0c
 8000740:	200001cc 	.word	0x200001cc
 8000744:	200001ca 	.word	0x200001ca
 8000748:	2000038c 	.word	0x2000038c
 800074c:	200001c8 	.word	0x200001c8
 8000750:	2000002c 	.word	0x2000002c
 8000754:	200001ce 	.word	0x200001ce
 8000758:	200004cc 	.word	0x200004cc
 800075c:	200000e4 	.word	0x200000e4

08000760 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b094      	sub	sp, #80	; 0x50
 8000764:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000766:	f107 0320 	add.w	r3, r7, #32
 800076a:	2230      	movs	r2, #48	; 0x30
 800076c:	2100      	movs	r1, #0
 800076e:	4618      	mov	r0, r3
 8000770:	f005 fab8 	bl	8005ce4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000774:	f107 030c 	add.w	r3, r7, #12
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
 8000780:	60da      	str	r2, [r3, #12]
 8000782:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000784:	2300      	movs	r3, #0
 8000786:	60bb      	str	r3, [r7, #8]
 8000788:	4b28      	ldr	r3, [pc, #160]	; (800082c <SystemClock_Config+0xcc>)
 800078a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078c:	4a27      	ldr	r2, [pc, #156]	; (800082c <SystemClock_Config+0xcc>)
 800078e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000792:	6413      	str	r3, [r2, #64]	; 0x40
 8000794:	4b25      	ldr	r3, [pc, #148]	; (800082c <SystemClock_Config+0xcc>)
 8000796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000798:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800079c:	60bb      	str	r3, [r7, #8]
 800079e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007a0:	2300      	movs	r3, #0
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	4b22      	ldr	r3, [pc, #136]	; (8000830 <SystemClock_Config+0xd0>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a21      	ldr	r2, [pc, #132]	; (8000830 <SystemClock_Config+0xd0>)
 80007aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007ae:	6013      	str	r3, [r2, #0]
 80007b0:	4b1f      	ldr	r3, [pc, #124]	; (8000830 <SystemClock_Config+0xd0>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007b8:	607b      	str	r3, [r7, #4]
 80007ba:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007bc:	2301      	movs	r3, #1
 80007be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007c4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007c6:	2302      	movs	r3, #2
 80007c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 80007d0:	2306      	movs	r3, #6
 80007d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80007d4:	23a8      	movs	r3, #168	; 0xa8
 80007d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007d8:	2302      	movs	r3, #2
 80007da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007dc:	2304      	movs	r3, #4
 80007de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e0:	f107 0320 	add.w	r3, r7, #32
 80007e4:	4618      	mov	r0, r3
 80007e6:	f003 fa43 	bl	8003c70 <HAL_RCC_OscConfig>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007f0:	f000 fcde 	bl	80011b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f4:	230f      	movs	r3, #15
 80007f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f8:	2302      	movs	r3, #2
 80007fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007fc:	2300      	movs	r3, #0
 80007fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000800:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000804:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000806:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800080a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800080c:	f107 030c 	add.w	r3, r7, #12
 8000810:	2105      	movs	r1, #5
 8000812:	4618      	mov	r0, r3
 8000814:	f003 fca4 	bl	8004160 <HAL_RCC_ClockConfig>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800081e:	f000 fcc7 	bl	80011b0 <Error_Handler>
  }
}
 8000822:	bf00      	nop
 8000824:	3750      	adds	r7, #80	; 0x50
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40023800 	.word	0x40023800
 8000830:	40007000 	.word	0x40007000

08000834 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000838:	4b17      	ldr	r3, [pc, #92]	; (8000898 <MX_CAN1_Init+0x64>)
 800083a:	4a18      	ldr	r2, [pc, #96]	; (800089c <MX_CAN1_Init+0x68>)
 800083c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 800083e:	4b16      	ldr	r3, [pc, #88]	; (8000898 <MX_CAN1_Init+0x64>)
 8000840:	2203      	movs	r2, #3
 8000842:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000844:	4b14      	ldr	r3, [pc, #80]	; (8000898 <MX_CAN1_Init+0x64>)
 8000846:	2200      	movs	r2, #0
 8000848:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800084a:	4b13      	ldr	r3, [pc, #76]	; (8000898 <MX_CAN1_Init+0x64>)
 800084c:	2200      	movs	r2, #0
 800084e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_9TQ;
 8000850:	4b11      	ldr	r3, [pc, #68]	; (8000898 <MX_CAN1_Init+0x64>)
 8000852:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000856:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000858:	4b0f      	ldr	r3, [pc, #60]	; (8000898 <MX_CAN1_Init+0x64>)
 800085a:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 800085e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000860:	4b0d      	ldr	r3, [pc, #52]	; (8000898 <MX_CAN1_Init+0x64>)
 8000862:	2200      	movs	r2, #0
 8000864:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000866:	4b0c      	ldr	r3, [pc, #48]	; (8000898 <MX_CAN1_Init+0x64>)
 8000868:	2200      	movs	r2, #0
 800086a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800086c:	4b0a      	ldr	r3, [pc, #40]	; (8000898 <MX_CAN1_Init+0x64>)
 800086e:	2200      	movs	r2, #0
 8000870:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000872:	4b09      	ldr	r3, [pc, #36]	; (8000898 <MX_CAN1_Init+0x64>)
 8000874:	2200      	movs	r2, #0
 8000876:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000878:	4b07      	ldr	r3, [pc, #28]	; (8000898 <MX_CAN1_Init+0x64>)
 800087a:	2200      	movs	r2, #0
 800087c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800087e:	4b06      	ldr	r3, [pc, #24]	; (8000898 <MX_CAN1_Init+0x64>)
 8000880:	2200      	movs	r2, #0
 8000882:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000884:	4804      	ldr	r0, [pc, #16]	; (8000898 <MX_CAN1_Init+0x64>)
 8000886:	f001 fd39 	bl	80022fc <HAL_CAN_Init>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000890:	f000 fc8e 	bl	80011b0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000894:	bf00      	nop
 8000896:	bd80      	pop	{r7, pc}
 8000898:	200004a4 	.word	0x200004a4
 800089c:	40006400 	.word	0x40006400

080008a0 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80008a4:	4b17      	ldr	r3, [pc, #92]	; (8000904 <MX_CAN2_Init+0x64>)
 80008a6:	4a18      	ldr	r2, [pc, #96]	; (8000908 <MX_CAN2_Init+0x68>)
 80008a8:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 80008aa:	4b16      	ldr	r3, [pc, #88]	; (8000904 <MX_CAN2_Init+0x64>)
 80008ac:	2203      	movs	r2, #3
 80008ae:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80008b0:	4b14      	ldr	r3, [pc, #80]	; (8000904 <MX_CAN2_Init+0x64>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80008b6:	4b13      	ldr	r3, [pc, #76]	; (8000904 <MX_CAN2_Init+0x64>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_9TQ;
 80008bc:	4b11      	ldr	r3, [pc, #68]	; (8000904 <MX_CAN2_Init+0x64>)
 80008be:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80008c2:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_4TQ;
 80008c4:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <MX_CAN2_Init+0x64>)
 80008c6:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80008ca:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80008cc:	4b0d      	ldr	r3, [pc, #52]	; (8000904 <MX_CAN2_Init+0x64>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80008d2:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <MX_CAN2_Init+0x64>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80008d8:	4b0a      	ldr	r3, [pc, #40]	; (8000904 <MX_CAN2_Init+0x64>)
 80008da:	2200      	movs	r2, #0
 80008dc:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80008de:	4b09      	ldr	r3, [pc, #36]	; (8000904 <MX_CAN2_Init+0x64>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80008e4:	4b07      	ldr	r3, [pc, #28]	; (8000904 <MX_CAN2_Init+0x64>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80008ea:	4b06      	ldr	r3, [pc, #24]	; (8000904 <MX_CAN2_Init+0x64>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80008f0:	4804      	ldr	r0, [pc, #16]	; (8000904 <MX_CAN2_Init+0x64>)
 80008f2:	f001 fd03 	bl	80022fc <HAL_CAN_Init>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 80008fc:	f000 fc58 	bl	80011b0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000900:	bf00      	nop
 8000902:	bd80      	pop	{r7, pc}
 8000904:	20000260 	.word	0x20000260
 8000908:	40006800 	.word	0x40006800

0800090c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000910:	4b1b      	ldr	r3, [pc, #108]	; (8000980 <MX_I2C3_Init+0x74>)
 8000912:	4a1c      	ldr	r2, [pc, #112]	; (8000984 <MX_I2C3_Init+0x78>)
 8000914:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000916:	4b1a      	ldr	r3, [pc, #104]	; (8000980 <MX_I2C3_Init+0x74>)
 8000918:	4a1b      	ldr	r2, [pc, #108]	; (8000988 <MX_I2C3_Init+0x7c>)
 800091a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800091c:	4b18      	ldr	r3, [pc, #96]	; (8000980 <MX_I2C3_Init+0x74>)
 800091e:	2200      	movs	r2, #0
 8000920:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000922:	4b17      	ldr	r3, [pc, #92]	; (8000980 <MX_I2C3_Init+0x74>)
 8000924:	2200      	movs	r2, #0
 8000926:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000928:	4b15      	ldr	r3, [pc, #84]	; (8000980 <MX_I2C3_Init+0x74>)
 800092a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800092e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000930:	4b13      	ldr	r3, [pc, #76]	; (8000980 <MX_I2C3_Init+0x74>)
 8000932:	2200      	movs	r2, #0
 8000934:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000936:	4b12      	ldr	r3, [pc, #72]	; (8000980 <MX_I2C3_Init+0x74>)
 8000938:	2200      	movs	r2, #0
 800093a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800093c:	4b10      	ldr	r3, [pc, #64]	; (8000980 <MX_I2C3_Init+0x74>)
 800093e:	2200      	movs	r2, #0
 8000940:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000942:	4b0f      	ldr	r3, [pc, #60]	; (8000980 <MX_I2C3_Init+0x74>)
 8000944:	2200      	movs	r2, #0
 8000946:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000948:	480d      	ldr	r0, [pc, #52]	; (8000980 <MX_I2C3_Init+0x74>)
 800094a:	f002 ffd1 	bl	80038f0 <HAL_I2C_Init>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000954:	f000 fc2c 	bl	80011b0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000958:	2100      	movs	r1, #0
 800095a:	4809      	ldr	r0, [pc, #36]	; (8000980 <MX_I2C3_Init+0x74>)
 800095c:	f003 f90c 	bl	8003b78 <HAL_I2CEx_ConfigAnalogFilter>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000966:	f000 fc23 	bl	80011b0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800096a:	2100      	movs	r1, #0
 800096c:	4804      	ldr	r0, [pc, #16]	; (8000980 <MX_I2C3_Init+0x74>)
 800096e:	f003 f93f 	bl	8003bf0 <HAL_I2CEx_ConfigDigitalFilter>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000978:	f000 fc1a 	bl	80011b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800097c:	bf00      	nop
 800097e:	bd80      	pop	{r7, pc}
 8000980:	20000090 	.word	0x20000090
 8000984:	40005c00 	.word	0x40005c00
 8000988:	000186a0 	.word	0x000186a0

0800098c <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000990:	4b17      	ldr	r3, [pc, #92]	; (80009f0 <MX_SPI5_Init+0x64>)
 8000992:	4a18      	ldr	r2, [pc, #96]	; (80009f4 <MX_SPI5_Init+0x68>)
 8000994:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000996:	4b16      	ldr	r3, [pc, #88]	; (80009f0 <MX_SPI5_Init+0x64>)
 8000998:	f44f 7282 	mov.w	r2, #260	; 0x104
 800099c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800099e:	4b14      	ldr	r3, [pc, #80]	; (80009f0 <MX_SPI5_Init+0x64>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80009a4:	4b12      	ldr	r3, [pc, #72]	; (80009f0 <MX_SPI5_Init+0x64>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009aa:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <MX_SPI5_Init+0x64>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009b0:	4b0f      	ldr	r3, [pc, #60]	; (80009f0 <MX_SPI5_Init+0x64>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80009b6:	4b0e      	ldr	r3, [pc, #56]	; (80009f0 <MX_SPI5_Init+0x64>)
 80009b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009bc:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80009be:	4b0c      	ldr	r3, [pc, #48]	; (80009f0 <MX_SPI5_Init+0x64>)
 80009c0:	2230      	movs	r2, #48	; 0x30
 80009c2:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009c4:	4b0a      	ldr	r3, [pc, #40]	; (80009f0 <MX_SPI5_Init+0x64>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80009ca:	4b09      	ldr	r3, [pc, #36]	; (80009f0 <MX_SPI5_Init+0x64>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009d0:	4b07      	ldr	r3, [pc, #28]	; (80009f0 <MX_SPI5_Init+0x64>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80009d6:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <MX_SPI5_Init+0x64>)
 80009d8:	220a      	movs	r2, #10
 80009da:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80009dc:	4804      	ldr	r0, [pc, #16]	; (80009f0 <MX_SPI5_Init+0x64>)
 80009de:	f003 fd8f 	bl	8004500 <HAL_SPI_Init>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80009e8:	f000 fbe2 	bl	80011b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80009ec:	bf00      	nop
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	20000128 	.word	0x20000128
 80009f4:	40015000 	.word	0x40015000

080009f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b08a      	sub	sp, #40	; 0x28
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009fe:	f107 0320 	add.w	r3, r7, #32
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a08:	1d3b      	adds	r3, r7, #4
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]
 8000a0e:	605a      	str	r2, [r3, #4]
 8000a10:	609a      	str	r2, [r3, #8]
 8000a12:	60da      	str	r2, [r3, #12]
 8000a14:	611a      	str	r2, [r3, #16]
 8000a16:	615a      	str	r2, [r3, #20]
 8000a18:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a1a:	4b28      	ldr	r3, [pc, #160]	; (8000abc <MX_TIM2_Init+0xc4>)
 8000a1c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a20:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = TIM_PSC_APB1;
 8000a22:	4b26      	ldr	r3, [pc, #152]	; (8000abc <MX_TIM2_Init+0xc4>)
 8000a24:	22a7      	movs	r2, #167	; 0xa7
 8000a26:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a28:	4b24      	ldr	r3, [pc, #144]	; (8000abc <MX_TIM2_Init+0xc4>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = PWM_RESOLUTION-1;
 8000a2e:	4b23      	ldr	r3, [pc, #140]	; (8000abc <MX_TIM2_Init+0xc4>)
 8000a30:	f242 720f 	movw	r2, #9999	; 0x270f
 8000a34:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a36:	4b21      	ldr	r3, [pc, #132]	; (8000abc <MX_TIM2_Init+0xc4>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a3c:	4b1f      	ldr	r3, [pc, #124]	; (8000abc <MX_TIM2_Init+0xc4>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000a42:	481e      	ldr	r0, [pc, #120]	; (8000abc <MX_TIM2_Init+0xc4>)
 8000a44:	f003 fde5 	bl	8004612 <HAL_TIM_PWM_Init>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000a4e:	f000 fbaf 	bl	80011b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a52:	2300      	movs	r3, #0
 8000a54:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a56:	2300      	movs	r3, #0
 8000a58:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a5a:	f107 0320 	add.w	r3, r7, #32
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4816      	ldr	r0, [pc, #88]	; (8000abc <MX_TIM2_Init+0xc4>)
 8000a62:	f004 f937 	bl	8004cd4 <HAL_TIMEx_MasterConfigSynchronization>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000a6c:	f000 fba0 	bl	80011b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a70:	2360      	movs	r3, #96	; 0x60
 8000a72:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = PWM_DEFAULT_DUTY;
 8000a74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a78:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a82:	1d3b      	adds	r3, r7, #4
 8000a84:	2208      	movs	r2, #8
 8000a86:	4619      	mov	r1, r3
 8000a88:	480c      	ldr	r0, [pc, #48]	; (8000abc <MX_TIM2_Init+0xc4>)
 8000a8a:	f003 fe11 	bl	80046b0 <HAL_TIM_PWM_ConfigChannel>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000a94:	f000 fb8c 	bl	80011b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a98:	1d3b      	adds	r3, r7, #4
 8000a9a:	220c      	movs	r2, #12
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	4807      	ldr	r0, [pc, #28]	; (8000abc <MX_TIM2_Init+0xc4>)
 8000aa0:	f003 fe06 	bl	80046b0 <HAL_TIM_PWM_ConfigChannel>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000aaa:	f000 fb81 	bl	80011b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000aae:	4803      	ldr	r0, [pc, #12]	; (8000abc <MX_TIM2_Init+0xc4>)
 8000ab0:	f000 fffa 	bl	8001aa8 <HAL_TIM_MspPostInit>

}
 8000ab4:	bf00      	nop
 8000ab6:	3728      	adds	r7, #40	; 0x28
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	20000418 	.word	0x20000418

08000ac0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b08a      	sub	sp, #40	; 0x28
 8000ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ac6:	f107 0320 	add.w	r3, r7, #32
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
 8000ace:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ad0:	1d3b      	adds	r3, r7, #4
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	601a      	str	r2, [r3, #0]
 8000ad6:	605a      	str	r2, [r3, #4]
 8000ad8:	609a      	str	r2, [r3, #8]
 8000ada:	60da      	str	r2, [r3, #12]
 8000adc:	611a      	str	r2, [r3, #16]
 8000ade:	615a      	str	r2, [r3, #20]
 8000ae0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ae2:	4b22      	ldr	r3, [pc, #136]	; (8000b6c <MX_TIM3_Init+0xac>)
 8000ae4:	4a22      	ldr	r2, [pc, #136]	; (8000b70 <MX_TIM3_Init+0xb0>)
 8000ae6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000ae8:	4b20      	ldr	r3, [pc, #128]	; (8000b6c <MX_TIM3_Init+0xac>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aee:	4b1f      	ldr	r3, [pc, #124]	; (8000b6c <MX_TIM3_Init+0xac>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4999;
 8000af4:	4b1d      	ldr	r3, [pc, #116]	; (8000b6c <MX_TIM3_Init+0xac>)
 8000af6:	f241 3287 	movw	r2, #4999	; 0x1387
 8000afa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000afc:	4b1b      	ldr	r3, [pc, #108]	; (8000b6c <MX_TIM3_Init+0xac>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b02:	4b1a      	ldr	r3, [pc, #104]	; (8000b6c <MX_TIM3_Init+0xac>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000b08:	4818      	ldr	r0, [pc, #96]	; (8000b6c <MX_TIM3_Init+0xac>)
 8000b0a:	f003 fd82 	bl	8004612 <HAL_TIM_PWM_Init>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000b14:	f000 fb4c 	bl	80011b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b20:	f107 0320 	add.w	r3, r7, #32
 8000b24:	4619      	mov	r1, r3
 8000b26:	4811      	ldr	r0, [pc, #68]	; (8000b6c <MX_TIM3_Init+0xac>)
 8000b28:	f004 f8d4 	bl	8004cd4 <HAL_TIMEx_MasterConfigSynchronization>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000b32:	f000 fb3d 	bl	80011b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b36:	2360      	movs	r3, #96	; 0x60
 8000b38:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b42:	2300      	movs	r3, #0
 8000b44:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b46:	1d3b      	adds	r3, r7, #4
 8000b48:	2204      	movs	r2, #4
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4807      	ldr	r0, [pc, #28]	; (8000b6c <MX_TIM3_Init+0xac>)
 8000b4e:	f003 fdaf 	bl	80046b0 <HAL_TIM_PWM_ConfigChannel>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000b58:	f000 fb2a 	bl	80011b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000b5c:	4803      	ldr	r0, [pc, #12]	; (8000b6c <MX_TIM3_Init+0xac>)
 8000b5e:	f000 ffa3 	bl	8001aa8 <HAL_TIM_MspPostInit>

}
 8000b62:	bf00      	nop
 8000b64:	3728      	adds	r7, #40	; 0x28
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	20000218 	.word	0x20000218
 8000b70:	40000400 	.word	0x40000400

08000b74 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b08a      	sub	sp, #40	; 0x28
 8000b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b7a:	f107 0320 	add.w	r3, r7, #32
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
 8000b82:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b84:	1d3b      	adds	r3, r7, #4
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
 8000b8a:	605a      	str	r2, [r3, #4]
 8000b8c:	609a      	str	r2, [r3, #8]
 8000b8e:	60da      	str	r2, [r3, #12]
 8000b90:	611a      	str	r2, [r3, #16]
 8000b92:	615a      	str	r2, [r3, #20]
 8000b94:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000b96:	4b33      	ldr	r3, [pc, #204]	; (8000c64 <MX_TIM4_Init+0xf0>)
 8000b98:	4a33      	ldr	r2, [pc, #204]	; (8000c68 <MX_TIM4_Init+0xf4>)
 8000b9a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = TIM_PSC_APB1;
 8000b9c:	4b31      	ldr	r3, [pc, #196]	; (8000c64 <MX_TIM4_Init+0xf0>)
 8000b9e:	22a7      	movs	r2, #167	; 0xa7
 8000ba0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ba2:	4b30      	ldr	r3, [pc, #192]	; (8000c64 <MX_TIM4_Init+0xf0>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = PWM_RESOLUTION-1;
 8000ba8:	4b2e      	ldr	r3, [pc, #184]	; (8000c64 <MX_TIM4_Init+0xf0>)
 8000baa:	f242 720f 	movw	r2, #9999	; 0x270f
 8000bae:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bb0:	4b2c      	ldr	r3, [pc, #176]	; (8000c64 <MX_TIM4_Init+0xf0>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bb6:	4b2b      	ldr	r3, [pc, #172]	; (8000c64 <MX_TIM4_Init+0xf0>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000bbc:	4829      	ldr	r0, [pc, #164]	; (8000c64 <MX_TIM4_Init+0xf0>)
 8000bbe:	f003 fd28 	bl	8004612 <HAL_TIM_PWM_Init>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8000bc8:	f000 faf2 	bl	80011b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000bd4:	f107 0320 	add.w	r3, r7, #32
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4822      	ldr	r0, [pc, #136]	; (8000c64 <MX_TIM4_Init+0xf0>)
 8000bdc:	f004 f87a 	bl	8004cd4 <HAL_TIMEx_MasterConfigSynchronization>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8000be6:	f000 fae3 	bl	80011b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bea:	2360      	movs	r3, #96	; 0x60
 8000bec:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = PWM_DEFAULT_DUTY;
 8000bee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bf2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bfc:	1d3b      	adds	r3, r7, #4
 8000bfe:	2200      	movs	r2, #0
 8000c00:	4619      	mov	r1, r3
 8000c02:	4818      	ldr	r0, [pc, #96]	; (8000c64 <MX_TIM4_Init+0xf0>)
 8000c04:	f003 fd54 	bl	80046b0 <HAL_TIM_PWM_ConfigChannel>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000c0e:	f000 facf 	bl	80011b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c12:	1d3b      	adds	r3, r7, #4
 8000c14:	2204      	movs	r2, #4
 8000c16:	4619      	mov	r1, r3
 8000c18:	4812      	ldr	r0, [pc, #72]	; (8000c64 <MX_TIM4_Init+0xf0>)
 8000c1a:	f003 fd49 	bl	80046b0 <HAL_TIM_PWM_ConfigChannel>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8000c24:	f000 fac4 	bl	80011b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c28:	1d3b      	adds	r3, r7, #4
 8000c2a:	2208      	movs	r2, #8
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	480d      	ldr	r0, [pc, #52]	; (8000c64 <MX_TIM4_Init+0xf0>)
 8000c30:	f003 fd3e 	bl	80046b0 <HAL_TIM_PWM_ConfigChannel>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 8000c3a:	f000 fab9 	bl	80011b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000c3e:	1d3b      	adds	r3, r7, #4
 8000c40:	220c      	movs	r2, #12
 8000c42:	4619      	mov	r1, r3
 8000c44:	4807      	ldr	r0, [pc, #28]	; (8000c64 <MX_TIM4_Init+0xf0>)
 8000c46:	f003 fd33 	bl	80046b0 <HAL_TIM_PWM_ConfigChannel>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 8000c50:	f000 faae 	bl	80011b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000c54:	4803      	ldr	r0, [pc, #12]	; (8000c64 <MX_TIM4_Init+0xf0>)
 8000c56:	f000 ff27 	bl	8001aa8 <HAL_TIM_MspPostInit>

}
 8000c5a:	bf00      	nop
 8000c5c:	3728      	adds	r7, #40	; 0x28
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	20000180 	.word	0x20000180
 8000c68:	40000800 	.word	0x40000800

08000c6c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b08a      	sub	sp, #40	; 0x28
 8000c70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c72:	f107 0320 	add.w	r3, r7, #32
 8000c76:	2200      	movs	r2, #0
 8000c78:	601a      	str	r2, [r3, #0]
 8000c7a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c7c:	1d3b      	adds	r3, r7, #4
 8000c7e:	2200      	movs	r2, #0
 8000c80:	601a      	str	r2, [r3, #0]
 8000c82:	605a      	str	r2, [r3, #4]
 8000c84:	609a      	str	r2, [r3, #8]
 8000c86:	60da      	str	r2, [r3, #12]
 8000c88:	611a      	str	r2, [r3, #16]
 8000c8a:	615a      	str	r2, [r3, #20]
 8000c8c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000c8e:	4b2d      	ldr	r3, [pc, #180]	; (8000d44 <MX_TIM5_Init+0xd8>)
 8000c90:	4a2d      	ldr	r2, [pc, #180]	; (8000d48 <MX_TIM5_Init+0xdc>)
 8000c92:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000c94:	4b2b      	ldr	r3, [pc, #172]	; (8000d44 <MX_TIM5_Init+0xd8>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c9a:	4b2a      	ldr	r3, [pc, #168]	; (8000d44 <MX_TIM5_Init+0xd8>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000ca0:	4b28      	ldr	r3, [pc, #160]	; (8000d44 <MX_TIM5_Init+0xd8>)
 8000ca2:	f04f 32ff 	mov.w	r2, #4294967295
 8000ca6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ca8:	4b26      	ldr	r3, [pc, #152]	; (8000d44 <MX_TIM5_Init+0xd8>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cae:	4b25      	ldr	r3, [pc, #148]	; (8000d44 <MX_TIM5_Init+0xd8>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000cb4:	4823      	ldr	r0, [pc, #140]	; (8000d44 <MX_TIM5_Init+0xd8>)
 8000cb6:	f003 fcac 	bl	8004612 <HAL_TIM_PWM_Init>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8000cc0:	f000 fa76 	bl	80011b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000ccc:	f107 0320 	add.w	r3, r7, #32
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	481c      	ldr	r0, [pc, #112]	; (8000d44 <MX_TIM5_Init+0xd8>)
 8000cd4:	f003 fffe 	bl	8004cd4 <HAL_TIMEx_MasterConfigSynchronization>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8000cde:	f000 fa67 	bl	80011b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ce2:	2360      	movs	r3, #96	; 0x60
 8000ce4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cea:	2300      	movs	r3, #0
 8000cec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cf2:	1d3b      	adds	r3, r7, #4
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4812      	ldr	r0, [pc, #72]	; (8000d44 <MX_TIM5_Init+0xd8>)
 8000cfa:	f003 fcd9 	bl	80046b0 <HAL_TIM_PWM_ConfigChannel>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8000d04:	f000 fa54 	bl	80011b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d08:	1d3b      	adds	r3, r7, #4
 8000d0a:	2204      	movs	r2, #4
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	480d      	ldr	r0, [pc, #52]	; (8000d44 <MX_TIM5_Init+0xd8>)
 8000d10:	f003 fcce 	bl	80046b0 <HAL_TIM_PWM_ConfigChannel>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8000d1a:	f000 fa49 	bl	80011b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d1e:	1d3b      	adds	r3, r7, #4
 8000d20:	2208      	movs	r2, #8
 8000d22:	4619      	mov	r1, r3
 8000d24:	4807      	ldr	r0, [pc, #28]	; (8000d44 <MX_TIM5_Init+0xd8>)
 8000d26:	f003 fcc3 	bl	80046b0 <HAL_TIM_PWM_ConfigChannel>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_TIM5_Init+0xc8>
  {
    Error_Handler();
 8000d30:	f000 fa3e 	bl	80011b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000d34:	4803      	ldr	r0, [pc, #12]	; (8000d44 <MX_TIM5_Init+0xd8>)
 8000d36:	f000 feb7 	bl	8001aa8 <HAL_TIM_MspPostInit>

}
 8000d3a:	bf00      	nop
 8000d3c:	3728      	adds	r7, #40	; 0x28
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	200001d0 	.word	0x200001d0
 8000d48:	40000c00 	.word	0x40000c00

08000d4c <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b088      	sub	sp, #32
 8000d50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d52:	1d3b      	adds	r3, r7, #4
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	605a      	str	r2, [r3, #4]
 8000d5a:	609a      	str	r2, [r3, #8]
 8000d5c:	60da      	str	r2, [r3, #12]
 8000d5e:	611a      	str	r2, [r3, #16]
 8000d60:	615a      	str	r2, [r3, #20]
 8000d62:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8000d64:	4b1a      	ldr	r3, [pc, #104]	; (8000dd0 <MX_TIM12_Init+0x84>)
 8000d66:	4a1b      	ldr	r2, [pc, #108]	; (8000dd4 <MX_TIM12_Init+0x88>)
 8000d68:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 3;
 8000d6a:	4b19      	ldr	r3, [pc, #100]	; (8000dd0 <MX_TIM12_Init+0x84>)
 8000d6c:	2203      	movs	r2, #3
 8000d6e:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d70:	4b17      	ldr	r3, [pc, #92]	; (8000dd0 <MX_TIM12_Init+0x84>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 7777;
 8000d76:	4b16      	ldr	r3, [pc, #88]	; (8000dd0 <MX_TIM12_Init+0x84>)
 8000d78:	f641 6261 	movw	r2, #7777	; 0x1e61
 8000d7c:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d7e:	4b14      	ldr	r3, [pc, #80]	; (8000dd0 <MX_TIM12_Init+0x84>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d84:	4b12      	ldr	r3, [pc, #72]	; (8000dd0 <MX_TIM12_Init+0x84>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8000d8a:	4811      	ldr	r0, [pc, #68]	; (8000dd0 <MX_TIM12_Init+0x84>)
 8000d8c:	f003 fc41 	bl	8004612 <HAL_TIM_PWM_Init>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8000d96:	f000 fa0b 	bl	80011b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d9a:	2360      	movs	r3, #96	; 0x60
 8000d9c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000da2:	2300      	movs	r3, #0
 8000da4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000da6:	2300      	movs	r3, #0
 8000da8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000daa:	1d3b      	adds	r3, r7, #4
 8000dac:	2200      	movs	r2, #0
 8000dae:	4619      	mov	r1, r3
 8000db0:	4807      	ldr	r0, [pc, #28]	; (8000dd0 <MX_TIM12_Init+0x84>)
 8000db2:	f003 fc7d 	bl	80046b0 <HAL_TIM_PWM_ConfigChannel>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8000dbc:	f000 f9f8 	bl	80011b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8000dc0:	4803      	ldr	r0, [pc, #12]	; (8000dd0 <MX_TIM12_Init+0x84>)
 8000dc2:	f000 fe71 	bl	8001aa8 <HAL_TIM_MspPostInit>

}
 8000dc6:	bf00      	nop
 8000dc8:	3720      	adds	r7, #32
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	200004d0 	.word	0x200004d0
 8000dd4:	40001800 	.word	0x40001800

08000dd8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000ddc:	4b11      	ldr	r3, [pc, #68]	; (8000e24 <MX_UART4_Init+0x4c>)
 8000dde:	4a12      	ldr	r2, [pc, #72]	; (8000e28 <MX_UART4_Init+0x50>)
 8000de0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000de2:	4b10      	ldr	r3, [pc, #64]	; (8000e24 <MX_UART4_Init+0x4c>)
 8000de4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000de8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000dea:	4b0e      	ldr	r3, [pc, #56]	; (8000e24 <MX_UART4_Init+0x4c>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000df0:	4b0c      	ldr	r3, [pc, #48]	; (8000e24 <MX_UART4_Init+0x4c>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_EVEN;
 8000df6:	4b0b      	ldr	r3, [pc, #44]	; (8000e24 <MX_UART4_Init+0x4c>)
 8000df8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000dfc:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000dfe:	4b09      	ldr	r3, [pc, #36]	; (8000e24 <MX_UART4_Init+0x4c>)
 8000e00:	220c      	movs	r2, #12
 8000e02:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e04:	4b07      	ldr	r3, [pc, #28]	; (8000e24 <MX_UART4_Init+0x4c>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e0a:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <MX_UART4_Init+0x4c>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000e10:	4804      	ldr	r0, [pc, #16]	; (8000e24 <MX_UART4_Init+0x4c>)
 8000e12:	f003 ffdb 	bl	8004dcc <HAL_UART_Init>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <MX_UART4_Init+0x48>
  {
    Error_Handler();
 8000e1c:	f000 f9c8 	bl	80011b0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000e20:	bf00      	nop
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	200003d4 	.word	0x200003d4
 8000e28:	40004c00 	.word	0x40004c00

08000e2c <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8000e30:	4b10      	ldr	r3, [pc, #64]	; (8000e74 <MX_UART7_Init+0x48>)
 8000e32:	4a11      	ldr	r2, [pc, #68]	; (8000e78 <MX_UART7_Init+0x4c>)
 8000e34:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 1000000;
 8000e36:	4b0f      	ldr	r3, [pc, #60]	; (8000e74 <MX_UART7_Init+0x48>)
 8000e38:	4a10      	ldr	r2, [pc, #64]	; (8000e7c <MX_UART7_Init+0x50>)
 8000e3a:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8000e3c:	4b0d      	ldr	r3, [pc, #52]	; (8000e74 <MX_UART7_Init+0x48>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8000e42:	4b0c      	ldr	r3, [pc, #48]	; (8000e74 <MX_UART7_Init+0x48>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8000e48:	4b0a      	ldr	r3, [pc, #40]	; (8000e74 <MX_UART7_Init+0x48>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8000e4e:	4b09      	ldr	r3, [pc, #36]	; (8000e74 <MX_UART7_Init+0x48>)
 8000e50:	220c      	movs	r2, #12
 8000e52:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e54:	4b07      	ldr	r3, [pc, #28]	; (8000e74 <MX_UART7_Init+0x48>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e5a:	4b06      	ldr	r3, [pc, #24]	; (8000e74 <MX_UART7_Init+0x48>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8000e60:	4804      	ldr	r0, [pc, #16]	; (8000e74 <MX_UART7_Init+0x48>)
 8000e62:	f003 ffb3 	bl	8004dcc <HAL_UART_Init>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <MX_UART7_Init+0x44>
  {
    Error_Handler();
 8000e6c:	f000 f9a0 	bl	80011b0 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8000e70:	bf00      	nop
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	200000e4 	.word	0x200000e4
 8000e78:	40007800 	.word	0x40007800
 8000e7c:	000f4240 	.word	0x000f4240

08000e80 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e84:	4b11      	ldr	r3, [pc, #68]	; (8000ecc <MX_USART1_UART_Init+0x4c>)
 8000e86:	4a12      	ldr	r2, [pc, #72]	; (8000ed0 <MX_USART1_UART_Init+0x50>)
 8000e88:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 100000;
 8000e8a:	4b10      	ldr	r3, [pc, #64]	; (8000ecc <MX_USART1_UART_Init+0x4c>)
 8000e8c:	4a11      	ldr	r2, [pc, #68]	; (8000ed4 <MX_USART1_UART_Init+0x54>)
 8000e8e:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e90:	4b0e      	ldr	r3, [pc, #56]	; (8000ecc <MX_USART1_UART_Init+0x4c>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e96:	4b0d      	ldr	r3, [pc, #52]	; (8000ecc <MX_USART1_UART_Init+0x4c>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8000e9c:	4b0b      	ldr	r3, [pc, #44]	; (8000ecc <MX_USART1_UART_Init+0x4c>)
 8000e9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ea2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ea4:	4b09      	ldr	r3, [pc, #36]	; (8000ecc <MX_USART1_UART_Init+0x4c>)
 8000ea6:	220c      	movs	r2, #12
 8000ea8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eaa:	4b08      	ldr	r3, [pc, #32]	; (8000ecc <MX_USART1_UART_Init+0x4c>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000eb0:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <MX_USART1_UART_Init+0x4c>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000eb6:	4805      	ldr	r0, [pc, #20]	; (8000ecc <MX_USART1_UART_Init+0x4c>)
 8000eb8:	f003 ff88 	bl	8004dcc <HAL_UART_Init>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000ec2:	f000 f975 	bl	80011b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ec6:	bf00      	nop
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	20000348 	.word	0x20000348
 8000ed0:	40011000 	.word	0x40011000
 8000ed4:	000186a0 	.word	0x000186a0

08000ed8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000edc:	4b11      	ldr	r3, [pc, #68]	; (8000f24 <MX_USART2_UART_Init+0x4c>)
 8000ede:	4a12      	ldr	r2, [pc, #72]	; (8000f28 <MX_USART2_UART_Init+0x50>)
 8000ee0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ee2:	4b10      	ldr	r3, [pc, #64]	; (8000f24 <MX_USART2_UART_Init+0x4c>)
 8000ee4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ee8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000eea:	4b0e      	ldr	r3, [pc, #56]	; (8000f24 <MX_USART2_UART_Init+0x4c>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ef0:	4b0c      	ldr	r3, [pc, #48]	; (8000f24 <MX_USART2_UART_Init+0x4c>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ef6:	4b0b      	ldr	r3, [pc, #44]	; (8000f24 <MX_USART2_UART_Init+0x4c>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000efc:	4b09      	ldr	r3, [pc, #36]	; (8000f24 <MX_USART2_UART_Init+0x4c>)
 8000efe:	220c      	movs	r2, #12
 8000f00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f02:	4b08      	ldr	r3, [pc, #32]	; (8000f24 <MX_USART2_UART_Init+0x4c>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f08:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <MX_USART2_UART_Init+0x4c>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f0e:	4805      	ldr	r0, [pc, #20]	; (8000f24 <MX_USART2_UART_Init+0x4c>)
 8000f10:	f003 ff5c 	bl	8004dcc <HAL_UART_Init>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f1a:	f000 f949 	bl	80011b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	20000460 	.word	0x20000460
 8000f28:	40004400 	.word	0x40004400

08000f2c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000f30:	4b11      	ldr	r3, [pc, #68]	; (8000f78 <MX_USART6_UART_Init+0x4c>)
 8000f32:	4a12      	ldr	r2, [pc, #72]	; (8000f7c <MX_USART6_UART_Init+0x50>)
 8000f34:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000f36:	4b10      	ldr	r3, [pc, #64]	; (8000f78 <MX_USART6_UART_Init+0x4c>)
 8000f38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f3c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000f3e:	4b0e      	ldr	r3, [pc, #56]	; (8000f78 <MX_USART6_UART_Init+0x4c>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000f44:	4b0c      	ldr	r3, [pc, #48]	; (8000f78 <MX_USART6_UART_Init+0x4c>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000f4a:	4b0b      	ldr	r3, [pc, #44]	; (8000f78 <MX_USART6_UART_Init+0x4c>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000f50:	4b09      	ldr	r3, [pc, #36]	; (8000f78 <MX_USART6_UART_Init+0x4c>)
 8000f52:	220c      	movs	r2, #12
 8000f54:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f56:	4b08      	ldr	r3, [pc, #32]	; (8000f78 <MX_USART6_UART_Init+0x4c>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f5c:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <MX_USART6_UART_Init+0x4c>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000f62:	4805      	ldr	r0, [pc, #20]	; (8000f78 <MX_USART6_UART_Init+0x4c>)
 8000f64:	f003 ff32 	bl	8004dcc <HAL_UART_Init>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000f6e:	f000 f91f 	bl	80011b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000f72:	bf00      	nop
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	20000390 	.word	0x20000390
 8000f7c:	40011400 	.word	0x40011400

08000f80 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	607b      	str	r3, [r7, #4]
 8000f8a:	4b1b      	ldr	r3, [pc, #108]	; (8000ff8 <MX_DMA_Init+0x78>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	4a1a      	ldr	r2, [pc, #104]	; (8000ff8 <MX_DMA_Init+0x78>)
 8000f90:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f94:	6313      	str	r3, [r2, #48]	; 0x30
 8000f96:	4b18      	ldr	r3, [pc, #96]	; (8000ff8 <MX_DMA_Init+0x78>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f9e:	607b      	str	r3, [r7, #4]
 8000fa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	603b      	str	r3, [r7, #0]
 8000fa6:	4b14      	ldr	r3, [pc, #80]	; (8000ff8 <MX_DMA_Init+0x78>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	4a13      	ldr	r2, [pc, #76]	; (8000ff8 <MX_DMA_Init+0x78>)
 8000fac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb2:	4b11      	ldr	r3, [pc, #68]	; (8000ff8 <MX_DMA_Init+0x78>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fba:	603b      	str	r3, [r7, #0]
 8000fbc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	2010      	movs	r0, #16
 8000fc4:	f001 feb1 	bl	8002d2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000fc8:	2010      	movs	r0, #16
 8000fca:	f001 feca 	bl	8002d62 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	2011      	movs	r0, #17
 8000fd4:	f001 fea9 	bl	8002d2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000fd8:	2011      	movs	r0, #17
 8000fda:	f001 fec2 	bl	8002d62 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	203a      	movs	r0, #58	; 0x3a
 8000fe4:	f001 fea1 	bl	8002d2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000fe8:	203a      	movs	r0, #58	; 0x3a
 8000fea:	f001 feba 	bl	8002d62 <HAL_NVIC_EnableIRQ>

}
 8000fee:	bf00      	nop
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40023800 	.word	0x40023800

08000ffc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b08c      	sub	sp, #48	; 0x30
 8001000:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001002:	f107 031c 	add.w	r3, r7, #28
 8001006:	2200      	movs	r2, #0
 8001008:	601a      	str	r2, [r3, #0]
 800100a:	605a      	str	r2, [r3, #4]
 800100c:	609a      	str	r2, [r3, #8]
 800100e:	60da      	str	r2, [r3, #12]
 8001010:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001012:	2300      	movs	r3, #0
 8001014:	61bb      	str	r3, [r7, #24]
 8001016:	4b61      	ldr	r3, [pc, #388]	; (800119c <MX_GPIO_Init+0x1a0>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	4a60      	ldr	r2, [pc, #384]	; (800119c <MX_GPIO_Init+0x1a0>)
 800101c:	f043 0310 	orr.w	r3, r3, #16
 8001020:	6313      	str	r3, [r2, #48]	; 0x30
 8001022:	4b5e      	ldr	r3, [pc, #376]	; (800119c <MX_GPIO_Init+0x1a0>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	f003 0310 	and.w	r3, r3, #16
 800102a:	61bb      	str	r3, [r7, #24]
 800102c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	617b      	str	r3, [r7, #20]
 8001032:	4b5a      	ldr	r3, [pc, #360]	; (800119c <MX_GPIO_Init+0x1a0>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	4a59      	ldr	r2, [pc, #356]	; (800119c <MX_GPIO_Init+0x1a0>)
 8001038:	f043 0302 	orr.w	r3, r3, #2
 800103c:	6313      	str	r3, [r2, #48]	; 0x30
 800103e:	4b57      	ldr	r3, [pc, #348]	; (800119c <MX_GPIO_Init+0x1a0>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	f003 0302 	and.w	r3, r3, #2
 8001046:	617b      	str	r3, [r7, #20]
 8001048:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800104a:	2300      	movs	r3, #0
 800104c:	613b      	str	r3, [r7, #16]
 800104e:	4b53      	ldr	r3, [pc, #332]	; (800119c <MX_GPIO_Init+0x1a0>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	4a52      	ldr	r2, [pc, #328]	; (800119c <MX_GPIO_Init+0x1a0>)
 8001054:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001058:	6313      	str	r3, [r2, #48]	; 0x30
 800105a:	4b50      	ldr	r3, [pc, #320]	; (800119c <MX_GPIO_Init+0x1a0>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001062:	613b      	str	r3, [r7, #16]
 8001064:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001066:	2300      	movs	r3, #0
 8001068:	60fb      	str	r3, [r7, #12]
 800106a:	4b4c      	ldr	r3, [pc, #304]	; (800119c <MX_GPIO_Init+0x1a0>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	4a4b      	ldr	r2, [pc, #300]	; (800119c <MX_GPIO_Init+0x1a0>)
 8001070:	f043 0301 	orr.w	r3, r3, #1
 8001074:	6313      	str	r3, [r2, #48]	; 0x30
 8001076:	4b49      	ldr	r3, [pc, #292]	; (800119c <MX_GPIO_Init+0x1a0>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	f003 0301 	and.w	r3, r3, #1
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	60bb      	str	r3, [r7, #8]
 8001086:	4b45      	ldr	r3, [pc, #276]	; (800119c <MX_GPIO_Init+0x1a0>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	4a44      	ldr	r2, [pc, #272]	; (800119c <MX_GPIO_Init+0x1a0>)
 800108c:	f043 0308 	orr.w	r3, r3, #8
 8001090:	6313      	str	r3, [r2, #48]	; 0x30
 8001092:	4b42      	ldr	r3, [pc, #264]	; (800119c <MX_GPIO_Init+0x1a0>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	f003 0308 	and.w	r3, r3, #8
 800109a:	60bb      	str	r3, [r7, #8]
 800109c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	607b      	str	r3, [r7, #4]
 80010a2:	4b3e      	ldr	r3, [pc, #248]	; (800119c <MX_GPIO_Init+0x1a0>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	4a3d      	ldr	r2, [pc, #244]	; (800119c <MX_GPIO_Init+0x1a0>)
 80010a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010ac:	6313      	str	r3, [r2, #48]	; 0x30
 80010ae:	4b3b      	ldr	r3, [pc, #236]	; (800119c <MX_GPIO_Init+0x1a0>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010b6:	607b      	str	r3, [r7, #4]
 80010b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	603b      	str	r3, [r7, #0]
 80010be:	4b37      	ldr	r3, [pc, #220]	; (800119c <MX_GPIO_Init+0x1a0>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	4a36      	ldr	r2, [pc, #216]	; (800119c <MX_GPIO_Init+0x1a0>)
 80010c4:	f043 0320 	orr.w	r3, r3, #32
 80010c8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ca:	4b34      	ldr	r3, [pc, #208]	; (800119c <MX_GPIO_Init+0x1a0>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	f003 0320 	and.w	r3, r3, #32
 80010d2:	603b      	str	r3, [r7, #0]
 80010d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, IST_INT_Pin|IST_RST_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 80010d6:	2200      	movs	r2, #0
 80010d8:	f640 010c 	movw	r1, #2060	; 0x80c
 80010dc:	4830      	ldr	r0, [pc, #192]	; (80011a0 <MX_GPIO_Init+0x1a4>)
 80010de:	f002 fbed 	bl	80038bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80010e2:	2200      	movs	r2, #0
 80010e4:	213c      	movs	r1, #60	; 0x3c
 80010e6:	482f      	ldr	r0, [pc, #188]	; (80011a4 <MX_GPIO_Init+0x1a8>)
 80010e8:	f002 fbe8 	bl	80038bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6|LED_GREEN_Pin, GPIO_PIN_RESET);
 80010ec:	2200      	movs	r2, #0
 80010ee:	f244 0140 	movw	r1, #16448	; 0x4040
 80010f2:	482d      	ldr	r0, [pc, #180]	; (80011a8 <MX_GPIO_Init+0x1ac>)
 80010f4:	f002 fbe2 	bl	80038bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, GPIO_PIN_RESET);
 80010f8:	2200      	movs	r2, #0
 80010fa:	2102      	movs	r1, #2
 80010fc:	482b      	ldr	r0, [pc, #172]	; (80011ac <MX_GPIO_Init+0x1b0>)
 80010fe:	f002 fbdd 	bl	80038bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : IST_INT_Pin IST_RST_Pin */
  GPIO_InitStruct.Pin = IST_INT_Pin|IST_RST_Pin;
 8001102:	230c      	movs	r3, #12
 8001104:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001106:	2301      	movs	r3, #1
 8001108:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	2300      	movs	r3, #0
 800110c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800110e:	2303      	movs	r3, #3
 8001110:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001112:	f107 031c 	add.w	r3, r7, #28
 8001116:	4619      	mov	r1, r3
 8001118:	4821      	ldr	r0, [pc, #132]	; (80011a0 <MX_GPIO_Init+0x1a4>)
 800111a:	f002 fa23 	bl	8003564 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH2 PH3 PH4 PH5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800111e:	233c      	movs	r3, #60	; 0x3c
 8001120:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001122:	2301      	movs	r3, #1
 8001124:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001126:	2300      	movs	r3, #0
 8001128:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112a:	2300      	movs	r3, #0
 800112c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800112e:	f107 031c 	add.w	r3, r7, #28
 8001132:	4619      	mov	r1, r3
 8001134:	481b      	ldr	r0, [pc, #108]	; (80011a4 <MX_GPIO_Init+0x1a8>)
 8001136:	f002 fa15 	bl	8003564 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 LED_GREEN_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_6|LED_GREEN_Pin;
 800113a:	f244 0340 	movw	r3, #16448	; 0x4040
 800113e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001140:	2301      	movs	r3, #1
 8001142:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	2300      	movs	r3, #0
 8001146:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001148:	2300      	movs	r3, #0
 800114a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800114c:	f107 031c 	add.w	r3, r7, #28
 8001150:	4619      	mov	r1, r3
 8001152:	4815      	ldr	r0, [pc, #84]	; (80011a8 <MX_GPIO_Init+0x1ac>)
 8001154:	f002 fa06 	bl	8003564 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001158:	2302      	movs	r3, #2
 800115a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800115c:	2301      	movs	r3, #1
 800115e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001160:	2300      	movs	r3, #0
 8001162:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001164:	2300      	movs	r3, #0
 8001166:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001168:	f107 031c 	add.w	r3, r7, #28
 800116c:	4619      	mov	r1, r3
 800116e:	480f      	ldr	r0, [pc, #60]	; (80011ac <MX_GPIO_Init+0x1b0>)
 8001170:	f002 f9f8 	bl	8003564 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8001174:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001178:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800117a:	2301      	movs	r3, #1
 800117c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117e:	2300      	movs	r3, #0
 8001180:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001182:	2300      	movs	r3, #0
 8001184:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8001186:	f107 031c 	add.w	r3, r7, #28
 800118a:	4619      	mov	r1, r3
 800118c:	4804      	ldr	r0, [pc, #16]	; (80011a0 <MX_GPIO_Init+0x1a4>)
 800118e:	f002 f9e9 	bl	8003564 <HAL_GPIO_Init>

}
 8001192:	bf00      	nop
 8001194:	3730      	adds	r7, #48	; 0x30
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40023800 	.word	0x40023800
 80011a0:	40021000 	.word	0x40021000
 80011a4:	40021c00 	.word	0x40021c00
 80011a8:	40021400 	.word	0x40021400
 80011ac:	40021800 	.word	0x40021800

080011b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80011b4:	bf00      	nop
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
	...

080011c0 <HAL_CAN_RxFifo0MsgPendingCallback>:
    else
        while (HAL_CAN_IsTxMessagePending(hcan, pTxMailbox));
}


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b08c      	sub	sp, #48	; 0x30
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef rx_header;
    uint8_t rx_data[CAN_DATA_SIZE];

    HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, rx_data);
 80011c8:	f107 0308 	add.w	r3, r7, #8
 80011cc:	f107 0210 	add.w	r2, r7, #16
 80011d0:	2100      	movs	r1, #0
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f001 f98d 	bl	80024f2 <HAL_CAN_GetRxMessage>
    uint8_t idx = rx_header.StdId - CAN_RX_ID_START;
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	3b01      	subs	r3, #1
 80011de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    get_motor_measure(&motors[idx], rx_data);
 80011e2:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80011e6:	4613      	mov	r3, r2
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	4413      	add	r3, r2
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	4a06      	ldr	r2, [pc, #24]	; (8001208 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 80011f0:	4413      	add	r3, r2
 80011f2:	f107 0208 	add.w	r2, r7, #8
 80011f6:	4611      	mov	r1, r2
 80011f8:	4618      	mov	r0, r3
 80011fa:	f000 f807 	bl	800120c <get_motor_measure>

}
 80011fe:	bf00      	nop
 8001200:	3730      	adds	r7, #48	; 0x30
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	20000518 	.word	0x20000518

0800120c <get_motor_measure>:

void get_motor_measure(motor_measure_t* m, uint8_t data[CAN_DATA_SIZE]){
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	6039      	str	r1, [r7, #0]
    (m)->last_ecd = (m)->ecd;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	881b      	ldrh	r3, [r3, #0]
 800121a:	b21a      	sxth	r2, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	811a      	strh	r2, [r3, #8]
    (m)->ecd = (uint16_t)((data)[0] << 8 | (data)[1]);
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	021b      	lsls	r3, r3, #8
 8001226:	b21a      	sxth	r2, r3
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	3301      	adds	r3, #1
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	b21b      	sxth	r3, r3
 8001230:	4313      	orrs	r3, r2
 8001232:	b21b      	sxth	r3, r3
 8001234:	b29a      	uxth	r2, r3
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	801a      	strh	r2, [r3, #0]
    (m)->speed_rpm = (uint16_t)((data)[2] << 8 | (data)[3]);
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	3302      	adds	r3, #2
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	021b      	lsls	r3, r3, #8
 8001242:	b21a      	sxth	r2, r3
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	3303      	adds	r3, #3
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	b21b      	sxth	r3, r3
 800124c:	4313      	orrs	r3, r2
 800124e:	b21a      	sxth	r2, r3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	805a      	strh	r2, [r3, #2]
    (m)->given_current = (uint16_t)((data)[4] << 8 | (data)[5]);
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	3304      	adds	r3, #4
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	021b      	lsls	r3, r3, #8
 800125c:	b21a      	sxth	r2, r3
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	3305      	adds	r3, #5
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	b21b      	sxth	r3, r3
 8001266:	4313      	orrs	r3, r2
 8001268:	b21a      	sxth	r2, r3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	809a      	strh	r2, [r3, #4]
    (m)->temperature = (data)[6];
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	799a      	ldrb	r2, [r3, #6]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	719a      	strb	r2, [r3, #6]
}
 8001276:	bf00      	nop
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
	...

08001284 <led_off>:
 */


#include "rm_gpio.h"

void led_off(void){
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8001288:	2201      	movs	r2, #1
 800128a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800128e:	4805      	ldr	r0, [pc, #20]	; (80012a4 <led_off+0x20>)
 8001290:	f002 fb14 	bl	80038bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8001294:	2201      	movs	r2, #1
 8001296:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800129a:	4803      	ldr	r0, [pc, #12]	; (80012a8 <led_off+0x24>)
 800129c:	f002 fb0e 	bl	80038bc <HAL_GPIO_WritePin>
}
 80012a0:	bf00      	nop
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	40021400 	.word	0x40021400
 80012a8:	40021000 	.word	0x40021000

080012ac <power_on>:

void power_on(void){
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOH, GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5, GPIO_PIN_SET);
 80012b0:	2201      	movs	r2, #1
 80012b2:	213c      	movs	r1, #60	; 0x3c
 80012b4:	4802      	ldr	r0, [pc, #8]	; (80012c0 <power_on+0x14>)
 80012b6:	f002 fb01 	bl	80038bc <HAL_GPIO_WritePin>
}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	40021c00 	.word	0x40021c00

080012c4 <uart_receive_dma_no_it>:
  * @param[in]  pData: receive buff
  * @param[in]  Size:  buff size
  * @retval     set success or fail
  */
static int uart_receive_dma_no_it(UART_HandleTypeDef* huart, uint8_t* pData, uint32_t Size)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b086      	sub	sp, #24
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	60f8      	str	r0, [r7, #12]
 80012cc:	60b9      	str	r1, [r7, #8]
 80012ce:	607a      	str	r2, [r7, #4]
  uint32_t tmp1 = 0;
 80012d0:	2300      	movs	r3, #0
 80012d2:	617b      	str	r3, [r7, #20]

  tmp1 = huart->RxState;
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	617b      	str	r3, [r7, #20]

	if (tmp1 == HAL_UART_STATE_READY)
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	2b20      	cmp	r3, #32
 80012e2:	d125      	bne.n	8001330 <uart_receive_dma_no_it+0x6c>
	{
		if ((pData == NULL) || (Size == 0))
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d002      	beq.n	80012f0 <uart_receive_dma_no_it+0x2c>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d101      	bne.n	80012f4 <uart_receive_dma_no_it+0x30>
		{
			return HAL_ERROR;
 80012f0:	2301      	movs	r3, #1
 80012f2:	e01e      	b.n	8001332 <uart_receive_dma_no_it+0x6e>
		}

		huart->pRxBuffPtr = pData;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	68ba      	ldr	r2, [r7, #8]
 80012f8:	629a      	str	r2, [r3, #40]	; 0x28
		huart->RxXferSize = Size;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	b29a      	uxth	r2, r3
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	859a      	strh	r2, [r3, #44]	; 0x2c
		huart->ErrorCode  = HAL_UART_ERROR_NONE;
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	2200      	movs	r2, #0
 8001306:	641a      	str	r2, [r3, #64]	; 0x40

		/* Enable the DMA Stream */
		HAL_DMA_Start(huart->hdmarx, (uint32_t)&huart->Instance->DR, (uint32_t)pData, Size);
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	3304      	adds	r3, #4
 8001312:	4619      	mov	r1, r3
 8001314:	68ba      	ldr	r2, [r7, #8]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	f001 fdec 	bl	8002ef4 <HAL_DMA_Start>

		/*
		 * Enable the DMA transfer for the receiver request by setting the DMAR bit
		 * in the UART CR3 register
		 */
		SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	695a      	ldr	r2, [r3, #20]
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800132a:	615a      	str	r2, [r3, #20]

		return HAL_OK;
 800132c:	2300      	movs	r3, #0
 800132e:	e000      	b.n	8001332 <uart_receive_dma_no_it+0x6e>
	}
	else
	{
		return HAL_BUSY;
 8001330:	2302      	movs	r3, #2
	}
}
 8001332:	4618      	mov	r0, r3
 8001334:	3718      	adds	r7, #24
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <dma_current_data_counter>:
  * @param[in]  dma_stream: where y can be 1 or 2 to select the DMA and x can be 0
  *             to 7 to select the DMA Stream.
  * @retval     The number of remaining data units in the current DMAy Streamx transfer.
  */
uint16_t dma_current_data_counter(DMA_Stream_TypeDef *dma_stream)
{
 800133a:	b480      	push	{r7}
 800133c:	b083      	sub	sp, #12
 800133e:	af00      	add	r7, sp, #0
 8001340:	6078      	str	r0, [r7, #4]
  /* Return the number of remaining data units for DMAy Streamx */
  return ((uint16_t)(dma_stream->NDTR));
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	b29b      	uxth	r3, r3
}
 8001348:	4618      	mov	r0, r3
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <rc_callback_handler>:
  * @param[out]  rc:   structure to save handled rc data
  * @param[in]   buff: the buff which saved raw rc data
  * @retval
  */
void rc_callback_handler(rc_info_t *rc, uint8_t *buff)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	6039      	str	r1, [r7, #0]
  rc->ch1 = (buff[0] | buff[1] << 8) & 0x07FF;
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	b21a      	sxth	r2, r3
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	3301      	adds	r3, #1
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	021b      	lsls	r3, r3, #8
 800136c:	b21b      	sxth	r3, r3
 800136e:	4313      	orrs	r3, r2
 8001370:	b21b      	sxth	r3, r3
 8001372:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001376:	b21a      	sxth	r2, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	801a      	strh	r2, [r3, #0]
  rc->ch1 -= 1024;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001382:	b29b      	uxth	r3, r3
 8001384:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001388:	b29b      	uxth	r3, r3
 800138a:	b21a      	sxth	r2, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	801a      	strh	r2, [r3, #0]
  rc->ch2 = (buff[1] >> 3 | buff[2] << 5) & 0x07FF;
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	3301      	adds	r3, #1
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	08db      	lsrs	r3, r3, #3
 8001398:	b2db      	uxtb	r3, r3
 800139a:	b21a      	sxth	r2, r3
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	3302      	adds	r3, #2
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	015b      	lsls	r3, r3, #5
 80013a4:	b21b      	sxth	r3, r3
 80013a6:	4313      	orrs	r3, r2
 80013a8:	b21b      	sxth	r3, r3
 80013aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013ae:	b21a      	sxth	r2, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	805a      	strh	r2, [r3, #2]
  rc->ch2 -= 1024;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80013ba:	b29b      	uxth	r3, r3
 80013bc:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80013c0:	b29b      	uxth	r3, r3
 80013c2:	b21a      	sxth	r2, r3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	805a      	strh	r2, [r3, #2]
  rc->ch3 = (buff[2] >> 6 | buff[3] << 2 | buff[4] << 10) & 0x07FF;
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	3302      	adds	r3, #2
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	099b      	lsrs	r3, r3, #6
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	b21a      	sxth	r2, r3
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	3303      	adds	r3, #3
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	b21b      	sxth	r3, r3
 80013de:	4313      	orrs	r3, r2
 80013e0:	b21a      	sxth	r2, r3
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	3304      	adds	r3, #4
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	029b      	lsls	r3, r3, #10
 80013ea:	b21b      	sxth	r3, r3
 80013ec:	4313      	orrs	r3, r2
 80013ee:	b21b      	sxth	r3, r3
 80013f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013f4:	b21a      	sxth	r2, r3
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	809a      	strh	r2, [r3, #4]
  rc->ch3 -= 1024;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001400:	b29b      	uxth	r3, r3
 8001402:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001406:	b29b      	uxth	r3, r3
 8001408:	b21a      	sxth	r2, r3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	809a      	strh	r2, [r3, #4]
  rc->ch4 = (buff[4] >> 1 | buff[5] << 7) & 0x07FF;
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	3304      	adds	r3, #4
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	085b      	lsrs	r3, r3, #1
 8001416:	b2db      	uxtb	r3, r3
 8001418:	b21a      	sxth	r2, r3
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	3305      	adds	r3, #5
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	01db      	lsls	r3, r3, #7
 8001422:	b21b      	sxth	r3, r3
 8001424:	4313      	orrs	r3, r2
 8001426:	b21b      	sxth	r3, r3
 8001428:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800142c:	b21a      	sxth	r2, r3
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	80da      	strh	r2, [r3, #6]
  rc->ch4 -= 1024;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001438:	b29b      	uxth	r3, r3
 800143a:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800143e:	b29b      	uxth	r3, r3
 8001440:	b21a      	sxth	r2, r3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	80da      	strh	r2, [r3, #6]

  rc->sw1 = ((buff[5] >> 4) & 0x000C) >> 2;
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	3305      	adds	r3, #5
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	091b      	lsrs	r3, r3, #4
 800144e:	b2db      	uxtb	r3, r3
 8001450:	109b      	asrs	r3, r3, #2
 8001452:	b2db      	uxtb	r3, r3
 8001454:	f003 0303 	and.w	r3, r3, #3
 8001458:	b2da      	uxtb	r2, r3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	729a      	strb	r2, [r3, #10]
  rc->sw2 = (buff[5] >> 4) & 0x0003;
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	3305      	adds	r3, #5
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	091b      	lsrs	r3, r3, #4
 8001466:	b2db      	uxtb	r3, r3
 8001468:	f003 0303 	and.w	r3, r3, #3
 800146c:	b2da      	uxtb	r2, r3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	72da      	strb	r2, [r3, #11]

  if ((abs(rc->ch1) > 660) || \
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001478:	2b00      	cmp	r3, #0
 800147a:	bfb8      	it	lt
 800147c:	425b      	neglt	r3, r3
 800147e:	b29b      	uxth	r3, r3
 8001480:	f5b3 7f25 	cmp.w	r3, #660	; 0x294
 8001484:	d81d      	bhi.n	80014c2 <rc_callback_handler+0x16e>
      (abs(rc->ch2) > 660) || \
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800148c:	2b00      	cmp	r3, #0
 800148e:	bfb8      	it	lt
 8001490:	425b      	neglt	r3, r3
 8001492:	b29b      	uxth	r3, r3
  if ((abs(rc->ch1) > 660) || \
 8001494:	f5b3 7f25 	cmp.w	r3, #660	; 0x294
 8001498:	d813      	bhi.n	80014c2 <rc_callback_handler+0x16e>
      (abs(rc->ch3) > 660) || \
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	bfb8      	it	lt
 80014a4:	425b      	neglt	r3, r3
 80014a6:	b29b      	uxth	r3, r3
      (abs(rc->ch2) > 660) || \
 80014a8:	f5b3 7f25 	cmp.w	r3, #660	; 0x294
 80014ac:	d809      	bhi.n	80014c2 <rc_callback_handler+0x16e>
      (abs(rc->ch4) > 660))
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	bfb8      	it	lt
 80014b8:	425b      	neglt	r3, r3
 80014ba:	b29b      	uxth	r3, r3
      (abs(rc->ch3) > 660) || \
 80014bc:	f5b3 7f25 	cmp.w	r3, #660	; 0x294
 80014c0:	d904      	bls.n	80014cc <rc_callback_handler+0x178>
  {
    memset(rc, 0, sizeof(rc_info_t));
 80014c2:	2216      	movs	r2, #22
 80014c4:	2100      	movs	r1, #0
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f004 fc0c 	bl	8005ce4 <memset>
  }

  rc->mouse.x = buff[6] | (buff[7] << 8);                    //!< Mouse X axis
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	3306      	adds	r3, #6
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	b21a      	sxth	r2, r3
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	3307      	adds	r3, #7
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	021b      	lsls	r3, r3, #8
 80014dc:	b21b      	sxth	r3, r3
 80014de:	4313      	orrs	r3, r2
 80014e0:	b21a      	sxth	r2, r3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	819a      	strh	r2, [r3, #12]
  rc->mouse.y = buff[8] | (buff[9] << 8);                    //!< Mouse Y axis
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	3308      	adds	r3, #8
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	b21a      	sxth	r2, r3
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	3309      	adds	r3, #9
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	021b      	lsls	r3, r3, #8
 80014f6:	b21b      	sxth	r3, r3
 80014f8:	4313      	orrs	r3, r2
 80014fa:	b21a      	sxth	r2, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	81da      	strh	r2, [r3, #14]
  rc->mouse.z = buff[10] | (buff[11] << 8);                  //!< Mouse Z axis
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	330a      	adds	r3, #10
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	b21a      	sxth	r2, r3
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	330b      	adds	r3, #11
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	021b      	lsls	r3, r3, #8
 8001510:	b21b      	sxth	r3, r3
 8001512:	4313      	orrs	r3, r2
 8001514:	b21a      	sxth	r2, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	821a      	strh	r2, [r3, #16]
  rc->mouse.l = buff[12];                                  //!< Mouse Left Is Press ?
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	7b1a      	ldrb	r2, [r3, #12]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	749a      	strb	r2, [r3, #18]
  rc->mouse.r = buff[13];                                  //!< Mouse Right Is Press ?
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	7b5a      	ldrb	r2, [r3, #13]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	74da      	strb	r2, [r3, #19]
  rc->kb.key_code = buff[14] | (buff[15] << 8);                    //!< KeyBoard value
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	330e      	adds	r3, #14
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	b21a      	sxth	r2, r3
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	330f      	adds	r3, #15
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	021b      	lsls	r3, r3, #8
 800153a:	b21b      	sxth	r3, r3
 800153c:	4313      	orrs	r3, r2
 800153e:	b21b      	sxth	r3, r3
 8001540:	b29a      	uxth	r2, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	829a      	strh	r2, [r3, #20]
  rc->wheel = buff[16] | ( buff[17] << 8);
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	3310      	adds	r3, #16
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	b21a      	sxth	r2, r3
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	3311      	adds	r3, #17
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	021b      	lsls	r3, r3, #8
 8001556:	b21b      	sxth	r3, r3
 8001558:	4313      	orrs	r3, r2
 800155a:	b21a      	sxth	r2, r3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	811a      	strh	r2, [r3, #8]
  rc->wheel -= 1024;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001566:	b29b      	uxth	r3, r3
 8001568:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800156c:	b29b      	uxth	r3, r3
 800156e:	b21a      	sxth	r2, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	811a      	strh	r2, [r3, #8]
}
 8001574:	bf00      	nop
 8001576:	3708      	adds	r7, #8
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}

0800157c <uart_rx_idle_callback>:
  * @brief      clear idle it flag after uart receive a frame data
  * @param[in]  huart: uart IRQHandler id
  * @retval
  */
static void uart_rx_idle_callback(UART_HandleTypeDef* huart)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
	/* clear idle it flag avoid idle interrupt all the time */
	__HAL_UART_CLEAR_IDLEFLAG(huart);
 8001584:	2300      	movs	r3, #0
 8001586:	60fb      	str	r3, [r7, #12]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	60fb      	str	r3, [r7, #12]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	60fb      	str	r3, [r7, #12]
 8001598:	68fb      	ldr	r3, [r7, #12]

	/* handle received data in idle interrupt */
	if (huart == &DBUS_HUART)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4a17      	ldr	r2, [pc, #92]	; (80015fc <uart_rx_idle_callback+0x80>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d127      	bne.n	80015f2 <uart_rx_idle_callback+0x76>
	{
		/* clear DMA transfer complete flag */
		__HAL_DMA_DISABLE(huart->hdmarx);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f022 0201 	bic.w	r2, r2, #1
 80015b4:	601a      	str	r2, [r3, #0]

		/* handle dbus data dbus_buf from DMA */
		if ((DBUS_MAX_LEN - dma_current_data_counter(huart->hdmarx->Instance)) == DBUS_BUFLEN)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff febc 	bl	800133a <dma_current_data_counter>
 80015c2:	4603      	mov	r3, r0
 80015c4:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
 80015c8:	2b12      	cmp	r3, #18
 80015ca:	d103      	bne.n	80015d4 <uart_rx_idle_callback+0x58>
		{
			rc_callback_handler(&rc, dbus_buf);
 80015cc:	490c      	ldr	r1, [pc, #48]	; (8001600 <uart_rx_idle_callback+0x84>)
 80015ce:	480d      	ldr	r0, [pc, #52]	; (8001604 <uart_rx_idle_callback+0x88>)
 80015d0:	f7ff fec0 	bl	8001354 <rc_callback_handler>
		}

		/* restart dma transmission */
		__HAL_DMA_SET_COUNTER(huart->hdmarx, DBUS_MAX_LEN);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	2224      	movs	r2, #36	; 0x24
 80015dc:	605a      	str	r2, [r3, #4]
		__HAL_DMA_ENABLE(huart->hdmarx);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f042 0201 	orr.w	r2, r2, #1
 80015f0:	601a      	str	r2, [r3, #0]
	}
}
 80015f2:	bf00      	nop
 80015f4:	3710      	adds	r7, #16
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	20000348 	.word	0x20000348
 8001600:	20000584 	.word	0x20000584
 8001604:	2000056c 	.word	0x2000056c

08001608 <uart_receive_handler>:
  * @brief      callback this function when uart interrupt
  * @param[in]  huart: uart IRQHandler id
  * @retval
  */
void uart_receive_handler(UART_HandleTypeDef *huart)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
	if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) &&
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0310 	and.w	r3, r3, #16
 800161a:	2b10      	cmp	r3, #16
 800161c:	d109      	bne.n	8001632 <uart_receive_handler+0x2a>
			__HAL_UART_GET_IT_SOURCE(huart, UART_IT_IDLE))
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	f003 0310 	and.w	r3, r3, #16
	if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) &&
 8001628:	2b00      	cmp	r3, #0
 800162a:	d002      	beq.n	8001632 <uart_receive_handler+0x2a>
	{
		uart_rx_idle_callback(huart);
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f7ff ffa5 	bl	800157c <uart_rx_idle_callback>
	}
}
 8001632:	bf00      	nop
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
	...

0800163c <dbus_uart_init>:
  * @brief   initialize dbus uart device
  * @param
  * @retval
  */
void dbus_uart_init(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
	/* open uart idle it */
	__HAL_UART_CLEAR_IDLEFLAG(&DBUS_HUART);
 8001642:	2300      	movs	r3, #0
 8001644:	607b      	str	r3, [r7, #4]
 8001646:	4b0d      	ldr	r3, [pc, #52]	; (800167c <dbus_uart_init+0x40>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	607b      	str	r3, [r7, #4]
 800164e:	4b0b      	ldr	r3, [pc, #44]	; (800167c <dbus_uart_init+0x40>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	607b      	str	r3, [r7, #4]
 8001656:	687b      	ldr	r3, [r7, #4]
	__HAL_UART_ENABLE_IT(&DBUS_HUART, UART_IT_IDLE);
 8001658:	4b08      	ldr	r3, [pc, #32]	; (800167c <dbus_uart_init+0x40>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	68da      	ldr	r2, [r3, #12]
 800165e:	4b07      	ldr	r3, [pc, #28]	; (800167c <dbus_uart_init+0x40>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f042 0210 	orr.w	r2, r2, #16
 8001666:	60da      	str	r2, [r3, #12]

	uart_receive_dma_no_it(&DBUS_HUART, dbus_buf, DBUS_MAX_LEN);
 8001668:	2224      	movs	r2, #36	; 0x24
 800166a:	4905      	ldr	r1, [pc, #20]	; (8001680 <dbus_uart_init+0x44>)
 800166c:	4803      	ldr	r0, [pc, #12]	; (800167c <dbus_uart_init+0x40>)
 800166e:	f7ff fe29 	bl	80012c4 <uart_receive_dma_no_it>
}
 8001672:	bf00      	nop
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	20000348 	.word	0x20000348
 8001680:	20000584 	.word	0x20000584

08001684 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	607b      	str	r3, [r7, #4]
 800168e:	4b10      	ldr	r3, [pc, #64]	; (80016d0 <HAL_MspInit+0x4c>)
 8001690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001692:	4a0f      	ldr	r2, [pc, #60]	; (80016d0 <HAL_MspInit+0x4c>)
 8001694:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001698:	6453      	str	r3, [r2, #68]	; 0x44
 800169a:	4b0d      	ldr	r3, [pc, #52]	; (80016d0 <HAL_MspInit+0x4c>)
 800169c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016a2:	607b      	str	r3, [r7, #4]
 80016a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	603b      	str	r3, [r7, #0]
 80016aa:	4b09      	ldr	r3, [pc, #36]	; (80016d0 <HAL_MspInit+0x4c>)
 80016ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ae:	4a08      	ldr	r2, [pc, #32]	; (80016d0 <HAL_MspInit+0x4c>)
 80016b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016b4:	6413      	str	r3, [r2, #64]	; 0x40
 80016b6:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <HAL_MspInit+0x4c>)
 80016b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016be:	603b      	str	r3, [r7, #0]
 80016c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016c2:	bf00      	nop
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	40023800 	.word	0x40023800

080016d4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b08c      	sub	sp, #48	; 0x30
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016dc:	f107 031c 	add.w	r3, r7, #28
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]
 80016e4:	605a      	str	r2, [r3, #4]
 80016e6:	609a      	str	r2, [r3, #8]
 80016e8:	60da      	str	r2, [r3, #12]
 80016ea:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a52      	ldr	r2, [pc, #328]	; (800183c <HAL_CAN_MspInit+0x168>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d145      	bne.n	8001782 <HAL_CAN_MspInit+0xae>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80016f6:	4b52      	ldr	r3, [pc, #328]	; (8001840 <HAL_CAN_MspInit+0x16c>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	3301      	adds	r3, #1
 80016fc:	4a50      	ldr	r2, [pc, #320]	; (8001840 <HAL_CAN_MspInit+0x16c>)
 80016fe:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001700:	4b4f      	ldr	r3, [pc, #316]	; (8001840 <HAL_CAN_MspInit+0x16c>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2b01      	cmp	r3, #1
 8001706:	d10d      	bne.n	8001724 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001708:	2300      	movs	r3, #0
 800170a:	61bb      	str	r3, [r7, #24]
 800170c:	4b4d      	ldr	r3, [pc, #308]	; (8001844 <HAL_CAN_MspInit+0x170>)
 800170e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001710:	4a4c      	ldr	r2, [pc, #304]	; (8001844 <HAL_CAN_MspInit+0x170>)
 8001712:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001716:	6413      	str	r3, [r2, #64]	; 0x40
 8001718:	4b4a      	ldr	r3, [pc, #296]	; (8001844 <HAL_CAN_MspInit+0x170>)
 800171a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001720:	61bb      	str	r3, [r7, #24]
 8001722:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001724:	2300      	movs	r3, #0
 8001726:	617b      	str	r3, [r7, #20]
 8001728:	4b46      	ldr	r3, [pc, #280]	; (8001844 <HAL_CAN_MspInit+0x170>)
 800172a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172c:	4a45      	ldr	r2, [pc, #276]	; (8001844 <HAL_CAN_MspInit+0x170>)
 800172e:	f043 0308 	orr.w	r3, r3, #8
 8001732:	6313      	str	r3, [r2, #48]	; 0x30
 8001734:	4b43      	ldr	r3, [pc, #268]	; (8001844 <HAL_CAN_MspInit+0x170>)
 8001736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001738:	f003 0308 	and.w	r3, r3, #8
 800173c:	617b      	str	r3, [r7, #20]
 800173e:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001740:	2303      	movs	r3, #3
 8001742:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001744:	2302      	movs	r3, #2
 8001746:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001748:	2300      	movs	r3, #0
 800174a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800174c:	2303      	movs	r3, #3
 800174e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001750:	2309      	movs	r3, #9
 8001752:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001754:	f107 031c 	add.w	r3, r7, #28
 8001758:	4619      	mov	r1, r3
 800175a:	483b      	ldr	r0, [pc, #236]	; (8001848 <HAL_CAN_MspInit+0x174>)
 800175c:	f001 ff02 	bl	8003564 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8001760:	2200      	movs	r2, #0
 8001762:	2100      	movs	r1, #0
 8001764:	2013      	movs	r0, #19
 8001766:	f001 fae0 	bl	8002d2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 800176a:	2013      	movs	r0, #19
 800176c:	f001 faf9 	bl	8002d62 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001770:	2200      	movs	r2, #0
 8001772:	2100      	movs	r1, #0
 8001774:	2014      	movs	r0, #20
 8001776:	f001 fad8 	bl	8002d2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800177a:	2014      	movs	r0, #20
 800177c:	f001 faf1 	bl	8002d62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8001780:	e058      	b.n	8001834 <HAL_CAN_MspInit+0x160>
  else if(hcan->Instance==CAN2)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a31      	ldr	r2, [pc, #196]	; (800184c <HAL_CAN_MspInit+0x178>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d153      	bne.n	8001834 <HAL_CAN_MspInit+0x160>
    __HAL_RCC_CAN2_CLK_ENABLE();
 800178c:	2300      	movs	r3, #0
 800178e:	613b      	str	r3, [r7, #16]
 8001790:	4b2c      	ldr	r3, [pc, #176]	; (8001844 <HAL_CAN_MspInit+0x170>)
 8001792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001794:	4a2b      	ldr	r2, [pc, #172]	; (8001844 <HAL_CAN_MspInit+0x170>)
 8001796:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800179a:	6413      	str	r3, [r2, #64]	; 0x40
 800179c:	4b29      	ldr	r3, [pc, #164]	; (8001844 <HAL_CAN_MspInit+0x170>)
 800179e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80017a4:	613b      	str	r3, [r7, #16]
 80017a6:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80017a8:	4b25      	ldr	r3, [pc, #148]	; (8001840 <HAL_CAN_MspInit+0x16c>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	3301      	adds	r3, #1
 80017ae:	4a24      	ldr	r2, [pc, #144]	; (8001840 <HAL_CAN_MspInit+0x16c>)
 80017b0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80017b2:	4b23      	ldr	r3, [pc, #140]	; (8001840 <HAL_CAN_MspInit+0x16c>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d10d      	bne.n	80017d6 <HAL_CAN_MspInit+0x102>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80017ba:	2300      	movs	r3, #0
 80017bc:	60fb      	str	r3, [r7, #12]
 80017be:	4b21      	ldr	r3, [pc, #132]	; (8001844 <HAL_CAN_MspInit+0x170>)
 80017c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c2:	4a20      	ldr	r2, [pc, #128]	; (8001844 <HAL_CAN_MspInit+0x170>)
 80017c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017c8:	6413      	str	r3, [r2, #64]	; 0x40
 80017ca:	4b1e      	ldr	r3, [pc, #120]	; (8001844 <HAL_CAN_MspInit+0x170>)
 80017cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017d2:	60fb      	str	r3, [r7, #12]
 80017d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	60bb      	str	r3, [r7, #8]
 80017da:	4b1a      	ldr	r3, [pc, #104]	; (8001844 <HAL_CAN_MspInit+0x170>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017de:	4a19      	ldr	r2, [pc, #100]	; (8001844 <HAL_CAN_MspInit+0x170>)
 80017e0:	f043 0302 	orr.w	r3, r3, #2
 80017e4:	6313      	str	r3, [r2, #48]	; 0x30
 80017e6:	4b17      	ldr	r3, [pc, #92]	; (8001844 <HAL_CAN_MspInit+0x170>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	f003 0302 	and.w	r3, r3, #2
 80017ee:	60bb      	str	r3, [r7, #8]
 80017f0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80017f2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80017f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f8:	2302      	movs	r3, #2
 80017fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fc:	2300      	movs	r3, #0
 80017fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001800:	2303      	movs	r3, #3
 8001802:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001804:	2309      	movs	r3, #9
 8001806:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001808:	f107 031c 	add.w	r3, r7, #28
 800180c:	4619      	mov	r1, r3
 800180e:	4810      	ldr	r0, [pc, #64]	; (8001850 <HAL_CAN_MspInit+0x17c>)
 8001810:	f001 fea8 	bl	8003564 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 0, 0);
 8001814:	2200      	movs	r2, #0
 8001816:	2100      	movs	r1, #0
 8001818:	203f      	movs	r0, #63	; 0x3f
 800181a:	f001 fa86 	bl	8002d2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 800181e:	203f      	movs	r0, #63	; 0x3f
 8001820:	f001 fa9f 	bl	8002d62 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8001824:	2200      	movs	r2, #0
 8001826:	2100      	movs	r1, #0
 8001828:	2040      	movs	r0, #64	; 0x40
 800182a:	f001 fa7e 	bl	8002d2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 800182e:	2040      	movs	r0, #64	; 0x40
 8001830:	f001 fa97 	bl	8002d62 <HAL_NVIC_EnableIRQ>
}
 8001834:	bf00      	nop
 8001836:	3730      	adds	r7, #48	; 0x30
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	40006400 	.word	0x40006400
 8001840:	20000028 	.word	0x20000028
 8001844:	40023800 	.word	0x40023800
 8001848:	40020c00 	.word	0x40020c00
 800184c:	40006800 	.word	0x40006800
 8001850:	40020400 	.word	0x40020400

08001854 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b08a      	sub	sp, #40	; 0x28
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800185c:	f107 0314 	add.w	r3, r7, #20
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	605a      	str	r2, [r3, #4]
 8001866:	609a      	str	r2, [r3, #8]
 8001868:	60da      	str	r2, [r3, #12]
 800186a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a29      	ldr	r2, [pc, #164]	; (8001918 <HAL_I2C_MspInit+0xc4>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d14b      	bne.n	800190e <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	613b      	str	r3, [r7, #16]
 800187a:	4b28      	ldr	r3, [pc, #160]	; (800191c <HAL_I2C_MspInit+0xc8>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	4a27      	ldr	r2, [pc, #156]	; (800191c <HAL_I2C_MspInit+0xc8>)
 8001880:	f043 0301 	orr.w	r3, r3, #1
 8001884:	6313      	str	r3, [r2, #48]	; 0x30
 8001886:	4b25      	ldr	r3, [pc, #148]	; (800191c <HAL_I2C_MspInit+0xc8>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	613b      	str	r3, [r7, #16]
 8001890:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001892:	2300      	movs	r3, #0
 8001894:	60fb      	str	r3, [r7, #12]
 8001896:	4b21      	ldr	r3, [pc, #132]	; (800191c <HAL_I2C_MspInit+0xc8>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	4a20      	ldr	r2, [pc, #128]	; (800191c <HAL_I2C_MspInit+0xc8>)
 800189c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018a0:	6313      	str	r3, [r2, #48]	; 0x30
 80018a2:	4b1e      	ldr	r3, [pc, #120]	; (800191c <HAL_I2C_MspInit+0xc8>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018aa:	60fb      	str	r3, [r7, #12]
 80018ac:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PA9     ------> I2C3_SMBA
    PA8     ------> I2C3_SCL
    PH8     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 80018ae:	f44f 7340 	mov.w	r3, #768	; 0x300
 80018b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018b4:	2312      	movs	r3, #18
 80018b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b8:	2300      	movs	r3, #0
 80018ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018bc:	2303      	movs	r3, #3
 80018be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80018c0:	2304      	movs	r3, #4
 80018c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c4:	f107 0314 	add.w	r3, r7, #20
 80018c8:	4619      	mov	r1, r3
 80018ca:	4815      	ldr	r0, [pc, #84]	; (8001920 <HAL_I2C_MspInit+0xcc>)
 80018cc:	f001 fe4a 	bl	8003564 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80018d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018d6:	2312      	movs	r3, #18
 80018d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018da:	2300      	movs	r3, #0
 80018dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018de:	2303      	movs	r3, #3
 80018e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80018e2:	2304      	movs	r3, #4
 80018e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80018e6:	f107 0314 	add.w	r3, r7, #20
 80018ea:	4619      	mov	r1, r3
 80018ec:	480d      	ldr	r0, [pc, #52]	; (8001924 <HAL_I2C_MspInit+0xd0>)
 80018ee:	f001 fe39 	bl	8003564 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80018f2:	2300      	movs	r3, #0
 80018f4:	60bb      	str	r3, [r7, #8]
 80018f6:	4b09      	ldr	r3, [pc, #36]	; (800191c <HAL_I2C_MspInit+0xc8>)
 80018f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fa:	4a08      	ldr	r2, [pc, #32]	; (800191c <HAL_I2C_MspInit+0xc8>)
 80018fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001900:	6413      	str	r3, [r2, #64]	; 0x40
 8001902:	4b06      	ldr	r3, [pc, #24]	; (800191c <HAL_I2C_MspInit+0xc8>)
 8001904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001906:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800190a:	60bb      	str	r3, [r7, #8]
 800190c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800190e:	bf00      	nop
 8001910:	3728      	adds	r7, #40	; 0x28
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	40005c00 	.word	0x40005c00
 800191c:	40023800 	.word	0x40023800
 8001920:	40020000 	.word	0x40020000
 8001924:	40021c00 	.word	0x40021c00

08001928 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b08a      	sub	sp, #40	; 0x28
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001930:	f107 0314 	add.w	r3, r7, #20
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	605a      	str	r2, [r3, #4]
 800193a:	609a      	str	r2, [r3, #8]
 800193c:	60da      	str	r2, [r3, #12]
 800193e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a19      	ldr	r2, [pc, #100]	; (80019ac <HAL_SPI_MspInit+0x84>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d12c      	bne.n	80019a4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800194a:	2300      	movs	r3, #0
 800194c:	613b      	str	r3, [r7, #16]
 800194e:	4b18      	ldr	r3, [pc, #96]	; (80019b0 <HAL_SPI_MspInit+0x88>)
 8001950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001952:	4a17      	ldr	r2, [pc, #92]	; (80019b0 <HAL_SPI_MspInit+0x88>)
 8001954:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001958:	6453      	str	r3, [r2, #68]	; 0x44
 800195a:	4b15      	ldr	r3, [pc, #84]	; (80019b0 <HAL_SPI_MspInit+0x88>)
 800195c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800195e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001962:	613b      	str	r3, [r7, #16]
 8001964:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001966:	2300      	movs	r3, #0
 8001968:	60fb      	str	r3, [r7, #12]
 800196a:	4b11      	ldr	r3, [pc, #68]	; (80019b0 <HAL_SPI_MspInit+0x88>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	4a10      	ldr	r2, [pc, #64]	; (80019b0 <HAL_SPI_MspInit+0x88>)
 8001970:	f043 0320 	orr.w	r3, r3, #32
 8001974:	6313      	str	r3, [r2, #48]	; 0x30
 8001976:	4b0e      	ldr	r3, [pc, #56]	; (80019b0 <HAL_SPI_MspInit+0x88>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197a:	f003 0320 	and.w	r3, r3, #32
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF9     ------> SPI5_MOSI
    PF8     ------> SPI5_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_8;
 8001982:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001986:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001988:	2302      	movs	r3, #2
 800198a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198c:	2300      	movs	r3, #0
 800198e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001990:	2303      	movs	r3, #3
 8001992:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001994:	2305      	movs	r3, #5
 8001996:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001998:	f107 0314 	add.w	r3, r7, #20
 800199c:	4619      	mov	r1, r3
 800199e:	4805      	ldr	r0, [pc, #20]	; (80019b4 <HAL_SPI_MspInit+0x8c>)
 80019a0:	f001 fde0 	bl	8003564 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 80019a4:	bf00      	nop
 80019a6:	3728      	adds	r7, #40	; 0x28
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	40015000 	.word	0x40015000
 80019b0:	40023800 	.word	0x40023800
 80019b4:	40021400 	.word	0x40021400

080019b8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b089      	sub	sp, #36	; 0x24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019c8:	d10e      	bne.n	80019e8 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019ca:	2300      	movs	r3, #0
 80019cc:	61fb      	str	r3, [r7, #28]
 80019ce:	4b31      	ldr	r3, [pc, #196]	; (8001a94 <HAL_TIM_PWM_MspInit+0xdc>)
 80019d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d2:	4a30      	ldr	r2, [pc, #192]	; (8001a94 <HAL_TIM_PWM_MspInit+0xdc>)
 80019d4:	f043 0301 	orr.w	r3, r3, #1
 80019d8:	6413      	str	r3, [r2, #64]	; 0x40
 80019da:	4b2e      	ldr	r3, [pc, #184]	; (8001a94 <HAL_TIM_PWM_MspInit+0xdc>)
 80019dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019de:	f003 0301 	and.w	r3, r3, #1
 80019e2:	61fb      	str	r3, [r7, #28]
 80019e4:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 80019e6:	e04e      	b.n	8001a86 <HAL_TIM_PWM_MspInit+0xce>
  else if(htim_pwm->Instance==TIM3)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a2a      	ldr	r2, [pc, #168]	; (8001a98 <HAL_TIM_PWM_MspInit+0xe0>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d10e      	bne.n	8001a10 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019f2:	2300      	movs	r3, #0
 80019f4:	61bb      	str	r3, [r7, #24]
 80019f6:	4b27      	ldr	r3, [pc, #156]	; (8001a94 <HAL_TIM_PWM_MspInit+0xdc>)
 80019f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fa:	4a26      	ldr	r2, [pc, #152]	; (8001a94 <HAL_TIM_PWM_MspInit+0xdc>)
 80019fc:	f043 0302 	orr.w	r3, r3, #2
 8001a00:	6413      	str	r3, [r2, #64]	; 0x40
 8001a02:	4b24      	ldr	r3, [pc, #144]	; (8001a94 <HAL_TIM_PWM_MspInit+0xdc>)
 8001a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a06:	f003 0302 	and.w	r3, r3, #2
 8001a0a:	61bb      	str	r3, [r7, #24]
 8001a0c:	69bb      	ldr	r3, [r7, #24]
}
 8001a0e:	e03a      	b.n	8001a86 <HAL_TIM_PWM_MspInit+0xce>
  else if(htim_pwm->Instance==TIM4)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a21      	ldr	r2, [pc, #132]	; (8001a9c <HAL_TIM_PWM_MspInit+0xe4>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d10e      	bne.n	8001a38 <HAL_TIM_PWM_MspInit+0x80>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	617b      	str	r3, [r7, #20]
 8001a1e:	4b1d      	ldr	r3, [pc, #116]	; (8001a94 <HAL_TIM_PWM_MspInit+0xdc>)
 8001a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a22:	4a1c      	ldr	r2, [pc, #112]	; (8001a94 <HAL_TIM_PWM_MspInit+0xdc>)
 8001a24:	f043 0304 	orr.w	r3, r3, #4
 8001a28:	6413      	str	r3, [r2, #64]	; 0x40
 8001a2a:	4b1a      	ldr	r3, [pc, #104]	; (8001a94 <HAL_TIM_PWM_MspInit+0xdc>)
 8001a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2e:	f003 0304 	and.w	r3, r3, #4
 8001a32:	617b      	str	r3, [r7, #20]
 8001a34:	697b      	ldr	r3, [r7, #20]
}
 8001a36:	e026      	b.n	8001a86 <HAL_TIM_PWM_MspInit+0xce>
  else if(htim_pwm->Instance==TIM5)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a18      	ldr	r2, [pc, #96]	; (8001aa0 <HAL_TIM_PWM_MspInit+0xe8>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d10e      	bne.n	8001a60 <HAL_TIM_PWM_MspInit+0xa8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001a42:	2300      	movs	r3, #0
 8001a44:	613b      	str	r3, [r7, #16]
 8001a46:	4b13      	ldr	r3, [pc, #76]	; (8001a94 <HAL_TIM_PWM_MspInit+0xdc>)
 8001a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4a:	4a12      	ldr	r2, [pc, #72]	; (8001a94 <HAL_TIM_PWM_MspInit+0xdc>)
 8001a4c:	f043 0308 	orr.w	r3, r3, #8
 8001a50:	6413      	str	r3, [r2, #64]	; 0x40
 8001a52:	4b10      	ldr	r3, [pc, #64]	; (8001a94 <HAL_TIM_PWM_MspInit+0xdc>)
 8001a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a56:	f003 0308 	and.w	r3, r3, #8
 8001a5a:	613b      	str	r3, [r7, #16]
 8001a5c:	693b      	ldr	r3, [r7, #16]
}
 8001a5e:	e012      	b.n	8001a86 <HAL_TIM_PWM_MspInit+0xce>
  else if(htim_pwm->Instance==TIM12)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a0f      	ldr	r2, [pc, #60]	; (8001aa4 <HAL_TIM_PWM_MspInit+0xec>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d10d      	bne.n	8001a86 <HAL_TIM_PWM_MspInit+0xce>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	60fb      	str	r3, [r7, #12]
 8001a6e:	4b09      	ldr	r3, [pc, #36]	; (8001a94 <HAL_TIM_PWM_MspInit+0xdc>)
 8001a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a72:	4a08      	ldr	r2, [pc, #32]	; (8001a94 <HAL_TIM_PWM_MspInit+0xdc>)
 8001a74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a78:	6413      	str	r3, [r2, #64]	; 0x40
 8001a7a:	4b06      	ldr	r3, [pc, #24]	; (8001a94 <HAL_TIM_PWM_MspInit+0xdc>)
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a82:	60fb      	str	r3, [r7, #12]
 8001a84:	68fb      	ldr	r3, [r7, #12]
}
 8001a86:	bf00      	nop
 8001a88:	3724      	adds	r7, #36	; 0x24
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	40023800 	.word	0x40023800
 8001a98:	40000400 	.word	0x40000400
 8001a9c:	40000800 	.word	0x40000800
 8001aa0:	40000c00 	.word	0x40000c00
 8001aa4:	40001800 	.word	0x40001800

08001aa8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b08c      	sub	sp, #48	; 0x30
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab0:	f107 031c 	add.w	r3, r7, #28
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	601a      	str	r2, [r3, #0]
 8001ab8:	605a      	str	r2, [r3, #4]
 8001aba:	609a      	str	r2, [r3, #8]
 8001abc:	60da      	str	r2, [r3, #12]
 8001abe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ac8:	d11e      	bne.n	8001b08 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aca:	2300      	movs	r3, #0
 8001acc:	61bb      	str	r3, [r7, #24]
 8001ace:	4b59      	ldr	r3, [pc, #356]	; (8001c34 <HAL_TIM_MspPostInit+0x18c>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad2:	4a58      	ldr	r2, [pc, #352]	; (8001c34 <HAL_TIM_MspPostInit+0x18c>)
 8001ad4:	f043 0301 	orr.w	r3, r3, #1
 8001ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8001ada:	4b56      	ldr	r3, [pc, #344]	; (8001c34 <HAL_TIM_MspPostInit+0x18c>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	f003 0301 	and.w	r3, r3, #1
 8001ae2:	61bb      	str	r3, [r7, #24]
 8001ae4:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001ae6:	230c      	movs	r3, #12
 8001ae8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aea:	2302      	movs	r3, #2
 8001aec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aee:	2300      	movs	r3, #0
 8001af0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af2:	2300      	movs	r3, #0
 8001af4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001af6:	2301      	movs	r3, #1
 8001af8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001afa:	f107 031c 	add.w	r3, r7, #28
 8001afe:	4619      	mov	r1, r3
 8001b00:	484d      	ldr	r0, [pc, #308]	; (8001c38 <HAL_TIM_MspPostInit+0x190>)
 8001b02:	f001 fd2f 	bl	8003564 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8001b06:	e090      	b.n	8001c2a <HAL_TIM_MspPostInit+0x182>
  else if(htim->Instance==TIM3)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a4b      	ldr	r2, [pc, #300]	; (8001c3c <HAL_TIM_MspPostInit+0x194>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d11e      	bne.n	8001b50 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b12:	2300      	movs	r3, #0
 8001b14:	617b      	str	r3, [r7, #20]
 8001b16:	4b47      	ldr	r3, [pc, #284]	; (8001c34 <HAL_TIM_MspPostInit+0x18c>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	4a46      	ldr	r2, [pc, #280]	; (8001c34 <HAL_TIM_MspPostInit+0x18c>)
 8001b1c:	f043 0302 	orr.w	r3, r3, #2
 8001b20:	6313      	str	r3, [r2, #48]	; 0x30
 8001b22:	4b44      	ldr	r3, [pc, #272]	; (8001c34 <HAL_TIM_MspPostInit+0x18c>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	f003 0302 	and.w	r3, r3, #2
 8001b2a:	617b      	str	r3, [r7, #20]
 8001b2c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001b2e:	2320      	movs	r3, #32
 8001b30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b32:	2302      	movs	r3, #2
 8001b34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b36:	2300      	movs	r3, #0
 8001b38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b3e:	2302      	movs	r3, #2
 8001b40:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b42:	f107 031c 	add.w	r3, r7, #28
 8001b46:	4619      	mov	r1, r3
 8001b48:	483d      	ldr	r0, [pc, #244]	; (8001c40 <HAL_TIM_MspPostInit+0x198>)
 8001b4a:	f001 fd0b 	bl	8003564 <HAL_GPIO_Init>
}
 8001b4e:	e06c      	b.n	8001c2a <HAL_TIM_MspPostInit+0x182>
  else if(htim->Instance==TIM4)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a3b      	ldr	r2, [pc, #236]	; (8001c44 <HAL_TIM_MspPostInit+0x19c>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d11f      	bne.n	8001b9a <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	613b      	str	r3, [r7, #16]
 8001b5e:	4b35      	ldr	r3, [pc, #212]	; (8001c34 <HAL_TIM_MspPostInit+0x18c>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b62:	4a34      	ldr	r2, [pc, #208]	; (8001c34 <HAL_TIM_MspPostInit+0x18c>)
 8001b64:	f043 0308 	orr.w	r3, r3, #8
 8001b68:	6313      	str	r3, [r2, #48]	; 0x30
 8001b6a:	4b32      	ldr	r3, [pc, #200]	; (8001c34 <HAL_TIM_MspPostInit+0x18c>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6e:	f003 0308 	and.w	r3, r3, #8
 8001b72:	613b      	str	r3, [r7, #16]
 8001b74:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12;
 8001b76:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001b7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b80:	2300      	movs	r3, #0
 8001b82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b84:	2300      	movs	r3, #0
 8001b86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001b88:	2302      	movs	r3, #2
 8001b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b8c:	f107 031c 	add.w	r3, r7, #28
 8001b90:	4619      	mov	r1, r3
 8001b92:	482d      	ldr	r0, [pc, #180]	; (8001c48 <HAL_TIM_MspPostInit+0x1a0>)
 8001b94:	f001 fce6 	bl	8003564 <HAL_GPIO_Init>
}
 8001b98:	e047      	b.n	8001c2a <HAL_TIM_MspPostInit+0x182>
  else if(htim->Instance==TIM5)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a2b      	ldr	r2, [pc, #172]	; (8001c4c <HAL_TIM_MspPostInit+0x1a4>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d11f      	bne.n	8001be4 <HAL_TIM_MspPostInit+0x13c>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	60fb      	str	r3, [r7, #12]
 8001ba8:	4b22      	ldr	r3, [pc, #136]	; (8001c34 <HAL_TIM_MspPostInit+0x18c>)
 8001baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bac:	4a21      	ldr	r2, [pc, #132]	; (8001c34 <HAL_TIM_MspPostInit+0x18c>)
 8001bae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bb2:	6313      	str	r3, [r2, #48]	; 0x30
 8001bb4:	4b1f      	ldr	r3, [pc, #124]	; (8001c34 <HAL_TIM_MspPostInit+0x18c>)
 8001bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bbc:	60fb      	str	r3, [r7, #12]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10;
 8001bc0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001bc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001bd6:	f107 031c 	add.w	r3, r7, #28
 8001bda:	4619      	mov	r1, r3
 8001bdc:	481c      	ldr	r0, [pc, #112]	; (8001c50 <HAL_TIM_MspPostInit+0x1a8>)
 8001bde:	f001 fcc1 	bl	8003564 <HAL_GPIO_Init>
}
 8001be2:	e022      	b.n	8001c2a <HAL_TIM_MspPostInit+0x182>
  else if(htim->Instance==TIM12)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a1a      	ldr	r2, [pc, #104]	; (8001c54 <HAL_TIM_MspPostInit+0x1ac>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d11d      	bne.n	8001c2a <HAL_TIM_MspPostInit+0x182>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bee:	2300      	movs	r3, #0
 8001bf0:	60bb      	str	r3, [r7, #8]
 8001bf2:	4b10      	ldr	r3, [pc, #64]	; (8001c34 <HAL_TIM_MspPostInit+0x18c>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	4a0f      	ldr	r2, [pc, #60]	; (8001c34 <HAL_TIM_MspPostInit+0x18c>)
 8001bf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bfe:	4b0d      	ldr	r3, [pc, #52]	; (8001c34 <HAL_TIM_MspPostInit+0x18c>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c06:	60bb      	str	r3, [r7, #8]
 8001c08:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c0a:	2340      	movs	r3, #64	; 0x40
 8001c0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c0e:	2302      	movs	r3, #2
 8001c10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c12:	2300      	movs	r3, #0
 8001c14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c16:	2300      	movs	r3, #0
 8001c18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001c1a:	2309      	movs	r3, #9
 8001c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001c1e:	f107 031c 	add.w	r3, r7, #28
 8001c22:	4619      	mov	r1, r3
 8001c24:	480a      	ldr	r0, [pc, #40]	; (8001c50 <HAL_TIM_MspPostInit+0x1a8>)
 8001c26:	f001 fc9d 	bl	8003564 <HAL_GPIO_Init>
}
 8001c2a:	bf00      	nop
 8001c2c:	3730      	adds	r7, #48	; 0x30
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	40023800 	.word	0x40023800
 8001c38:	40020000 	.word	0x40020000
 8001c3c:	40000400 	.word	0x40000400
 8001c40:	40020400 	.word	0x40020400
 8001c44:	40000800 	.word	0x40000800
 8001c48:	40020c00 	.word	0x40020c00
 8001c4c:	40000c00 	.word	0x40000c00
 8001c50:	40021c00 	.word	0x40021c00
 8001c54:	40001800 	.word	0x40001800

08001c58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b092      	sub	sp, #72	; 0x48
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c60:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	605a      	str	r2, [r3, #4]
 8001c6a:	609a      	str	r2, [r3, #8]
 8001c6c:	60da      	str	r2, [r3, #12]
 8001c6e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a6a      	ldr	r2, [pc, #424]	; (8001e20 <HAL_UART_MspInit+0x1c8>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d134      	bne.n	8001ce4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	633b      	str	r3, [r7, #48]	; 0x30
 8001c7e:	4b69      	ldr	r3, [pc, #420]	; (8001e24 <HAL_UART_MspInit+0x1cc>)
 8001c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c82:	4a68      	ldr	r2, [pc, #416]	; (8001e24 <HAL_UART_MspInit+0x1cc>)
 8001c84:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001c88:	6413      	str	r3, [r2, #64]	; 0x40
 8001c8a:	4b66      	ldr	r3, [pc, #408]	; (8001e24 <HAL_UART_MspInit+0x1cc>)
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c92:	633b      	str	r3, [r7, #48]	; 0x30
 8001c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c96:	2300      	movs	r3, #0
 8001c98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c9a:	4b62      	ldr	r3, [pc, #392]	; (8001e24 <HAL_UART_MspInit+0x1cc>)
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9e:	4a61      	ldr	r2, [pc, #388]	; (8001e24 <HAL_UART_MspInit+0x1cc>)
 8001ca0:	f043 0301 	orr.w	r3, r3, #1
 8001ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ca6:	4b5f      	ldr	r3, [pc, #380]	; (8001e24 <HAL_UART_MspInit+0x1cc>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001caa:	f003 0301 	and.w	r3, r3, #1
 8001cae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART4 GPIO Configuration
    PA1     ------> UART4_RX
    PA0/WKUP     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001cc2:	2308      	movs	r3, #8
 8001cc4:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001cca:	4619      	mov	r1, r3
 8001ccc:	4856      	ldr	r0, [pc, #344]	; (8001e28 <HAL_UART_MspInit+0x1d0>)
 8001cce:	f001 fc49 	bl	8003564 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	2034      	movs	r0, #52	; 0x34
 8001cd8:	f001 f827 	bl	8002d2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001cdc:	2034      	movs	r0, #52	; 0x34
 8001cde:	f001 f840 	bl	8002d62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001ce2:	e180      	b.n	8001fe6 <HAL_UART_MspInit+0x38e>
  else if(huart->Instance==UART7)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a50      	ldr	r2, [pc, #320]	; (8001e2c <HAL_UART_MspInit+0x1d4>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d12d      	bne.n	8001d4a <HAL_UART_MspInit+0xf2>
    __HAL_RCC_UART7_CLK_ENABLE();
 8001cee:	2300      	movs	r3, #0
 8001cf0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cf2:	4b4c      	ldr	r3, [pc, #304]	; (8001e24 <HAL_UART_MspInit+0x1cc>)
 8001cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf6:	4a4b      	ldr	r2, [pc, #300]	; (8001e24 <HAL_UART_MspInit+0x1cc>)
 8001cf8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001cfc:	6413      	str	r3, [r2, #64]	; 0x40
 8001cfe:	4b49      	ldr	r3, [pc, #292]	; (8001e24 <HAL_UART_MspInit+0x1cc>)
 8001d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d02:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001d06:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	627b      	str	r3, [r7, #36]	; 0x24
 8001d0e:	4b45      	ldr	r3, [pc, #276]	; (8001e24 <HAL_UART_MspInit+0x1cc>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d12:	4a44      	ldr	r2, [pc, #272]	; (8001e24 <HAL_UART_MspInit+0x1cc>)
 8001d14:	f043 0310 	orr.w	r3, r3, #16
 8001d18:	6313      	str	r3, [r2, #48]	; 0x30
 8001d1a:	4b42      	ldr	r3, [pc, #264]	; (8001e24 <HAL_UART_MspInit+0x1cc>)
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1e:	f003 0310 	and.w	r3, r3, #16
 8001d22:	627b      	str	r3, [r7, #36]	; 0x24
 8001d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7;
 8001d26:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001d2a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d30:	2300      	movs	r3, #0
 8001d32:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d34:	2303      	movs	r3, #3
 8001d36:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8001d38:	2308      	movs	r3, #8
 8001d3a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d3c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d40:	4619      	mov	r1, r3
 8001d42:	483b      	ldr	r0, [pc, #236]	; (8001e30 <HAL_UART_MspInit+0x1d8>)
 8001d44:	f001 fc0e 	bl	8003564 <HAL_GPIO_Init>
}
 8001d48:	e14d      	b.n	8001fe6 <HAL_UART_MspInit+0x38e>
  else if(huart->Instance==USART1)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a39      	ldr	r2, [pc, #228]	; (8001e34 <HAL_UART_MspInit+0x1dc>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d177      	bne.n	8001e44 <HAL_UART_MspInit+0x1ec>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d54:	2300      	movs	r3, #0
 8001d56:	623b      	str	r3, [r7, #32]
 8001d58:	4b32      	ldr	r3, [pc, #200]	; (8001e24 <HAL_UART_MspInit+0x1cc>)
 8001d5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d5c:	4a31      	ldr	r2, [pc, #196]	; (8001e24 <HAL_UART_MspInit+0x1cc>)
 8001d5e:	f043 0310 	orr.w	r3, r3, #16
 8001d62:	6453      	str	r3, [r2, #68]	; 0x44
 8001d64:	4b2f      	ldr	r3, [pc, #188]	; (8001e24 <HAL_UART_MspInit+0x1cc>)
 8001d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d68:	f003 0310 	and.w	r3, r3, #16
 8001d6c:	623b      	str	r3, [r7, #32]
 8001d6e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d70:	2300      	movs	r3, #0
 8001d72:	61fb      	str	r3, [r7, #28]
 8001d74:	4b2b      	ldr	r3, [pc, #172]	; (8001e24 <HAL_UART_MspInit+0x1cc>)
 8001d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d78:	4a2a      	ldr	r2, [pc, #168]	; (8001e24 <HAL_UART_MspInit+0x1cc>)
 8001d7a:	f043 0302 	orr.w	r3, r3, #2
 8001d7e:	6313      	str	r3, [r2, #48]	; 0x30
 8001d80:	4b28      	ldr	r3, [pc, #160]	; (8001e24 <HAL_UART_MspInit+0x1cc>)
 8001d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d84:	f003 0302 	and.w	r3, r3, #2
 8001d88:	61fb      	str	r3, [r7, #28]
 8001d8a:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8001d8c:	23c0      	movs	r3, #192	; 0xc0
 8001d8e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d90:	2302      	movs	r3, #2
 8001d92:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d94:	2300      	movs	r3, #0
 8001d96:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d9c:	2307      	movs	r3, #7
 8001d9e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001da0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001da4:	4619      	mov	r1, r3
 8001da6:	4824      	ldr	r0, [pc, #144]	; (8001e38 <HAL_UART_MspInit+0x1e0>)
 8001da8:	f001 fbdc 	bl	8003564 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001dac:	4b23      	ldr	r3, [pc, #140]	; (8001e3c <HAL_UART_MspInit+0x1e4>)
 8001dae:	4a24      	ldr	r2, [pc, #144]	; (8001e40 <HAL_UART_MspInit+0x1e8>)
 8001db0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001db2:	4b22      	ldr	r3, [pc, #136]	; (8001e3c <HAL_UART_MspInit+0x1e4>)
 8001db4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001db8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001dba:	4b20      	ldr	r3, [pc, #128]	; (8001e3c <HAL_UART_MspInit+0x1e4>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dc0:	4b1e      	ldr	r3, [pc, #120]	; (8001e3c <HAL_UART_MspInit+0x1e4>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001dc6:	4b1d      	ldr	r3, [pc, #116]	; (8001e3c <HAL_UART_MspInit+0x1e4>)
 8001dc8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001dcc:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001dce:	4b1b      	ldr	r3, [pc, #108]	; (8001e3c <HAL_UART_MspInit+0x1e4>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001dd4:	4b19      	ldr	r3, [pc, #100]	; (8001e3c <HAL_UART_MspInit+0x1e4>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001dda:	4b18      	ldr	r3, [pc, #96]	; (8001e3c <HAL_UART_MspInit+0x1e4>)
 8001ddc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001de0:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001de2:	4b16      	ldr	r3, [pc, #88]	; (8001e3c <HAL_UART_MspInit+0x1e4>)
 8001de4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001de8:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001dea:	4b14      	ldr	r3, [pc, #80]	; (8001e3c <HAL_UART_MspInit+0x1e4>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001df0:	4812      	ldr	r0, [pc, #72]	; (8001e3c <HAL_UART_MspInit+0x1e4>)
 8001df2:	f000 ffd1 	bl	8002d98 <HAL_DMA_Init>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <HAL_UART_MspInit+0x1a8>
      Error_Handler();
 8001dfc:	f7ff f9d8 	bl	80011b0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	4a0e      	ldr	r2, [pc, #56]	; (8001e3c <HAL_UART_MspInit+0x1e4>)
 8001e04:	639a      	str	r2, [r3, #56]	; 0x38
 8001e06:	4a0d      	ldr	r2, [pc, #52]	; (8001e3c <HAL_UART_MspInit+0x1e4>)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	2100      	movs	r1, #0
 8001e10:	2025      	movs	r0, #37	; 0x25
 8001e12:	f000 ff8a 	bl	8002d2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001e16:	2025      	movs	r0, #37	; 0x25
 8001e18:	f000 ffa3 	bl	8002d62 <HAL_NVIC_EnableIRQ>
}
 8001e1c:	e0e3      	b.n	8001fe6 <HAL_UART_MspInit+0x38e>
 8001e1e:	bf00      	nop
 8001e20:	40004c00 	.word	0x40004c00
 8001e24:	40023800 	.word	0x40023800
 8001e28:	40020000 	.word	0x40020000
 8001e2c:	40007800 	.word	0x40007800
 8001e30:	40021000 	.word	0x40021000
 8001e34:	40011000 	.word	0x40011000
 8001e38:	40020400 	.word	0x40020400
 8001e3c:	20000288 	.word	0x20000288
 8001e40:	40026440 	.word	0x40026440
  else if(huart->Instance==USART2)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a69      	ldr	r2, [pc, #420]	; (8001ff0 <HAL_UART_MspInit+0x398>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	f040 8091 	bne.w	8001f72 <HAL_UART_MspInit+0x31a>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e50:	2300      	movs	r3, #0
 8001e52:	61bb      	str	r3, [r7, #24]
 8001e54:	4b67      	ldr	r3, [pc, #412]	; (8001ff4 <HAL_UART_MspInit+0x39c>)
 8001e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e58:	4a66      	ldr	r2, [pc, #408]	; (8001ff4 <HAL_UART_MspInit+0x39c>)
 8001e5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e5e:	6413      	str	r3, [r2, #64]	; 0x40
 8001e60:	4b64      	ldr	r3, [pc, #400]	; (8001ff4 <HAL_UART_MspInit+0x39c>)
 8001e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e68:	61bb      	str	r3, [r7, #24]
 8001e6a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	617b      	str	r3, [r7, #20]
 8001e70:	4b60      	ldr	r3, [pc, #384]	; (8001ff4 <HAL_UART_MspInit+0x39c>)
 8001e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e74:	4a5f      	ldr	r2, [pc, #380]	; (8001ff4 <HAL_UART_MspInit+0x39c>)
 8001e76:	f043 0308 	orr.w	r3, r3, #8
 8001e7a:	6313      	str	r3, [r2, #48]	; 0x30
 8001e7c:	4b5d      	ldr	r3, [pc, #372]	; (8001ff4 <HAL_UART_MspInit+0x39c>)
 8001e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e80:	f003 0308 	and.w	r3, r3, #8
 8001e84:	617b      	str	r3, [r7, #20]
 8001e86:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5;
 8001e88:	2360      	movs	r3, #96	; 0x60
 8001e8a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e90:	2300      	movs	r3, #0
 8001e92:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e94:	2303      	movs	r3, #3
 8001e96:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e98:	2307      	movs	r3, #7
 8001e9a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e9c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4855      	ldr	r0, [pc, #340]	; (8001ff8 <HAL_UART_MspInit+0x3a0>)
 8001ea4:	f001 fb5e 	bl	8003564 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001ea8:	4b54      	ldr	r3, [pc, #336]	; (8001ffc <HAL_UART_MspInit+0x3a4>)
 8001eaa:	4a55      	ldr	r2, [pc, #340]	; (8002000 <HAL_UART_MspInit+0x3a8>)
 8001eac:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001eae:	4b53      	ldr	r3, [pc, #332]	; (8001ffc <HAL_UART_MspInit+0x3a4>)
 8001eb0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001eb4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001eb6:	4b51      	ldr	r3, [pc, #324]	; (8001ffc <HAL_UART_MspInit+0x3a4>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ebc:	4b4f      	ldr	r3, [pc, #316]	; (8001ffc <HAL_UART_MspInit+0x3a4>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ec2:	4b4e      	ldr	r3, [pc, #312]	; (8001ffc <HAL_UART_MspInit+0x3a4>)
 8001ec4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ec8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001eca:	4b4c      	ldr	r3, [pc, #304]	; (8001ffc <HAL_UART_MspInit+0x3a4>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ed0:	4b4a      	ldr	r3, [pc, #296]	; (8001ffc <HAL_UART_MspInit+0x3a4>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001ed6:	4b49      	ldr	r3, [pc, #292]	; (8001ffc <HAL_UART_MspInit+0x3a4>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001edc:	4b47      	ldr	r3, [pc, #284]	; (8001ffc <HAL_UART_MspInit+0x3a4>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ee2:	4b46      	ldr	r3, [pc, #280]	; (8001ffc <HAL_UART_MspInit+0x3a4>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001ee8:	4844      	ldr	r0, [pc, #272]	; (8001ffc <HAL_UART_MspInit+0x3a4>)
 8001eea:	f000 ff55 	bl	8002d98 <HAL_DMA_Init>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <HAL_UART_MspInit+0x2a0>
      Error_Handler();
 8001ef4:	f7ff f95c 	bl	80011b0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	4a40      	ldr	r2, [pc, #256]	; (8001ffc <HAL_UART_MspInit+0x3a4>)
 8001efc:	639a      	str	r2, [r3, #56]	; 0x38
 8001efe:	4a3f      	ldr	r2, [pc, #252]	; (8001ffc <HAL_UART_MspInit+0x3a4>)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001f04:	4b3f      	ldr	r3, [pc, #252]	; (8002004 <HAL_UART_MspInit+0x3ac>)
 8001f06:	4a40      	ldr	r2, [pc, #256]	; (8002008 <HAL_UART_MspInit+0x3b0>)
 8001f08:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001f0a:	4b3e      	ldr	r3, [pc, #248]	; (8002004 <HAL_UART_MspInit+0x3ac>)
 8001f0c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f10:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f12:	4b3c      	ldr	r3, [pc, #240]	; (8002004 <HAL_UART_MspInit+0x3ac>)
 8001f14:	2240      	movs	r2, #64	; 0x40
 8001f16:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f18:	4b3a      	ldr	r3, [pc, #232]	; (8002004 <HAL_UART_MspInit+0x3ac>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001f1e:	4b39      	ldr	r3, [pc, #228]	; (8002004 <HAL_UART_MspInit+0x3ac>)
 8001f20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f24:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f26:	4b37      	ldr	r3, [pc, #220]	; (8002004 <HAL_UART_MspInit+0x3ac>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f2c:	4b35      	ldr	r3, [pc, #212]	; (8002004 <HAL_UART_MspInit+0x3ac>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001f32:	4b34      	ldr	r3, [pc, #208]	; (8002004 <HAL_UART_MspInit+0x3ac>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001f38:	4b32      	ldr	r3, [pc, #200]	; (8002004 <HAL_UART_MspInit+0x3ac>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f3e:	4b31      	ldr	r3, [pc, #196]	; (8002004 <HAL_UART_MspInit+0x3ac>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001f44:	482f      	ldr	r0, [pc, #188]	; (8002004 <HAL_UART_MspInit+0x3ac>)
 8001f46:	f000 ff27 	bl	8002d98 <HAL_DMA_Init>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d001      	beq.n	8001f54 <HAL_UART_MspInit+0x2fc>
      Error_Handler();
 8001f50:	f7ff f92e 	bl	80011b0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	4a2b      	ldr	r2, [pc, #172]	; (8002004 <HAL_UART_MspInit+0x3ac>)
 8001f58:	635a      	str	r2, [r3, #52]	; 0x34
 8001f5a:	4a2a      	ldr	r2, [pc, #168]	; (8002004 <HAL_UART_MspInit+0x3ac>)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001f60:	2200      	movs	r2, #0
 8001f62:	2100      	movs	r1, #0
 8001f64:	2026      	movs	r0, #38	; 0x26
 8001f66:	f000 fee0 	bl	8002d2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001f6a:	2026      	movs	r0, #38	; 0x26
 8001f6c:	f000 fef9 	bl	8002d62 <HAL_NVIC_EnableIRQ>
}
 8001f70:	e039      	b.n	8001fe6 <HAL_UART_MspInit+0x38e>
  else if(huart->Instance==USART6)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a25      	ldr	r2, [pc, #148]	; (800200c <HAL_UART_MspInit+0x3b4>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d134      	bne.n	8001fe6 <HAL_UART_MspInit+0x38e>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	613b      	str	r3, [r7, #16]
 8001f80:	4b1c      	ldr	r3, [pc, #112]	; (8001ff4 <HAL_UART_MspInit+0x39c>)
 8001f82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f84:	4a1b      	ldr	r2, [pc, #108]	; (8001ff4 <HAL_UART_MspInit+0x39c>)
 8001f86:	f043 0320 	orr.w	r3, r3, #32
 8001f8a:	6453      	str	r3, [r2, #68]	; 0x44
 8001f8c:	4b19      	ldr	r3, [pc, #100]	; (8001ff4 <HAL_UART_MspInit+0x39c>)
 8001f8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f90:	f003 0320 	and.w	r3, r3, #32
 8001f94:	613b      	str	r3, [r7, #16]
 8001f96:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f98:	2300      	movs	r3, #0
 8001f9a:	60fb      	str	r3, [r7, #12]
 8001f9c:	4b15      	ldr	r3, [pc, #84]	; (8001ff4 <HAL_UART_MspInit+0x39c>)
 8001f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa0:	4a14      	ldr	r2, [pc, #80]	; (8001ff4 <HAL_UART_MspInit+0x39c>)
 8001fa2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001fa6:	6313      	str	r3, [r2, #48]	; 0x30
 8001fa8:	4b12      	ldr	r3, [pc, #72]	; (8001ff4 <HAL_UART_MspInit+0x39c>)
 8001faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fb0:	60fb      	str	r3, [r7, #12]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 8001fb4:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8001fb8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fba:	2302      	movs	r3, #2
 8001fbc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001fc6:	2308      	movs	r3, #8
 8001fc8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001fca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001fce:	4619      	mov	r1, r3
 8001fd0:	480f      	ldr	r0, [pc, #60]	; (8002010 <HAL_UART_MspInit+0x3b8>)
 8001fd2:	f001 fac7 	bl	8003564 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	2100      	movs	r1, #0
 8001fda:	2047      	movs	r0, #71	; 0x47
 8001fdc:	f000 fea5 	bl	8002d2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001fe0:	2047      	movs	r0, #71	; 0x47
 8001fe2:	f000 febe 	bl	8002d62 <HAL_NVIC_EnableIRQ>
}
 8001fe6:	bf00      	nop
 8001fe8:	3748      	adds	r7, #72	; 0x48
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	40004400 	.word	0x40004400
 8001ff4:	40023800 	.word	0x40023800
 8001ff8:	40020c00 	.word	0x40020c00
 8001ffc:	20000030 	.word	0x20000030
 8002000:	40026088 	.word	0x40026088
 8002004:	200002e8 	.word	0x200002e8
 8002008:	400260a0 	.word	0x400260a0
 800200c:	40011400 	.word	0x40011400
 8002010:	40021800 	.word	0x40021800

08002014 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002018:	bf00      	nop
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr

08002022 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002022:	b480      	push	{r7}
 8002024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002026:	e7fe      	b.n	8002026 <HardFault_Handler+0x4>

08002028 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800202c:	e7fe      	b.n	800202c <MemManage_Handler+0x4>

0800202e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800202e:	b480      	push	{r7}
 8002030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002032:	e7fe      	b.n	8002032 <BusFault_Handler+0x4>

08002034 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002038:	e7fe      	b.n	8002038 <UsageFault_Handler+0x4>

0800203a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800203a:	b480      	push	{r7}
 800203c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800203e:	bf00      	nop
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800204c:	bf00      	nop
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr

08002056 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002056:	b480      	push	{r7}
 8002058:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800205a:	bf00      	nop
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002068:	f000 f904 	bl	8002274 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800206c:	bf00      	nop
 800206e:	bd80      	pop	{r7, pc}

08002070 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002074:	4802      	ldr	r0, [pc, #8]	; (8002080 <DMA1_Stream5_IRQHandler+0x10>)
 8002076:	f001 f80b 	bl	8003090 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800207a:	bf00      	nop
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	20000030 	.word	0x20000030

08002084 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002088:	4802      	ldr	r0, [pc, #8]	; (8002094 <DMA1_Stream6_IRQHandler+0x10>)
 800208a:	f001 f801 	bl	8003090 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800208e:	bf00      	nop
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	200002e8 	.word	0x200002e8

08002098 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800209c:	4802      	ldr	r0, [pc, #8]	; (80020a8 <CAN1_TX_IRQHandler+0x10>)
 800209e:	f000 fb3a 	bl	8002716 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 80020a2:	bf00      	nop
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	200004a4 	.word	0x200004a4

080020ac <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80020b0:	4802      	ldr	r0, [pc, #8]	; (80020bc <CAN1_RX0_IRQHandler+0x10>)
 80020b2:	f000 fb30 	bl	8002716 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80020b6:	bf00      	nop
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	200004a4 	.word	0x200004a4

080020c0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  uart_receive_handler(&huart1);
 80020c4:	4803      	ldr	r0, [pc, #12]	; (80020d4 <USART1_IRQHandler+0x14>)
 80020c6:	f7ff fa9f 	bl	8001608 <uart_receive_handler>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80020ca:	4802      	ldr	r0, [pc, #8]	; (80020d4 <USART1_IRQHandler+0x14>)
 80020cc:	f002 ff5e 	bl	8004f8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80020d0:	bf00      	nop
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	20000348 	.word	0x20000348

080020d8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80020dc:	4802      	ldr	r0, [pc, #8]	; (80020e8 <USART2_IRQHandler+0x10>)
 80020de:	f002 ff55 	bl	8004f8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80020e2:	bf00      	nop
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	20000460 	.word	0x20000460

080020ec <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80020f0:	4802      	ldr	r0, [pc, #8]	; (80020fc <UART4_IRQHandler+0x10>)
 80020f2:	f002 ff4b 	bl	8004f8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80020f6:	bf00      	nop
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	200003d4 	.word	0x200003d4

08002100 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002104:	4802      	ldr	r0, [pc, #8]	; (8002110 <DMA2_Stream2_IRQHandler+0x10>)
 8002106:	f000 ffc3 	bl	8003090 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800210a:	bf00      	nop
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	20000288 	.word	0x20000288

08002114 <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupts.
  */
void CAN2_TX_IRQHandler(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002118:	4802      	ldr	r0, [pc, #8]	; (8002124 <CAN2_TX_IRQHandler+0x10>)
 800211a:	f000 fafc 	bl	8002716 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 800211e:	bf00      	nop
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	20000260 	.word	0x20000260

08002128 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 800212c:	4802      	ldr	r0, [pc, #8]	; (8002138 <CAN2_RX0_IRQHandler+0x10>)
 800212e:	f000 faf2 	bl	8002716 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8002132:	bf00      	nop
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	20000260 	.word	0x20000260

0800213c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002140:	4802      	ldr	r0, [pc, #8]	; (800214c <USART6_IRQHandler+0x10>)
 8002142:	f002 ff23 	bl	8004f8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002146:	bf00      	nop
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	20000390 	.word	0x20000390

08002150 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002154:	4b08      	ldr	r3, [pc, #32]	; (8002178 <SystemInit+0x28>)
 8002156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800215a:	4a07      	ldr	r2, [pc, #28]	; (8002178 <SystemInit+0x28>)
 800215c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002160:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002164:	4b04      	ldr	r3, [pc, #16]	; (8002178 <SystemInit+0x28>)
 8002166:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800216a:	609a      	str	r2, [r3, #8]
#endif
}
 800216c:	bf00      	nop
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	e000ed00 	.word	0xe000ed00

0800217c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800217c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021b4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002180:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002182:	e003      	b.n	800218c <LoopCopyDataInit>

08002184 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002184:	4b0c      	ldr	r3, [pc, #48]	; (80021b8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002186:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002188:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800218a:	3104      	adds	r1, #4

0800218c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800218c:	480b      	ldr	r0, [pc, #44]	; (80021bc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800218e:	4b0c      	ldr	r3, [pc, #48]	; (80021c0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002190:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002192:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002194:	d3f6      	bcc.n	8002184 <CopyDataInit>
  ldr  r2, =_sbss
 8002196:	4a0b      	ldr	r2, [pc, #44]	; (80021c4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002198:	e002      	b.n	80021a0 <LoopFillZerobss>

0800219a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800219a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800219c:	f842 3b04 	str.w	r3, [r2], #4

080021a0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80021a0:	4b09      	ldr	r3, [pc, #36]	; (80021c8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80021a2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80021a4:	d3f9      	bcc.n	800219a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80021a6:	f7ff ffd3 	bl	8002150 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021aa:	f003 fd77 	bl	8005c9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021ae:	f7fe fa23 	bl	80005f8 <main>
  bx  lr    
 80021b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80021b4:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80021b8:	08005d48 	.word	0x08005d48
  ldr  r0, =_sdata
 80021bc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80021c0:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 80021c4:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 80021c8:	200005ac 	.word	0x200005ac

080021cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021cc:	e7fe      	b.n	80021cc <ADC_IRQHandler>
	...

080021d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021d4:	4b0e      	ldr	r3, [pc, #56]	; (8002210 <HAL_Init+0x40>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a0d      	ldr	r2, [pc, #52]	; (8002210 <HAL_Init+0x40>)
 80021da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021e0:	4b0b      	ldr	r3, [pc, #44]	; (8002210 <HAL_Init+0x40>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a0a      	ldr	r2, [pc, #40]	; (8002210 <HAL_Init+0x40>)
 80021e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021ec:	4b08      	ldr	r3, [pc, #32]	; (8002210 <HAL_Init+0x40>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a07      	ldr	r2, [pc, #28]	; (8002210 <HAL_Init+0x40>)
 80021f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021f8:	2003      	movs	r0, #3
 80021fa:	f000 fd8b 	bl	8002d14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021fe:	2000      	movs	r0, #0
 8002200:	f000 f808 	bl	8002214 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002204:	f7ff fa3e 	bl	8001684 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	40023c00 	.word	0x40023c00

08002214 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800221c:	4b12      	ldr	r3, [pc, #72]	; (8002268 <HAL_InitTick+0x54>)
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	4b12      	ldr	r3, [pc, #72]	; (800226c <HAL_InitTick+0x58>)
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	4619      	mov	r1, r3
 8002226:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800222a:	fbb3 f3f1 	udiv	r3, r3, r1
 800222e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002232:	4618      	mov	r0, r3
 8002234:	f000 fda3 	bl	8002d7e <HAL_SYSTICK_Config>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e00e      	b.n	8002260 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2b0f      	cmp	r3, #15
 8002246:	d80a      	bhi.n	800225e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002248:	2200      	movs	r2, #0
 800224a:	6879      	ldr	r1, [r7, #4]
 800224c:	f04f 30ff 	mov.w	r0, #4294967295
 8002250:	f000 fd6b 	bl	8002d2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002254:	4a06      	ldr	r2, [pc, #24]	; (8002270 <HAL_InitTick+0x5c>)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800225a:	2300      	movs	r3, #0
 800225c:	e000      	b.n	8002260 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
}
 8002260:	4618      	mov	r0, r3
 8002262:	3708      	adds	r7, #8
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	20000000 	.word	0x20000000
 800226c:	20000008 	.word	0x20000008
 8002270:	20000004 	.word	0x20000004

08002274 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002278:	4b06      	ldr	r3, [pc, #24]	; (8002294 <HAL_IncTick+0x20>)
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	461a      	mov	r2, r3
 800227e:	4b06      	ldr	r3, [pc, #24]	; (8002298 <HAL_IncTick+0x24>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4413      	add	r3, r2
 8002284:	4a04      	ldr	r2, [pc, #16]	; (8002298 <HAL_IncTick+0x24>)
 8002286:	6013      	str	r3, [r2, #0]
}
 8002288:	bf00      	nop
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	20000008 	.word	0x20000008
 8002298:	200005a8 	.word	0x200005a8

0800229c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  return uwTick;
 80022a0:	4b03      	ldr	r3, [pc, #12]	; (80022b0 <HAL_GetTick+0x14>)
 80022a2:	681b      	ldr	r3, [r3, #0]
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	200005a8 	.word	0x200005a8

080022b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022bc:	f7ff ffee 	bl	800229c <HAL_GetTick>
 80022c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022cc:	d005      	beq.n	80022da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022ce:	4b0a      	ldr	r3, [pc, #40]	; (80022f8 <HAL_Delay+0x44>)
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	461a      	mov	r2, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	4413      	add	r3, r2
 80022d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80022da:	bf00      	nop
 80022dc:	f7ff ffde 	bl	800229c <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	68fa      	ldr	r2, [r7, #12]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d8f7      	bhi.n	80022dc <HAL_Delay+0x28>
  {
  }
}
 80022ec:	bf00      	nop
 80022ee:	bf00      	nop
 80022f0:	3710      	adds	r7, #16
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	20000008 	.word	0x20000008

080022fc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d101      	bne.n	800230e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e0ed      	b.n	80024ea <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002314:	b2db      	uxtb	r3, r3
 8002316:	2b00      	cmp	r3, #0
 8002318:	d102      	bne.n	8002320 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f7ff f9da 	bl	80016d4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f042 0201 	orr.w	r2, r2, #1
 800232e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002330:	f7ff ffb4 	bl	800229c <HAL_GetTick>
 8002334:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002336:	e012      	b.n	800235e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002338:	f7ff ffb0 	bl	800229c <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	2b0a      	cmp	r3, #10
 8002344:	d90b      	bls.n	800235e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2205      	movs	r2, #5
 8002356:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e0c5      	b.n	80024ea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f003 0301 	and.w	r3, r3, #1
 8002368:	2b00      	cmp	r3, #0
 800236a:	d0e5      	beq.n	8002338 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f022 0202 	bic.w	r2, r2, #2
 800237a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800237c:	f7ff ff8e 	bl	800229c <HAL_GetTick>
 8002380:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002382:	e012      	b.n	80023aa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002384:	f7ff ff8a 	bl	800229c <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b0a      	cmp	r3, #10
 8002390:	d90b      	bls.n	80023aa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002396:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2205      	movs	r2, #5
 80023a2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e09f      	b.n	80024ea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f003 0302 	and.w	r3, r3, #2
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d1e5      	bne.n	8002384 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	7e1b      	ldrb	r3, [r3, #24]
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d108      	bne.n	80023d2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80023ce:	601a      	str	r2, [r3, #0]
 80023d0:	e007      	b.n	80023e2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	7e5b      	ldrb	r3, [r3, #25]
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d108      	bne.n	80023fc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023f8:	601a      	str	r2, [r3, #0]
 80023fa:	e007      	b.n	800240c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800240a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	7e9b      	ldrb	r3, [r3, #26]
 8002410:	2b01      	cmp	r3, #1
 8002412:	d108      	bne.n	8002426 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f042 0220 	orr.w	r2, r2, #32
 8002422:	601a      	str	r2, [r3, #0]
 8002424:	e007      	b.n	8002436 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f022 0220 	bic.w	r2, r2, #32
 8002434:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	7edb      	ldrb	r3, [r3, #27]
 800243a:	2b01      	cmp	r3, #1
 800243c:	d108      	bne.n	8002450 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f022 0210 	bic.w	r2, r2, #16
 800244c:	601a      	str	r2, [r3, #0]
 800244e:	e007      	b.n	8002460 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f042 0210 	orr.w	r2, r2, #16
 800245e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	7f1b      	ldrb	r3, [r3, #28]
 8002464:	2b01      	cmp	r3, #1
 8002466:	d108      	bne.n	800247a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f042 0208 	orr.w	r2, r2, #8
 8002476:	601a      	str	r2, [r3, #0]
 8002478:	e007      	b.n	800248a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f022 0208 	bic.w	r2, r2, #8
 8002488:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	7f5b      	ldrb	r3, [r3, #29]
 800248e:	2b01      	cmp	r3, #1
 8002490:	d108      	bne.n	80024a4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f042 0204 	orr.w	r2, r2, #4
 80024a0:	601a      	str	r2, [r3, #0]
 80024a2:	e007      	b.n	80024b4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f022 0204 	bic.w	r2, r2, #4
 80024b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	689a      	ldr	r2, [r3, #8]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	431a      	orrs	r2, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	691b      	ldr	r3, [r3, #16]
 80024c2:	431a      	orrs	r2, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	695b      	ldr	r3, [r3, #20]
 80024c8:	ea42 0103 	orr.w	r1, r2, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	1e5a      	subs	r2, r3, #1
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	430a      	orrs	r2, r1
 80024d8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2200      	movs	r2, #0
 80024de:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2201      	movs	r2, #1
 80024e4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3710      	adds	r7, #16
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}

080024f2 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80024f2:	b480      	push	{r7}
 80024f4:	b087      	sub	sp, #28
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	60f8      	str	r0, [r7, #12]
 80024fa:	60b9      	str	r1, [r7, #8]
 80024fc:	607a      	str	r2, [r7, #4]
 80024fe:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002506:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002508:	7dfb      	ldrb	r3, [r7, #23]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d003      	beq.n	8002516 <HAL_CAN_GetRxMessage+0x24>
 800250e:	7dfb      	ldrb	r3, [r7, #23]
 8002510:	2b02      	cmp	r3, #2
 8002512:	f040 80f3 	bne.w	80026fc <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d10e      	bne.n	800253a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	f003 0303 	and.w	r3, r3, #3
 8002526:	2b00      	cmp	r3, #0
 8002528:	d116      	bne.n	8002558 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e0e7      	b.n	800270a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	691b      	ldr	r3, [r3, #16]
 8002540:	f003 0303 	and.w	r3, r3, #3
 8002544:	2b00      	cmp	r3, #0
 8002546:	d107      	bne.n	8002558 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e0d8      	b.n	800270a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	331b      	adds	r3, #27
 8002560:	011b      	lsls	r3, r3, #4
 8002562:	4413      	add	r3, r2
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0204 	and.w	r2, r3, #4
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d10c      	bne.n	8002590 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	331b      	adds	r3, #27
 800257e:	011b      	lsls	r3, r3, #4
 8002580:	4413      	add	r3, r2
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	0d5b      	lsrs	r3, r3, #21
 8002586:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	601a      	str	r2, [r3, #0]
 800258e:	e00b      	b.n	80025a8 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	331b      	adds	r3, #27
 8002598:	011b      	lsls	r3, r3, #4
 800259a:	4413      	add	r3, r2
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	08db      	lsrs	r3, r3, #3
 80025a0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	331b      	adds	r3, #27
 80025b0:	011b      	lsls	r3, r3, #4
 80025b2:	4413      	add	r3, r2
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0202 	and.w	r2, r3, #2
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	331b      	adds	r3, #27
 80025c6:	011b      	lsls	r3, r3, #4
 80025c8:	4413      	add	r3, r2
 80025ca:	3304      	adds	r3, #4
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 020f 	and.w	r2, r3, #15
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	331b      	adds	r3, #27
 80025de:	011b      	lsls	r3, r3, #4
 80025e0:	4413      	add	r3, r2
 80025e2:	3304      	adds	r3, #4
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	0a1b      	lsrs	r3, r3, #8
 80025e8:	b2da      	uxtb	r2, r3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	331b      	adds	r3, #27
 80025f6:	011b      	lsls	r3, r3, #4
 80025f8:	4413      	add	r3, r2
 80025fa:	3304      	adds	r3, #4
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	0c1b      	lsrs	r3, r3, #16
 8002600:	b29a      	uxth	r2, r3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	011b      	lsls	r3, r3, #4
 800260e:	4413      	add	r3, r2
 8002610:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	b2da      	uxtb	r2, r3
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	011b      	lsls	r3, r3, #4
 8002624:	4413      	add	r3, r2
 8002626:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	0a1a      	lsrs	r2, r3, #8
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	3301      	adds	r3, #1
 8002632:	b2d2      	uxtb	r2, r2
 8002634:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	011b      	lsls	r3, r3, #4
 800263e:	4413      	add	r3, r2
 8002640:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	0c1a      	lsrs	r2, r3, #16
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	3302      	adds	r3, #2
 800264c:	b2d2      	uxtb	r2, r2
 800264e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	011b      	lsls	r3, r3, #4
 8002658:	4413      	add	r3, r2
 800265a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	0e1a      	lsrs	r2, r3, #24
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	3303      	adds	r3, #3
 8002666:	b2d2      	uxtb	r2, r2
 8002668:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	011b      	lsls	r3, r3, #4
 8002672:	4413      	add	r3, r2
 8002674:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	3304      	adds	r3, #4
 800267e:	b2d2      	uxtb	r2, r2
 8002680:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	011b      	lsls	r3, r3, #4
 800268a:	4413      	add	r3, r2
 800268c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	0a1a      	lsrs	r2, r3, #8
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	3305      	adds	r3, #5
 8002698:	b2d2      	uxtb	r2, r2
 800269a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	011b      	lsls	r3, r3, #4
 80026a4:	4413      	add	r3, r2
 80026a6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	0c1a      	lsrs	r2, r3, #16
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	3306      	adds	r3, #6
 80026b2:	b2d2      	uxtb	r2, r2
 80026b4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	011b      	lsls	r3, r3, #4
 80026be:	4413      	add	r3, r2
 80026c0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	0e1a      	lsrs	r2, r3, #24
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	3307      	adds	r3, #7
 80026cc:	b2d2      	uxtb	r2, r2
 80026ce:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d108      	bne.n	80026e8 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	68da      	ldr	r2, [r3, #12]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f042 0220 	orr.w	r2, r2, #32
 80026e4:	60da      	str	r2, [r3, #12]
 80026e6:	e007      	b.n	80026f8 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	691a      	ldr	r2, [r3, #16]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f042 0220 	orr.w	r2, r2, #32
 80026f6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80026f8:	2300      	movs	r3, #0
 80026fa:	e006      	b.n	800270a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002700:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
  }
}
 800270a:	4618      	mov	r0, r3
 800270c:	371c      	adds	r7, #28
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr

08002716 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002716:	b580      	push	{r7, lr}
 8002718:	b08a      	sub	sp, #40	; 0x28
 800271a:	af00      	add	r7, sp, #0
 800271c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800271e:	2300      	movs	r3, #0
 8002720:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	695b      	ldr	r3, [r3, #20]
 8002728:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	691b      	ldr	r3, [r3, #16]
 8002748:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	699b      	ldr	r3, [r3, #24]
 8002750:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002752:	6a3b      	ldr	r3, [r7, #32]
 8002754:	f003 0301 	and.w	r3, r3, #1
 8002758:	2b00      	cmp	r3, #0
 800275a:	d07c      	beq.n	8002856 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	2b00      	cmp	r3, #0
 8002764:	d023      	beq.n	80027ae <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2201      	movs	r2, #1
 800276c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	f003 0302 	and.w	r3, r3, #2
 8002774:	2b00      	cmp	r3, #0
 8002776:	d003      	beq.n	8002780 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f000 f983 	bl	8002a84 <HAL_CAN_TxMailbox0CompleteCallback>
 800277e:	e016      	b.n	80027ae <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	f003 0304 	and.w	r3, r3, #4
 8002786:	2b00      	cmp	r3, #0
 8002788:	d004      	beq.n	8002794 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800278a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002790:	627b      	str	r3, [r7, #36]	; 0x24
 8002792:	e00c      	b.n	80027ae <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	f003 0308 	and.w	r3, r3, #8
 800279a:	2b00      	cmp	r3, #0
 800279c:	d004      	beq.n	80027a8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800279e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80027a4:	627b      	str	r3, [r7, #36]	; 0x24
 80027a6:	e002      	b.n	80027ae <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f000 f989 	bl	8002ac0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80027ae:	69bb      	ldr	r3, [r7, #24]
 80027b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d024      	beq.n	8002802 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027c0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d003      	beq.n	80027d4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f000 f963 	bl	8002a98 <HAL_CAN_TxMailbox1CompleteCallback>
 80027d2:	e016      	b.n	8002802 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d004      	beq.n	80027e8 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80027de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80027e4:	627b      	str	r3, [r7, #36]	; 0x24
 80027e6:	e00c      	b.n	8002802 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d004      	beq.n	80027fc <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80027f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027f8:	627b      	str	r3, [r7, #36]	; 0x24
 80027fa:	e002      	b.n	8002802 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f000 f969 	bl	8002ad4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002802:	69bb      	ldr	r3, [r7, #24]
 8002804:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d024      	beq.n	8002856 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002814:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d003      	beq.n	8002828 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f000 f943 	bl	8002aac <HAL_CAN_TxMailbox2CompleteCallback>
 8002826:	e016      	b.n	8002856 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d004      	beq.n	800283c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002834:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002838:	627b      	str	r3, [r7, #36]	; 0x24
 800283a:	e00c      	b.n	8002856 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800283c:	69bb      	ldr	r3, [r7, #24]
 800283e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d004      	beq.n	8002850 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002848:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800284c:	627b      	str	r3, [r7, #36]	; 0x24
 800284e:	e002      	b.n	8002856 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f000 f949 	bl	8002ae8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002856:	6a3b      	ldr	r3, [r7, #32]
 8002858:	f003 0308 	and.w	r3, r3, #8
 800285c:	2b00      	cmp	r3, #0
 800285e:	d00c      	beq.n	800287a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	f003 0310 	and.w	r3, r3, #16
 8002866:	2b00      	cmp	r3, #0
 8002868:	d007      	beq.n	800287a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800286a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002870:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	2210      	movs	r2, #16
 8002878:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800287a:	6a3b      	ldr	r3, [r7, #32]
 800287c:	f003 0304 	and.w	r3, r3, #4
 8002880:	2b00      	cmp	r3, #0
 8002882:	d00b      	beq.n	800289c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	f003 0308 	and.w	r3, r3, #8
 800288a:	2b00      	cmp	r3, #0
 800288c:	d006      	beq.n	800289c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2208      	movs	r2, #8
 8002894:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f000 f930 	bl	8002afc <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800289c:	6a3b      	ldr	r3, [r7, #32]
 800289e:	f003 0302 	and.w	r3, r3, #2
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d009      	beq.n	80028ba <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	f003 0303 	and.w	r3, r3, #3
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d002      	beq.n	80028ba <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f7fe fc83 	bl	80011c0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80028ba:	6a3b      	ldr	r3, [r7, #32]
 80028bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d00c      	beq.n	80028de <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	f003 0310 	and.w	r3, r3, #16
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d007      	beq.n	80028de <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80028ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028d4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	2210      	movs	r2, #16
 80028dc:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80028de:	6a3b      	ldr	r3, [r7, #32]
 80028e0:	f003 0320 	and.w	r3, r3, #32
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d00b      	beq.n	8002900 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	f003 0308 	and.w	r3, r3, #8
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d006      	beq.n	8002900 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2208      	movs	r2, #8
 80028f8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f000 f912 	bl	8002b24 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002900:	6a3b      	ldr	r3, [r7, #32]
 8002902:	f003 0310 	and.w	r3, r3, #16
 8002906:	2b00      	cmp	r3, #0
 8002908:	d009      	beq.n	800291e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	691b      	ldr	r3, [r3, #16]
 8002910:	f003 0303 	and.w	r3, r3, #3
 8002914:	2b00      	cmp	r3, #0
 8002916:	d002      	beq.n	800291e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f000 f8f9 	bl	8002b10 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800291e:	6a3b      	ldr	r3, [r7, #32]
 8002920:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d00b      	beq.n	8002940 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	f003 0310 	and.w	r3, r3, #16
 800292e:	2b00      	cmp	r3, #0
 8002930:	d006      	beq.n	8002940 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2210      	movs	r2, #16
 8002938:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f000 f8fc 	bl	8002b38 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002940:	6a3b      	ldr	r3, [r7, #32]
 8002942:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d00b      	beq.n	8002962 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	f003 0308 	and.w	r3, r3, #8
 8002950:	2b00      	cmp	r3, #0
 8002952:	d006      	beq.n	8002962 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2208      	movs	r2, #8
 800295a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f000 f8f5 	bl	8002b4c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002962:	6a3b      	ldr	r3, [r7, #32]
 8002964:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d07b      	beq.n	8002a64 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	f003 0304 	and.w	r3, r3, #4
 8002972:	2b00      	cmp	r3, #0
 8002974:	d072      	beq.n	8002a5c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002976:	6a3b      	ldr	r3, [r7, #32]
 8002978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800297c:	2b00      	cmp	r3, #0
 800297e:	d008      	beq.n	8002992 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002986:	2b00      	cmp	r3, #0
 8002988:	d003      	beq.n	8002992 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800298a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298c:	f043 0301 	orr.w	r3, r3, #1
 8002990:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002992:	6a3b      	ldr	r3, [r7, #32]
 8002994:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002998:	2b00      	cmp	r3, #0
 800299a:	d008      	beq.n	80029ae <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d003      	beq.n	80029ae <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80029a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a8:	f043 0302 	orr.w	r3, r3, #2
 80029ac:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80029ae:	6a3b      	ldr	r3, [r7, #32]
 80029b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d008      	beq.n	80029ca <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d003      	beq.n	80029ca <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80029c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c4:	f043 0304 	orr.w	r3, r3, #4
 80029c8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80029ca:	6a3b      	ldr	r3, [r7, #32]
 80029cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d043      	beq.n	8002a5c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d03e      	beq.n	8002a5c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80029e4:	2b60      	cmp	r3, #96	; 0x60
 80029e6:	d02b      	beq.n	8002a40 <HAL_CAN_IRQHandler+0x32a>
 80029e8:	2b60      	cmp	r3, #96	; 0x60
 80029ea:	d82e      	bhi.n	8002a4a <HAL_CAN_IRQHandler+0x334>
 80029ec:	2b50      	cmp	r3, #80	; 0x50
 80029ee:	d022      	beq.n	8002a36 <HAL_CAN_IRQHandler+0x320>
 80029f0:	2b50      	cmp	r3, #80	; 0x50
 80029f2:	d82a      	bhi.n	8002a4a <HAL_CAN_IRQHandler+0x334>
 80029f4:	2b40      	cmp	r3, #64	; 0x40
 80029f6:	d019      	beq.n	8002a2c <HAL_CAN_IRQHandler+0x316>
 80029f8:	2b40      	cmp	r3, #64	; 0x40
 80029fa:	d826      	bhi.n	8002a4a <HAL_CAN_IRQHandler+0x334>
 80029fc:	2b30      	cmp	r3, #48	; 0x30
 80029fe:	d010      	beq.n	8002a22 <HAL_CAN_IRQHandler+0x30c>
 8002a00:	2b30      	cmp	r3, #48	; 0x30
 8002a02:	d822      	bhi.n	8002a4a <HAL_CAN_IRQHandler+0x334>
 8002a04:	2b10      	cmp	r3, #16
 8002a06:	d002      	beq.n	8002a0e <HAL_CAN_IRQHandler+0x2f8>
 8002a08:	2b20      	cmp	r3, #32
 8002a0a:	d005      	beq.n	8002a18 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002a0c:	e01d      	b.n	8002a4a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a10:	f043 0308 	orr.w	r3, r3, #8
 8002a14:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002a16:	e019      	b.n	8002a4c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1a:	f043 0310 	orr.w	r3, r3, #16
 8002a1e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002a20:	e014      	b.n	8002a4c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a24:	f043 0320 	orr.w	r3, r3, #32
 8002a28:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002a2a:	e00f      	b.n	8002a4c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a32:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002a34:	e00a      	b.n	8002a4c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a3c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002a3e:	e005      	b.n	8002a4c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a46:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002a48:	e000      	b.n	8002a4c <HAL_CAN_IRQHandler+0x336>
            break;
 8002a4a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	699a      	ldr	r2, [r3, #24]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002a5a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2204      	movs	r2, #4
 8002a62:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d008      	beq.n	8002a7c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a70:	431a      	orrs	r2, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f000 f872 	bl	8002b60 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002a7c:	bf00      	nop
 8002a7e:	3728      	adds	r7, #40	; 0x28
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002a8c:	bf00      	nop
 8002a8e:	370c      	adds	r7, #12
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr

08002a98 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002aa0:	bf00      	nop
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr

08002aac <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002ab4:	bf00      	nop
 8002ab6:	370c      	adds	r7, #12
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr

08002ac0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002ac8:	bf00      	nop
 8002aca:	370c      	adds	r7, #12
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr

08002ad4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002adc:	bf00      	nop
 8002ade:	370c      	adds	r7, #12
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr

08002ae8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002af0:	bf00      	nop
 8002af2:	370c      	adds	r7, #12
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr

08002afc <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002b04:	bf00      	nop
 8002b06:	370c      	adds	r7, #12
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr

08002b10 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002b18:	bf00      	nop
 8002b1a:	370c      	adds	r7, #12
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr

08002b24 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002b2c:	bf00      	nop
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr

08002b38 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002b40:	bf00      	nop
 8002b42:	370c      	adds	r7, #12
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002b54:	bf00      	nop
 8002b56:	370c      	adds	r7, #12
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002b68:	bf00      	nop
 8002b6a:	370c      	adds	r7, #12
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr

08002b74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b085      	sub	sp, #20
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f003 0307 	and.w	r3, r3, #7
 8002b82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b84:	4b0c      	ldr	r3, [pc, #48]	; (8002bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b8a:	68ba      	ldr	r2, [r7, #8]
 8002b8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b90:	4013      	ands	r3, r2
 8002b92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ba0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ba4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ba6:	4a04      	ldr	r2, [pc, #16]	; (8002bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	60d3      	str	r3, [r2, #12]
}
 8002bac:	bf00      	nop
 8002bae:	3714      	adds	r7, #20
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr
 8002bb8:	e000ed00 	.word	0xe000ed00

08002bbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bc0:	4b04      	ldr	r3, [pc, #16]	; (8002bd4 <__NVIC_GetPriorityGrouping+0x18>)
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	0a1b      	lsrs	r3, r3, #8
 8002bc6:	f003 0307 	and.w	r3, r3, #7
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr
 8002bd4:	e000ed00 	.word	0xe000ed00

08002bd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	4603      	mov	r3, r0
 8002be0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	db0b      	blt.n	8002c02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bea:	79fb      	ldrb	r3, [r7, #7]
 8002bec:	f003 021f 	and.w	r2, r3, #31
 8002bf0:	4907      	ldr	r1, [pc, #28]	; (8002c10 <__NVIC_EnableIRQ+0x38>)
 8002bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bf6:	095b      	lsrs	r3, r3, #5
 8002bf8:	2001      	movs	r0, #1
 8002bfa:	fa00 f202 	lsl.w	r2, r0, r2
 8002bfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c02:	bf00      	nop
 8002c04:	370c      	adds	r7, #12
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr
 8002c0e:	bf00      	nop
 8002c10:	e000e100 	.word	0xe000e100

08002c14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	6039      	str	r1, [r7, #0]
 8002c1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	db0a      	blt.n	8002c3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	b2da      	uxtb	r2, r3
 8002c2c:	490c      	ldr	r1, [pc, #48]	; (8002c60 <__NVIC_SetPriority+0x4c>)
 8002c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c32:	0112      	lsls	r2, r2, #4
 8002c34:	b2d2      	uxtb	r2, r2
 8002c36:	440b      	add	r3, r1
 8002c38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c3c:	e00a      	b.n	8002c54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	b2da      	uxtb	r2, r3
 8002c42:	4908      	ldr	r1, [pc, #32]	; (8002c64 <__NVIC_SetPriority+0x50>)
 8002c44:	79fb      	ldrb	r3, [r7, #7]
 8002c46:	f003 030f 	and.w	r3, r3, #15
 8002c4a:	3b04      	subs	r3, #4
 8002c4c:	0112      	lsls	r2, r2, #4
 8002c4e:	b2d2      	uxtb	r2, r2
 8002c50:	440b      	add	r3, r1
 8002c52:	761a      	strb	r2, [r3, #24]
}
 8002c54:	bf00      	nop
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr
 8002c60:	e000e100 	.word	0xe000e100
 8002c64:	e000ed00 	.word	0xe000ed00

08002c68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b089      	sub	sp, #36	; 0x24
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	60f8      	str	r0, [r7, #12]
 8002c70:	60b9      	str	r1, [r7, #8]
 8002c72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f003 0307 	and.w	r3, r3, #7
 8002c7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	f1c3 0307 	rsb	r3, r3, #7
 8002c82:	2b04      	cmp	r3, #4
 8002c84:	bf28      	it	cs
 8002c86:	2304      	movcs	r3, #4
 8002c88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	3304      	adds	r3, #4
 8002c8e:	2b06      	cmp	r3, #6
 8002c90:	d902      	bls.n	8002c98 <NVIC_EncodePriority+0x30>
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	3b03      	subs	r3, #3
 8002c96:	e000      	b.n	8002c9a <NVIC_EncodePriority+0x32>
 8002c98:	2300      	movs	r3, #0
 8002c9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca6:	43da      	mvns	r2, r3
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	401a      	ands	r2, r3
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cb0:	f04f 31ff 	mov.w	r1, #4294967295
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8002cba:	43d9      	mvns	r1, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cc0:	4313      	orrs	r3, r2
         );
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3724      	adds	r7, #36	; 0x24
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
	...

08002cd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ce0:	d301      	bcc.n	8002ce6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e00f      	b.n	8002d06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ce6:	4a0a      	ldr	r2, [pc, #40]	; (8002d10 <SysTick_Config+0x40>)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	3b01      	subs	r3, #1
 8002cec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cee:	210f      	movs	r1, #15
 8002cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8002cf4:	f7ff ff8e 	bl	8002c14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cf8:	4b05      	ldr	r3, [pc, #20]	; (8002d10 <SysTick_Config+0x40>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cfe:	4b04      	ldr	r3, [pc, #16]	; (8002d10 <SysTick_Config+0x40>)
 8002d00:	2207      	movs	r2, #7
 8002d02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3708      	adds	r7, #8
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	e000e010 	.word	0xe000e010

08002d14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f7ff ff29 	bl	8002b74 <__NVIC_SetPriorityGrouping>
}
 8002d22:	bf00      	nop
 8002d24:	3708      	adds	r7, #8
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}

08002d2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d2a:	b580      	push	{r7, lr}
 8002d2c:	b086      	sub	sp, #24
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	4603      	mov	r3, r0
 8002d32:	60b9      	str	r1, [r7, #8]
 8002d34:	607a      	str	r2, [r7, #4]
 8002d36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d3c:	f7ff ff3e 	bl	8002bbc <__NVIC_GetPriorityGrouping>
 8002d40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	68b9      	ldr	r1, [r7, #8]
 8002d46:	6978      	ldr	r0, [r7, #20]
 8002d48:	f7ff ff8e 	bl	8002c68 <NVIC_EncodePriority>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d52:	4611      	mov	r1, r2
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7ff ff5d 	bl	8002c14 <__NVIC_SetPriority>
}
 8002d5a:	bf00      	nop
 8002d5c:	3718      	adds	r7, #24
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}

08002d62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d62:	b580      	push	{r7, lr}
 8002d64:	b082      	sub	sp, #8
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	4603      	mov	r3, r0
 8002d6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7ff ff31 	bl	8002bd8 <__NVIC_EnableIRQ>
}
 8002d76:	bf00      	nop
 8002d78:	3708      	adds	r7, #8
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}

08002d7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d7e:	b580      	push	{r7, lr}
 8002d80:	b082      	sub	sp, #8
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f7ff ffa2 	bl	8002cd0 <SysTick_Config>
 8002d8c:	4603      	mov	r3, r0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3708      	adds	r7, #8
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
	...

08002d98 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b086      	sub	sp, #24
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002da0:	2300      	movs	r3, #0
 8002da2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002da4:	f7ff fa7a 	bl	800229c <HAL_GetTick>
 8002da8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d101      	bne.n	8002db4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e099      	b.n	8002ee8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2202      	movs	r2, #2
 8002db8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f022 0201 	bic.w	r2, r2, #1
 8002dd2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002dd4:	e00f      	b.n	8002df6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002dd6:	f7ff fa61 	bl	800229c <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	2b05      	cmp	r3, #5
 8002de2:	d908      	bls.n	8002df6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2220      	movs	r2, #32
 8002de8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2203      	movs	r2, #3
 8002dee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e078      	b.n	8002ee8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0301 	and.w	r3, r3, #1
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d1e8      	bne.n	8002dd6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002e0c:	697a      	ldr	r2, [r7, #20]
 8002e0e:	4b38      	ldr	r3, [pc, #224]	; (8002ef0 <HAL_DMA_Init+0x158>)
 8002e10:	4013      	ands	r3, r2
 8002e12:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685a      	ldr	r2, [r3, #4]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e22:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	691b      	ldr	r3, [r3, #16]
 8002e28:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	699b      	ldr	r3, [r3, #24]
 8002e34:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e3a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a1b      	ldr	r3, [r3, #32]
 8002e40:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e42:	697a      	ldr	r2, [r7, #20]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4c:	2b04      	cmp	r3, #4
 8002e4e:	d107      	bne.n	8002e60 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	697a      	ldr	r2, [r7, #20]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	697a      	ldr	r2, [r7, #20]
 8002e66:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	695b      	ldr	r3, [r3, #20]
 8002e6e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	f023 0307 	bic.w	r3, r3, #7
 8002e76:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7c:	697a      	ldr	r2, [r7, #20]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e86:	2b04      	cmp	r3, #4
 8002e88:	d117      	bne.n	8002eba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e8e:	697a      	ldr	r2, [r7, #20]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d00e      	beq.n	8002eba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f000 fae5 	bl	800346c <DMA_CheckFifoParam>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d008      	beq.n	8002eba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2240      	movs	r2, #64	; 0x40
 8002eac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e016      	b.n	8002ee8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	697a      	ldr	r2, [r7, #20]
 8002ec0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f000 fa9c 	bl	8003400 <DMA_CalcBaseAndBitshift>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ed0:	223f      	movs	r2, #63	; 0x3f
 8002ed2:	409a      	lsls	r2, r3
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002ee6:	2300      	movs	r3, #0
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3718      	adds	r7, #24
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	f010803f 	.word	0xf010803f

08002ef4 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b086      	sub	sp, #24
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	60b9      	str	r1, [r7, #8]
 8002efe:	607a      	str	r2, [r7, #4]
 8002f00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f02:	2300      	movs	r3, #0
 8002f04:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d101      	bne.n	8002f14 <HAL_DMA_Start+0x20>
 8002f10:	2302      	movs	r3, #2
 8002f12:	e026      	b.n	8002f62 <HAL_DMA_Start+0x6e>
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d115      	bne.n	8002f54 <HAL_DMA_Start+0x60>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2202      	movs	r2, #2
 8002f2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2200      	movs	r2, #0
 8002f34:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	68b9      	ldr	r1, [r7, #8]
 8002f3c:	68f8      	ldr	r0, [r7, #12]
 8002f3e:	f000 fa31 	bl	80033a4 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f042 0201 	orr.w	r2, r2, #1
 8002f50:	601a      	str	r2, [r3, #0]
 8002f52:	e005      	b.n	8002f60 <HAL_DMA_Start+0x6c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002f5c:	2302      	movs	r3, #2
 8002f5e:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
 8002f60:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3718      	adds	r7, #24
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b084      	sub	sp, #16
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f76:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002f78:	f7ff f990 	bl	800229c <HAL_GetTick>
 8002f7c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d008      	beq.n	8002f9c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2280      	movs	r2, #128	; 0x80
 8002f8e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e052      	b.n	8003042 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f022 0216 	bic.w	r2, r2, #22
 8002faa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	695a      	ldr	r2, [r3, #20]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fba:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d103      	bne.n	8002fcc <HAL_DMA_Abort+0x62>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d007      	beq.n	8002fdc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f022 0208 	bic.w	r2, r2, #8
 8002fda:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f022 0201 	bic.w	r2, r2, #1
 8002fea:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fec:	e013      	b.n	8003016 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002fee:	f7ff f955 	bl	800229c <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	2b05      	cmp	r3, #5
 8002ffa:	d90c      	bls.n	8003016 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2220      	movs	r2, #32
 8003000:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2203      	movs	r2, #3
 8003006:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e015      	b.n	8003042 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0301 	and.w	r3, r3, #1
 8003020:	2b00      	cmp	r3, #0
 8003022:	d1e4      	bne.n	8002fee <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003028:	223f      	movs	r2, #63	; 0x3f
 800302a:	409a      	lsls	r2, r3
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	3710      	adds	r7, #16
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}

0800304a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800304a:	b480      	push	{r7}
 800304c:	b083      	sub	sp, #12
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003058:	b2db      	uxtb	r3, r3
 800305a:	2b02      	cmp	r3, #2
 800305c:	d004      	beq.n	8003068 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2280      	movs	r2, #128	; 0x80
 8003062:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e00c      	b.n	8003082 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2205      	movs	r2, #5
 800306c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f022 0201 	bic.w	r2, r2, #1
 800307e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	370c      	adds	r7, #12
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr
	...

08003090 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b086      	sub	sp, #24
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003098:	2300      	movs	r3, #0
 800309a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800309c:	4b92      	ldr	r3, [pc, #584]	; (80032e8 <HAL_DMA_IRQHandler+0x258>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a92      	ldr	r2, [pc, #584]	; (80032ec <HAL_DMA_IRQHandler+0x25c>)
 80030a2:	fba2 2303 	umull	r2, r3, r2, r3
 80030a6:	0a9b      	lsrs	r3, r3, #10
 80030a8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ba:	2208      	movs	r2, #8
 80030bc:	409a      	lsls	r2, r3
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	4013      	ands	r3, r2
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d01a      	beq.n	80030fc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0304 	and.w	r3, r3, #4
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d013      	beq.n	80030fc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f022 0204 	bic.w	r2, r2, #4
 80030e2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030e8:	2208      	movs	r2, #8
 80030ea:	409a      	lsls	r2, r3
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030f4:	f043 0201 	orr.w	r2, r3, #1
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003100:	2201      	movs	r2, #1
 8003102:	409a      	lsls	r2, r3
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	4013      	ands	r3, r2
 8003108:	2b00      	cmp	r3, #0
 800310a:	d012      	beq.n	8003132 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	695b      	ldr	r3, [r3, #20]
 8003112:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003116:	2b00      	cmp	r3, #0
 8003118:	d00b      	beq.n	8003132 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800311e:	2201      	movs	r2, #1
 8003120:	409a      	lsls	r2, r3
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800312a:	f043 0202 	orr.w	r2, r3, #2
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003136:	2204      	movs	r2, #4
 8003138:	409a      	lsls	r2, r3
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	4013      	ands	r3, r2
 800313e:	2b00      	cmp	r3, #0
 8003140:	d012      	beq.n	8003168 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0302 	and.w	r3, r3, #2
 800314c:	2b00      	cmp	r3, #0
 800314e:	d00b      	beq.n	8003168 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003154:	2204      	movs	r2, #4
 8003156:	409a      	lsls	r2, r3
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003160:	f043 0204 	orr.w	r2, r3, #4
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800316c:	2210      	movs	r2, #16
 800316e:	409a      	lsls	r2, r3
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	4013      	ands	r3, r2
 8003174:	2b00      	cmp	r3, #0
 8003176:	d043      	beq.n	8003200 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0308 	and.w	r3, r3, #8
 8003182:	2b00      	cmp	r3, #0
 8003184:	d03c      	beq.n	8003200 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800318a:	2210      	movs	r2, #16
 800318c:	409a      	lsls	r2, r3
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d018      	beq.n	80031d2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d108      	bne.n	80031c0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d024      	beq.n	8003200 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	4798      	blx	r3
 80031be:	e01f      	b.n	8003200 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d01b      	beq.n	8003200 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	4798      	blx	r3
 80031d0:	e016      	b.n	8003200 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d107      	bne.n	80031f0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f022 0208 	bic.w	r2, r2, #8
 80031ee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d003      	beq.n	8003200 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003204:	2220      	movs	r2, #32
 8003206:	409a      	lsls	r2, r3
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	4013      	ands	r3, r2
 800320c:	2b00      	cmp	r3, #0
 800320e:	f000 808e 	beq.w	800332e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0310 	and.w	r3, r3, #16
 800321c:	2b00      	cmp	r3, #0
 800321e:	f000 8086 	beq.w	800332e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003226:	2220      	movs	r2, #32
 8003228:	409a      	lsls	r2, r3
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003234:	b2db      	uxtb	r3, r3
 8003236:	2b05      	cmp	r3, #5
 8003238:	d136      	bne.n	80032a8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f022 0216 	bic.w	r2, r2, #22
 8003248:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	695a      	ldr	r2, [r3, #20]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003258:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325e:	2b00      	cmp	r3, #0
 8003260:	d103      	bne.n	800326a <HAL_DMA_IRQHandler+0x1da>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003266:	2b00      	cmp	r3, #0
 8003268:	d007      	beq.n	800327a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f022 0208 	bic.w	r2, r2, #8
 8003278:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800327e:	223f      	movs	r2, #63	; 0x3f
 8003280:	409a      	lsls	r2, r3
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2201      	movs	r2, #1
 800328a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800329a:	2b00      	cmp	r3, #0
 800329c:	d07d      	beq.n	800339a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	4798      	blx	r3
        }
        return;
 80032a6:	e078      	b.n	800339a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d01c      	beq.n	80032f0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d108      	bne.n	80032d6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d030      	beq.n	800332e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	4798      	blx	r3
 80032d4:	e02b      	b.n	800332e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d027      	beq.n	800332e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	4798      	blx	r3
 80032e6:	e022      	b.n	800332e <HAL_DMA_IRQHandler+0x29e>
 80032e8:	20000000 	.word	0x20000000
 80032ec:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d10f      	bne.n	800331e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f022 0210 	bic.w	r2, r2, #16
 800330c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2201      	movs	r2, #1
 8003312:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003322:	2b00      	cmp	r3, #0
 8003324:	d003      	beq.n	800332e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003332:	2b00      	cmp	r3, #0
 8003334:	d032      	beq.n	800339c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800333a:	f003 0301 	and.w	r3, r3, #1
 800333e:	2b00      	cmp	r3, #0
 8003340:	d022      	beq.n	8003388 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2205      	movs	r2, #5
 8003346:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f022 0201 	bic.w	r2, r2, #1
 8003358:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	3301      	adds	r3, #1
 800335e:	60bb      	str	r3, [r7, #8]
 8003360:	697a      	ldr	r2, [r7, #20]
 8003362:	429a      	cmp	r2, r3
 8003364:	d307      	bcc.n	8003376 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0301 	and.w	r3, r3, #1
 8003370:	2b00      	cmp	r3, #0
 8003372:	d1f2      	bne.n	800335a <HAL_DMA_IRQHandler+0x2ca>
 8003374:	e000      	b.n	8003378 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003376:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800338c:	2b00      	cmp	r3, #0
 800338e:	d005      	beq.n	800339c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	4798      	blx	r3
 8003398:	e000      	b.n	800339c <HAL_DMA_IRQHandler+0x30c>
        return;
 800339a:	bf00      	nop
    }
  }
}
 800339c:	3718      	adds	r7, #24
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop

080033a4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b085      	sub	sp, #20
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	60b9      	str	r1, [r7, #8]
 80033ae:	607a      	str	r2, [r7, #4]
 80033b0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80033c0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	683a      	ldr	r2, [r7, #0]
 80033c8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	2b40      	cmp	r3, #64	; 0x40
 80033d0:	d108      	bne.n	80033e4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	68ba      	ldr	r2, [r7, #8]
 80033e0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80033e2:	e007      	b.n	80033f4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	68ba      	ldr	r2, [r7, #8]
 80033ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	60da      	str	r2, [r3, #12]
}
 80033f4:	bf00      	nop
 80033f6:	3714      	adds	r7, #20
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr

08003400 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003400:	b480      	push	{r7}
 8003402:	b085      	sub	sp, #20
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	b2db      	uxtb	r3, r3
 800340e:	3b10      	subs	r3, #16
 8003410:	4a14      	ldr	r2, [pc, #80]	; (8003464 <DMA_CalcBaseAndBitshift+0x64>)
 8003412:	fba2 2303 	umull	r2, r3, r2, r3
 8003416:	091b      	lsrs	r3, r3, #4
 8003418:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800341a:	4a13      	ldr	r2, [pc, #76]	; (8003468 <DMA_CalcBaseAndBitshift+0x68>)
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	4413      	add	r3, r2
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	461a      	mov	r2, r3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2b03      	cmp	r3, #3
 800342c:	d909      	bls.n	8003442 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003436:	f023 0303 	bic.w	r3, r3, #3
 800343a:	1d1a      	adds	r2, r3, #4
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	659a      	str	r2, [r3, #88]	; 0x58
 8003440:	e007      	b.n	8003452 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800344a:	f023 0303 	bic.w	r3, r3, #3
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003456:	4618      	mov	r0, r3
 8003458:	3714      	adds	r7, #20
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop
 8003464:	aaaaaaab 	.word	0xaaaaaaab
 8003468:	08005d30 	.word	0x08005d30

0800346c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800346c:	b480      	push	{r7}
 800346e:	b085      	sub	sp, #20
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003474:	2300      	movs	r3, #0
 8003476:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800347c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	699b      	ldr	r3, [r3, #24]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d11f      	bne.n	80034c6 <DMA_CheckFifoParam+0x5a>
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	2b03      	cmp	r3, #3
 800348a:	d856      	bhi.n	800353a <DMA_CheckFifoParam+0xce>
 800348c:	a201      	add	r2, pc, #4	; (adr r2, 8003494 <DMA_CheckFifoParam+0x28>)
 800348e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003492:	bf00      	nop
 8003494:	080034a5 	.word	0x080034a5
 8003498:	080034b7 	.word	0x080034b7
 800349c:	080034a5 	.word	0x080034a5
 80034a0:	0800353b 	.word	0x0800353b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d046      	beq.n	800353e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034b4:	e043      	b.n	800353e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80034be:	d140      	bne.n	8003542 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034c4:	e03d      	b.n	8003542 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	699b      	ldr	r3, [r3, #24]
 80034ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034ce:	d121      	bne.n	8003514 <DMA_CheckFifoParam+0xa8>
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	2b03      	cmp	r3, #3
 80034d4:	d837      	bhi.n	8003546 <DMA_CheckFifoParam+0xda>
 80034d6:	a201      	add	r2, pc, #4	; (adr r2, 80034dc <DMA_CheckFifoParam+0x70>)
 80034d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034dc:	080034ed 	.word	0x080034ed
 80034e0:	080034f3 	.word	0x080034f3
 80034e4:	080034ed 	.word	0x080034ed
 80034e8:	08003505 	.word	0x08003505
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	73fb      	strb	r3, [r7, #15]
      break;
 80034f0:	e030      	b.n	8003554 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d025      	beq.n	800354a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003502:	e022      	b.n	800354a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003508:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800350c:	d11f      	bne.n	800354e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003512:	e01c      	b.n	800354e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	2b02      	cmp	r3, #2
 8003518:	d903      	bls.n	8003522 <DMA_CheckFifoParam+0xb6>
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	2b03      	cmp	r3, #3
 800351e:	d003      	beq.n	8003528 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003520:	e018      	b.n	8003554 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	73fb      	strb	r3, [r7, #15]
      break;
 8003526:	e015      	b.n	8003554 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800352c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d00e      	beq.n	8003552 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	73fb      	strb	r3, [r7, #15]
      break;
 8003538:	e00b      	b.n	8003552 <DMA_CheckFifoParam+0xe6>
      break;
 800353a:	bf00      	nop
 800353c:	e00a      	b.n	8003554 <DMA_CheckFifoParam+0xe8>
      break;
 800353e:	bf00      	nop
 8003540:	e008      	b.n	8003554 <DMA_CheckFifoParam+0xe8>
      break;
 8003542:	bf00      	nop
 8003544:	e006      	b.n	8003554 <DMA_CheckFifoParam+0xe8>
      break;
 8003546:	bf00      	nop
 8003548:	e004      	b.n	8003554 <DMA_CheckFifoParam+0xe8>
      break;
 800354a:	bf00      	nop
 800354c:	e002      	b.n	8003554 <DMA_CheckFifoParam+0xe8>
      break;   
 800354e:	bf00      	nop
 8003550:	e000      	b.n	8003554 <DMA_CheckFifoParam+0xe8>
      break;
 8003552:	bf00      	nop
    }
  } 
  
  return status; 
 8003554:	7bfb      	ldrb	r3, [r7, #15]
}
 8003556:	4618      	mov	r0, r3
 8003558:	3714      	adds	r7, #20
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr
 8003562:	bf00      	nop

08003564 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003564:	b480      	push	{r7}
 8003566:	b089      	sub	sp, #36	; 0x24
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800356e:	2300      	movs	r3, #0
 8003570:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003572:	2300      	movs	r3, #0
 8003574:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003576:	2300      	movs	r3, #0
 8003578:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800357a:	2300      	movs	r3, #0
 800357c:	61fb      	str	r3, [r7, #28]
 800357e:	e177      	b.n	8003870 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003580:	2201      	movs	r2, #1
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	fa02 f303 	lsl.w	r3, r2, r3
 8003588:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	697a      	ldr	r2, [r7, #20]
 8003590:	4013      	ands	r3, r2
 8003592:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003594:	693a      	ldr	r2, [r7, #16]
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	429a      	cmp	r2, r3
 800359a:	f040 8166 	bne.w	800386a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	f003 0303 	and.w	r3, r3, #3
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d005      	beq.n	80035b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d130      	bne.n	8003618 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	005b      	lsls	r3, r3, #1
 80035c0:	2203      	movs	r2, #3
 80035c2:	fa02 f303 	lsl.w	r3, r2, r3
 80035c6:	43db      	mvns	r3, r3
 80035c8:	69ba      	ldr	r2, [r7, #24]
 80035ca:	4013      	ands	r3, r2
 80035cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	68da      	ldr	r2, [r3, #12]
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	005b      	lsls	r3, r3, #1
 80035d6:	fa02 f303 	lsl.w	r3, r2, r3
 80035da:	69ba      	ldr	r2, [r7, #24]
 80035dc:	4313      	orrs	r3, r2
 80035de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	69ba      	ldr	r2, [r7, #24]
 80035e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035ec:	2201      	movs	r2, #1
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	fa02 f303 	lsl.w	r3, r2, r3
 80035f4:	43db      	mvns	r3, r3
 80035f6:	69ba      	ldr	r2, [r7, #24]
 80035f8:	4013      	ands	r3, r2
 80035fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	091b      	lsrs	r3, r3, #4
 8003602:	f003 0201 	and.w	r2, r3, #1
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	fa02 f303 	lsl.w	r3, r2, r3
 800360c:	69ba      	ldr	r2, [r7, #24]
 800360e:	4313      	orrs	r3, r2
 8003610:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	69ba      	ldr	r2, [r7, #24]
 8003616:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f003 0303 	and.w	r3, r3, #3
 8003620:	2b03      	cmp	r3, #3
 8003622:	d017      	beq.n	8003654 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	005b      	lsls	r3, r3, #1
 800362e:	2203      	movs	r2, #3
 8003630:	fa02 f303 	lsl.w	r3, r2, r3
 8003634:	43db      	mvns	r3, r3
 8003636:	69ba      	ldr	r2, [r7, #24]
 8003638:	4013      	ands	r3, r2
 800363a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	689a      	ldr	r2, [r3, #8]
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	005b      	lsls	r3, r3, #1
 8003644:	fa02 f303 	lsl.w	r3, r2, r3
 8003648:	69ba      	ldr	r2, [r7, #24]
 800364a:	4313      	orrs	r3, r2
 800364c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	69ba      	ldr	r2, [r7, #24]
 8003652:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f003 0303 	and.w	r3, r3, #3
 800365c:	2b02      	cmp	r3, #2
 800365e:	d123      	bne.n	80036a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	08da      	lsrs	r2, r3, #3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	3208      	adds	r2, #8
 8003668:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800366c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	f003 0307 	and.w	r3, r3, #7
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	220f      	movs	r2, #15
 8003678:	fa02 f303 	lsl.w	r3, r2, r3
 800367c:	43db      	mvns	r3, r3
 800367e:	69ba      	ldr	r2, [r7, #24]
 8003680:	4013      	ands	r3, r2
 8003682:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	691a      	ldr	r2, [r3, #16]
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	f003 0307 	and.w	r3, r3, #7
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	fa02 f303 	lsl.w	r3, r2, r3
 8003694:	69ba      	ldr	r2, [r7, #24]
 8003696:	4313      	orrs	r3, r2
 8003698:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	08da      	lsrs	r2, r3, #3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	3208      	adds	r2, #8
 80036a2:	69b9      	ldr	r1, [r7, #24]
 80036a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	005b      	lsls	r3, r3, #1
 80036b2:	2203      	movs	r2, #3
 80036b4:	fa02 f303 	lsl.w	r3, r2, r3
 80036b8:	43db      	mvns	r3, r3
 80036ba:	69ba      	ldr	r2, [r7, #24]
 80036bc:	4013      	ands	r3, r2
 80036be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	f003 0203 	and.w	r2, r3, #3
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	005b      	lsls	r3, r3, #1
 80036cc:	fa02 f303 	lsl.w	r3, r2, r3
 80036d0:	69ba      	ldr	r2, [r7, #24]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	69ba      	ldr	r2, [r7, #24]
 80036da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	f000 80c0 	beq.w	800386a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036ea:	2300      	movs	r3, #0
 80036ec:	60fb      	str	r3, [r7, #12]
 80036ee:	4b66      	ldr	r3, [pc, #408]	; (8003888 <HAL_GPIO_Init+0x324>)
 80036f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f2:	4a65      	ldr	r2, [pc, #404]	; (8003888 <HAL_GPIO_Init+0x324>)
 80036f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036f8:	6453      	str	r3, [r2, #68]	; 0x44
 80036fa:	4b63      	ldr	r3, [pc, #396]	; (8003888 <HAL_GPIO_Init+0x324>)
 80036fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003702:	60fb      	str	r3, [r7, #12]
 8003704:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003706:	4a61      	ldr	r2, [pc, #388]	; (800388c <HAL_GPIO_Init+0x328>)
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	089b      	lsrs	r3, r3, #2
 800370c:	3302      	adds	r3, #2
 800370e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003712:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	f003 0303 	and.w	r3, r3, #3
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	220f      	movs	r2, #15
 800371e:	fa02 f303 	lsl.w	r3, r2, r3
 8003722:	43db      	mvns	r3, r3
 8003724:	69ba      	ldr	r2, [r7, #24]
 8003726:	4013      	ands	r3, r2
 8003728:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a58      	ldr	r2, [pc, #352]	; (8003890 <HAL_GPIO_Init+0x32c>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d037      	beq.n	80037a2 <HAL_GPIO_Init+0x23e>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4a57      	ldr	r2, [pc, #348]	; (8003894 <HAL_GPIO_Init+0x330>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d031      	beq.n	800379e <HAL_GPIO_Init+0x23a>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4a56      	ldr	r2, [pc, #344]	; (8003898 <HAL_GPIO_Init+0x334>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d02b      	beq.n	800379a <HAL_GPIO_Init+0x236>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4a55      	ldr	r2, [pc, #340]	; (800389c <HAL_GPIO_Init+0x338>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d025      	beq.n	8003796 <HAL_GPIO_Init+0x232>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a54      	ldr	r2, [pc, #336]	; (80038a0 <HAL_GPIO_Init+0x33c>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d01f      	beq.n	8003792 <HAL_GPIO_Init+0x22e>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a53      	ldr	r2, [pc, #332]	; (80038a4 <HAL_GPIO_Init+0x340>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d019      	beq.n	800378e <HAL_GPIO_Init+0x22a>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a52      	ldr	r2, [pc, #328]	; (80038a8 <HAL_GPIO_Init+0x344>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d013      	beq.n	800378a <HAL_GPIO_Init+0x226>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a51      	ldr	r2, [pc, #324]	; (80038ac <HAL_GPIO_Init+0x348>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d00d      	beq.n	8003786 <HAL_GPIO_Init+0x222>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a50      	ldr	r2, [pc, #320]	; (80038b0 <HAL_GPIO_Init+0x34c>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d007      	beq.n	8003782 <HAL_GPIO_Init+0x21e>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a4f      	ldr	r2, [pc, #316]	; (80038b4 <HAL_GPIO_Init+0x350>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d101      	bne.n	800377e <HAL_GPIO_Init+0x21a>
 800377a:	2309      	movs	r3, #9
 800377c:	e012      	b.n	80037a4 <HAL_GPIO_Init+0x240>
 800377e:	230a      	movs	r3, #10
 8003780:	e010      	b.n	80037a4 <HAL_GPIO_Init+0x240>
 8003782:	2308      	movs	r3, #8
 8003784:	e00e      	b.n	80037a4 <HAL_GPIO_Init+0x240>
 8003786:	2307      	movs	r3, #7
 8003788:	e00c      	b.n	80037a4 <HAL_GPIO_Init+0x240>
 800378a:	2306      	movs	r3, #6
 800378c:	e00a      	b.n	80037a4 <HAL_GPIO_Init+0x240>
 800378e:	2305      	movs	r3, #5
 8003790:	e008      	b.n	80037a4 <HAL_GPIO_Init+0x240>
 8003792:	2304      	movs	r3, #4
 8003794:	e006      	b.n	80037a4 <HAL_GPIO_Init+0x240>
 8003796:	2303      	movs	r3, #3
 8003798:	e004      	b.n	80037a4 <HAL_GPIO_Init+0x240>
 800379a:	2302      	movs	r3, #2
 800379c:	e002      	b.n	80037a4 <HAL_GPIO_Init+0x240>
 800379e:	2301      	movs	r3, #1
 80037a0:	e000      	b.n	80037a4 <HAL_GPIO_Init+0x240>
 80037a2:	2300      	movs	r3, #0
 80037a4:	69fa      	ldr	r2, [r7, #28]
 80037a6:	f002 0203 	and.w	r2, r2, #3
 80037aa:	0092      	lsls	r2, r2, #2
 80037ac:	4093      	lsls	r3, r2
 80037ae:	69ba      	ldr	r2, [r7, #24]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80037b4:	4935      	ldr	r1, [pc, #212]	; (800388c <HAL_GPIO_Init+0x328>)
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	089b      	lsrs	r3, r3, #2
 80037ba:	3302      	adds	r3, #2
 80037bc:	69ba      	ldr	r2, [r7, #24]
 80037be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037c2:	4b3d      	ldr	r3, [pc, #244]	; (80038b8 <HAL_GPIO_Init+0x354>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	43db      	mvns	r3, r3
 80037cc:	69ba      	ldr	r2, [r7, #24]
 80037ce:	4013      	ands	r3, r2
 80037d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d003      	beq.n	80037e6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80037de:	69ba      	ldr	r2, [r7, #24]
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80037e6:	4a34      	ldr	r2, [pc, #208]	; (80038b8 <HAL_GPIO_Init+0x354>)
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80037ec:	4b32      	ldr	r3, [pc, #200]	; (80038b8 <HAL_GPIO_Init+0x354>)
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	43db      	mvns	r3, r3
 80037f6:	69ba      	ldr	r2, [r7, #24]
 80037f8:	4013      	ands	r3, r2
 80037fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003804:	2b00      	cmp	r3, #0
 8003806:	d003      	beq.n	8003810 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003808:	69ba      	ldr	r2, [r7, #24]
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	4313      	orrs	r3, r2
 800380e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003810:	4a29      	ldr	r2, [pc, #164]	; (80038b8 <HAL_GPIO_Init+0x354>)
 8003812:	69bb      	ldr	r3, [r7, #24]
 8003814:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003816:	4b28      	ldr	r3, [pc, #160]	; (80038b8 <HAL_GPIO_Init+0x354>)
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	43db      	mvns	r3, r3
 8003820:	69ba      	ldr	r2, [r7, #24]
 8003822:	4013      	ands	r3, r2
 8003824:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d003      	beq.n	800383a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003832:	69ba      	ldr	r2, [r7, #24]
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	4313      	orrs	r3, r2
 8003838:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800383a:	4a1f      	ldr	r2, [pc, #124]	; (80038b8 <HAL_GPIO_Init+0x354>)
 800383c:	69bb      	ldr	r3, [r7, #24]
 800383e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003840:	4b1d      	ldr	r3, [pc, #116]	; (80038b8 <HAL_GPIO_Init+0x354>)
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	43db      	mvns	r3, r3
 800384a:	69ba      	ldr	r2, [r7, #24]
 800384c:	4013      	ands	r3, r2
 800384e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d003      	beq.n	8003864 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800385c:	69ba      	ldr	r2, [r7, #24]
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	4313      	orrs	r3, r2
 8003862:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003864:	4a14      	ldr	r2, [pc, #80]	; (80038b8 <HAL_GPIO_Init+0x354>)
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	3301      	adds	r3, #1
 800386e:	61fb      	str	r3, [r7, #28]
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	2b0f      	cmp	r3, #15
 8003874:	f67f ae84 	bls.w	8003580 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003878:	bf00      	nop
 800387a:	bf00      	nop
 800387c:	3724      	adds	r7, #36	; 0x24
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr
 8003886:	bf00      	nop
 8003888:	40023800 	.word	0x40023800
 800388c:	40013800 	.word	0x40013800
 8003890:	40020000 	.word	0x40020000
 8003894:	40020400 	.word	0x40020400
 8003898:	40020800 	.word	0x40020800
 800389c:	40020c00 	.word	0x40020c00
 80038a0:	40021000 	.word	0x40021000
 80038a4:	40021400 	.word	0x40021400
 80038a8:	40021800 	.word	0x40021800
 80038ac:	40021c00 	.word	0x40021c00
 80038b0:	40022000 	.word	0x40022000
 80038b4:	40022400 	.word	0x40022400
 80038b8:	40013c00 	.word	0x40013c00

080038bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	460b      	mov	r3, r1
 80038c6:	807b      	strh	r3, [r7, #2]
 80038c8:	4613      	mov	r3, r2
 80038ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80038cc:	787b      	ldrb	r3, [r7, #1]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d003      	beq.n	80038da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038d2:	887a      	ldrh	r2, [r7, #2]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80038d8:	e003      	b.n	80038e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80038da:	887b      	ldrh	r3, [r7, #2]
 80038dc:	041a      	lsls	r2, r3, #16
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	619a      	str	r2, [r3, #24]
}
 80038e2:	bf00      	nop
 80038e4:	370c      	adds	r7, #12
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr
	...

080038f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d101      	bne.n	8003902 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e12b      	b.n	8003b5a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003908:	b2db      	uxtb	r3, r3
 800390a:	2b00      	cmp	r3, #0
 800390c:	d106      	bne.n	800391c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f7fd ff9c 	bl	8001854 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2224      	movs	r2, #36	; 0x24
 8003920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f022 0201 	bic.w	r2, r2, #1
 8003932:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003942:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003952:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003954:	f000 fdac 	bl	80044b0 <HAL_RCC_GetPCLK1Freq>
 8003958:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	4a81      	ldr	r2, [pc, #516]	; (8003b64 <HAL_I2C_Init+0x274>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d807      	bhi.n	8003974 <HAL_I2C_Init+0x84>
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	4a80      	ldr	r2, [pc, #512]	; (8003b68 <HAL_I2C_Init+0x278>)
 8003968:	4293      	cmp	r3, r2
 800396a:	bf94      	ite	ls
 800396c:	2301      	movls	r3, #1
 800396e:	2300      	movhi	r3, #0
 8003970:	b2db      	uxtb	r3, r3
 8003972:	e006      	b.n	8003982 <HAL_I2C_Init+0x92>
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	4a7d      	ldr	r2, [pc, #500]	; (8003b6c <HAL_I2C_Init+0x27c>)
 8003978:	4293      	cmp	r3, r2
 800397a:	bf94      	ite	ls
 800397c:	2301      	movls	r3, #1
 800397e:	2300      	movhi	r3, #0
 8003980:	b2db      	uxtb	r3, r3
 8003982:	2b00      	cmp	r3, #0
 8003984:	d001      	beq.n	800398a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e0e7      	b.n	8003b5a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	4a78      	ldr	r2, [pc, #480]	; (8003b70 <HAL_I2C_Init+0x280>)
 800398e:	fba2 2303 	umull	r2, r3, r2, r3
 8003992:	0c9b      	lsrs	r3, r3, #18
 8003994:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	68ba      	ldr	r2, [r7, #8]
 80039a6:	430a      	orrs	r2, r1
 80039a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	6a1b      	ldr	r3, [r3, #32]
 80039b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	4a6a      	ldr	r2, [pc, #424]	; (8003b64 <HAL_I2C_Init+0x274>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d802      	bhi.n	80039c4 <HAL_I2C_Init+0xd4>
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	3301      	adds	r3, #1
 80039c2:	e009      	b.n	80039d8 <HAL_I2C_Init+0xe8>
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80039ca:	fb02 f303 	mul.w	r3, r2, r3
 80039ce:	4a69      	ldr	r2, [pc, #420]	; (8003b74 <HAL_I2C_Init+0x284>)
 80039d0:	fba2 2303 	umull	r2, r3, r2, r3
 80039d4:	099b      	lsrs	r3, r3, #6
 80039d6:	3301      	adds	r3, #1
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	6812      	ldr	r2, [r2, #0]
 80039dc:	430b      	orrs	r3, r1
 80039de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	69db      	ldr	r3, [r3, #28]
 80039e6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80039ea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	495c      	ldr	r1, [pc, #368]	; (8003b64 <HAL_I2C_Init+0x274>)
 80039f4:	428b      	cmp	r3, r1
 80039f6:	d819      	bhi.n	8003a2c <HAL_I2C_Init+0x13c>
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	1e59      	subs	r1, r3, #1
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	005b      	lsls	r3, r3, #1
 8003a02:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a06:	1c59      	adds	r1, r3, #1
 8003a08:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003a0c:	400b      	ands	r3, r1
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d00a      	beq.n	8003a28 <HAL_I2C_Init+0x138>
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	1e59      	subs	r1, r3, #1
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	005b      	lsls	r3, r3, #1
 8003a1c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a20:	3301      	adds	r3, #1
 8003a22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a26:	e051      	b.n	8003acc <HAL_I2C_Init+0x1dc>
 8003a28:	2304      	movs	r3, #4
 8003a2a:	e04f      	b.n	8003acc <HAL_I2C_Init+0x1dc>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d111      	bne.n	8003a58 <HAL_I2C_Init+0x168>
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	1e58      	subs	r0, r3, #1
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6859      	ldr	r1, [r3, #4]
 8003a3c:	460b      	mov	r3, r1
 8003a3e:	005b      	lsls	r3, r3, #1
 8003a40:	440b      	add	r3, r1
 8003a42:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a46:	3301      	adds	r3, #1
 8003a48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	bf0c      	ite	eq
 8003a50:	2301      	moveq	r3, #1
 8003a52:	2300      	movne	r3, #0
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	e012      	b.n	8003a7e <HAL_I2C_Init+0x18e>
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	1e58      	subs	r0, r3, #1
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6859      	ldr	r1, [r3, #4]
 8003a60:	460b      	mov	r3, r1
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	440b      	add	r3, r1
 8003a66:	0099      	lsls	r1, r3, #2
 8003a68:	440b      	add	r3, r1
 8003a6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a6e:	3301      	adds	r3, #1
 8003a70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	bf0c      	ite	eq
 8003a78:	2301      	moveq	r3, #1
 8003a7a:	2300      	movne	r3, #0
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d001      	beq.n	8003a86 <HAL_I2C_Init+0x196>
 8003a82:	2301      	movs	r3, #1
 8003a84:	e022      	b.n	8003acc <HAL_I2C_Init+0x1dc>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d10e      	bne.n	8003aac <HAL_I2C_Init+0x1bc>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	1e58      	subs	r0, r3, #1
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6859      	ldr	r1, [r3, #4]
 8003a96:	460b      	mov	r3, r1
 8003a98:	005b      	lsls	r3, r3, #1
 8003a9a:	440b      	add	r3, r1
 8003a9c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003aa0:	3301      	adds	r3, #1
 8003aa2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003aa6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003aaa:	e00f      	b.n	8003acc <HAL_I2C_Init+0x1dc>
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	1e58      	subs	r0, r3, #1
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6859      	ldr	r1, [r3, #4]
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	440b      	add	r3, r1
 8003aba:	0099      	lsls	r1, r3, #2
 8003abc:	440b      	add	r3, r1
 8003abe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ac8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003acc:	6879      	ldr	r1, [r7, #4]
 8003ace:	6809      	ldr	r1, [r1, #0]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	69da      	ldr	r2, [r3, #28]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a1b      	ldr	r3, [r3, #32]
 8003ae6:	431a      	orrs	r2, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	430a      	orrs	r2, r1
 8003aee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003afa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	6911      	ldr	r1, [r2, #16]
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	68d2      	ldr	r2, [r2, #12]
 8003b06:	4311      	orrs	r1, r2
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	6812      	ldr	r2, [r2, #0]
 8003b0c:	430b      	orrs	r3, r1
 8003b0e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	695a      	ldr	r2, [r3, #20]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	699b      	ldr	r3, [r3, #24]
 8003b22:	431a      	orrs	r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	430a      	orrs	r2, r1
 8003b2a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f042 0201 	orr.w	r2, r2, #1
 8003b3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2220      	movs	r2, #32
 8003b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b58:	2300      	movs	r3, #0
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3710      	adds	r7, #16
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	000186a0 	.word	0x000186a0
 8003b68:	001e847f 	.word	0x001e847f
 8003b6c:	003d08ff 	.word	0x003d08ff
 8003b70:	431bde83 	.word	0x431bde83
 8003b74:	10624dd3 	.word	0x10624dd3

08003b78 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	2b20      	cmp	r3, #32
 8003b8c:	d129      	bne.n	8003be2 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2224      	movs	r2, #36	; 0x24
 8003b92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f022 0201 	bic.w	r2, r2, #1
 8003ba4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f022 0210 	bic.w	r2, r2, #16
 8003bb4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	683a      	ldr	r2, [r7, #0]
 8003bc2:	430a      	orrs	r2, r1
 8003bc4:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f042 0201 	orr.w	r2, r2, #1
 8003bd4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2220      	movs	r2, #32
 8003bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003bde:	2300      	movs	r3, #0
 8003be0:	e000      	b.n	8003be4 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003be2:	2302      	movs	r3, #2
  }
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b085      	sub	sp, #20
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	2b20      	cmp	r3, #32
 8003c08:	d12a      	bne.n	8003c60 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2224      	movs	r2, #36	; 0x24
 8003c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f022 0201 	bic.w	r2, r2, #1
 8003c20:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c28:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003c2a:	89fb      	ldrh	r3, [r7, #14]
 8003c2c:	f023 030f 	bic.w	r3, r3, #15
 8003c30:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	b29a      	uxth	r2, r3
 8003c36:	89fb      	ldrh	r3, [r7, #14]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	89fa      	ldrh	r2, [r7, #14]
 8003c42:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f042 0201 	orr.w	r2, r2, #1
 8003c52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2220      	movs	r2, #32
 8003c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	e000      	b.n	8003c62 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003c60:	2302      	movs	r3, #2
  }
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3714      	adds	r7, #20
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr
	...

08003c70 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b086      	sub	sp, #24
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d101      	bne.n	8003c82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e264      	b.n	800414c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0301 	and.w	r3, r3, #1
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d075      	beq.n	8003d7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c8e:	4ba3      	ldr	r3, [pc, #652]	; (8003f1c <HAL_RCC_OscConfig+0x2ac>)
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	f003 030c 	and.w	r3, r3, #12
 8003c96:	2b04      	cmp	r3, #4
 8003c98:	d00c      	beq.n	8003cb4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c9a:	4ba0      	ldr	r3, [pc, #640]	; (8003f1c <HAL_RCC_OscConfig+0x2ac>)
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ca2:	2b08      	cmp	r3, #8
 8003ca4:	d112      	bne.n	8003ccc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ca6:	4b9d      	ldr	r3, [pc, #628]	; (8003f1c <HAL_RCC_OscConfig+0x2ac>)
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cb2:	d10b      	bne.n	8003ccc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cb4:	4b99      	ldr	r3, [pc, #612]	; (8003f1c <HAL_RCC_OscConfig+0x2ac>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d05b      	beq.n	8003d78 <HAL_RCC_OscConfig+0x108>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d157      	bne.n	8003d78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e23f      	b.n	800414c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cd4:	d106      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x74>
 8003cd6:	4b91      	ldr	r3, [pc, #580]	; (8003f1c <HAL_RCC_OscConfig+0x2ac>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a90      	ldr	r2, [pc, #576]	; (8003f1c <HAL_RCC_OscConfig+0x2ac>)
 8003cdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ce0:	6013      	str	r3, [r2, #0]
 8003ce2:	e01d      	b.n	8003d20 <HAL_RCC_OscConfig+0xb0>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cec:	d10c      	bne.n	8003d08 <HAL_RCC_OscConfig+0x98>
 8003cee:	4b8b      	ldr	r3, [pc, #556]	; (8003f1c <HAL_RCC_OscConfig+0x2ac>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a8a      	ldr	r2, [pc, #552]	; (8003f1c <HAL_RCC_OscConfig+0x2ac>)
 8003cf4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cf8:	6013      	str	r3, [r2, #0]
 8003cfa:	4b88      	ldr	r3, [pc, #544]	; (8003f1c <HAL_RCC_OscConfig+0x2ac>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a87      	ldr	r2, [pc, #540]	; (8003f1c <HAL_RCC_OscConfig+0x2ac>)
 8003d00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d04:	6013      	str	r3, [r2, #0]
 8003d06:	e00b      	b.n	8003d20 <HAL_RCC_OscConfig+0xb0>
 8003d08:	4b84      	ldr	r3, [pc, #528]	; (8003f1c <HAL_RCC_OscConfig+0x2ac>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a83      	ldr	r2, [pc, #524]	; (8003f1c <HAL_RCC_OscConfig+0x2ac>)
 8003d0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d12:	6013      	str	r3, [r2, #0]
 8003d14:	4b81      	ldr	r3, [pc, #516]	; (8003f1c <HAL_RCC_OscConfig+0x2ac>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a80      	ldr	r2, [pc, #512]	; (8003f1c <HAL_RCC_OscConfig+0x2ac>)
 8003d1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d013      	beq.n	8003d50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d28:	f7fe fab8 	bl	800229c <HAL_GetTick>
 8003d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d2e:	e008      	b.n	8003d42 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d30:	f7fe fab4 	bl	800229c <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	2b64      	cmp	r3, #100	; 0x64
 8003d3c:	d901      	bls.n	8003d42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e204      	b.n	800414c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d42:	4b76      	ldr	r3, [pc, #472]	; (8003f1c <HAL_RCC_OscConfig+0x2ac>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d0f0      	beq.n	8003d30 <HAL_RCC_OscConfig+0xc0>
 8003d4e:	e014      	b.n	8003d7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d50:	f7fe faa4 	bl	800229c <HAL_GetTick>
 8003d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d56:	e008      	b.n	8003d6a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d58:	f7fe faa0 	bl	800229c <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	2b64      	cmp	r3, #100	; 0x64
 8003d64:	d901      	bls.n	8003d6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e1f0      	b.n	800414c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d6a:	4b6c      	ldr	r3, [pc, #432]	; (8003f1c <HAL_RCC_OscConfig+0x2ac>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d1f0      	bne.n	8003d58 <HAL_RCC_OscConfig+0xe8>
 8003d76:	e000      	b.n	8003d7a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0302 	and.w	r3, r3, #2
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d063      	beq.n	8003e4e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d86:	4b65      	ldr	r3, [pc, #404]	; (8003f1c <HAL_RCC_OscConfig+0x2ac>)
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	f003 030c 	and.w	r3, r3, #12
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00b      	beq.n	8003daa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d92:	4b62      	ldr	r3, [pc, #392]	; (8003f1c <HAL_RCC_OscConfig+0x2ac>)
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d9a:	2b08      	cmp	r3, #8
 8003d9c:	d11c      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d9e:	4b5f      	ldr	r3, [pc, #380]	; (8003f1c <HAL_RCC_OscConfig+0x2ac>)
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d116      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003daa:	4b5c      	ldr	r3, [pc, #368]	; (8003f1c <HAL_RCC_OscConfig+0x2ac>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0302 	and.w	r3, r3, #2
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d005      	beq.n	8003dc2 <HAL_RCC_OscConfig+0x152>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d001      	beq.n	8003dc2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e1c4      	b.n	800414c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dc2:	4b56      	ldr	r3, [pc, #344]	; (8003f1c <HAL_RCC_OscConfig+0x2ac>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	691b      	ldr	r3, [r3, #16]
 8003dce:	00db      	lsls	r3, r3, #3
 8003dd0:	4952      	ldr	r1, [pc, #328]	; (8003f1c <HAL_RCC_OscConfig+0x2ac>)
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dd6:	e03a      	b.n	8003e4e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d020      	beq.n	8003e22 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003de0:	4b4f      	ldr	r3, [pc, #316]	; (8003f20 <HAL_RCC_OscConfig+0x2b0>)
 8003de2:	2201      	movs	r2, #1
 8003de4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003de6:	f7fe fa59 	bl	800229c <HAL_GetTick>
 8003dea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dec:	e008      	b.n	8003e00 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dee:	f7fe fa55 	bl	800229c <HAL_GetTick>
 8003df2:	4602      	mov	r2, r0
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	2b02      	cmp	r3, #2
 8003dfa:	d901      	bls.n	8003e00 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003dfc:	2303      	movs	r3, #3
 8003dfe:	e1a5      	b.n	800414c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e00:	4b46      	ldr	r3, [pc, #280]	; (8003f1c <HAL_RCC_OscConfig+0x2ac>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 0302 	and.w	r3, r3, #2
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d0f0      	beq.n	8003dee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e0c:	4b43      	ldr	r3, [pc, #268]	; (8003f1c <HAL_RCC_OscConfig+0x2ac>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	691b      	ldr	r3, [r3, #16]
 8003e18:	00db      	lsls	r3, r3, #3
 8003e1a:	4940      	ldr	r1, [pc, #256]	; (8003f1c <HAL_RCC_OscConfig+0x2ac>)
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	600b      	str	r3, [r1, #0]
 8003e20:	e015      	b.n	8003e4e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e22:	4b3f      	ldr	r3, [pc, #252]	; (8003f20 <HAL_RCC_OscConfig+0x2b0>)
 8003e24:	2200      	movs	r2, #0
 8003e26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e28:	f7fe fa38 	bl	800229c <HAL_GetTick>
 8003e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e2e:	e008      	b.n	8003e42 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e30:	f7fe fa34 	bl	800229c <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d901      	bls.n	8003e42 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e184      	b.n	800414c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e42:	4b36      	ldr	r3, [pc, #216]	; (8003f1c <HAL_RCC_OscConfig+0x2ac>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 0302 	and.w	r3, r3, #2
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d1f0      	bne.n	8003e30 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0308 	and.w	r3, r3, #8
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d030      	beq.n	8003ebc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	695b      	ldr	r3, [r3, #20]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d016      	beq.n	8003e90 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e62:	4b30      	ldr	r3, [pc, #192]	; (8003f24 <HAL_RCC_OscConfig+0x2b4>)
 8003e64:	2201      	movs	r2, #1
 8003e66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e68:	f7fe fa18 	bl	800229c <HAL_GetTick>
 8003e6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e6e:	e008      	b.n	8003e82 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e70:	f7fe fa14 	bl	800229c <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	2b02      	cmp	r3, #2
 8003e7c:	d901      	bls.n	8003e82 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e164      	b.n	800414c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e82:	4b26      	ldr	r3, [pc, #152]	; (8003f1c <HAL_RCC_OscConfig+0x2ac>)
 8003e84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e86:	f003 0302 	and.w	r3, r3, #2
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d0f0      	beq.n	8003e70 <HAL_RCC_OscConfig+0x200>
 8003e8e:	e015      	b.n	8003ebc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e90:	4b24      	ldr	r3, [pc, #144]	; (8003f24 <HAL_RCC_OscConfig+0x2b4>)
 8003e92:	2200      	movs	r2, #0
 8003e94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e96:	f7fe fa01 	bl	800229c <HAL_GetTick>
 8003e9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e9c:	e008      	b.n	8003eb0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e9e:	f7fe f9fd 	bl	800229c <HAL_GetTick>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	d901      	bls.n	8003eb0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	e14d      	b.n	800414c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003eb0:	4b1a      	ldr	r3, [pc, #104]	; (8003f1c <HAL_RCC_OscConfig+0x2ac>)
 8003eb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eb4:	f003 0302 	and.w	r3, r3, #2
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d1f0      	bne.n	8003e9e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0304 	and.w	r3, r3, #4
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	f000 80a0 	beq.w	800400a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ece:	4b13      	ldr	r3, [pc, #76]	; (8003f1c <HAL_RCC_OscConfig+0x2ac>)
 8003ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d10f      	bne.n	8003efa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003eda:	2300      	movs	r3, #0
 8003edc:	60bb      	str	r3, [r7, #8]
 8003ede:	4b0f      	ldr	r3, [pc, #60]	; (8003f1c <HAL_RCC_OscConfig+0x2ac>)
 8003ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee2:	4a0e      	ldr	r2, [pc, #56]	; (8003f1c <HAL_RCC_OscConfig+0x2ac>)
 8003ee4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ee8:	6413      	str	r3, [r2, #64]	; 0x40
 8003eea:	4b0c      	ldr	r3, [pc, #48]	; (8003f1c <HAL_RCC_OscConfig+0x2ac>)
 8003eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ef2:	60bb      	str	r3, [r7, #8]
 8003ef4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003efa:	4b0b      	ldr	r3, [pc, #44]	; (8003f28 <HAL_RCC_OscConfig+0x2b8>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d121      	bne.n	8003f4a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f06:	4b08      	ldr	r3, [pc, #32]	; (8003f28 <HAL_RCC_OscConfig+0x2b8>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a07      	ldr	r2, [pc, #28]	; (8003f28 <HAL_RCC_OscConfig+0x2b8>)
 8003f0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f12:	f7fe f9c3 	bl	800229c <HAL_GetTick>
 8003f16:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f18:	e011      	b.n	8003f3e <HAL_RCC_OscConfig+0x2ce>
 8003f1a:	bf00      	nop
 8003f1c:	40023800 	.word	0x40023800
 8003f20:	42470000 	.word	0x42470000
 8003f24:	42470e80 	.word	0x42470e80
 8003f28:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f2c:	f7fe f9b6 	bl	800229c <HAL_GetTick>
 8003f30:	4602      	mov	r2, r0
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	d901      	bls.n	8003f3e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e106      	b.n	800414c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f3e:	4b85      	ldr	r3, [pc, #532]	; (8004154 <HAL_RCC_OscConfig+0x4e4>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d0f0      	beq.n	8003f2c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d106      	bne.n	8003f60 <HAL_RCC_OscConfig+0x2f0>
 8003f52:	4b81      	ldr	r3, [pc, #516]	; (8004158 <HAL_RCC_OscConfig+0x4e8>)
 8003f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f56:	4a80      	ldr	r2, [pc, #512]	; (8004158 <HAL_RCC_OscConfig+0x4e8>)
 8003f58:	f043 0301 	orr.w	r3, r3, #1
 8003f5c:	6713      	str	r3, [r2, #112]	; 0x70
 8003f5e:	e01c      	b.n	8003f9a <HAL_RCC_OscConfig+0x32a>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	2b05      	cmp	r3, #5
 8003f66:	d10c      	bne.n	8003f82 <HAL_RCC_OscConfig+0x312>
 8003f68:	4b7b      	ldr	r3, [pc, #492]	; (8004158 <HAL_RCC_OscConfig+0x4e8>)
 8003f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f6c:	4a7a      	ldr	r2, [pc, #488]	; (8004158 <HAL_RCC_OscConfig+0x4e8>)
 8003f6e:	f043 0304 	orr.w	r3, r3, #4
 8003f72:	6713      	str	r3, [r2, #112]	; 0x70
 8003f74:	4b78      	ldr	r3, [pc, #480]	; (8004158 <HAL_RCC_OscConfig+0x4e8>)
 8003f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f78:	4a77      	ldr	r2, [pc, #476]	; (8004158 <HAL_RCC_OscConfig+0x4e8>)
 8003f7a:	f043 0301 	orr.w	r3, r3, #1
 8003f7e:	6713      	str	r3, [r2, #112]	; 0x70
 8003f80:	e00b      	b.n	8003f9a <HAL_RCC_OscConfig+0x32a>
 8003f82:	4b75      	ldr	r3, [pc, #468]	; (8004158 <HAL_RCC_OscConfig+0x4e8>)
 8003f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f86:	4a74      	ldr	r2, [pc, #464]	; (8004158 <HAL_RCC_OscConfig+0x4e8>)
 8003f88:	f023 0301 	bic.w	r3, r3, #1
 8003f8c:	6713      	str	r3, [r2, #112]	; 0x70
 8003f8e:	4b72      	ldr	r3, [pc, #456]	; (8004158 <HAL_RCC_OscConfig+0x4e8>)
 8003f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f92:	4a71      	ldr	r2, [pc, #452]	; (8004158 <HAL_RCC_OscConfig+0x4e8>)
 8003f94:	f023 0304 	bic.w	r3, r3, #4
 8003f98:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d015      	beq.n	8003fce <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fa2:	f7fe f97b 	bl	800229c <HAL_GetTick>
 8003fa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fa8:	e00a      	b.n	8003fc0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003faa:	f7fe f977 	bl	800229c <HAL_GetTick>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d901      	bls.n	8003fc0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003fbc:	2303      	movs	r3, #3
 8003fbe:	e0c5      	b.n	800414c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fc0:	4b65      	ldr	r3, [pc, #404]	; (8004158 <HAL_RCC_OscConfig+0x4e8>)
 8003fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fc4:	f003 0302 	and.w	r3, r3, #2
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d0ee      	beq.n	8003faa <HAL_RCC_OscConfig+0x33a>
 8003fcc:	e014      	b.n	8003ff8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fce:	f7fe f965 	bl	800229c <HAL_GetTick>
 8003fd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fd4:	e00a      	b.n	8003fec <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fd6:	f7fe f961 	bl	800229c <HAL_GetTick>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d901      	bls.n	8003fec <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e0af      	b.n	800414c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fec:	4b5a      	ldr	r3, [pc, #360]	; (8004158 <HAL_RCC_OscConfig+0x4e8>)
 8003fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff0:	f003 0302 	and.w	r3, r3, #2
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d1ee      	bne.n	8003fd6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ff8:	7dfb      	ldrb	r3, [r7, #23]
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d105      	bne.n	800400a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ffe:	4b56      	ldr	r3, [pc, #344]	; (8004158 <HAL_RCC_OscConfig+0x4e8>)
 8004000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004002:	4a55      	ldr	r2, [pc, #340]	; (8004158 <HAL_RCC_OscConfig+0x4e8>)
 8004004:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004008:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	699b      	ldr	r3, [r3, #24]
 800400e:	2b00      	cmp	r3, #0
 8004010:	f000 809b 	beq.w	800414a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004014:	4b50      	ldr	r3, [pc, #320]	; (8004158 <HAL_RCC_OscConfig+0x4e8>)
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	f003 030c 	and.w	r3, r3, #12
 800401c:	2b08      	cmp	r3, #8
 800401e:	d05c      	beq.n	80040da <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	699b      	ldr	r3, [r3, #24]
 8004024:	2b02      	cmp	r3, #2
 8004026:	d141      	bne.n	80040ac <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004028:	4b4c      	ldr	r3, [pc, #304]	; (800415c <HAL_RCC_OscConfig+0x4ec>)
 800402a:	2200      	movs	r2, #0
 800402c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800402e:	f7fe f935 	bl	800229c <HAL_GetTick>
 8004032:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004034:	e008      	b.n	8004048 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004036:	f7fe f931 	bl	800229c <HAL_GetTick>
 800403a:	4602      	mov	r2, r0
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	1ad3      	subs	r3, r2, r3
 8004040:	2b02      	cmp	r3, #2
 8004042:	d901      	bls.n	8004048 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004044:	2303      	movs	r3, #3
 8004046:	e081      	b.n	800414c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004048:	4b43      	ldr	r3, [pc, #268]	; (8004158 <HAL_RCC_OscConfig+0x4e8>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004050:	2b00      	cmp	r3, #0
 8004052:	d1f0      	bne.n	8004036 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	69da      	ldr	r2, [r3, #28]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6a1b      	ldr	r3, [r3, #32]
 800405c:	431a      	orrs	r2, r3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004062:	019b      	lsls	r3, r3, #6
 8004064:	431a      	orrs	r2, r3
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800406a:	085b      	lsrs	r3, r3, #1
 800406c:	3b01      	subs	r3, #1
 800406e:	041b      	lsls	r3, r3, #16
 8004070:	431a      	orrs	r2, r3
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004076:	061b      	lsls	r3, r3, #24
 8004078:	4937      	ldr	r1, [pc, #220]	; (8004158 <HAL_RCC_OscConfig+0x4e8>)
 800407a:	4313      	orrs	r3, r2
 800407c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800407e:	4b37      	ldr	r3, [pc, #220]	; (800415c <HAL_RCC_OscConfig+0x4ec>)
 8004080:	2201      	movs	r2, #1
 8004082:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004084:	f7fe f90a 	bl	800229c <HAL_GetTick>
 8004088:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800408a:	e008      	b.n	800409e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800408c:	f7fe f906 	bl	800229c <HAL_GetTick>
 8004090:	4602      	mov	r2, r0
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	2b02      	cmp	r3, #2
 8004098:	d901      	bls.n	800409e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e056      	b.n	800414c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800409e:	4b2e      	ldr	r3, [pc, #184]	; (8004158 <HAL_RCC_OscConfig+0x4e8>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d0f0      	beq.n	800408c <HAL_RCC_OscConfig+0x41c>
 80040aa:	e04e      	b.n	800414a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040ac:	4b2b      	ldr	r3, [pc, #172]	; (800415c <HAL_RCC_OscConfig+0x4ec>)
 80040ae:	2200      	movs	r2, #0
 80040b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040b2:	f7fe f8f3 	bl	800229c <HAL_GetTick>
 80040b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040b8:	e008      	b.n	80040cc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040ba:	f7fe f8ef 	bl	800229c <HAL_GetTick>
 80040be:	4602      	mov	r2, r0
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	2b02      	cmp	r3, #2
 80040c6:	d901      	bls.n	80040cc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80040c8:	2303      	movs	r3, #3
 80040ca:	e03f      	b.n	800414c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040cc:	4b22      	ldr	r3, [pc, #136]	; (8004158 <HAL_RCC_OscConfig+0x4e8>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d1f0      	bne.n	80040ba <HAL_RCC_OscConfig+0x44a>
 80040d8:	e037      	b.n	800414a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	699b      	ldr	r3, [r3, #24]
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d101      	bne.n	80040e6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e032      	b.n	800414c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80040e6:	4b1c      	ldr	r3, [pc, #112]	; (8004158 <HAL_RCC_OscConfig+0x4e8>)
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	699b      	ldr	r3, [r3, #24]
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d028      	beq.n	8004146 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040fe:	429a      	cmp	r2, r3
 8004100:	d121      	bne.n	8004146 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800410c:	429a      	cmp	r2, r3
 800410e:	d11a      	bne.n	8004146 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004110:	68fa      	ldr	r2, [r7, #12]
 8004112:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004116:	4013      	ands	r3, r2
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800411c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800411e:	4293      	cmp	r3, r2
 8004120:	d111      	bne.n	8004146 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800412c:	085b      	lsrs	r3, r3, #1
 800412e:	3b01      	subs	r3, #1
 8004130:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004132:	429a      	cmp	r2, r3
 8004134:	d107      	bne.n	8004146 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004140:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004142:	429a      	cmp	r2, r3
 8004144:	d001      	beq.n	800414a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e000      	b.n	800414c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800414a:	2300      	movs	r3, #0
}
 800414c:	4618      	mov	r0, r3
 800414e:	3718      	adds	r7, #24
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}
 8004154:	40007000 	.word	0x40007000
 8004158:	40023800 	.word	0x40023800
 800415c:	42470060 	.word	0x42470060

08004160 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b084      	sub	sp, #16
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d101      	bne.n	8004174 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e0cc      	b.n	800430e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004174:	4b68      	ldr	r3, [pc, #416]	; (8004318 <HAL_RCC_ClockConfig+0x1b8>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 030f 	and.w	r3, r3, #15
 800417c:	683a      	ldr	r2, [r7, #0]
 800417e:	429a      	cmp	r2, r3
 8004180:	d90c      	bls.n	800419c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004182:	4b65      	ldr	r3, [pc, #404]	; (8004318 <HAL_RCC_ClockConfig+0x1b8>)
 8004184:	683a      	ldr	r2, [r7, #0]
 8004186:	b2d2      	uxtb	r2, r2
 8004188:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800418a:	4b63      	ldr	r3, [pc, #396]	; (8004318 <HAL_RCC_ClockConfig+0x1b8>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 030f 	and.w	r3, r3, #15
 8004192:	683a      	ldr	r2, [r7, #0]
 8004194:	429a      	cmp	r2, r3
 8004196:	d001      	beq.n	800419c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e0b8      	b.n	800430e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 0302 	and.w	r3, r3, #2
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d020      	beq.n	80041ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0304 	and.w	r3, r3, #4
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d005      	beq.n	80041c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041b4:	4b59      	ldr	r3, [pc, #356]	; (800431c <HAL_RCC_ClockConfig+0x1bc>)
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	4a58      	ldr	r2, [pc, #352]	; (800431c <HAL_RCC_ClockConfig+0x1bc>)
 80041ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80041be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0308 	and.w	r3, r3, #8
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d005      	beq.n	80041d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041cc:	4b53      	ldr	r3, [pc, #332]	; (800431c <HAL_RCC_ClockConfig+0x1bc>)
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	4a52      	ldr	r2, [pc, #328]	; (800431c <HAL_RCC_ClockConfig+0x1bc>)
 80041d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80041d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041d8:	4b50      	ldr	r3, [pc, #320]	; (800431c <HAL_RCC_ClockConfig+0x1bc>)
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	494d      	ldr	r1, [pc, #308]	; (800431c <HAL_RCC_ClockConfig+0x1bc>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0301 	and.w	r3, r3, #1
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d044      	beq.n	8004280 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d107      	bne.n	800420e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041fe:	4b47      	ldr	r3, [pc, #284]	; (800431c <HAL_RCC_ClockConfig+0x1bc>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d119      	bne.n	800423e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e07f      	b.n	800430e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	2b02      	cmp	r3, #2
 8004214:	d003      	beq.n	800421e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800421a:	2b03      	cmp	r3, #3
 800421c:	d107      	bne.n	800422e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800421e:	4b3f      	ldr	r3, [pc, #252]	; (800431c <HAL_RCC_ClockConfig+0x1bc>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d109      	bne.n	800423e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e06f      	b.n	800430e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800422e:	4b3b      	ldr	r3, [pc, #236]	; (800431c <HAL_RCC_ClockConfig+0x1bc>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0302 	and.w	r3, r3, #2
 8004236:	2b00      	cmp	r3, #0
 8004238:	d101      	bne.n	800423e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e067      	b.n	800430e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800423e:	4b37      	ldr	r3, [pc, #220]	; (800431c <HAL_RCC_ClockConfig+0x1bc>)
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	f023 0203 	bic.w	r2, r3, #3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	4934      	ldr	r1, [pc, #208]	; (800431c <HAL_RCC_ClockConfig+0x1bc>)
 800424c:	4313      	orrs	r3, r2
 800424e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004250:	f7fe f824 	bl	800229c <HAL_GetTick>
 8004254:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004256:	e00a      	b.n	800426e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004258:	f7fe f820 	bl	800229c <HAL_GetTick>
 800425c:	4602      	mov	r2, r0
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	f241 3288 	movw	r2, #5000	; 0x1388
 8004266:	4293      	cmp	r3, r2
 8004268:	d901      	bls.n	800426e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e04f      	b.n	800430e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800426e:	4b2b      	ldr	r3, [pc, #172]	; (800431c <HAL_RCC_ClockConfig+0x1bc>)
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	f003 020c 	and.w	r2, r3, #12
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	429a      	cmp	r2, r3
 800427e:	d1eb      	bne.n	8004258 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004280:	4b25      	ldr	r3, [pc, #148]	; (8004318 <HAL_RCC_ClockConfig+0x1b8>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 030f 	and.w	r3, r3, #15
 8004288:	683a      	ldr	r2, [r7, #0]
 800428a:	429a      	cmp	r2, r3
 800428c:	d20c      	bcs.n	80042a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800428e:	4b22      	ldr	r3, [pc, #136]	; (8004318 <HAL_RCC_ClockConfig+0x1b8>)
 8004290:	683a      	ldr	r2, [r7, #0]
 8004292:	b2d2      	uxtb	r2, r2
 8004294:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004296:	4b20      	ldr	r3, [pc, #128]	; (8004318 <HAL_RCC_ClockConfig+0x1b8>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 030f 	and.w	r3, r3, #15
 800429e:	683a      	ldr	r2, [r7, #0]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d001      	beq.n	80042a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e032      	b.n	800430e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0304 	and.w	r3, r3, #4
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d008      	beq.n	80042c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042b4:	4b19      	ldr	r3, [pc, #100]	; (800431c <HAL_RCC_ClockConfig+0x1bc>)
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	4916      	ldr	r1, [pc, #88]	; (800431c <HAL_RCC_ClockConfig+0x1bc>)
 80042c2:	4313      	orrs	r3, r2
 80042c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0308 	and.w	r3, r3, #8
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d009      	beq.n	80042e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042d2:	4b12      	ldr	r3, [pc, #72]	; (800431c <HAL_RCC_ClockConfig+0x1bc>)
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	00db      	lsls	r3, r3, #3
 80042e0:	490e      	ldr	r1, [pc, #56]	; (800431c <HAL_RCC_ClockConfig+0x1bc>)
 80042e2:	4313      	orrs	r3, r2
 80042e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80042e6:	f000 f821 	bl	800432c <HAL_RCC_GetSysClockFreq>
 80042ea:	4602      	mov	r2, r0
 80042ec:	4b0b      	ldr	r3, [pc, #44]	; (800431c <HAL_RCC_ClockConfig+0x1bc>)
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	091b      	lsrs	r3, r3, #4
 80042f2:	f003 030f 	and.w	r3, r3, #15
 80042f6:	490a      	ldr	r1, [pc, #40]	; (8004320 <HAL_RCC_ClockConfig+0x1c0>)
 80042f8:	5ccb      	ldrb	r3, [r1, r3]
 80042fa:	fa22 f303 	lsr.w	r3, r2, r3
 80042fe:	4a09      	ldr	r2, [pc, #36]	; (8004324 <HAL_RCC_ClockConfig+0x1c4>)
 8004300:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004302:	4b09      	ldr	r3, [pc, #36]	; (8004328 <HAL_RCC_ClockConfig+0x1c8>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4618      	mov	r0, r3
 8004308:	f7fd ff84 	bl	8002214 <HAL_InitTick>

  return HAL_OK;
 800430c:	2300      	movs	r3, #0
}
 800430e:	4618      	mov	r0, r3
 8004310:	3710      	adds	r7, #16
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop
 8004318:	40023c00 	.word	0x40023c00
 800431c:	40023800 	.word	0x40023800
 8004320:	08005d18 	.word	0x08005d18
 8004324:	20000000 	.word	0x20000000
 8004328:	20000004 	.word	0x20000004

0800432c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800432c:	b5b0      	push	{r4, r5, r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004332:	2100      	movs	r1, #0
 8004334:	6079      	str	r1, [r7, #4]
 8004336:	2100      	movs	r1, #0
 8004338:	60f9      	str	r1, [r7, #12]
 800433a:	2100      	movs	r1, #0
 800433c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800433e:	2100      	movs	r1, #0
 8004340:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004342:	4952      	ldr	r1, [pc, #328]	; (800448c <HAL_RCC_GetSysClockFreq+0x160>)
 8004344:	6889      	ldr	r1, [r1, #8]
 8004346:	f001 010c 	and.w	r1, r1, #12
 800434a:	2908      	cmp	r1, #8
 800434c:	d00d      	beq.n	800436a <HAL_RCC_GetSysClockFreq+0x3e>
 800434e:	2908      	cmp	r1, #8
 8004350:	f200 8094 	bhi.w	800447c <HAL_RCC_GetSysClockFreq+0x150>
 8004354:	2900      	cmp	r1, #0
 8004356:	d002      	beq.n	800435e <HAL_RCC_GetSysClockFreq+0x32>
 8004358:	2904      	cmp	r1, #4
 800435a:	d003      	beq.n	8004364 <HAL_RCC_GetSysClockFreq+0x38>
 800435c:	e08e      	b.n	800447c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800435e:	4b4c      	ldr	r3, [pc, #304]	; (8004490 <HAL_RCC_GetSysClockFreq+0x164>)
 8004360:	60bb      	str	r3, [r7, #8]
       break;
 8004362:	e08e      	b.n	8004482 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004364:	4b4b      	ldr	r3, [pc, #300]	; (8004494 <HAL_RCC_GetSysClockFreq+0x168>)
 8004366:	60bb      	str	r3, [r7, #8]
      break;
 8004368:	e08b      	b.n	8004482 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800436a:	4948      	ldr	r1, [pc, #288]	; (800448c <HAL_RCC_GetSysClockFreq+0x160>)
 800436c:	6849      	ldr	r1, [r1, #4]
 800436e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8004372:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004374:	4945      	ldr	r1, [pc, #276]	; (800448c <HAL_RCC_GetSysClockFreq+0x160>)
 8004376:	6849      	ldr	r1, [r1, #4]
 8004378:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800437c:	2900      	cmp	r1, #0
 800437e:	d024      	beq.n	80043ca <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004380:	4942      	ldr	r1, [pc, #264]	; (800448c <HAL_RCC_GetSysClockFreq+0x160>)
 8004382:	6849      	ldr	r1, [r1, #4]
 8004384:	0989      	lsrs	r1, r1, #6
 8004386:	4608      	mov	r0, r1
 8004388:	f04f 0100 	mov.w	r1, #0
 800438c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004390:	f04f 0500 	mov.w	r5, #0
 8004394:	ea00 0204 	and.w	r2, r0, r4
 8004398:	ea01 0305 	and.w	r3, r1, r5
 800439c:	493d      	ldr	r1, [pc, #244]	; (8004494 <HAL_RCC_GetSysClockFreq+0x168>)
 800439e:	fb01 f003 	mul.w	r0, r1, r3
 80043a2:	2100      	movs	r1, #0
 80043a4:	fb01 f102 	mul.w	r1, r1, r2
 80043a8:	1844      	adds	r4, r0, r1
 80043aa:	493a      	ldr	r1, [pc, #232]	; (8004494 <HAL_RCC_GetSysClockFreq+0x168>)
 80043ac:	fba2 0101 	umull	r0, r1, r2, r1
 80043b0:	1863      	adds	r3, r4, r1
 80043b2:	4619      	mov	r1, r3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	461a      	mov	r2, r3
 80043b8:	f04f 0300 	mov.w	r3, #0
 80043bc:	f7fb ff16 	bl	80001ec <__aeabi_uldivmod>
 80043c0:	4602      	mov	r2, r0
 80043c2:	460b      	mov	r3, r1
 80043c4:	4613      	mov	r3, r2
 80043c6:	60fb      	str	r3, [r7, #12]
 80043c8:	e04a      	b.n	8004460 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043ca:	4b30      	ldr	r3, [pc, #192]	; (800448c <HAL_RCC_GetSysClockFreq+0x160>)
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	099b      	lsrs	r3, r3, #6
 80043d0:	461a      	mov	r2, r3
 80043d2:	f04f 0300 	mov.w	r3, #0
 80043d6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80043da:	f04f 0100 	mov.w	r1, #0
 80043de:	ea02 0400 	and.w	r4, r2, r0
 80043e2:	ea03 0501 	and.w	r5, r3, r1
 80043e6:	4620      	mov	r0, r4
 80043e8:	4629      	mov	r1, r5
 80043ea:	f04f 0200 	mov.w	r2, #0
 80043ee:	f04f 0300 	mov.w	r3, #0
 80043f2:	014b      	lsls	r3, r1, #5
 80043f4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80043f8:	0142      	lsls	r2, r0, #5
 80043fa:	4610      	mov	r0, r2
 80043fc:	4619      	mov	r1, r3
 80043fe:	1b00      	subs	r0, r0, r4
 8004400:	eb61 0105 	sbc.w	r1, r1, r5
 8004404:	f04f 0200 	mov.w	r2, #0
 8004408:	f04f 0300 	mov.w	r3, #0
 800440c:	018b      	lsls	r3, r1, #6
 800440e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004412:	0182      	lsls	r2, r0, #6
 8004414:	1a12      	subs	r2, r2, r0
 8004416:	eb63 0301 	sbc.w	r3, r3, r1
 800441a:	f04f 0000 	mov.w	r0, #0
 800441e:	f04f 0100 	mov.w	r1, #0
 8004422:	00d9      	lsls	r1, r3, #3
 8004424:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004428:	00d0      	lsls	r0, r2, #3
 800442a:	4602      	mov	r2, r0
 800442c:	460b      	mov	r3, r1
 800442e:	1912      	adds	r2, r2, r4
 8004430:	eb45 0303 	adc.w	r3, r5, r3
 8004434:	f04f 0000 	mov.w	r0, #0
 8004438:	f04f 0100 	mov.w	r1, #0
 800443c:	0299      	lsls	r1, r3, #10
 800443e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004442:	0290      	lsls	r0, r2, #10
 8004444:	4602      	mov	r2, r0
 8004446:	460b      	mov	r3, r1
 8004448:	4610      	mov	r0, r2
 800444a:	4619      	mov	r1, r3
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	461a      	mov	r2, r3
 8004450:	f04f 0300 	mov.w	r3, #0
 8004454:	f7fb feca 	bl	80001ec <__aeabi_uldivmod>
 8004458:	4602      	mov	r2, r0
 800445a:	460b      	mov	r3, r1
 800445c:	4613      	mov	r3, r2
 800445e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004460:	4b0a      	ldr	r3, [pc, #40]	; (800448c <HAL_RCC_GetSysClockFreq+0x160>)
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	0c1b      	lsrs	r3, r3, #16
 8004466:	f003 0303 	and.w	r3, r3, #3
 800446a:	3301      	adds	r3, #1
 800446c:	005b      	lsls	r3, r3, #1
 800446e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004470:	68fa      	ldr	r2, [r7, #12]
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	fbb2 f3f3 	udiv	r3, r2, r3
 8004478:	60bb      	str	r3, [r7, #8]
      break;
 800447a:	e002      	b.n	8004482 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800447c:	4b04      	ldr	r3, [pc, #16]	; (8004490 <HAL_RCC_GetSysClockFreq+0x164>)
 800447e:	60bb      	str	r3, [r7, #8]
      break;
 8004480:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004482:	68bb      	ldr	r3, [r7, #8]
}
 8004484:	4618      	mov	r0, r3
 8004486:	3710      	adds	r7, #16
 8004488:	46bd      	mov	sp, r7
 800448a:	bdb0      	pop	{r4, r5, r7, pc}
 800448c:	40023800 	.word	0x40023800
 8004490:	00f42400 	.word	0x00f42400
 8004494:	00b71b00 	.word	0x00b71b00

08004498 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004498:	b480      	push	{r7}
 800449a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800449c:	4b03      	ldr	r3, [pc, #12]	; (80044ac <HAL_RCC_GetHCLKFreq+0x14>)
 800449e:	681b      	ldr	r3, [r3, #0]
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr
 80044aa:	bf00      	nop
 80044ac:	20000000 	.word	0x20000000

080044b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80044b4:	f7ff fff0 	bl	8004498 <HAL_RCC_GetHCLKFreq>
 80044b8:	4602      	mov	r2, r0
 80044ba:	4b05      	ldr	r3, [pc, #20]	; (80044d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	0a9b      	lsrs	r3, r3, #10
 80044c0:	f003 0307 	and.w	r3, r3, #7
 80044c4:	4903      	ldr	r1, [pc, #12]	; (80044d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044c6:	5ccb      	ldrb	r3, [r1, r3]
 80044c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	40023800 	.word	0x40023800
 80044d4:	08005d28 	.word	0x08005d28

080044d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80044dc:	f7ff ffdc 	bl	8004498 <HAL_RCC_GetHCLKFreq>
 80044e0:	4602      	mov	r2, r0
 80044e2:	4b05      	ldr	r3, [pc, #20]	; (80044f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	0b5b      	lsrs	r3, r3, #13
 80044e8:	f003 0307 	and.w	r3, r3, #7
 80044ec:	4903      	ldr	r1, [pc, #12]	; (80044fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80044ee:	5ccb      	ldrb	r3, [r1, r3]
 80044f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	bd80      	pop	{r7, pc}
 80044f8:	40023800 	.word	0x40023800
 80044fc:	08005d28 	.word	0x08005d28

08004500 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b082      	sub	sp, #8
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d101      	bne.n	8004512 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e07b      	b.n	800460a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004516:	2b00      	cmp	r3, #0
 8004518:	d108      	bne.n	800452c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004522:	d009      	beq.n	8004538 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	61da      	str	r2, [r3, #28]
 800452a:	e005      	b.n	8004538 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004544:	b2db      	uxtb	r3, r3
 8004546:	2b00      	cmp	r3, #0
 8004548:	d106      	bne.n	8004558 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f7fd f9e8 	bl	8001928 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2202      	movs	r2, #2
 800455c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800456e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004580:	431a      	orrs	r2, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800458a:	431a      	orrs	r2, r3
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	691b      	ldr	r3, [r3, #16]
 8004590:	f003 0302 	and.w	r3, r3, #2
 8004594:	431a      	orrs	r2, r3
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	695b      	ldr	r3, [r3, #20]
 800459a:	f003 0301 	and.w	r3, r3, #1
 800459e:	431a      	orrs	r2, r3
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	699b      	ldr	r3, [r3, #24]
 80045a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045a8:	431a      	orrs	r2, r3
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	69db      	ldr	r3, [r3, #28]
 80045ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80045b2:	431a      	orrs	r2, r3
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6a1b      	ldr	r3, [r3, #32]
 80045b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045bc:	ea42 0103 	orr.w	r1, r2, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	430a      	orrs	r2, r1
 80045ce:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	699b      	ldr	r3, [r3, #24]
 80045d4:	0c1b      	lsrs	r3, r3, #16
 80045d6:	f003 0104 	and.w	r1, r3, #4
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045de:	f003 0210 	and.w	r2, r3, #16
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	430a      	orrs	r2, r1
 80045e8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	69da      	ldr	r2, [r3, #28]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045f8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2200      	movs	r2, #0
 80045fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004608:	2300      	movs	r3, #0
}
 800460a:	4618      	mov	r0, r3
 800460c:	3708      	adds	r7, #8
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}

08004612 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004612:	b580      	push	{r7, lr}
 8004614:	b082      	sub	sp, #8
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d101      	bne.n	8004624 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e041      	b.n	80046a8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800462a:	b2db      	uxtb	r3, r3
 800462c:	2b00      	cmp	r3, #0
 800462e:	d106      	bne.n	800463e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	f7fd f9bd 	bl	80019b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2202      	movs	r2, #2
 8004642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	3304      	adds	r3, #4
 800464e:	4619      	mov	r1, r3
 8004650:	4610      	mov	r0, r2
 8004652:	f000 f8ef 	bl	8004834 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2201      	movs	r2, #1
 800465a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2201      	movs	r2, #1
 8004662:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2201      	movs	r2, #1
 800466a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2201      	movs	r2, #1
 8004672:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2201      	movs	r2, #1
 800467a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2201      	movs	r2, #1
 8004682:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2201      	movs	r2, #1
 800468a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2201      	movs	r2, #1
 8004692:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2201      	movs	r2, #1
 800469a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2201      	movs	r2, #1
 80046a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046a6:	2300      	movs	r3, #0
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3708      	adds	r7, #8
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}

080046b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b086      	sub	sp, #24
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	60f8      	str	r0, [r7, #12]
 80046b8:	60b9      	str	r1, [r7, #8]
 80046ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046bc:	2300      	movs	r3, #0
 80046be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d101      	bne.n	80046ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 80046ca:	2302      	movs	r3, #2
 80046cc:	e0ae      	b.n	800482c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2201      	movs	r2, #1
 80046d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2b0c      	cmp	r3, #12
 80046da:	f200 809f 	bhi.w	800481c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80046de:	a201      	add	r2, pc, #4	; (adr r2, 80046e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80046e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046e4:	08004719 	.word	0x08004719
 80046e8:	0800481d 	.word	0x0800481d
 80046ec:	0800481d 	.word	0x0800481d
 80046f0:	0800481d 	.word	0x0800481d
 80046f4:	08004759 	.word	0x08004759
 80046f8:	0800481d 	.word	0x0800481d
 80046fc:	0800481d 	.word	0x0800481d
 8004700:	0800481d 	.word	0x0800481d
 8004704:	0800479b 	.word	0x0800479b
 8004708:	0800481d 	.word	0x0800481d
 800470c:	0800481d 	.word	0x0800481d
 8004710:	0800481d 	.word	0x0800481d
 8004714:	080047db 	.word	0x080047db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	68b9      	ldr	r1, [r7, #8]
 800471e:	4618      	mov	r0, r3
 8004720:	f000 f928 	bl	8004974 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	699a      	ldr	r2, [r3, #24]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f042 0208 	orr.w	r2, r2, #8
 8004732:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	699a      	ldr	r2, [r3, #24]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f022 0204 	bic.w	r2, r2, #4
 8004742:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	6999      	ldr	r1, [r3, #24]
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	691a      	ldr	r2, [r3, #16]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	430a      	orrs	r2, r1
 8004754:	619a      	str	r2, [r3, #24]
      break;
 8004756:	e064      	b.n	8004822 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	68b9      	ldr	r1, [r7, #8]
 800475e:	4618      	mov	r0, r3
 8004760:	f000 f978 	bl	8004a54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	699a      	ldr	r2, [r3, #24]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004772:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	699a      	ldr	r2, [r3, #24]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004782:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	6999      	ldr	r1, [r3, #24]
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	691b      	ldr	r3, [r3, #16]
 800478e:	021a      	lsls	r2, r3, #8
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	430a      	orrs	r2, r1
 8004796:	619a      	str	r2, [r3, #24]
      break;
 8004798:	e043      	b.n	8004822 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	68b9      	ldr	r1, [r7, #8]
 80047a0:	4618      	mov	r0, r3
 80047a2:	f000 f9cd 	bl	8004b40 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	69da      	ldr	r2, [r3, #28]
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f042 0208 	orr.w	r2, r2, #8
 80047b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	69da      	ldr	r2, [r3, #28]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f022 0204 	bic.w	r2, r2, #4
 80047c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	69d9      	ldr	r1, [r3, #28]
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	691a      	ldr	r2, [r3, #16]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	430a      	orrs	r2, r1
 80047d6:	61da      	str	r2, [r3, #28]
      break;
 80047d8:	e023      	b.n	8004822 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	68b9      	ldr	r1, [r7, #8]
 80047e0:	4618      	mov	r0, r3
 80047e2:	f000 fa21 	bl	8004c28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	69da      	ldr	r2, [r3, #28]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	69da      	ldr	r2, [r3, #28]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004804:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	69d9      	ldr	r1, [r3, #28]
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	691b      	ldr	r3, [r3, #16]
 8004810:	021a      	lsls	r2, r3, #8
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	430a      	orrs	r2, r1
 8004818:	61da      	str	r2, [r3, #28]
      break;
 800481a:	e002      	b.n	8004822 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	75fb      	strb	r3, [r7, #23]
      break;
 8004820:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2200      	movs	r2, #0
 8004826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800482a:	7dfb      	ldrb	r3, [r7, #23]
}
 800482c:	4618      	mov	r0, r3
 800482e:	3718      	adds	r7, #24
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}

08004834 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004834:	b480      	push	{r7}
 8004836:	b085      	sub	sp, #20
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	4a40      	ldr	r2, [pc, #256]	; (8004948 <TIM_Base_SetConfig+0x114>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d013      	beq.n	8004874 <TIM_Base_SetConfig+0x40>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004852:	d00f      	beq.n	8004874 <TIM_Base_SetConfig+0x40>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	4a3d      	ldr	r2, [pc, #244]	; (800494c <TIM_Base_SetConfig+0x118>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d00b      	beq.n	8004874 <TIM_Base_SetConfig+0x40>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4a3c      	ldr	r2, [pc, #240]	; (8004950 <TIM_Base_SetConfig+0x11c>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d007      	beq.n	8004874 <TIM_Base_SetConfig+0x40>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	4a3b      	ldr	r2, [pc, #236]	; (8004954 <TIM_Base_SetConfig+0x120>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d003      	beq.n	8004874 <TIM_Base_SetConfig+0x40>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	4a3a      	ldr	r2, [pc, #232]	; (8004958 <TIM_Base_SetConfig+0x124>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d108      	bne.n	8004886 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800487a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	68fa      	ldr	r2, [r7, #12]
 8004882:	4313      	orrs	r3, r2
 8004884:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4a2f      	ldr	r2, [pc, #188]	; (8004948 <TIM_Base_SetConfig+0x114>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d02b      	beq.n	80048e6 <TIM_Base_SetConfig+0xb2>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004894:	d027      	beq.n	80048e6 <TIM_Base_SetConfig+0xb2>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4a2c      	ldr	r2, [pc, #176]	; (800494c <TIM_Base_SetConfig+0x118>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d023      	beq.n	80048e6 <TIM_Base_SetConfig+0xb2>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a2b      	ldr	r2, [pc, #172]	; (8004950 <TIM_Base_SetConfig+0x11c>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d01f      	beq.n	80048e6 <TIM_Base_SetConfig+0xb2>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a2a      	ldr	r2, [pc, #168]	; (8004954 <TIM_Base_SetConfig+0x120>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d01b      	beq.n	80048e6 <TIM_Base_SetConfig+0xb2>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a29      	ldr	r2, [pc, #164]	; (8004958 <TIM_Base_SetConfig+0x124>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d017      	beq.n	80048e6 <TIM_Base_SetConfig+0xb2>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a28      	ldr	r2, [pc, #160]	; (800495c <TIM_Base_SetConfig+0x128>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d013      	beq.n	80048e6 <TIM_Base_SetConfig+0xb2>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a27      	ldr	r2, [pc, #156]	; (8004960 <TIM_Base_SetConfig+0x12c>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d00f      	beq.n	80048e6 <TIM_Base_SetConfig+0xb2>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a26      	ldr	r2, [pc, #152]	; (8004964 <TIM_Base_SetConfig+0x130>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d00b      	beq.n	80048e6 <TIM_Base_SetConfig+0xb2>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a25      	ldr	r2, [pc, #148]	; (8004968 <TIM_Base_SetConfig+0x134>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d007      	beq.n	80048e6 <TIM_Base_SetConfig+0xb2>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4a24      	ldr	r2, [pc, #144]	; (800496c <TIM_Base_SetConfig+0x138>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d003      	beq.n	80048e6 <TIM_Base_SetConfig+0xb2>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4a23      	ldr	r2, [pc, #140]	; (8004970 <TIM_Base_SetConfig+0x13c>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d108      	bne.n	80048f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	68fa      	ldr	r2, [r7, #12]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	695b      	ldr	r3, [r3, #20]
 8004902:	4313      	orrs	r3, r2
 8004904:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	68fa      	ldr	r2, [r7, #12]
 800490a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	689a      	ldr	r2, [r3, #8]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	4a0a      	ldr	r2, [pc, #40]	; (8004948 <TIM_Base_SetConfig+0x114>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d003      	beq.n	800492c <TIM_Base_SetConfig+0xf8>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	4a0c      	ldr	r2, [pc, #48]	; (8004958 <TIM_Base_SetConfig+0x124>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d103      	bne.n	8004934 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	691a      	ldr	r2, [r3, #16]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	615a      	str	r2, [r3, #20]
}
 800493a:	bf00      	nop
 800493c:	3714      	adds	r7, #20
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr
 8004946:	bf00      	nop
 8004948:	40010000 	.word	0x40010000
 800494c:	40000400 	.word	0x40000400
 8004950:	40000800 	.word	0x40000800
 8004954:	40000c00 	.word	0x40000c00
 8004958:	40010400 	.word	0x40010400
 800495c:	40014000 	.word	0x40014000
 8004960:	40014400 	.word	0x40014400
 8004964:	40014800 	.word	0x40014800
 8004968:	40001800 	.word	0x40001800
 800496c:	40001c00 	.word	0x40001c00
 8004970:	40002000 	.word	0x40002000

08004974 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004974:	b480      	push	{r7}
 8004976:	b087      	sub	sp, #28
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a1b      	ldr	r3, [r3, #32]
 8004982:	f023 0201 	bic.w	r2, r3, #1
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6a1b      	ldr	r3, [r3, #32]
 800498e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	699b      	ldr	r3, [r3, #24]
 800499a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f023 0303 	bic.w	r3, r3, #3
 80049aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	68fa      	ldr	r2, [r7, #12]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	f023 0302 	bic.w	r3, r3, #2
 80049bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	697a      	ldr	r2, [r7, #20]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	4a20      	ldr	r2, [pc, #128]	; (8004a4c <TIM_OC1_SetConfig+0xd8>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d003      	beq.n	80049d8 <TIM_OC1_SetConfig+0x64>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	4a1f      	ldr	r2, [pc, #124]	; (8004a50 <TIM_OC1_SetConfig+0xdc>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d10c      	bne.n	80049f2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	f023 0308 	bic.w	r3, r3, #8
 80049de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	697a      	ldr	r2, [r7, #20]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	f023 0304 	bic.w	r3, r3, #4
 80049f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a15      	ldr	r2, [pc, #84]	; (8004a4c <TIM_OC1_SetConfig+0xd8>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d003      	beq.n	8004a02 <TIM_OC1_SetConfig+0x8e>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a14      	ldr	r2, [pc, #80]	; (8004a50 <TIM_OC1_SetConfig+0xdc>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d111      	bne.n	8004a26 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	695b      	ldr	r3, [r3, #20]
 8004a16:	693a      	ldr	r2, [r7, #16]
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	699b      	ldr	r3, [r3, #24]
 8004a20:	693a      	ldr	r2, [r7, #16]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	693a      	ldr	r2, [r7, #16]
 8004a2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	68fa      	ldr	r2, [r7, #12]
 8004a30:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	685a      	ldr	r2, [r3, #4]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	697a      	ldr	r2, [r7, #20]
 8004a3e:	621a      	str	r2, [r3, #32]
}
 8004a40:	bf00      	nop
 8004a42:	371c      	adds	r7, #28
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr
 8004a4c:	40010000 	.word	0x40010000
 8004a50:	40010400 	.word	0x40010400

08004a54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b087      	sub	sp, #28
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6a1b      	ldr	r3, [r3, #32]
 8004a62:	f023 0210 	bic.w	r2, r3, #16
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6a1b      	ldr	r3, [r3, #32]
 8004a6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	699b      	ldr	r3, [r3, #24]
 8004a7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	021b      	lsls	r3, r3, #8
 8004a92:	68fa      	ldr	r2, [r7, #12]
 8004a94:	4313      	orrs	r3, r2
 8004a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	f023 0320 	bic.w	r3, r3, #32
 8004a9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	011b      	lsls	r3, r3, #4
 8004aa6:	697a      	ldr	r2, [r7, #20]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	4a22      	ldr	r2, [pc, #136]	; (8004b38 <TIM_OC2_SetConfig+0xe4>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d003      	beq.n	8004abc <TIM_OC2_SetConfig+0x68>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	4a21      	ldr	r2, [pc, #132]	; (8004b3c <TIM_OC2_SetConfig+0xe8>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d10d      	bne.n	8004ad8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ac2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	011b      	lsls	r3, r3, #4
 8004aca:	697a      	ldr	r2, [r7, #20]
 8004acc:	4313      	orrs	r3, r2
 8004ace:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ad6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	4a17      	ldr	r2, [pc, #92]	; (8004b38 <TIM_OC2_SetConfig+0xe4>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d003      	beq.n	8004ae8 <TIM_OC2_SetConfig+0x94>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	4a16      	ldr	r2, [pc, #88]	; (8004b3c <TIM_OC2_SetConfig+0xe8>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d113      	bne.n	8004b10 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004aee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004af6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	695b      	ldr	r3, [r3, #20]
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	693a      	ldr	r2, [r7, #16]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	699b      	ldr	r3, [r3, #24]
 8004b08:	009b      	lsls	r3, r3, #2
 8004b0a:	693a      	ldr	r2, [r7, #16]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	693a      	ldr	r2, [r7, #16]
 8004b14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	68fa      	ldr	r2, [r7, #12]
 8004b1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	685a      	ldr	r2, [r3, #4]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	697a      	ldr	r2, [r7, #20]
 8004b28:	621a      	str	r2, [r3, #32]
}
 8004b2a:	bf00      	nop
 8004b2c:	371c      	adds	r7, #28
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr
 8004b36:	bf00      	nop
 8004b38:	40010000 	.word	0x40010000
 8004b3c:	40010400 	.word	0x40010400

08004b40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b087      	sub	sp, #28
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6a1b      	ldr	r3, [r3, #32]
 8004b4e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a1b      	ldr	r3, [r3, #32]
 8004b5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	69db      	ldr	r3, [r3, #28]
 8004b66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f023 0303 	bic.w	r3, r3, #3
 8004b76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	68fa      	ldr	r2, [r7, #12]
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	021b      	lsls	r3, r3, #8
 8004b90:	697a      	ldr	r2, [r7, #20]
 8004b92:	4313      	orrs	r3, r2
 8004b94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	4a21      	ldr	r2, [pc, #132]	; (8004c20 <TIM_OC3_SetConfig+0xe0>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d003      	beq.n	8004ba6 <TIM_OC3_SetConfig+0x66>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4a20      	ldr	r2, [pc, #128]	; (8004c24 <TIM_OC3_SetConfig+0xe4>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d10d      	bne.n	8004bc2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004bac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	021b      	lsls	r3, r3, #8
 8004bb4:	697a      	ldr	r2, [r7, #20]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004bc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4a16      	ldr	r2, [pc, #88]	; (8004c20 <TIM_OC3_SetConfig+0xe0>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d003      	beq.n	8004bd2 <TIM_OC3_SetConfig+0x92>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a15      	ldr	r2, [pc, #84]	; (8004c24 <TIM_OC3_SetConfig+0xe4>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d113      	bne.n	8004bfa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004bd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004be0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	695b      	ldr	r3, [r3, #20]
 8004be6:	011b      	lsls	r3, r3, #4
 8004be8:	693a      	ldr	r2, [r7, #16]
 8004bea:	4313      	orrs	r3, r2
 8004bec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	699b      	ldr	r3, [r3, #24]
 8004bf2:	011b      	lsls	r3, r3, #4
 8004bf4:	693a      	ldr	r2, [r7, #16]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	693a      	ldr	r2, [r7, #16]
 8004bfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	68fa      	ldr	r2, [r7, #12]
 8004c04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	685a      	ldr	r2, [r3, #4]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	697a      	ldr	r2, [r7, #20]
 8004c12:	621a      	str	r2, [r3, #32]
}
 8004c14:	bf00      	nop
 8004c16:	371c      	adds	r7, #28
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr
 8004c20:	40010000 	.word	0x40010000
 8004c24:	40010400 	.word	0x40010400

08004c28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b087      	sub	sp, #28
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a1b      	ldr	r3, [r3, #32]
 8004c36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6a1b      	ldr	r3, [r3, #32]
 8004c42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	69db      	ldr	r3, [r3, #28]
 8004c4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	021b      	lsls	r3, r3, #8
 8004c66:	68fa      	ldr	r2, [r7, #12]
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	031b      	lsls	r3, r3, #12
 8004c7a:	693a      	ldr	r2, [r7, #16]
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	4a12      	ldr	r2, [pc, #72]	; (8004ccc <TIM_OC4_SetConfig+0xa4>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d003      	beq.n	8004c90 <TIM_OC4_SetConfig+0x68>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	4a11      	ldr	r2, [pc, #68]	; (8004cd0 <TIM_OC4_SetConfig+0xa8>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d109      	bne.n	8004ca4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c96:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	695b      	ldr	r3, [r3, #20]
 8004c9c:	019b      	lsls	r3, r3, #6
 8004c9e:	697a      	ldr	r2, [r7, #20]
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	697a      	ldr	r2, [r7, #20]
 8004ca8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	68fa      	ldr	r2, [r7, #12]
 8004cae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	685a      	ldr	r2, [r3, #4]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	693a      	ldr	r2, [r7, #16]
 8004cbc:	621a      	str	r2, [r3, #32]
}
 8004cbe:	bf00      	nop
 8004cc0:	371c      	adds	r7, #28
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr
 8004cca:	bf00      	nop
 8004ccc:	40010000 	.word	0x40010000
 8004cd0:	40010400 	.word	0x40010400

08004cd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b085      	sub	sp, #20
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d101      	bne.n	8004cec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ce8:	2302      	movs	r3, #2
 8004cea:	e05a      	b.n	8004da2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2202      	movs	r2, #2
 8004cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	68fa      	ldr	r2, [r7, #12]
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	68fa      	ldr	r2, [r7, #12]
 8004d24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a21      	ldr	r2, [pc, #132]	; (8004db0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d022      	beq.n	8004d76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d38:	d01d      	beq.n	8004d76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a1d      	ldr	r2, [pc, #116]	; (8004db4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d018      	beq.n	8004d76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a1b      	ldr	r2, [pc, #108]	; (8004db8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d013      	beq.n	8004d76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a1a      	ldr	r2, [pc, #104]	; (8004dbc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d00e      	beq.n	8004d76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a18      	ldr	r2, [pc, #96]	; (8004dc0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d009      	beq.n	8004d76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a17      	ldr	r2, [pc, #92]	; (8004dc4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d004      	beq.n	8004d76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a15      	ldr	r2, [pc, #84]	; (8004dc8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d10c      	bne.n	8004d90 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d7c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	68ba      	ldr	r2, [r7, #8]
 8004d84:	4313      	orrs	r3, r2
 8004d86:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	68ba      	ldr	r2, [r7, #8]
 8004d8e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004da0:	2300      	movs	r3, #0
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3714      	adds	r7, #20
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr
 8004dae:	bf00      	nop
 8004db0:	40010000 	.word	0x40010000
 8004db4:	40000400 	.word	0x40000400
 8004db8:	40000800 	.word	0x40000800
 8004dbc:	40000c00 	.word	0x40000c00
 8004dc0:	40010400 	.word	0x40010400
 8004dc4:	40014000 	.word	0x40014000
 8004dc8:	40001800 	.word	0x40001800

08004dcc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b082      	sub	sp, #8
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d101      	bne.n	8004dde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e03f      	b.n	8004e5e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d106      	bne.n	8004df8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2200      	movs	r2, #0
 8004dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f7fc ff30 	bl	8001c58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2224      	movs	r2, #36	; 0x24
 8004dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	68da      	ldr	r2, [r3, #12]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f000 fd7b 	bl	800590c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	691a      	ldr	r2, [r3, #16]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	695a      	ldr	r2, [r3, #20]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	68da      	ldr	r2, [r3, #12]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2220      	movs	r2, #32
 8004e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2220      	movs	r2, #32
 8004e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004e5c:	2300      	movs	r3, #0
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3708      	adds	r7, #8
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}

08004e66 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e66:	b580      	push	{r7, lr}
 8004e68:	b08a      	sub	sp, #40	; 0x28
 8004e6a:	af02      	add	r7, sp, #8
 8004e6c:	60f8      	str	r0, [r7, #12]
 8004e6e:	60b9      	str	r1, [r7, #8]
 8004e70:	603b      	str	r3, [r7, #0]
 8004e72:	4613      	mov	r3, r2
 8004e74:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004e76:	2300      	movs	r3, #0
 8004e78:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	2b20      	cmp	r3, #32
 8004e84:	d17c      	bne.n	8004f80 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d002      	beq.n	8004e92 <HAL_UART_Transmit+0x2c>
 8004e8c:	88fb      	ldrh	r3, [r7, #6]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d101      	bne.n	8004e96 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	e075      	b.n	8004f82 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d101      	bne.n	8004ea4 <HAL_UART_Transmit+0x3e>
 8004ea0:	2302      	movs	r3, #2
 8004ea2:	e06e      	b.n	8004f82 <HAL_UART_Transmit+0x11c>
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2221      	movs	r2, #33	; 0x21
 8004eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004eba:	f7fd f9ef 	bl	800229c <HAL_GetTick>
 8004ebe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	88fa      	ldrh	r2, [r7, #6]
 8004ec4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	88fa      	ldrh	r2, [r7, #6]
 8004eca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ed4:	d108      	bne.n	8004ee8 <HAL_UART_Transmit+0x82>
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	691b      	ldr	r3, [r3, #16]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d104      	bne.n	8004ee8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	61bb      	str	r3, [r7, #24]
 8004ee6:	e003      	b.n	8004ef0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004eec:	2300      	movs	r3, #0
 8004eee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004ef8:	e02a      	b.n	8004f50 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	9300      	str	r3, [sp, #0]
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	2200      	movs	r2, #0
 8004f02:	2180      	movs	r1, #128	; 0x80
 8004f04:	68f8      	ldr	r0, [r7, #12]
 8004f06:	f000 faf9 	bl	80054fc <UART_WaitOnFlagUntilTimeout>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d001      	beq.n	8004f14 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004f10:	2303      	movs	r3, #3
 8004f12:	e036      	b.n	8004f82 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d10b      	bne.n	8004f32 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f1a:	69bb      	ldr	r3, [r7, #24]
 8004f1c:	881b      	ldrh	r3, [r3, #0]
 8004f1e:	461a      	mov	r2, r3
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f28:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	3302      	adds	r3, #2
 8004f2e:	61bb      	str	r3, [r7, #24]
 8004f30:	e007      	b.n	8004f42 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f32:	69fb      	ldr	r3, [r7, #28]
 8004f34:	781a      	ldrb	r2, [r3, #0]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004f3c:	69fb      	ldr	r3, [r7, #28]
 8004f3e:	3301      	adds	r3, #1
 8004f40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	3b01      	subs	r3, #1
 8004f4a:	b29a      	uxth	r2, r3
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d1cf      	bne.n	8004efa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	9300      	str	r3, [sp, #0]
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	2200      	movs	r2, #0
 8004f62:	2140      	movs	r1, #64	; 0x40
 8004f64:	68f8      	ldr	r0, [r7, #12]
 8004f66:	f000 fac9 	bl	80054fc <UART_WaitOnFlagUntilTimeout>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d001      	beq.n	8004f74 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004f70:	2303      	movs	r3, #3
 8004f72:	e006      	b.n	8004f82 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2220      	movs	r2, #32
 8004f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	e000      	b.n	8004f82 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004f80:	2302      	movs	r3, #2
  }
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3720      	adds	r7, #32
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}
	...

08004f8c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b0ba      	sub	sp, #232	; 0xe8
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	695b      	ldr	r3, [r3, #20]
 8004fae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004fbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fc2:	f003 030f 	and.w	r3, r3, #15
 8004fc6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004fca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d10f      	bne.n	8004ff2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004fd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fd6:	f003 0320 	and.w	r3, r3, #32
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d009      	beq.n	8004ff2 <HAL_UART_IRQHandler+0x66>
 8004fde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fe2:	f003 0320 	and.w	r3, r3, #32
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d003      	beq.n	8004ff2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f000 fbd3 	bl	8005796 <UART_Receive_IT>
      return;
 8004ff0:	e256      	b.n	80054a0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004ff2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	f000 80de 	beq.w	80051b8 <HAL_UART_IRQHandler+0x22c>
 8004ffc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005000:	f003 0301 	and.w	r3, r3, #1
 8005004:	2b00      	cmp	r3, #0
 8005006:	d106      	bne.n	8005016 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005008:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800500c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005010:	2b00      	cmp	r3, #0
 8005012:	f000 80d1 	beq.w	80051b8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005016:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800501a:	f003 0301 	and.w	r3, r3, #1
 800501e:	2b00      	cmp	r3, #0
 8005020:	d00b      	beq.n	800503a <HAL_UART_IRQHandler+0xae>
 8005022:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800502a:	2b00      	cmp	r3, #0
 800502c:	d005      	beq.n	800503a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005032:	f043 0201 	orr.w	r2, r3, #1
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800503a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800503e:	f003 0304 	and.w	r3, r3, #4
 8005042:	2b00      	cmp	r3, #0
 8005044:	d00b      	beq.n	800505e <HAL_UART_IRQHandler+0xd2>
 8005046:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800504a:	f003 0301 	and.w	r3, r3, #1
 800504e:	2b00      	cmp	r3, #0
 8005050:	d005      	beq.n	800505e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005056:	f043 0202 	orr.w	r2, r3, #2
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800505e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005062:	f003 0302 	and.w	r3, r3, #2
 8005066:	2b00      	cmp	r3, #0
 8005068:	d00b      	beq.n	8005082 <HAL_UART_IRQHandler+0xf6>
 800506a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800506e:	f003 0301 	and.w	r3, r3, #1
 8005072:	2b00      	cmp	r3, #0
 8005074:	d005      	beq.n	8005082 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800507a:	f043 0204 	orr.w	r2, r3, #4
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005082:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005086:	f003 0308 	and.w	r3, r3, #8
 800508a:	2b00      	cmp	r3, #0
 800508c:	d011      	beq.n	80050b2 <HAL_UART_IRQHandler+0x126>
 800508e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005092:	f003 0320 	and.w	r3, r3, #32
 8005096:	2b00      	cmp	r3, #0
 8005098:	d105      	bne.n	80050a6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800509a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800509e:	f003 0301 	and.w	r3, r3, #1
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d005      	beq.n	80050b2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050aa:	f043 0208 	orr.w	r2, r3, #8
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	f000 81ed 	beq.w	8005496 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80050bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050c0:	f003 0320 	and.w	r3, r3, #32
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d008      	beq.n	80050da <HAL_UART_IRQHandler+0x14e>
 80050c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050cc:	f003 0320 	and.w	r3, r3, #32
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d002      	beq.n	80050da <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f000 fb5e 	bl	8005796 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	695b      	ldr	r3, [r3, #20]
 80050e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050e4:	2b40      	cmp	r3, #64	; 0x40
 80050e6:	bf0c      	ite	eq
 80050e8:	2301      	moveq	r3, #1
 80050ea:	2300      	movne	r3, #0
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f6:	f003 0308 	and.w	r3, r3, #8
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d103      	bne.n	8005106 <HAL_UART_IRQHandler+0x17a>
 80050fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005102:	2b00      	cmp	r3, #0
 8005104:	d04f      	beq.n	80051a6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f000 fa66 	bl	80055d8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	695b      	ldr	r3, [r3, #20]
 8005112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005116:	2b40      	cmp	r3, #64	; 0x40
 8005118:	d141      	bne.n	800519e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	3314      	adds	r3, #20
 8005120:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005124:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005128:	e853 3f00 	ldrex	r3, [r3]
 800512c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005130:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005134:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005138:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	3314      	adds	r3, #20
 8005142:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005146:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800514a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800514e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005152:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005156:	e841 2300 	strex	r3, r2, [r1]
 800515a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800515e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005162:	2b00      	cmp	r3, #0
 8005164:	d1d9      	bne.n	800511a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800516a:	2b00      	cmp	r3, #0
 800516c:	d013      	beq.n	8005196 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005172:	4a7d      	ldr	r2, [pc, #500]	; (8005368 <HAL_UART_IRQHandler+0x3dc>)
 8005174:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800517a:	4618      	mov	r0, r3
 800517c:	f7fd ff65 	bl	800304a <HAL_DMA_Abort_IT>
 8005180:	4603      	mov	r3, r0
 8005182:	2b00      	cmp	r3, #0
 8005184:	d016      	beq.n	80051b4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800518a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005190:	4610      	mov	r0, r2
 8005192:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005194:	e00e      	b.n	80051b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f000 f99a 	bl	80054d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800519c:	e00a      	b.n	80051b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f000 f996 	bl	80054d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051a4:	e006      	b.n	80051b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f000 f992 	bl	80054d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2200      	movs	r2, #0
 80051b0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80051b2:	e170      	b.n	8005496 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051b4:	bf00      	nop
    return;
 80051b6:	e16e      	b.n	8005496 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051bc:	2b01      	cmp	r3, #1
 80051be:	f040 814a 	bne.w	8005456 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80051c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051c6:	f003 0310 	and.w	r3, r3, #16
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	f000 8143 	beq.w	8005456 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80051d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051d4:	f003 0310 	and.w	r3, r3, #16
 80051d8:	2b00      	cmp	r3, #0
 80051da:	f000 813c 	beq.w	8005456 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80051de:	2300      	movs	r3, #0
 80051e0:	60bb      	str	r3, [r7, #8]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	60bb      	str	r3, [r7, #8]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	60bb      	str	r3, [r7, #8]
 80051f2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	695b      	ldr	r3, [r3, #20]
 80051fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051fe:	2b40      	cmp	r3, #64	; 0x40
 8005200:	f040 80b4 	bne.w	800536c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005210:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005214:	2b00      	cmp	r3, #0
 8005216:	f000 8140 	beq.w	800549a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800521e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005222:	429a      	cmp	r2, r3
 8005224:	f080 8139 	bcs.w	800549a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800522e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005234:	69db      	ldr	r3, [r3, #28]
 8005236:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800523a:	f000 8088 	beq.w	800534e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	330c      	adds	r3, #12
 8005244:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005248:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800524c:	e853 3f00 	ldrex	r3, [r3]
 8005250:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005254:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005258:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800525c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	330c      	adds	r3, #12
 8005266:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800526a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800526e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005272:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005276:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800527a:	e841 2300 	strex	r3, r2, [r1]
 800527e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005282:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005286:	2b00      	cmp	r3, #0
 8005288:	d1d9      	bne.n	800523e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	3314      	adds	r3, #20
 8005290:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005292:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005294:	e853 3f00 	ldrex	r3, [r3]
 8005298:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800529a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800529c:	f023 0301 	bic.w	r3, r3, #1
 80052a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	3314      	adds	r3, #20
 80052aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80052ae:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80052b2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80052b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80052ba:	e841 2300 	strex	r3, r2, [r1]
 80052be:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80052c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d1e1      	bne.n	800528a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	3314      	adds	r3, #20
 80052cc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80052d0:	e853 3f00 	ldrex	r3, [r3]
 80052d4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80052d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	3314      	adds	r3, #20
 80052e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80052ea:	66fa      	str	r2, [r7, #108]	; 0x6c
 80052ec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80052f0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80052f2:	e841 2300 	strex	r3, r2, [r1]
 80052f6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80052f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d1e3      	bne.n	80052c6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2220      	movs	r2, #32
 8005302:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2200      	movs	r2, #0
 800530a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	330c      	adds	r3, #12
 8005312:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005314:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005316:	e853 3f00 	ldrex	r3, [r3]
 800531a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800531c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800531e:	f023 0310 	bic.w	r3, r3, #16
 8005322:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	330c      	adds	r3, #12
 800532c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005330:	65ba      	str	r2, [r7, #88]	; 0x58
 8005332:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005334:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005336:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005338:	e841 2300 	strex	r3, r2, [r1]
 800533c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800533e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005340:	2b00      	cmp	r3, #0
 8005342:	d1e3      	bne.n	800530c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005348:	4618      	mov	r0, r3
 800534a:	f7fd fe0e 	bl	8002f6a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005356:	b29b      	uxth	r3, r3
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	b29b      	uxth	r3, r3
 800535c:	4619      	mov	r1, r3
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f000 f8c0 	bl	80054e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005364:	e099      	b.n	800549a <HAL_UART_IRQHandler+0x50e>
 8005366:	bf00      	nop
 8005368:	0800569f 	.word	0x0800569f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005374:	b29b      	uxth	r3, r3
 8005376:	1ad3      	subs	r3, r2, r3
 8005378:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005380:	b29b      	uxth	r3, r3
 8005382:	2b00      	cmp	r3, #0
 8005384:	f000 808b 	beq.w	800549e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005388:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800538c:	2b00      	cmp	r3, #0
 800538e:	f000 8086 	beq.w	800549e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	330c      	adds	r3, #12
 8005398:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800539a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800539c:	e853 3f00 	ldrex	r3, [r3]
 80053a0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80053a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80053a8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	330c      	adds	r3, #12
 80053b2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80053b6:	647a      	str	r2, [r7, #68]	; 0x44
 80053b8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80053bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80053be:	e841 2300 	strex	r3, r2, [r1]
 80053c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80053c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d1e3      	bne.n	8005392 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	3314      	adds	r3, #20
 80053d0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d4:	e853 3f00 	ldrex	r3, [r3]
 80053d8:	623b      	str	r3, [r7, #32]
   return(result);
 80053da:	6a3b      	ldr	r3, [r7, #32]
 80053dc:	f023 0301 	bic.w	r3, r3, #1
 80053e0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	3314      	adds	r3, #20
 80053ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80053ee:	633a      	str	r2, [r7, #48]	; 0x30
 80053f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80053f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053f6:	e841 2300 	strex	r3, r2, [r1]
 80053fa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80053fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d1e3      	bne.n	80053ca <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2220      	movs	r2, #32
 8005406:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	330c      	adds	r3, #12
 8005416:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	e853 3f00 	ldrex	r3, [r3]
 800541e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f023 0310 	bic.w	r3, r3, #16
 8005426:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	330c      	adds	r3, #12
 8005430:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005434:	61fa      	str	r2, [r7, #28]
 8005436:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005438:	69b9      	ldr	r1, [r7, #24]
 800543a:	69fa      	ldr	r2, [r7, #28]
 800543c:	e841 2300 	strex	r3, r2, [r1]
 8005440:	617b      	str	r3, [r7, #20]
   return(result);
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d1e3      	bne.n	8005410 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005448:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800544c:	4619      	mov	r1, r3
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f000 f848 	bl	80054e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005454:	e023      	b.n	800549e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005456:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800545a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800545e:	2b00      	cmp	r3, #0
 8005460:	d009      	beq.n	8005476 <HAL_UART_IRQHandler+0x4ea>
 8005462:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800546a:	2b00      	cmp	r3, #0
 800546c:	d003      	beq.n	8005476 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f000 f929 	bl	80056c6 <UART_Transmit_IT>
    return;
 8005474:	e014      	b.n	80054a0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005476:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800547a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800547e:	2b00      	cmp	r3, #0
 8005480:	d00e      	beq.n	80054a0 <HAL_UART_IRQHandler+0x514>
 8005482:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800548a:	2b00      	cmp	r3, #0
 800548c:	d008      	beq.n	80054a0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f000 f969 	bl	8005766 <UART_EndTransmit_IT>
    return;
 8005494:	e004      	b.n	80054a0 <HAL_UART_IRQHandler+0x514>
    return;
 8005496:	bf00      	nop
 8005498:	e002      	b.n	80054a0 <HAL_UART_IRQHandler+0x514>
      return;
 800549a:	bf00      	nop
 800549c:	e000      	b.n	80054a0 <HAL_UART_IRQHandler+0x514>
      return;
 800549e:	bf00      	nop
  }
}
 80054a0:	37e8      	adds	r7, #232	; 0xe8
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}
 80054a6:	bf00      	nop

080054a8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b083      	sub	sp, #12
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80054b0:	bf00      	nop
 80054b2:	370c      	adds	r7, #12
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr

080054bc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80054bc:	b480      	push	{r7}
 80054be:	b083      	sub	sp, #12
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80054c4:	bf00      	nop
 80054c6:	370c      	adds	r7, #12
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr

080054d0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b083      	sub	sp, #12
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80054d8:	bf00      	nop
 80054da:	370c      	adds	r7, #12
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr

080054e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b083      	sub	sp, #12
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	460b      	mov	r3, r1
 80054ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80054f0:	bf00      	nop
 80054f2:	370c      	adds	r7, #12
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr

080054fc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b090      	sub	sp, #64	; 0x40
 8005500:	af00      	add	r7, sp, #0
 8005502:	60f8      	str	r0, [r7, #12]
 8005504:	60b9      	str	r1, [r7, #8]
 8005506:	603b      	str	r3, [r7, #0]
 8005508:	4613      	mov	r3, r2
 800550a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800550c:	e050      	b.n	80055b0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800550e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005514:	d04c      	beq.n	80055b0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005516:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005518:	2b00      	cmp	r3, #0
 800551a:	d007      	beq.n	800552c <UART_WaitOnFlagUntilTimeout+0x30>
 800551c:	f7fc febe 	bl	800229c <HAL_GetTick>
 8005520:	4602      	mov	r2, r0
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	1ad3      	subs	r3, r2, r3
 8005526:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005528:	429a      	cmp	r2, r3
 800552a:	d241      	bcs.n	80055b0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	330c      	adds	r3, #12
 8005532:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005536:	e853 3f00 	ldrex	r3, [r3]
 800553a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800553c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005542:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	330c      	adds	r3, #12
 800554a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800554c:	637a      	str	r2, [r7, #52]	; 0x34
 800554e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005550:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005552:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005554:	e841 2300 	strex	r3, r2, [r1]
 8005558:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800555a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800555c:	2b00      	cmp	r3, #0
 800555e:	d1e5      	bne.n	800552c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	3314      	adds	r3, #20
 8005566:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	e853 3f00 	ldrex	r3, [r3]
 800556e:	613b      	str	r3, [r7, #16]
   return(result);
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	f023 0301 	bic.w	r3, r3, #1
 8005576:	63bb      	str	r3, [r7, #56]	; 0x38
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	3314      	adds	r3, #20
 800557e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005580:	623a      	str	r2, [r7, #32]
 8005582:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005584:	69f9      	ldr	r1, [r7, #28]
 8005586:	6a3a      	ldr	r2, [r7, #32]
 8005588:	e841 2300 	strex	r3, r2, [r1]
 800558c:	61bb      	str	r3, [r7, #24]
   return(result);
 800558e:	69bb      	ldr	r3, [r7, #24]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d1e5      	bne.n	8005560 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2220      	movs	r2, #32
 8005598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2220      	movs	r2, #32
 80055a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2200      	movs	r2, #0
 80055a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80055ac:	2303      	movs	r3, #3
 80055ae:	e00f      	b.n	80055d0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	4013      	ands	r3, r2
 80055ba:	68ba      	ldr	r2, [r7, #8]
 80055bc:	429a      	cmp	r2, r3
 80055be:	bf0c      	ite	eq
 80055c0:	2301      	moveq	r3, #1
 80055c2:	2300      	movne	r3, #0
 80055c4:	b2db      	uxtb	r3, r3
 80055c6:	461a      	mov	r2, r3
 80055c8:	79fb      	ldrb	r3, [r7, #7]
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d09f      	beq.n	800550e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80055ce:	2300      	movs	r3, #0
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3740      	adds	r7, #64	; 0x40
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}

080055d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80055d8:	b480      	push	{r7}
 80055da:	b095      	sub	sp, #84	; 0x54
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	330c      	adds	r3, #12
 80055e6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055ea:	e853 3f00 	ldrex	r3, [r3]
 80055ee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80055f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80055f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	330c      	adds	r3, #12
 80055fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005600:	643a      	str	r2, [r7, #64]	; 0x40
 8005602:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005604:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005606:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005608:	e841 2300 	strex	r3, r2, [r1]
 800560c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800560e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005610:	2b00      	cmp	r3, #0
 8005612:	d1e5      	bne.n	80055e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	3314      	adds	r3, #20
 800561a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800561c:	6a3b      	ldr	r3, [r7, #32]
 800561e:	e853 3f00 	ldrex	r3, [r3]
 8005622:	61fb      	str	r3, [r7, #28]
   return(result);
 8005624:	69fb      	ldr	r3, [r7, #28]
 8005626:	f023 0301 	bic.w	r3, r3, #1
 800562a:	64bb      	str	r3, [r7, #72]	; 0x48
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	3314      	adds	r3, #20
 8005632:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005634:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005636:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005638:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800563a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800563c:	e841 2300 	strex	r3, r2, [r1]
 8005640:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005644:	2b00      	cmp	r3, #0
 8005646:	d1e5      	bne.n	8005614 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800564c:	2b01      	cmp	r3, #1
 800564e:	d119      	bne.n	8005684 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	330c      	adds	r3, #12
 8005656:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	e853 3f00 	ldrex	r3, [r3]
 800565e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	f023 0310 	bic.w	r3, r3, #16
 8005666:	647b      	str	r3, [r7, #68]	; 0x44
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	330c      	adds	r3, #12
 800566e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005670:	61ba      	str	r2, [r7, #24]
 8005672:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005674:	6979      	ldr	r1, [r7, #20]
 8005676:	69ba      	ldr	r2, [r7, #24]
 8005678:	e841 2300 	strex	r3, r2, [r1]
 800567c:	613b      	str	r3, [r7, #16]
   return(result);
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d1e5      	bne.n	8005650 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2220      	movs	r2, #32
 8005688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2200      	movs	r2, #0
 8005690:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005692:	bf00      	nop
 8005694:	3754      	adds	r7, #84	; 0x54
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr

0800569e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800569e:	b580      	push	{r7, lr}
 80056a0:	b084      	sub	sp, #16
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056aa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2200      	movs	r2, #0
 80056b0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2200      	movs	r2, #0
 80056b6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80056b8:	68f8      	ldr	r0, [r7, #12]
 80056ba:	f7ff ff09 	bl	80054d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80056be:	bf00      	nop
 80056c0:	3710      	adds	r7, #16
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}

080056c6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80056c6:	b480      	push	{r7}
 80056c8:	b085      	sub	sp, #20
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	2b21      	cmp	r3, #33	; 0x21
 80056d8:	d13e      	bne.n	8005758 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056e2:	d114      	bne.n	800570e <UART_Transmit_IT+0x48>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	691b      	ldr	r3, [r3, #16]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d110      	bne.n	800570e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6a1b      	ldr	r3, [r3, #32]
 80056f0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	881b      	ldrh	r3, [r3, #0]
 80056f6:	461a      	mov	r2, r3
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005700:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6a1b      	ldr	r3, [r3, #32]
 8005706:	1c9a      	adds	r2, r3, #2
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	621a      	str	r2, [r3, #32]
 800570c:	e008      	b.n	8005720 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6a1b      	ldr	r3, [r3, #32]
 8005712:	1c59      	adds	r1, r3, #1
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	6211      	str	r1, [r2, #32]
 8005718:	781a      	ldrb	r2, [r3, #0]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005724:	b29b      	uxth	r3, r3
 8005726:	3b01      	subs	r3, #1
 8005728:	b29b      	uxth	r3, r3
 800572a:	687a      	ldr	r2, [r7, #4]
 800572c:	4619      	mov	r1, r3
 800572e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005730:	2b00      	cmp	r3, #0
 8005732:	d10f      	bne.n	8005754 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	68da      	ldr	r2, [r3, #12]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005742:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	68da      	ldr	r2, [r3, #12]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005752:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005754:	2300      	movs	r3, #0
 8005756:	e000      	b.n	800575a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005758:	2302      	movs	r3, #2
  }
}
 800575a:	4618      	mov	r0, r3
 800575c:	3714      	adds	r7, #20
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr

08005766 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005766:	b580      	push	{r7, lr}
 8005768:	b082      	sub	sp, #8
 800576a:	af00      	add	r7, sp, #0
 800576c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	68da      	ldr	r2, [r3, #12]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800577c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2220      	movs	r2, #32
 8005782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f7ff fe8e 	bl	80054a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800578c:	2300      	movs	r3, #0
}
 800578e:	4618      	mov	r0, r3
 8005790:	3708      	adds	r7, #8
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}

08005796 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005796:	b580      	push	{r7, lr}
 8005798:	b08c      	sub	sp, #48	; 0x30
 800579a:	af00      	add	r7, sp, #0
 800579c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057a4:	b2db      	uxtb	r3, r3
 80057a6:	2b22      	cmp	r3, #34	; 0x22
 80057a8:	f040 80ab 	bne.w	8005902 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057b4:	d117      	bne.n	80057e6 <UART_Receive_IT+0x50>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	691b      	ldr	r3, [r3, #16]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d113      	bne.n	80057e6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80057be:	2300      	movs	r3, #0
 80057c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057c6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057d4:	b29a      	uxth	r2, r3
 80057d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057d8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057de:	1c9a      	adds	r2, r3, #2
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	629a      	str	r2, [r3, #40]	; 0x28
 80057e4:	e026      	b.n	8005834 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80057ec:	2300      	movs	r3, #0
 80057ee:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057f8:	d007      	beq.n	800580a <UART_Receive_IT+0x74>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d10a      	bne.n	8005818 <UART_Receive_IT+0x82>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	691b      	ldr	r3, [r3, #16]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d106      	bne.n	8005818 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	b2da      	uxtb	r2, r3
 8005812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005814:	701a      	strb	r2, [r3, #0]
 8005816:	e008      	b.n	800582a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	b2db      	uxtb	r3, r3
 8005820:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005824:	b2da      	uxtb	r2, r3
 8005826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005828:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800582e:	1c5a      	adds	r2, r3, #1
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005838:	b29b      	uxth	r3, r3
 800583a:	3b01      	subs	r3, #1
 800583c:	b29b      	uxth	r3, r3
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	4619      	mov	r1, r3
 8005842:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005844:	2b00      	cmp	r3, #0
 8005846:	d15a      	bne.n	80058fe <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	68da      	ldr	r2, [r3, #12]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f022 0220 	bic.w	r2, r2, #32
 8005856:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	68da      	ldr	r2, [r3, #12]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005866:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	695a      	ldr	r2, [r3, #20]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f022 0201 	bic.w	r2, r2, #1
 8005876:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2220      	movs	r2, #32
 800587c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005884:	2b01      	cmp	r3, #1
 8005886:	d135      	bne.n	80058f4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2200      	movs	r2, #0
 800588c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	330c      	adds	r3, #12
 8005894:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	e853 3f00 	ldrex	r3, [r3]
 800589c:	613b      	str	r3, [r7, #16]
   return(result);
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	f023 0310 	bic.w	r3, r3, #16
 80058a4:	627b      	str	r3, [r7, #36]	; 0x24
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	330c      	adds	r3, #12
 80058ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058ae:	623a      	str	r2, [r7, #32]
 80058b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b2:	69f9      	ldr	r1, [r7, #28]
 80058b4:	6a3a      	ldr	r2, [r7, #32]
 80058b6:	e841 2300 	strex	r3, r2, [r1]
 80058ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80058bc:	69bb      	ldr	r3, [r7, #24]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d1e5      	bne.n	800588e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f003 0310 	and.w	r3, r3, #16
 80058cc:	2b10      	cmp	r3, #16
 80058ce:	d10a      	bne.n	80058e6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80058d0:	2300      	movs	r3, #0
 80058d2:	60fb      	str	r3, [r7, #12]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	60fb      	str	r3, [r7, #12]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	60fb      	str	r3, [r7, #12]
 80058e4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80058ea:	4619      	mov	r1, r3
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f7ff fdf9 	bl	80054e4 <HAL_UARTEx_RxEventCallback>
 80058f2:	e002      	b.n	80058fa <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f7ff fde1 	bl	80054bc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80058fa:	2300      	movs	r3, #0
 80058fc:	e002      	b.n	8005904 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80058fe:	2300      	movs	r3, #0
 8005900:	e000      	b.n	8005904 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005902:	2302      	movs	r3, #2
  }
}
 8005904:	4618      	mov	r0, r3
 8005906:	3730      	adds	r7, #48	; 0x30
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}

0800590c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800590c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005910:	b09f      	sub	sp, #124	; 0x7c
 8005912:	af00      	add	r7, sp, #0
 8005914:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005916:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	691b      	ldr	r3, [r3, #16]
 800591c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005920:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005922:	68d9      	ldr	r1, [r3, #12]
 8005924:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	ea40 0301 	orr.w	r3, r0, r1
 800592c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800592e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005930:	689a      	ldr	r2, [r3, #8]
 8005932:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005934:	691b      	ldr	r3, [r3, #16]
 8005936:	431a      	orrs	r2, r3
 8005938:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800593a:	695b      	ldr	r3, [r3, #20]
 800593c:	431a      	orrs	r2, r3
 800593e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005940:	69db      	ldr	r3, [r3, #28]
 8005942:	4313      	orrs	r3, r2
 8005944:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005946:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005950:	f021 010c 	bic.w	r1, r1, #12
 8005954:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005956:	681a      	ldr	r2, [r3, #0]
 8005958:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800595a:	430b      	orrs	r3, r1
 800595c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800595e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	695b      	ldr	r3, [r3, #20]
 8005964:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005968:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800596a:	6999      	ldr	r1, [r3, #24]
 800596c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	ea40 0301 	orr.w	r3, r0, r1
 8005974:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005976:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	4bc5      	ldr	r3, [pc, #788]	; (8005c90 <UART_SetConfig+0x384>)
 800597c:	429a      	cmp	r2, r3
 800597e:	d004      	beq.n	800598a <UART_SetConfig+0x7e>
 8005980:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005982:	681a      	ldr	r2, [r3, #0]
 8005984:	4bc3      	ldr	r3, [pc, #780]	; (8005c94 <UART_SetConfig+0x388>)
 8005986:	429a      	cmp	r2, r3
 8005988:	d103      	bne.n	8005992 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800598a:	f7fe fda5 	bl	80044d8 <HAL_RCC_GetPCLK2Freq>
 800598e:	6778      	str	r0, [r7, #116]	; 0x74
 8005990:	e002      	b.n	8005998 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005992:	f7fe fd8d 	bl	80044b0 <HAL_RCC_GetPCLK1Freq>
 8005996:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005998:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800599a:	69db      	ldr	r3, [r3, #28]
 800599c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059a0:	f040 80b6 	bne.w	8005b10 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80059a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059a6:	461c      	mov	r4, r3
 80059a8:	f04f 0500 	mov.w	r5, #0
 80059ac:	4622      	mov	r2, r4
 80059ae:	462b      	mov	r3, r5
 80059b0:	1891      	adds	r1, r2, r2
 80059b2:	6439      	str	r1, [r7, #64]	; 0x40
 80059b4:	415b      	adcs	r3, r3
 80059b6:	647b      	str	r3, [r7, #68]	; 0x44
 80059b8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80059bc:	1912      	adds	r2, r2, r4
 80059be:	eb45 0303 	adc.w	r3, r5, r3
 80059c2:	f04f 0000 	mov.w	r0, #0
 80059c6:	f04f 0100 	mov.w	r1, #0
 80059ca:	00d9      	lsls	r1, r3, #3
 80059cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80059d0:	00d0      	lsls	r0, r2, #3
 80059d2:	4602      	mov	r2, r0
 80059d4:	460b      	mov	r3, r1
 80059d6:	1911      	adds	r1, r2, r4
 80059d8:	6639      	str	r1, [r7, #96]	; 0x60
 80059da:	416b      	adcs	r3, r5
 80059dc:	667b      	str	r3, [r7, #100]	; 0x64
 80059de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	461a      	mov	r2, r3
 80059e4:	f04f 0300 	mov.w	r3, #0
 80059e8:	1891      	adds	r1, r2, r2
 80059ea:	63b9      	str	r1, [r7, #56]	; 0x38
 80059ec:	415b      	adcs	r3, r3
 80059ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80059f4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80059f8:	f7fa fbf8 	bl	80001ec <__aeabi_uldivmod>
 80059fc:	4602      	mov	r2, r0
 80059fe:	460b      	mov	r3, r1
 8005a00:	4ba5      	ldr	r3, [pc, #660]	; (8005c98 <UART_SetConfig+0x38c>)
 8005a02:	fba3 2302 	umull	r2, r3, r3, r2
 8005a06:	095b      	lsrs	r3, r3, #5
 8005a08:	011e      	lsls	r6, r3, #4
 8005a0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a0c:	461c      	mov	r4, r3
 8005a0e:	f04f 0500 	mov.w	r5, #0
 8005a12:	4622      	mov	r2, r4
 8005a14:	462b      	mov	r3, r5
 8005a16:	1891      	adds	r1, r2, r2
 8005a18:	6339      	str	r1, [r7, #48]	; 0x30
 8005a1a:	415b      	adcs	r3, r3
 8005a1c:	637b      	str	r3, [r7, #52]	; 0x34
 8005a1e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005a22:	1912      	adds	r2, r2, r4
 8005a24:	eb45 0303 	adc.w	r3, r5, r3
 8005a28:	f04f 0000 	mov.w	r0, #0
 8005a2c:	f04f 0100 	mov.w	r1, #0
 8005a30:	00d9      	lsls	r1, r3, #3
 8005a32:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005a36:	00d0      	lsls	r0, r2, #3
 8005a38:	4602      	mov	r2, r0
 8005a3a:	460b      	mov	r3, r1
 8005a3c:	1911      	adds	r1, r2, r4
 8005a3e:	65b9      	str	r1, [r7, #88]	; 0x58
 8005a40:	416b      	adcs	r3, r5
 8005a42:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	461a      	mov	r2, r3
 8005a4a:	f04f 0300 	mov.w	r3, #0
 8005a4e:	1891      	adds	r1, r2, r2
 8005a50:	62b9      	str	r1, [r7, #40]	; 0x28
 8005a52:	415b      	adcs	r3, r3
 8005a54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a56:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005a5a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005a5e:	f7fa fbc5 	bl	80001ec <__aeabi_uldivmod>
 8005a62:	4602      	mov	r2, r0
 8005a64:	460b      	mov	r3, r1
 8005a66:	4b8c      	ldr	r3, [pc, #560]	; (8005c98 <UART_SetConfig+0x38c>)
 8005a68:	fba3 1302 	umull	r1, r3, r3, r2
 8005a6c:	095b      	lsrs	r3, r3, #5
 8005a6e:	2164      	movs	r1, #100	; 0x64
 8005a70:	fb01 f303 	mul.w	r3, r1, r3
 8005a74:	1ad3      	subs	r3, r2, r3
 8005a76:	00db      	lsls	r3, r3, #3
 8005a78:	3332      	adds	r3, #50	; 0x32
 8005a7a:	4a87      	ldr	r2, [pc, #540]	; (8005c98 <UART_SetConfig+0x38c>)
 8005a7c:	fba2 2303 	umull	r2, r3, r2, r3
 8005a80:	095b      	lsrs	r3, r3, #5
 8005a82:	005b      	lsls	r3, r3, #1
 8005a84:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005a88:	441e      	add	r6, r3
 8005a8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f04f 0100 	mov.w	r1, #0
 8005a92:	4602      	mov	r2, r0
 8005a94:	460b      	mov	r3, r1
 8005a96:	1894      	adds	r4, r2, r2
 8005a98:	623c      	str	r4, [r7, #32]
 8005a9a:	415b      	adcs	r3, r3
 8005a9c:	627b      	str	r3, [r7, #36]	; 0x24
 8005a9e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005aa2:	1812      	adds	r2, r2, r0
 8005aa4:	eb41 0303 	adc.w	r3, r1, r3
 8005aa8:	f04f 0400 	mov.w	r4, #0
 8005aac:	f04f 0500 	mov.w	r5, #0
 8005ab0:	00dd      	lsls	r5, r3, #3
 8005ab2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005ab6:	00d4      	lsls	r4, r2, #3
 8005ab8:	4622      	mov	r2, r4
 8005aba:	462b      	mov	r3, r5
 8005abc:	1814      	adds	r4, r2, r0
 8005abe:	653c      	str	r4, [r7, #80]	; 0x50
 8005ac0:	414b      	adcs	r3, r1
 8005ac2:	657b      	str	r3, [r7, #84]	; 0x54
 8005ac4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	461a      	mov	r2, r3
 8005aca:	f04f 0300 	mov.w	r3, #0
 8005ace:	1891      	adds	r1, r2, r2
 8005ad0:	61b9      	str	r1, [r7, #24]
 8005ad2:	415b      	adcs	r3, r3
 8005ad4:	61fb      	str	r3, [r7, #28]
 8005ad6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ada:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005ade:	f7fa fb85 	bl	80001ec <__aeabi_uldivmod>
 8005ae2:	4602      	mov	r2, r0
 8005ae4:	460b      	mov	r3, r1
 8005ae6:	4b6c      	ldr	r3, [pc, #432]	; (8005c98 <UART_SetConfig+0x38c>)
 8005ae8:	fba3 1302 	umull	r1, r3, r3, r2
 8005aec:	095b      	lsrs	r3, r3, #5
 8005aee:	2164      	movs	r1, #100	; 0x64
 8005af0:	fb01 f303 	mul.w	r3, r1, r3
 8005af4:	1ad3      	subs	r3, r2, r3
 8005af6:	00db      	lsls	r3, r3, #3
 8005af8:	3332      	adds	r3, #50	; 0x32
 8005afa:	4a67      	ldr	r2, [pc, #412]	; (8005c98 <UART_SetConfig+0x38c>)
 8005afc:	fba2 2303 	umull	r2, r3, r2, r3
 8005b00:	095b      	lsrs	r3, r3, #5
 8005b02:	f003 0207 	and.w	r2, r3, #7
 8005b06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4432      	add	r2, r6
 8005b0c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005b0e:	e0b9      	b.n	8005c84 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b12:	461c      	mov	r4, r3
 8005b14:	f04f 0500 	mov.w	r5, #0
 8005b18:	4622      	mov	r2, r4
 8005b1a:	462b      	mov	r3, r5
 8005b1c:	1891      	adds	r1, r2, r2
 8005b1e:	6139      	str	r1, [r7, #16]
 8005b20:	415b      	adcs	r3, r3
 8005b22:	617b      	str	r3, [r7, #20]
 8005b24:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005b28:	1912      	adds	r2, r2, r4
 8005b2a:	eb45 0303 	adc.w	r3, r5, r3
 8005b2e:	f04f 0000 	mov.w	r0, #0
 8005b32:	f04f 0100 	mov.w	r1, #0
 8005b36:	00d9      	lsls	r1, r3, #3
 8005b38:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005b3c:	00d0      	lsls	r0, r2, #3
 8005b3e:	4602      	mov	r2, r0
 8005b40:	460b      	mov	r3, r1
 8005b42:	eb12 0804 	adds.w	r8, r2, r4
 8005b46:	eb43 0905 	adc.w	r9, r3, r5
 8005b4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f04f 0100 	mov.w	r1, #0
 8005b54:	f04f 0200 	mov.w	r2, #0
 8005b58:	f04f 0300 	mov.w	r3, #0
 8005b5c:	008b      	lsls	r3, r1, #2
 8005b5e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005b62:	0082      	lsls	r2, r0, #2
 8005b64:	4640      	mov	r0, r8
 8005b66:	4649      	mov	r1, r9
 8005b68:	f7fa fb40 	bl	80001ec <__aeabi_uldivmod>
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	460b      	mov	r3, r1
 8005b70:	4b49      	ldr	r3, [pc, #292]	; (8005c98 <UART_SetConfig+0x38c>)
 8005b72:	fba3 2302 	umull	r2, r3, r3, r2
 8005b76:	095b      	lsrs	r3, r3, #5
 8005b78:	011e      	lsls	r6, r3, #4
 8005b7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f04f 0100 	mov.w	r1, #0
 8005b82:	4602      	mov	r2, r0
 8005b84:	460b      	mov	r3, r1
 8005b86:	1894      	adds	r4, r2, r2
 8005b88:	60bc      	str	r4, [r7, #8]
 8005b8a:	415b      	adcs	r3, r3
 8005b8c:	60fb      	str	r3, [r7, #12]
 8005b8e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005b92:	1812      	adds	r2, r2, r0
 8005b94:	eb41 0303 	adc.w	r3, r1, r3
 8005b98:	f04f 0400 	mov.w	r4, #0
 8005b9c:	f04f 0500 	mov.w	r5, #0
 8005ba0:	00dd      	lsls	r5, r3, #3
 8005ba2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005ba6:	00d4      	lsls	r4, r2, #3
 8005ba8:	4622      	mov	r2, r4
 8005baa:	462b      	mov	r3, r5
 8005bac:	1814      	adds	r4, r2, r0
 8005bae:	64bc      	str	r4, [r7, #72]	; 0x48
 8005bb0:	414b      	adcs	r3, r1
 8005bb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f04f 0100 	mov.w	r1, #0
 8005bbe:	f04f 0200 	mov.w	r2, #0
 8005bc2:	f04f 0300 	mov.w	r3, #0
 8005bc6:	008b      	lsls	r3, r1, #2
 8005bc8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005bcc:	0082      	lsls	r2, r0, #2
 8005bce:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005bd2:	f7fa fb0b 	bl	80001ec <__aeabi_uldivmod>
 8005bd6:	4602      	mov	r2, r0
 8005bd8:	460b      	mov	r3, r1
 8005bda:	4b2f      	ldr	r3, [pc, #188]	; (8005c98 <UART_SetConfig+0x38c>)
 8005bdc:	fba3 1302 	umull	r1, r3, r3, r2
 8005be0:	095b      	lsrs	r3, r3, #5
 8005be2:	2164      	movs	r1, #100	; 0x64
 8005be4:	fb01 f303 	mul.w	r3, r1, r3
 8005be8:	1ad3      	subs	r3, r2, r3
 8005bea:	011b      	lsls	r3, r3, #4
 8005bec:	3332      	adds	r3, #50	; 0x32
 8005bee:	4a2a      	ldr	r2, [pc, #168]	; (8005c98 <UART_SetConfig+0x38c>)
 8005bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8005bf4:	095b      	lsrs	r3, r3, #5
 8005bf6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005bfa:	441e      	add	r6, r3
 8005bfc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f04f 0100 	mov.w	r1, #0
 8005c04:	4602      	mov	r2, r0
 8005c06:	460b      	mov	r3, r1
 8005c08:	1894      	adds	r4, r2, r2
 8005c0a:	603c      	str	r4, [r7, #0]
 8005c0c:	415b      	adcs	r3, r3
 8005c0e:	607b      	str	r3, [r7, #4]
 8005c10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c14:	1812      	adds	r2, r2, r0
 8005c16:	eb41 0303 	adc.w	r3, r1, r3
 8005c1a:	f04f 0400 	mov.w	r4, #0
 8005c1e:	f04f 0500 	mov.w	r5, #0
 8005c22:	00dd      	lsls	r5, r3, #3
 8005c24:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005c28:	00d4      	lsls	r4, r2, #3
 8005c2a:	4622      	mov	r2, r4
 8005c2c:	462b      	mov	r3, r5
 8005c2e:	eb12 0a00 	adds.w	sl, r2, r0
 8005c32:	eb43 0b01 	adc.w	fp, r3, r1
 8005c36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f04f 0100 	mov.w	r1, #0
 8005c40:	f04f 0200 	mov.w	r2, #0
 8005c44:	f04f 0300 	mov.w	r3, #0
 8005c48:	008b      	lsls	r3, r1, #2
 8005c4a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005c4e:	0082      	lsls	r2, r0, #2
 8005c50:	4650      	mov	r0, sl
 8005c52:	4659      	mov	r1, fp
 8005c54:	f7fa faca 	bl	80001ec <__aeabi_uldivmod>
 8005c58:	4602      	mov	r2, r0
 8005c5a:	460b      	mov	r3, r1
 8005c5c:	4b0e      	ldr	r3, [pc, #56]	; (8005c98 <UART_SetConfig+0x38c>)
 8005c5e:	fba3 1302 	umull	r1, r3, r3, r2
 8005c62:	095b      	lsrs	r3, r3, #5
 8005c64:	2164      	movs	r1, #100	; 0x64
 8005c66:	fb01 f303 	mul.w	r3, r1, r3
 8005c6a:	1ad3      	subs	r3, r2, r3
 8005c6c:	011b      	lsls	r3, r3, #4
 8005c6e:	3332      	adds	r3, #50	; 0x32
 8005c70:	4a09      	ldr	r2, [pc, #36]	; (8005c98 <UART_SetConfig+0x38c>)
 8005c72:	fba2 2303 	umull	r2, r3, r2, r3
 8005c76:	095b      	lsrs	r3, r3, #5
 8005c78:	f003 020f 	and.w	r2, r3, #15
 8005c7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4432      	add	r2, r6
 8005c82:	609a      	str	r2, [r3, #8]
}
 8005c84:	bf00      	nop
 8005c86:	377c      	adds	r7, #124	; 0x7c
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c8e:	bf00      	nop
 8005c90:	40011000 	.word	0x40011000
 8005c94:	40011400 	.word	0x40011400
 8005c98:	51eb851f 	.word	0x51eb851f

08005c9c <__libc_init_array>:
 8005c9c:	b570      	push	{r4, r5, r6, lr}
 8005c9e:	4d0d      	ldr	r5, [pc, #52]	; (8005cd4 <__libc_init_array+0x38>)
 8005ca0:	4c0d      	ldr	r4, [pc, #52]	; (8005cd8 <__libc_init_array+0x3c>)
 8005ca2:	1b64      	subs	r4, r4, r5
 8005ca4:	10a4      	asrs	r4, r4, #2
 8005ca6:	2600      	movs	r6, #0
 8005ca8:	42a6      	cmp	r6, r4
 8005caa:	d109      	bne.n	8005cc0 <__libc_init_array+0x24>
 8005cac:	4d0b      	ldr	r5, [pc, #44]	; (8005cdc <__libc_init_array+0x40>)
 8005cae:	4c0c      	ldr	r4, [pc, #48]	; (8005ce0 <__libc_init_array+0x44>)
 8005cb0:	f000 f820 	bl	8005cf4 <_init>
 8005cb4:	1b64      	subs	r4, r4, r5
 8005cb6:	10a4      	asrs	r4, r4, #2
 8005cb8:	2600      	movs	r6, #0
 8005cba:	42a6      	cmp	r6, r4
 8005cbc:	d105      	bne.n	8005cca <__libc_init_array+0x2e>
 8005cbe:	bd70      	pop	{r4, r5, r6, pc}
 8005cc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cc4:	4798      	blx	r3
 8005cc6:	3601      	adds	r6, #1
 8005cc8:	e7ee      	b.n	8005ca8 <__libc_init_array+0xc>
 8005cca:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cce:	4798      	blx	r3
 8005cd0:	3601      	adds	r6, #1
 8005cd2:	e7f2      	b.n	8005cba <__libc_init_array+0x1e>
 8005cd4:	08005d40 	.word	0x08005d40
 8005cd8:	08005d40 	.word	0x08005d40
 8005cdc:	08005d40 	.word	0x08005d40
 8005ce0:	08005d44 	.word	0x08005d44

08005ce4 <memset>:
 8005ce4:	4402      	add	r2, r0
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d100      	bne.n	8005cee <memset+0xa>
 8005cec:	4770      	bx	lr
 8005cee:	f803 1b01 	strb.w	r1, [r3], #1
 8005cf2:	e7f9      	b.n	8005ce8 <memset+0x4>

08005cf4 <_init>:
 8005cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cf6:	bf00      	nop
 8005cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cfa:	bc08      	pop	{r3}
 8005cfc:	469e      	mov	lr, r3
 8005cfe:	4770      	bx	lr

08005d00 <_fini>:
 8005d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d02:	bf00      	nop
 8005d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d06:	bc08      	pop	{r3}
 8005d08:	469e      	mov	lr, r3
 8005d0a:	4770      	bx	lr
