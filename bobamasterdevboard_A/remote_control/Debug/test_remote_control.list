
test_remote_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b10  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08004cbc  08004cbc  00014cbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004cdc  08004cdc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004cdc  08004cdc  00014cdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ce4  08004ce4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ce4  08004ce4  00014ce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ce8  08004ce8  00014ce8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004cec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000560  2000000c  08004cf8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000056c  08004cf8  0002056c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000143d2  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027f0  00000000  00000000  0003440e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff8  00000000  00000000  00036c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ee0  00000000  00000000  00037bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000247b8  00000000  00000000  00038ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010192  00000000  00000000  0005d290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc9ca  00000000  00000000  0006d422  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00149dec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004314  00000000  00000000  00149e40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08004ca4 	.word	0x08004ca4

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08004ca4 	.word	0x08004ca4

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96e 	b.w	80004e0 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468c      	mov	ip, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	f040 8083 	bne.w	8000332 <__udivmoddi4+0x116>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d947      	bls.n	80002c2 <__udivmoddi4+0xa6>
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	b142      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000238:	f1c2 0020 	rsb	r0, r2, #32
 800023c:	fa24 f000 	lsr.w	r0, r4, r0
 8000240:	4091      	lsls	r1, r2
 8000242:	4097      	lsls	r7, r2
 8000244:	ea40 0c01 	orr.w	ip, r0, r1
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbbc f6f8 	udiv	r6, ip, r8
 8000254:	fa1f fe87 	uxth.w	lr, r7
 8000258:	fb08 c116 	mls	r1, r8, r6, ip
 800025c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000260:	fb06 f10e 	mul.w	r1, r6, lr
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18fb      	adds	r3, r7, r3
 800026a:	f106 30ff 	add.w	r0, r6, #4294967295
 800026e:	f080 8119 	bcs.w	80004a4 <__udivmoddi4+0x288>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8116 	bls.w	80004a4 <__udivmoddi4+0x288>
 8000278:	3e02      	subs	r6, #2
 800027a:	443b      	add	r3, r7
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0f8 	udiv	r0, r3, r8
 8000284:	fb08 3310 	mls	r3, r8, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000290:	45a6      	cmp	lr, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	193c      	adds	r4, r7, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 8105 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 800029e:	45a6      	cmp	lr, r4
 80002a0:	f240 8102 	bls.w	80004a8 <__udivmoddi4+0x28c>
 80002a4:	3802      	subs	r0, #2
 80002a6:	443c      	add	r4, r7
 80002a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ac:	eba4 040e 	sub.w	r4, r4, lr
 80002b0:	2600      	movs	r6, #0
 80002b2:	b11d      	cbz	r5, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c5 4300 	strd	r4, r3, [r5]
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	b902      	cbnz	r2, 80002c6 <__udivmoddi4+0xaa>
 80002c4:	deff      	udf	#255	; 0xff
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	2a00      	cmp	r2, #0
 80002cc:	d150      	bne.n	8000370 <__udivmoddi4+0x154>
 80002ce:	1bcb      	subs	r3, r1, r7
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f f887 	uxth.w	r8, r7
 80002d8:	2601      	movs	r6, #1
 80002da:	fbb3 fcfe 	udiv	ip, r3, lr
 80002de:	0c21      	lsrs	r1, r4, #16
 80002e0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002e8:	fb08 f30c 	mul.w	r3, r8, ip
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d907      	bls.n	8000300 <__udivmoddi4+0xe4>
 80002f0:	1879      	adds	r1, r7, r1
 80002f2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0xe2>
 80002f8:	428b      	cmp	r3, r1
 80002fa:	f200 80e9 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 80002fe:	4684      	mov	ip, r0
 8000300:	1ac9      	subs	r1, r1, r3
 8000302:	b2a3      	uxth	r3, r4
 8000304:	fbb1 f0fe 	udiv	r0, r1, lr
 8000308:	fb0e 1110 	mls	r1, lr, r0, r1
 800030c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000310:	fb08 f800 	mul.w	r8, r8, r0
 8000314:	45a0      	cmp	r8, r4
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x10c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x10a>
 8000320:	45a0      	cmp	r8, r4
 8000322:	f200 80d9 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 8000326:	4618      	mov	r0, r3
 8000328:	eba4 0408 	sub.w	r4, r4, r8
 800032c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000330:	e7bf      	b.n	80002b2 <__udivmoddi4+0x96>
 8000332:	428b      	cmp	r3, r1
 8000334:	d909      	bls.n	800034a <__udivmoddi4+0x12e>
 8000336:	2d00      	cmp	r5, #0
 8000338:	f000 80b1 	beq.w	800049e <__udivmoddi4+0x282>
 800033c:	2600      	movs	r6, #0
 800033e:	e9c5 0100 	strd	r0, r1, [r5]
 8000342:	4630      	mov	r0, r6
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	fab3 f683 	clz	r6, r3
 800034e:	2e00      	cmp	r6, #0
 8000350:	d14a      	bne.n	80003e8 <__udivmoddi4+0x1cc>
 8000352:	428b      	cmp	r3, r1
 8000354:	d302      	bcc.n	800035c <__udivmoddi4+0x140>
 8000356:	4282      	cmp	r2, r0
 8000358:	f200 80b8 	bhi.w	80004cc <__udivmoddi4+0x2b0>
 800035c:	1a84      	subs	r4, r0, r2
 800035e:	eb61 0103 	sbc.w	r1, r1, r3
 8000362:	2001      	movs	r0, #1
 8000364:	468c      	mov	ip, r1
 8000366:	2d00      	cmp	r5, #0
 8000368:	d0a8      	beq.n	80002bc <__udivmoddi4+0xa0>
 800036a:	e9c5 4c00 	strd	r4, ip, [r5]
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0xa0>
 8000370:	f1c2 0320 	rsb	r3, r2, #32
 8000374:	fa20 f603 	lsr.w	r6, r0, r3
 8000378:	4097      	lsls	r7, r2
 800037a:	fa01 f002 	lsl.w	r0, r1, r2
 800037e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000382:	40d9      	lsrs	r1, r3
 8000384:	4330      	orrs	r0, r6
 8000386:	0c03      	lsrs	r3, r0, #16
 8000388:	fbb1 f6fe 	udiv	r6, r1, lr
 800038c:	fa1f f887 	uxth.w	r8, r7
 8000390:	fb0e 1116 	mls	r1, lr, r6, r1
 8000394:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000398:	fb06 f108 	mul.w	r1, r6, r8
 800039c:	4299      	cmp	r1, r3
 800039e:	fa04 f402 	lsl.w	r4, r4, r2
 80003a2:	d909      	bls.n	80003b8 <__udivmoddi4+0x19c>
 80003a4:	18fb      	adds	r3, r7, r3
 80003a6:	f106 3cff 	add.w	ip, r6, #4294967295
 80003aa:	f080 808d 	bcs.w	80004c8 <__udivmoddi4+0x2ac>
 80003ae:	4299      	cmp	r1, r3
 80003b0:	f240 808a 	bls.w	80004c8 <__udivmoddi4+0x2ac>
 80003b4:	3e02      	subs	r6, #2
 80003b6:	443b      	add	r3, r7
 80003b8:	1a5b      	subs	r3, r3, r1
 80003ba:	b281      	uxth	r1, r0
 80003bc:	fbb3 f0fe 	udiv	r0, r3, lr
 80003c0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003c8:	fb00 f308 	mul.w	r3, r0, r8
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x1c4>
 80003d0:	1879      	adds	r1, r7, r1
 80003d2:	f100 3cff 	add.w	ip, r0, #4294967295
 80003d6:	d273      	bcs.n	80004c0 <__udivmoddi4+0x2a4>
 80003d8:	428b      	cmp	r3, r1
 80003da:	d971      	bls.n	80004c0 <__udivmoddi4+0x2a4>
 80003dc:	3802      	subs	r0, #2
 80003de:	4439      	add	r1, r7
 80003e0:	1acb      	subs	r3, r1, r3
 80003e2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003e6:	e778      	b.n	80002da <__udivmoddi4+0xbe>
 80003e8:	f1c6 0c20 	rsb	ip, r6, #32
 80003ec:	fa03 f406 	lsl.w	r4, r3, r6
 80003f0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f4:	431c      	orrs	r4, r3
 80003f6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003fa:	fa01 f306 	lsl.w	r3, r1, r6
 80003fe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000402:	fa21 f10c 	lsr.w	r1, r1, ip
 8000406:	431f      	orrs	r7, r3
 8000408:	0c3b      	lsrs	r3, r7, #16
 800040a:	fbb1 f9fe 	udiv	r9, r1, lr
 800040e:	fa1f f884 	uxth.w	r8, r4
 8000412:	fb0e 1119 	mls	r1, lr, r9, r1
 8000416:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800041a:	fb09 fa08 	mul.w	sl, r9, r8
 800041e:	458a      	cmp	sl, r1
 8000420:	fa02 f206 	lsl.w	r2, r2, r6
 8000424:	fa00 f306 	lsl.w	r3, r0, r6
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x220>
 800042a:	1861      	adds	r1, r4, r1
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d248      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000432:	458a      	cmp	sl, r1
 8000434:	d946      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	4421      	add	r1, r4
 800043c:	eba1 010a 	sub.w	r1, r1, sl
 8000440:	b2bf      	uxth	r7, r7
 8000442:	fbb1 f0fe 	udiv	r0, r1, lr
 8000446:	fb0e 1110 	mls	r1, lr, r0, r1
 800044a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45b8      	cmp	r8, r7
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x24a>
 8000456:	19e7      	adds	r7, r4, r7
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d22e      	bcs.n	80004bc <__udivmoddi4+0x2a0>
 800045e:	45b8      	cmp	r8, r7
 8000460:	d92c      	bls.n	80004bc <__udivmoddi4+0x2a0>
 8000462:	3802      	subs	r0, #2
 8000464:	4427      	add	r7, r4
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba7 0708 	sub.w	r7, r7, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454f      	cmp	r7, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	4649      	mov	r1, r9
 8000478:	d31a      	bcc.n	80004b0 <__udivmoddi4+0x294>
 800047a:	d017      	beq.n	80004ac <__udivmoddi4+0x290>
 800047c:	b15d      	cbz	r5, 8000496 <__udivmoddi4+0x27a>
 800047e:	ebb3 020e 	subs.w	r2, r3, lr
 8000482:	eb67 0701 	sbc.w	r7, r7, r1
 8000486:	fa07 fc0c 	lsl.w	ip, r7, ip
 800048a:	40f2      	lsrs	r2, r6
 800048c:	ea4c 0202 	orr.w	r2, ip, r2
 8000490:	40f7      	lsrs	r7, r6
 8000492:	e9c5 2700 	strd	r2, r7, [r5]
 8000496:	2600      	movs	r6, #0
 8000498:	4631      	mov	r1, r6
 800049a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049e:	462e      	mov	r6, r5
 80004a0:	4628      	mov	r0, r5
 80004a2:	e70b      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a4:	4606      	mov	r6, r0
 80004a6:	e6e9      	b.n	800027c <__udivmoddi4+0x60>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e6fd      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004ac:	4543      	cmp	r3, r8
 80004ae:	d2e5      	bcs.n	800047c <__udivmoddi4+0x260>
 80004b0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b4:	eb69 0104 	sbc.w	r1, r9, r4
 80004b8:	3801      	subs	r0, #1
 80004ba:	e7df      	b.n	800047c <__udivmoddi4+0x260>
 80004bc:	4608      	mov	r0, r1
 80004be:	e7d2      	b.n	8000466 <__udivmoddi4+0x24a>
 80004c0:	4660      	mov	r0, ip
 80004c2:	e78d      	b.n	80003e0 <__udivmoddi4+0x1c4>
 80004c4:	4681      	mov	r9, r0
 80004c6:	e7b9      	b.n	800043c <__udivmoddi4+0x220>
 80004c8:	4666      	mov	r6, ip
 80004ca:	e775      	b.n	80003b8 <__udivmoddi4+0x19c>
 80004cc:	4630      	mov	r0, r6
 80004ce:	e74a      	b.n	8000366 <__udivmoddi4+0x14a>
 80004d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d4:	4439      	add	r1, r7
 80004d6:	e713      	b.n	8000300 <__udivmoddi4+0xe4>
 80004d8:	3802      	subs	r0, #2
 80004da:	443c      	add	r4, r7
 80004dc:	e724      	b.n	8000328 <__udivmoddi4+0x10c>
 80004de:	bf00      	nop

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <getRCVals>:
void processSentry();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void getRCVals() {
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
	leftJoyX = rc.ch3;
 80004e8:	4b16      	ldr	r3, [pc, #88]	; (8000544 <getRCVals+0x60>)
 80004ea:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80004ee:	461a      	mov	r2, r3
 80004f0:	4b15      	ldr	r3, [pc, #84]	; (8000548 <getRCVals+0x64>)
 80004f2:	601a      	str	r2, [r3, #0]
	leftJoyY = rc.ch4;
 80004f4:	4b13      	ldr	r3, [pc, #76]	; (8000544 <getRCVals+0x60>)
 80004f6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80004fa:	461a      	mov	r2, r3
 80004fc:	4b13      	ldr	r3, [pc, #76]	; (800054c <getRCVals+0x68>)
 80004fe:	601a      	str	r2, [r3, #0]
	rightJoyX = rc.ch1;
 8000500:	4b10      	ldr	r3, [pc, #64]	; (8000544 <getRCVals+0x60>)
 8000502:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000506:	461a      	mov	r2, r3
 8000508:	4b11      	ldr	r3, [pc, #68]	; (8000550 <getRCVals+0x6c>)
 800050a:	601a      	str	r2, [r3, #0]
	rightJoyY = rc.ch2;
 800050c:	4b0d      	ldr	r3, [pc, #52]	; (8000544 <getRCVals+0x60>)
 800050e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000512:	461a      	mov	r2, r3
 8000514:	4b0f      	ldr	r3, [pc, #60]	; (8000554 <getRCVals+0x70>)
 8000516:	601a      	str	r2, [r3, #0]

	wheel = rc.wheel;
 8000518:	4b0a      	ldr	r3, [pc, #40]	; (8000544 <getRCVals+0x60>)
 800051a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800051e:	461a      	mov	r2, r3
 8000520:	4b0d      	ldr	r3, [pc, #52]	; (8000558 <getRCVals+0x74>)
 8000522:	601a      	str	r2, [r3, #0]

	leftSwitch = rc.sw1;
 8000524:	4b07      	ldr	r3, [pc, #28]	; (8000544 <getRCVals+0x60>)
 8000526:	7a9b      	ldrb	r3, [r3, #10]
 8000528:	461a      	mov	r2, r3
 800052a:	4b0c      	ldr	r3, [pc, #48]	; (800055c <getRCVals+0x78>)
 800052c:	601a      	str	r2, [r3, #0]
	rightSwitch = rc.sw2;
 800052e:	4b05      	ldr	r3, [pc, #20]	; (8000544 <getRCVals+0x60>)
 8000530:	7adb      	ldrb	r3, [r3, #11]
 8000532:	461a      	mov	r2, r3
 8000534:	4b0a      	ldr	r3, [pc, #40]	; (8000560 <getRCVals+0x7c>)
 8000536:	601a      	str	r2, [r3, #0]
}
 8000538:	bf00      	nop
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	2000052c 	.word	0x2000052c
 8000548:	2000012c 	.word	0x2000012c
 800054c:	20000128 	.word	0x20000128
 8000550:	200002dc 	.word	0x200002dc
 8000554:	20000124 	.word	0x20000124
 8000558:	20000028 	.word	0x20000028
 800055c:	20000130 	.word	0x20000130
 8000560:	20000494 	.word	0x20000494

08000564 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000568:	f001 fab2 	bl	8001ad0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056c:	f000 f822 	bl	80005b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000570:	f000 fb84 	bl	8000c7c <MX_GPIO_Init>
  MX_DMA_Init();
 8000574:	f000 fb44 	bl	8000c00 <MX_DMA_Init>
  MX_SPI5_Init();
 8000578:	f000 f886 	bl	8000688 <MX_SPI5_Init>
  MX_TIM2_Init();
 800057c:	f000 f8ba 	bl	80006f4 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000580:	f000 f98c 	bl	800089c <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000584:	f000 fabc 	bl	8000b00 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000588:	f000 fae6 	bl	8000b58 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 800058c:	f000 fb0e 	bl	8000bac <MX_USART6_UART_Init>
  MX_TIM3_Init();
 8000590:	f000 f92a 	bl	80007e8 <MX_TIM3_Init>
  MX_TIM12_Init();
 8000594:	f000 fa6e 	bl	8000a74 <MX_TIM12_Init>
  MX_TIM5_Init();
 8000598:	f000 f9fc 	bl	8000994 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  led_off();
 800059c:	f000 fc9c 	bl	8000ed8 <led_off>
  power_on();
 80005a0:	f000 fcae 	bl	8000f00 <power_on>
  dbus_uart_init();
 80005a4:	f000 fe74 	bl	8001290 <dbus_uart_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  getRCVals();
 80005a8:	f7ff ff9c 	bl	80004e4 <getRCVals>
	  HAL_Delay(1);
 80005ac:	2001      	movs	r0, #1
 80005ae:	f001 fb01 	bl	8001bb4 <HAL_Delay>
	  getRCVals();
 80005b2:	e7f9      	b.n	80005a8 <main+0x44>

080005b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b094      	sub	sp, #80	; 0x50
 80005b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ba:	f107 0320 	add.w	r3, r7, #32
 80005be:	2230      	movs	r2, #48	; 0x30
 80005c0:	2100      	movs	r1, #0
 80005c2:	4618      	mov	r0, r3
 80005c4:	f004 fb66 	bl	8004c94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c8:	f107 030c 	add.w	r3, r7, #12
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
 80005d0:	605a      	str	r2, [r3, #4]
 80005d2:	609a      	str	r2, [r3, #8]
 80005d4:	60da      	str	r2, [r3, #12]
 80005d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d8:	2300      	movs	r3, #0
 80005da:	60bb      	str	r3, [r7, #8]
 80005dc:	4b28      	ldr	r3, [pc, #160]	; (8000680 <SystemClock_Config+0xcc>)
 80005de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e0:	4a27      	ldr	r2, [pc, #156]	; (8000680 <SystemClock_Config+0xcc>)
 80005e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005e6:	6413      	str	r3, [r2, #64]	; 0x40
 80005e8:	4b25      	ldr	r3, [pc, #148]	; (8000680 <SystemClock_Config+0xcc>)
 80005ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f0:	60bb      	str	r3, [r7, #8]
 80005f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005f4:	2300      	movs	r3, #0
 80005f6:	607b      	str	r3, [r7, #4]
 80005f8:	4b22      	ldr	r3, [pc, #136]	; (8000684 <SystemClock_Config+0xd0>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a21      	ldr	r2, [pc, #132]	; (8000684 <SystemClock_Config+0xd0>)
 80005fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000602:	6013      	str	r3, [r2, #0]
 8000604:	4b1f      	ldr	r3, [pc, #124]	; (8000684 <SystemClock_Config+0xd0>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800060c:	607b      	str	r3, [r7, #4]
 800060e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000610:	2301      	movs	r3, #1
 8000612:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000614:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000618:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800061a:	2302      	movs	r3, #2
 800061c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800061e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000622:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8000624:	2306      	movs	r3, #6
 8000626:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000628:	23a8      	movs	r3, #168	; 0xa8
 800062a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800062c:	2302      	movs	r3, #2
 800062e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000630:	2304      	movs	r3, #4
 8000632:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000634:	f107 0320 	add.w	r3, r7, #32
 8000638:	4618      	mov	r0, r3
 800063a:	f002 fc7b 	bl	8002f34 <HAL_RCC_OscConfig>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000644:	f000 fbde 	bl	8000e04 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000648:	230f      	movs	r3, #15
 800064a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800064c:	2302      	movs	r3, #2
 800064e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000650:	2300      	movs	r3, #0
 8000652:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000654:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000658:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800065a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800065e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000660:	f107 030c 	add.w	r3, r7, #12
 8000664:	2105      	movs	r1, #5
 8000666:	4618      	mov	r0, r3
 8000668:	f002 fed4 	bl	8003414 <HAL_RCC_ClockConfig>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000672:	f000 fbc7 	bl	8000e04 <Error_Handler>
  }
}
 8000676:	bf00      	nop
 8000678:	3750      	adds	r7, #80	; 0x50
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	40023800 	.word	0x40023800
 8000684:	40007000 	.word	0x40007000

08000688 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 800068c:	4b17      	ldr	r3, [pc, #92]	; (80006ec <MX_SPI5_Init+0x64>)
 800068e:	4a18      	ldr	r2, [pc, #96]	; (80006f0 <MX_SPI5_Init+0x68>)
 8000690:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000692:	4b16      	ldr	r3, [pc, #88]	; (80006ec <MX_SPI5_Init+0x64>)
 8000694:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000698:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800069a:	4b14      	ldr	r3, [pc, #80]	; (80006ec <MX_SPI5_Init+0x64>)
 800069c:	2200      	movs	r2, #0
 800069e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80006a0:	4b12      	ldr	r3, [pc, #72]	; (80006ec <MX_SPI5_Init+0x64>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006a6:	4b11      	ldr	r3, [pc, #68]	; (80006ec <MX_SPI5_Init+0x64>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006ac:	4b0f      	ldr	r3, [pc, #60]	; (80006ec <MX_SPI5_Init+0x64>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80006b2:	4b0e      	ldr	r3, [pc, #56]	; (80006ec <MX_SPI5_Init+0x64>)
 80006b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006b8:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80006ba:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <MX_SPI5_Init+0x64>)
 80006bc:	2230      	movs	r2, #48	; 0x30
 80006be:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006c0:	4b0a      	ldr	r3, [pc, #40]	; (80006ec <MX_SPI5_Init+0x64>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80006c6:	4b09      	ldr	r3, [pc, #36]	; (80006ec <MX_SPI5_Init+0x64>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006cc:	4b07      	ldr	r3, [pc, #28]	; (80006ec <MX_SPI5_Init+0x64>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80006d2:	4b06      	ldr	r3, [pc, #24]	; (80006ec <MX_SPI5_Init+0x64>)
 80006d4:	220a      	movs	r2, #10
 80006d6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80006d8:	4804      	ldr	r0, [pc, #16]	; (80006ec <MX_SPI5_Init+0x64>)
 80006da:	f003 f86b 	bl	80037b4 <HAL_SPI_Init>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80006e4:	f000 fb8e 	bl	8000e04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80006e8:	bf00      	nop
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	2000008c 	.word	0x2000008c
 80006f0:	40015000 	.word	0x40015000

080006f4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b08a      	sub	sp, #40	; 0x28
 80006f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006fa:	f107 0320 	add.w	r3, r7, #32
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000704:	1d3b      	adds	r3, r7, #4
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	605a      	str	r2, [r3, #4]
 800070c:	609a      	str	r2, [r3, #8]
 800070e:	60da      	str	r2, [r3, #12]
 8000710:	611a      	str	r2, [r3, #16]
 8000712:	615a      	str	r2, [r3, #20]
 8000714:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000716:	4b33      	ldr	r3, [pc, #204]	; (80007e4 <MX_TIM2_Init+0xf0>)
 8000718:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800071c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = TIM_PSC_APB1;
 800071e:	4b31      	ldr	r3, [pc, #196]	; (80007e4 <MX_TIM2_Init+0xf0>)
 8000720:	2253      	movs	r2, #83	; 0x53
 8000722:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000724:	4b2f      	ldr	r3, [pc, #188]	; (80007e4 <MX_TIM2_Init+0xf0>)
 8000726:	2200      	movs	r2, #0
 8000728:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = PWM_RESOLUTION-1;
 800072a:	4b2e      	ldr	r3, [pc, #184]	; (80007e4 <MX_TIM2_Init+0xf0>)
 800072c:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000730:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000732:	4b2c      	ldr	r3, [pc, #176]	; (80007e4 <MX_TIM2_Init+0xf0>)
 8000734:	2200      	movs	r2, #0
 8000736:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000738:	4b2a      	ldr	r3, [pc, #168]	; (80007e4 <MX_TIM2_Init+0xf0>)
 800073a:	2200      	movs	r2, #0
 800073c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800073e:	4829      	ldr	r0, [pc, #164]	; (80007e4 <MX_TIM2_Init+0xf0>)
 8000740:	f003 f89c 	bl	800387c <HAL_TIM_PWM_Init>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800074a:	f000 fb5b 	bl	8000e04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800074e:	2300      	movs	r3, #0
 8000750:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000752:	2300      	movs	r3, #0
 8000754:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000756:	f107 0320 	add.w	r3, r7, #32
 800075a:	4619      	mov	r1, r3
 800075c:	4821      	ldr	r0, [pc, #132]	; (80007e4 <MX_TIM2_Init+0xf0>)
 800075e:	f003 fbcf 	bl	8003f00 <HAL_TIMEx_MasterConfigSynchronization>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000768:	f000 fb4c 	bl	8000e04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800076c:	2360      	movs	r3, #96	; 0x60
 800076e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = PWM_DEFAULT_DUTY;
 8000770:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000774:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000776:	2300      	movs	r3, #0
 8000778:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800077a:	2300      	movs	r3, #0
 800077c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800077e:	1d3b      	adds	r3, r7, #4
 8000780:	2200      	movs	r2, #0
 8000782:	4619      	mov	r1, r3
 8000784:	4817      	ldr	r0, [pc, #92]	; (80007e4 <MX_TIM2_Init+0xf0>)
 8000786:	f003 f8a5 	bl	80038d4 <HAL_TIM_PWM_ConfigChannel>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000790:	f000 fb38 	bl	8000e04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000794:	1d3b      	adds	r3, r7, #4
 8000796:	2204      	movs	r2, #4
 8000798:	4619      	mov	r1, r3
 800079a:	4812      	ldr	r0, [pc, #72]	; (80007e4 <MX_TIM2_Init+0xf0>)
 800079c:	f003 f89a 	bl	80038d4 <HAL_TIM_PWM_ConfigChannel>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80007a6:	f000 fb2d 	bl	8000e04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80007aa:	1d3b      	adds	r3, r7, #4
 80007ac:	2208      	movs	r2, #8
 80007ae:	4619      	mov	r1, r3
 80007b0:	480c      	ldr	r0, [pc, #48]	; (80007e4 <MX_TIM2_Init+0xf0>)
 80007b2:	f003 f88f 	bl	80038d4 <HAL_TIM_PWM_ConfigChannel>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 80007bc:	f000 fb22 	bl	8000e04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80007c0:	1d3b      	adds	r3, r7, #4
 80007c2:	220c      	movs	r2, #12
 80007c4:	4619      	mov	r1, r3
 80007c6:	4807      	ldr	r0, [pc, #28]	; (80007e4 <MX_TIM2_Init+0xf0>)
 80007c8:	f003 f884 	bl	80038d4 <HAL_TIM_PWM_ConfigChannel>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_TIM2_Init+0xe2>
  {
    Error_Handler();
 80007d2:	f000 fb17 	bl	8000e04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80007d6:	4803      	ldr	r0, [pc, #12]	; (80007e4 <MX_TIM2_Init+0xf0>)
 80007d8:	f000 fe66 	bl	80014a8 <HAL_TIM_MspPostInit>

}
 80007dc:	bf00      	nop
 80007de:	3728      	adds	r7, #40	; 0x28
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	200003ec 	.word	0x200003ec

080007e8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b08a      	sub	sp, #40	; 0x28
 80007ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007ee:	f107 0320 	add.w	r3, r7, #32
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007f8:	1d3b      	adds	r3, r7, #4
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]
 8000800:	609a      	str	r2, [r3, #8]
 8000802:	60da      	str	r2, [r3, #12]
 8000804:	611a      	str	r2, [r3, #16]
 8000806:	615a      	str	r2, [r3, #20]
 8000808:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800080a:	4b22      	ldr	r3, [pc, #136]	; (8000894 <MX_TIM3_Init+0xac>)
 800080c:	4a22      	ldr	r2, [pc, #136]	; (8000898 <MX_TIM3_Init+0xb0>)
 800080e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000810:	4b20      	ldr	r3, [pc, #128]	; (8000894 <MX_TIM3_Init+0xac>)
 8000812:	2200      	movs	r2, #0
 8000814:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000816:	4b1f      	ldr	r3, [pc, #124]	; (8000894 <MX_TIM3_Init+0xac>)
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4999;
 800081c:	4b1d      	ldr	r3, [pc, #116]	; (8000894 <MX_TIM3_Init+0xac>)
 800081e:	f241 3287 	movw	r2, #4999	; 0x1387
 8000822:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000824:	4b1b      	ldr	r3, [pc, #108]	; (8000894 <MX_TIM3_Init+0xac>)
 8000826:	2200      	movs	r2, #0
 8000828:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800082a:	4b1a      	ldr	r3, [pc, #104]	; (8000894 <MX_TIM3_Init+0xac>)
 800082c:	2200      	movs	r2, #0
 800082e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000830:	4818      	ldr	r0, [pc, #96]	; (8000894 <MX_TIM3_Init+0xac>)
 8000832:	f003 f823 	bl	800387c <HAL_TIM_PWM_Init>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800083c:	f000 fae2 	bl	8000e04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000840:	2300      	movs	r3, #0
 8000842:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000844:	2300      	movs	r3, #0
 8000846:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000848:	f107 0320 	add.w	r3, r7, #32
 800084c:	4619      	mov	r1, r3
 800084e:	4811      	ldr	r0, [pc, #68]	; (8000894 <MX_TIM3_Init+0xac>)
 8000850:	f003 fb56 	bl	8003f00 <HAL_TIMEx_MasterConfigSynchronization>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800085a:	f000 fad3 	bl	8000e04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800085e:	2360      	movs	r3, #96	; 0x60
 8000860:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000862:	2300      	movs	r3, #0
 8000864:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000866:	2300      	movs	r3, #0
 8000868:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800086a:	2300      	movs	r3, #0
 800086c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800086e:	1d3b      	adds	r3, r7, #4
 8000870:	2204      	movs	r2, #4
 8000872:	4619      	mov	r1, r3
 8000874:	4807      	ldr	r0, [pc, #28]	; (8000894 <MX_TIM3_Init+0xac>)
 8000876:	f003 f82d 	bl	80038d4 <HAL_TIM_PWM_ConfigChannel>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000880:	f000 fac0 	bl	8000e04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000884:	4803      	ldr	r0, [pc, #12]	; (8000894 <MX_TIM3_Init+0xac>)
 8000886:	f000 fe0f 	bl	80014a8 <HAL_TIM_MspPostInit>

}
 800088a:	bf00      	nop
 800088c:	3728      	adds	r7, #40	; 0x28
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	20000174 	.word	0x20000174
 8000898:	40000400 	.word	0x40000400

0800089c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b08a      	sub	sp, #40	; 0x28
 80008a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008a2:	f107 0320 	add.w	r3, r7, #32
 80008a6:	2200      	movs	r2, #0
 80008a8:	601a      	str	r2, [r3, #0]
 80008aa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008ac:	1d3b      	adds	r3, r7, #4
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
 80008b2:	605a      	str	r2, [r3, #4]
 80008b4:	609a      	str	r2, [r3, #8]
 80008b6:	60da      	str	r2, [r3, #12]
 80008b8:	611a      	str	r2, [r3, #16]
 80008ba:	615a      	str	r2, [r3, #20]
 80008bc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80008be:	4b33      	ldr	r3, [pc, #204]	; (800098c <MX_TIM4_Init+0xf0>)
 80008c0:	4a33      	ldr	r2, [pc, #204]	; (8000990 <MX_TIM4_Init+0xf4>)
 80008c2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = TIM_PSC_APB1;
 80008c4:	4b31      	ldr	r3, [pc, #196]	; (800098c <MX_TIM4_Init+0xf0>)
 80008c6:	2253      	movs	r2, #83	; 0x53
 80008c8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ca:	4b30      	ldr	r3, [pc, #192]	; (800098c <MX_TIM4_Init+0xf0>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = PWM_RESOLUTION-1;
 80008d0:	4b2e      	ldr	r3, [pc, #184]	; (800098c <MX_TIM4_Init+0xf0>)
 80008d2:	f640 12c3 	movw	r2, #2499	; 0x9c3
 80008d6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008d8:	4b2c      	ldr	r3, [pc, #176]	; (800098c <MX_TIM4_Init+0xf0>)
 80008da:	2200      	movs	r2, #0
 80008dc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008de:	4b2b      	ldr	r3, [pc, #172]	; (800098c <MX_TIM4_Init+0xf0>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80008e4:	4829      	ldr	r0, [pc, #164]	; (800098c <MX_TIM4_Init+0xf0>)
 80008e6:	f002 ffc9 	bl	800387c <HAL_TIM_PWM_Init>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80008f0:	f000 fa88 	bl	8000e04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008f4:	2300      	movs	r3, #0
 80008f6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008f8:	2300      	movs	r3, #0
 80008fa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80008fc:	f107 0320 	add.w	r3, r7, #32
 8000900:	4619      	mov	r1, r3
 8000902:	4822      	ldr	r0, [pc, #136]	; (800098c <MX_TIM4_Init+0xf0>)
 8000904:	f003 fafc 	bl	8003f00 <HAL_TIMEx_MasterConfigSynchronization>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800090e:	f000 fa79 	bl	8000e04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000912:	2360      	movs	r3, #96	; 0x60
 8000914:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = PWM_DEFAULT_DUTY;
 8000916:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800091a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800091c:	2300      	movs	r3, #0
 800091e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000920:	2300      	movs	r3, #0
 8000922:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000924:	1d3b      	adds	r3, r7, #4
 8000926:	2200      	movs	r2, #0
 8000928:	4619      	mov	r1, r3
 800092a:	4818      	ldr	r0, [pc, #96]	; (800098c <MX_TIM4_Init+0xf0>)
 800092c:	f002 ffd2 	bl	80038d4 <HAL_TIM_PWM_ConfigChannel>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000936:	f000 fa65 	bl	8000e04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800093a:	1d3b      	adds	r3, r7, #4
 800093c:	2204      	movs	r2, #4
 800093e:	4619      	mov	r1, r3
 8000940:	4812      	ldr	r0, [pc, #72]	; (800098c <MX_TIM4_Init+0xf0>)
 8000942:	f002 ffc7 	bl	80038d4 <HAL_TIM_PWM_ConfigChannel>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 800094c:	f000 fa5a 	bl	8000e04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000950:	1d3b      	adds	r3, r7, #4
 8000952:	2208      	movs	r2, #8
 8000954:	4619      	mov	r1, r3
 8000956:	480d      	ldr	r0, [pc, #52]	; (800098c <MX_TIM4_Init+0xf0>)
 8000958:	f002 ffbc 	bl	80038d4 <HAL_TIM_PWM_ConfigChannel>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 8000962:	f000 fa4f 	bl	8000e04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000966:	1d3b      	adds	r3, r7, #4
 8000968:	220c      	movs	r2, #12
 800096a:	4619      	mov	r1, r3
 800096c:	4807      	ldr	r0, [pc, #28]	; (800098c <MX_TIM4_Init+0xf0>)
 800096e:	f002 ffb1 	bl	80038d4 <HAL_TIM_PWM_ConfigChannel>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 8000978:	f000 fa44 	bl	8000e04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800097c:	4803      	ldr	r0, [pc, #12]	; (800098c <MX_TIM4_Init+0xf0>)
 800097e:	f000 fd93 	bl	80014a8 <HAL_TIM_MspPostInit>

}
 8000982:	bf00      	nop
 8000984:	3728      	adds	r7, #40	; 0x28
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	200000e4 	.word	0x200000e4
 8000990:	40000800 	.word	0x40000800

08000994 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b08a      	sub	sp, #40	; 0x28
 8000998:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800099a:	f107 0320 	add.w	r3, r7, #32
 800099e:	2200      	movs	r2, #0
 80009a0:	601a      	str	r2, [r3, #0]
 80009a2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009a4:	1d3b      	adds	r3, r7, #4
 80009a6:	2200      	movs	r2, #0
 80009a8:	601a      	str	r2, [r3, #0]
 80009aa:	605a      	str	r2, [r3, #4]
 80009ac:	609a      	str	r2, [r3, #8]
 80009ae:	60da      	str	r2, [r3, #12]
 80009b0:	611a      	str	r2, [r3, #16]
 80009b2:	615a      	str	r2, [r3, #20]
 80009b4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80009b6:	4b2d      	ldr	r3, [pc, #180]	; (8000a6c <MX_TIM5_Init+0xd8>)
 80009b8:	4a2d      	ldr	r2, [pc, #180]	; (8000a70 <MX_TIM5_Init+0xdc>)
 80009ba:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80009bc:	4b2b      	ldr	r3, [pc, #172]	; (8000a6c <MX_TIM5_Init+0xd8>)
 80009be:	2200      	movs	r2, #0
 80009c0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009c2:	4b2a      	ldr	r3, [pc, #168]	; (8000a6c <MX_TIM5_Init+0xd8>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80009c8:	4b28      	ldr	r3, [pc, #160]	; (8000a6c <MX_TIM5_Init+0xd8>)
 80009ca:	f04f 32ff 	mov.w	r2, #4294967295
 80009ce:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009d0:	4b26      	ldr	r3, [pc, #152]	; (8000a6c <MX_TIM5_Init+0xd8>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009d6:	4b25      	ldr	r3, [pc, #148]	; (8000a6c <MX_TIM5_Init+0xd8>)
 80009d8:	2200      	movs	r2, #0
 80009da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80009dc:	4823      	ldr	r0, [pc, #140]	; (8000a6c <MX_TIM5_Init+0xd8>)
 80009de:	f002 ff4d 	bl	800387c <HAL_TIM_PWM_Init>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 80009e8:	f000 fa0c 	bl	8000e04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009ec:	2300      	movs	r3, #0
 80009ee:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009f0:	2300      	movs	r3, #0
 80009f2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80009f4:	f107 0320 	add.w	r3, r7, #32
 80009f8:	4619      	mov	r1, r3
 80009fa:	481c      	ldr	r0, [pc, #112]	; (8000a6c <MX_TIM5_Init+0xd8>)
 80009fc:	f003 fa80 	bl	8003f00 <HAL_TIMEx_MasterConfigSynchronization>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8000a06:	f000 f9fd 	bl	8000e04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a0a:	2360      	movs	r3, #96	; 0x60
 8000a0c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a12:	2300      	movs	r3, #0
 8000a14:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a16:	2300      	movs	r3, #0
 8000a18:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a1a:	1d3b      	adds	r3, r7, #4
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4812      	ldr	r0, [pc, #72]	; (8000a6c <MX_TIM5_Init+0xd8>)
 8000a22:	f002 ff57 	bl	80038d4 <HAL_TIM_PWM_ConfigChannel>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8000a2c:	f000 f9ea 	bl	8000e04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a30:	1d3b      	adds	r3, r7, #4
 8000a32:	2204      	movs	r2, #4
 8000a34:	4619      	mov	r1, r3
 8000a36:	480d      	ldr	r0, [pc, #52]	; (8000a6c <MX_TIM5_Init+0xd8>)
 8000a38:	f002 ff4c 	bl	80038d4 <HAL_TIM_PWM_ConfigChannel>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8000a42:	f000 f9df 	bl	8000e04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a46:	1d3b      	adds	r3, r7, #4
 8000a48:	2208      	movs	r2, #8
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4807      	ldr	r0, [pc, #28]	; (8000a6c <MX_TIM5_Init+0xd8>)
 8000a4e:	f002 ff41 	bl	80038d4 <HAL_TIM_PWM_ConfigChannel>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_TIM5_Init+0xc8>
  {
    Error_Handler();
 8000a58:	f000 f9d4 	bl	8000e04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000a5c:	4803      	ldr	r0, [pc, #12]	; (8000a6c <MX_TIM5_Init+0xd8>)
 8000a5e:	f000 fd23 	bl	80014a8 <HAL_TIM_MspPostInit>

}
 8000a62:	bf00      	nop
 8000a64:	3728      	adds	r7, #40	; 0x28
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	20000134 	.word	0x20000134
 8000a70:	40000c00 	.word	0x40000c00

08000a74 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b088      	sub	sp, #32
 8000a78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a7a:	1d3b      	adds	r3, r7, #4
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
 8000a86:	611a      	str	r2, [r3, #16]
 8000a88:	615a      	str	r2, [r3, #20]
 8000a8a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8000a8c:	4b1a      	ldr	r3, [pc, #104]	; (8000af8 <MX_TIM12_Init+0x84>)
 8000a8e:	4a1b      	ldr	r2, [pc, #108]	; (8000afc <MX_TIM12_Init+0x88>)
 8000a90:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 3;
 8000a92:	4b19      	ldr	r3, [pc, #100]	; (8000af8 <MX_TIM12_Init+0x84>)
 8000a94:	2203      	movs	r2, #3
 8000a96:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a98:	4b17      	ldr	r3, [pc, #92]	; (8000af8 <MX_TIM12_Init+0x84>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 7777;
 8000a9e:	4b16      	ldr	r3, [pc, #88]	; (8000af8 <MX_TIM12_Init+0x84>)
 8000aa0:	f641 6261 	movw	r2, #7777	; 0x1e61
 8000aa4:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aa6:	4b14      	ldr	r3, [pc, #80]	; (8000af8 <MX_TIM12_Init+0x84>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aac:	4b12      	ldr	r3, [pc, #72]	; (8000af8 <MX_TIM12_Init+0x84>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8000ab2:	4811      	ldr	r0, [pc, #68]	; (8000af8 <MX_TIM12_Init+0x84>)
 8000ab4:	f002 fee2 	bl	800387c <HAL_TIM_PWM_Init>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8000abe:	f000 f9a1 	bl	8000e04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ac2:	2360      	movs	r3, #96	; 0x60
 8000ac4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000aca:	2300      	movs	r3, #0
 8000acc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ad2:	1d3b      	adds	r3, r7, #4
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4807      	ldr	r0, [pc, #28]	; (8000af8 <MX_TIM12_Init+0x84>)
 8000ada:	f002 fefb 	bl	80038d4 <HAL_TIM_PWM_ConfigChannel>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8000ae4:	f000 f98e 	bl	8000e04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8000ae8:	4803      	ldr	r0, [pc, #12]	; (8000af8 <MX_TIM12_Init+0x84>)
 8000aea:	f000 fcdd 	bl	80014a8 <HAL_TIM_MspPostInit>

}
 8000aee:	bf00      	nop
 8000af0:	3720      	adds	r7, #32
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	20000498 	.word	0x20000498
 8000afc:	40001800 	.word	0x40001800

08000b00 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b04:	4b11      	ldr	r3, [pc, #68]	; (8000b4c <MX_USART1_UART_Init+0x4c>)
 8000b06:	4a12      	ldr	r2, [pc, #72]	; (8000b50 <MX_USART1_UART_Init+0x50>)
 8000b08:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 100000;
 8000b0a:	4b10      	ldr	r3, [pc, #64]	; (8000b4c <MX_USART1_UART_Init+0x4c>)
 8000b0c:	4a11      	ldr	r2, [pc, #68]	; (8000b54 <MX_USART1_UART_Init+0x54>)
 8000b0e:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b10:	4b0e      	ldr	r3, [pc, #56]	; (8000b4c <MX_USART1_UART_Init+0x4c>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b16:	4b0d      	ldr	r3, [pc, #52]	; (8000b4c <MX_USART1_UART_Init+0x4c>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8000b1c:	4b0b      	ldr	r3, [pc, #44]	; (8000b4c <MX_USART1_UART_Init+0x4c>)
 8000b1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b22:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b24:	4b09      	ldr	r3, [pc, #36]	; (8000b4c <MX_USART1_UART_Init+0x4c>)
 8000b26:	220c      	movs	r2, #12
 8000b28:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b2a:	4b08      	ldr	r3, [pc, #32]	; (8000b4c <MX_USART1_UART_Init+0x4c>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b30:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <MX_USART1_UART_Init+0x4c>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b36:	4805      	ldr	r0, [pc, #20]	; (8000b4c <MX_USART1_UART_Init+0x4c>)
 8000b38:	f003 fa5e 	bl	8003ff8 <HAL_UART_Init>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000b42:	f000 f95f 	bl	8000e04 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	2000029c 	.word	0x2000029c
 8000b50:	40011000 	.word	0x40011000
 8000b54:	000186a0 	.word	0x000186a0

08000b58 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b5c:	4b11      	ldr	r3, [pc, #68]	; (8000ba4 <MX_USART2_UART_Init+0x4c>)
 8000b5e:	4a12      	ldr	r2, [pc, #72]	; (8000ba8 <MX_USART2_UART_Init+0x50>)
 8000b60:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b62:	4b10      	ldr	r3, [pc, #64]	; (8000ba4 <MX_USART2_UART_Init+0x4c>)
 8000b64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b68:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ba4 <MX_USART2_UART_Init+0x4c>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b70:	4b0c      	ldr	r3, [pc, #48]	; (8000ba4 <MX_USART2_UART_Init+0x4c>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b76:	4b0b      	ldr	r3, [pc, #44]	; (8000ba4 <MX_USART2_UART_Init+0x4c>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b7c:	4b09      	ldr	r3, [pc, #36]	; (8000ba4 <MX_USART2_UART_Init+0x4c>)
 8000b7e:	220c      	movs	r2, #12
 8000b80:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b82:	4b08      	ldr	r3, [pc, #32]	; (8000ba4 <MX_USART2_UART_Init+0x4c>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b88:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <MX_USART2_UART_Init+0x4c>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b8e:	4805      	ldr	r0, [pc, #20]	; (8000ba4 <MX_USART2_UART_Init+0x4c>)
 8000b90:	f003 fa32 	bl	8003ff8 <HAL_UART_Init>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b9a:	f000 f933 	bl	8000e04 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	2000042c 	.word	0x2000042c
 8000ba8:	40004400 	.word	0x40004400

08000bac <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000bb0:	4b11      	ldr	r3, [pc, #68]	; (8000bf8 <MX_USART6_UART_Init+0x4c>)
 8000bb2:	4a12      	ldr	r2, [pc, #72]	; (8000bfc <MX_USART6_UART_Init+0x50>)
 8000bb4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000bb6:	4b10      	ldr	r3, [pc, #64]	; (8000bf8 <MX_USART6_UART_Init+0x4c>)
 8000bb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bbc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000bbe:	4b0e      	ldr	r3, [pc, #56]	; (8000bf8 <MX_USART6_UART_Init+0x4c>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000bc4:	4b0c      	ldr	r3, [pc, #48]	; (8000bf8 <MX_USART6_UART_Init+0x4c>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000bca:	4b0b      	ldr	r3, [pc, #44]	; (8000bf8 <MX_USART6_UART_Init+0x4c>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000bd0:	4b09      	ldr	r3, [pc, #36]	; (8000bf8 <MX_USART6_UART_Init+0x4c>)
 8000bd2:	220c      	movs	r2, #12
 8000bd4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bd6:	4b08      	ldr	r3, [pc, #32]	; (8000bf8 <MX_USART6_UART_Init+0x4c>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bdc:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <MX_USART6_UART_Init+0x4c>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000be2:	4805      	ldr	r0, [pc, #20]	; (8000bf8 <MX_USART6_UART_Init+0x4c>)
 8000be4:	f003 fa08 	bl	8003ff8 <HAL_UART_Init>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000bee:	f000 f909 	bl	8000e04 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	200002e4 	.word	0x200002e4
 8000bfc:	40011400 	.word	0x40011400

08000c00 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	607b      	str	r3, [r7, #4]
 8000c0a:	4b1b      	ldr	r3, [pc, #108]	; (8000c78 <MX_DMA_Init+0x78>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	4a1a      	ldr	r2, [pc, #104]	; (8000c78 <MX_DMA_Init+0x78>)
 8000c10:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c14:	6313      	str	r3, [r2, #48]	; 0x30
 8000c16:	4b18      	ldr	r3, [pc, #96]	; (8000c78 <MX_DMA_Init+0x78>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c1e:	607b      	str	r3, [r7, #4]
 8000c20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	603b      	str	r3, [r7, #0]
 8000c26:	4b14      	ldr	r3, [pc, #80]	; (8000c78 <MX_DMA_Init+0x78>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	4a13      	ldr	r2, [pc, #76]	; (8000c78 <MX_DMA_Init+0x78>)
 8000c2c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c30:	6313      	str	r3, [r2, #48]	; 0x30
 8000c32:	4b11      	ldr	r3, [pc, #68]	; (8000c78 <MX_DMA_Init+0x78>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c3a:	603b      	str	r3, [r7, #0]
 8000c3c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2100      	movs	r1, #0
 8000c42:	2010      	movs	r0, #16
 8000c44:	f001 fbf7 	bl	8002436 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000c48:	2010      	movs	r0, #16
 8000c4a:	f001 fc10 	bl	800246e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000c4e:	2200      	movs	r2, #0
 8000c50:	2100      	movs	r1, #0
 8000c52:	2011      	movs	r0, #17
 8000c54:	f001 fbef 	bl	8002436 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000c58:	2011      	movs	r0, #17
 8000c5a:	f001 fc08 	bl	800246e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2100      	movs	r1, #0
 8000c62:	203a      	movs	r0, #58	; 0x3a
 8000c64:	f001 fbe7 	bl	8002436 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000c68:	203a      	movs	r0, #58	; 0x3a
 8000c6a:	f001 fc00 	bl	800246e <HAL_NVIC_EnableIRQ>

}
 8000c6e:	bf00      	nop
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40023800 	.word	0x40023800

08000c7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b08c      	sub	sp, #48	; 0x30
 8000c80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c82:	f107 031c 	add.w	r3, r7, #28
 8000c86:	2200      	movs	r2, #0
 8000c88:	601a      	str	r2, [r3, #0]
 8000c8a:	605a      	str	r2, [r3, #4]
 8000c8c:	609a      	str	r2, [r3, #8]
 8000c8e:	60da      	str	r2, [r3, #12]
 8000c90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	61bb      	str	r3, [r7, #24]
 8000c96:	4b57      	ldr	r3, [pc, #348]	; (8000df4 <MX_GPIO_Init+0x178>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	4a56      	ldr	r2, [pc, #344]	; (8000df4 <MX_GPIO_Init+0x178>)
 8000c9c:	f043 0310 	orr.w	r3, r3, #16
 8000ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca2:	4b54      	ldr	r3, [pc, #336]	; (8000df4 <MX_GPIO_Init+0x178>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	f003 0310 	and.w	r3, r3, #16
 8000caa:	61bb      	str	r3, [r7, #24]
 8000cac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	617b      	str	r3, [r7, #20]
 8000cb2:	4b50      	ldr	r3, [pc, #320]	; (8000df4 <MX_GPIO_Init+0x178>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	4a4f      	ldr	r2, [pc, #316]	; (8000df4 <MX_GPIO_Init+0x178>)
 8000cb8:	f043 0302 	orr.w	r3, r3, #2
 8000cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cbe:	4b4d      	ldr	r3, [pc, #308]	; (8000df4 <MX_GPIO_Init+0x178>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	f003 0302 	and.w	r3, r3, #2
 8000cc6:	617b      	str	r3, [r7, #20]
 8000cc8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	613b      	str	r3, [r7, #16]
 8000cce:	4b49      	ldr	r3, [pc, #292]	; (8000df4 <MX_GPIO_Init+0x178>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	4a48      	ldr	r2, [pc, #288]	; (8000df4 <MX_GPIO_Init+0x178>)
 8000cd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cda:	4b46      	ldr	r3, [pc, #280]	; (8000df4 <MX_GPIO_Init+0x178>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ce2:	613b      	str	r3, [r7, #16]
 8000ce4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60fb      	str	r3, [r7, #12]
 8000cea:	4b42      	ldr	r3, [pc, #264]	; (8000df4 <MX_GPIO_Init+0x178>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	4a41      	ldr	r2, [pc, #260]	; (8000df4 <MX_GPIO_Init+0x178>)
 8000cf0:	f043 0301 	orr.w	r3, r3, #1
 8000cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf6:	4b3f      	ldr	r3, [pc, #252]	; (8000df4 <MX_GPIO_Init+0x178>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	60fb      	str	r3, [r7, #12]
 8000d00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	60bb      	str	r3, [r7, #8]
 8000d06:	4b3b      	ldr	r3, [pc, #236]	; (8000df4 <MX_GPIO_Init+0x178>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	4a3a      	ldr	r2, [pc, #232]	; (8000df4 <MX_GPIO_Init+0x178>)
 8000d0c:	f043 0308 	orr.w	r3, r3, #8
 8000d10:	6313      	str	r3, [r2, #48]	; 0x30
 8000d12:	4b38      	ldr	r3, [pc, #224]	; (8000df4 <MX_GPIO_Init+0x178>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	f003 0308 	and.w	r3, r3, #8
 8000d1a:	60bb      	str	r3, [r7, #8]
 8000d1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	607b      	str	r3, [r7, #4]
 8000d22:	4b34      	ldr	r3, [pc, #208]	; (8000df4 <MX_GPIO_Init+0x178>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	4a33      	ldr	r2, [pc, #204]	; (8000df4 <MX_GPIO_Init+0x178>)
 8000d28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2e:	4b31      	ldr	r3, [pc, #196]	; (8000df4 <MX_GPIO_Init+0x178>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d36:	607b      	str	r3, [r7, #4]
 8000d38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	603b      	str	r3, [r7, #0]
 8000d3e:	4b2d      	ldr	r3, [pc, #180]	; (8000df4 <MX_GPIO_Init+0x178>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	4a2c      	ldr	r2, [pc, #176]	; (8000df4 <MX_GPIO_Init+0x178>)
 8000d44:	f043 0320 	orr.w	r3, r3, #32
 8000d48:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4a:	4b2a      	ldr	r3, [pc, #168]	; (8000df4 <MX_GPIO_Init+0x178>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	f003 0320 	and.w	r3, r3, #32
 8000d52:	603b      	str	r3, [r7, #0]
 8000d54:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, IST_INT_Pin|IST_RST_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000d56:	2200      	movs	r2, #0
 8000d58:	f640 010c 	movw	r1, #2060	; 0x80c
 8000d5c:	4826      	ldr	r0, [pc, #152]	; (8000df8 <MX_GPIO_Init+0x17c>)
 8000d5e:	f002 f8cf 	bl	8002f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000d62:	2200      	movs	r2, #0
 8000d64:	213c      	movs	r1, #60	; 0x3c
 8000d66:	4825      	ldr	r0, [pc, #148]	; (8000dfc <MX_GPIO_Init+0x180>)
 8000d68:	f002 f8ca 	bl	8002f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6|LED_GREEN_Pin, GPIO_PIN_RESET);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	f244 0140 	movw	r1, #16448	; 0x4040
 8000d72:	4823      	ldr	r0, [pc, #140]	; (8000e00 <MX_GPIO_Init+0x184>)
 8000d74:	f002 f8c4 	bl	8002f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : IST_INT_Pin IST_RST_Pin */
  GPIO_InitStruct.Pin = IST_INT_Pin|IST_RST_Pin;
 8000d78:	230c      	movs	r3, #12
 8000d7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d84:	2303      	movs	r3, #3
 8000d86:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d88:	f107 031c 	add.w	r3, r7, #28
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	481a      	ldr	r0, [pc, #104]	; (8000df8 <MX_GPIO_Init+0x17c>)
 8000d90:	f001 ff0a 	bl	8002ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH2 PH3 PH4 PH5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000d94:	233c      	movs	r3, #60	; 0x3c
 8000d96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da0:	2300      	movs	r3, #0
 8000da2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000da4:	f107 031c 	add.w	r3, r7, #28
 8000da8:	4619      	mov	r1, r3
 8000daa:	4814      	ldr	r0, [pc, #80]	; (8000dfc <MX_GPIO_Init+0x180>)
 8000dac:	f001 fefc 	bl	8002ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 LED_GREEN_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_6|LED_GREEN_Pin;
 8000db0:	f244 0340 	movw	r3, #16448	; 0x4040
 8000db4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db6:	2301      	movs	r3, #1
 8000db8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000dc2:	f107 031c 	add.w	r3, r7, #28
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	480d      	ldr	r0, [pc, #52]	; (8000e00 <MX_GPIO_Init+0x184>)
 8000dca:	f001 feed 	bl	8002ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8000dce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000dd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000de0:	f107 031c 	add.w	r3, r7, #28
 8000de4:	4619      	mov	r1, r3
 8000de6:	4804      	ldr	r0, [pc, #16]	; (8000df8 <MX_GPIO_Init+0x17c>)
 8000de8:	f001 fede 	bl	8002ba8 <HAL_GPIO_Init>

}
 8000dec:	bf00      	nop
 8000dee:	3730      	adds	r7, #48	; 0x30
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	40023800 	.word	0x40023800
 8000df8:	40021000 	.word	0x40021000
 8000dfc:	40021c00 	.word	0x40021c00
 8000e00:	40021400 	.word	0x40021400

08000e04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000e08:	bf00      	nop
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
	...

08000e14 <HAL_CAN_RxFifo0MsgPendingCallback>:
    else
        while (HAL_CAN_IsTxMessagePending(hcan, pTxMailbox));
}


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b08c      	sub	sp, #48	; 0x30
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef rx_header;
    uint8_t rx_data[CAN_DATA_SIZE];

    HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, rx_data);
 8000e1c:	f107 0308 	add.w	r3, r7, #8
 8000e20:	f107 0210 	add.w	r2, r7, #16
 8000e24:	2100      	movs	r1, #0
 8000e26:	6878      	ldr	r0, [r7, #4]
 8000e28:	f000 fee8 	bl	8001bfc <HAL_CAN_GetRxMessage>
    uint8_t idx = rx_header.StdId - CAN_RX_ID_START;
 8000e2c:	693b      	ldr	r3, [r7, #16]
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	3b01      	subs	r3, #1
 8000e32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    get_motor_measure(&motors[idx], rx_data);
 8000e36:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000e3a:	4613      	mov	r3, r2
 8000e3c:	005b      	lsls	r3, r3, #1
 8000e3e:	4413      	add	r3, r2
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	4a06      	ldr	r2, [pc, #24]	; (8000e5c <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8000e44:	4413      	add	r3, r2
 8000e46:	f107 0208 	add.w	r2, r7, #8
 8000e4a:	4611      	mov	r1, r2
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f000 f807 	bl	8000e60 <get_motor_measure>

}
 8000e52:	bf00      	nop
 8000e54:	3730      	adds	r7, #48	; 0x30
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	200004d8 	.word	0x200004d8

08000e60 <get_motor_measure>:

void get_motor_measure(motor_measure_t* m, uint8_t data[CAN_DATA_SIZE]){
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	6039      	str	r1, [r7, #0]
    (m)->last_ecd = (m)->ecd;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	881b      	ldrh	r3, [r3, #0]
 8000e6e:	b21a      	sxth	r2, r3
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	811a      	strh	r2, [r3, #8]
    (m)->ecd = (uint16_t)((data)[0] << 8 | (data)[1]);
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	021b      	lsls	r3, r3, #8
 8000e7a:	b21a      	sxth	r2, r3
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	3301      	adds	r3, #1
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	b21b      	sxth	r3, r3
 8000e84:	4313      	orrs	r3, r2
 8000e86:	b21b      	sxth	r3, r3
 8000e88:	b29a      	uxth	r2, r3
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	801a      	strh	r2, [r3, #0]
    (m)->speed_rpm = (uint16_t)((data)[2] << 8 | (data)[3]);
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	3302      	adds	r3, #2
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	021b      	lsls	r3, r3, #8
 8000e96:	b21a      	sxth	r2, r3
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	3303      	adds	r3, #3
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	b21b      	sxth	r3, r3
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	b21a      	sxth	r2, r3
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	805a      	strh	r2, [r3, #2]
    (m)->given_current = (uint16_t)((data)[4] << 8 | (data)[5]);
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	3304      	adds	r3, #4
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	021b      	lsls	r3, r3, #8
 8000eb0:	b21a      	sxth	r2, r3
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	3305      	adds	r3, #5
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	b21b      	sxth	r3, r3
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	b21a      	sxth	r2, r3
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	809a      	strh	r2, [r3, #4]
    (m)->temperature = (data)[6];
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	799a      	ldrb	r2, [r3, #6]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	719a      	strb	r2, [r3, #6]
}
 8000eca:	bf00      	nop
 8000ecc:	370c      	adds	r7, #12
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
	...

08000ed8 <led_off>:
 */


#include "rm_gpio.h"

void led_off(void){
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8000edc:	2201      	movs	r2, #1
 8000ede:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ee2:	4805      	ldr	r0, [pc, #20]	; (8000ef8 <led_off+0x20>)
 8000ee4:	f002 f80c 	bl	8002f00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8000ee8:	2201      	movs	r2, #1
 8000eea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000eee:	4803      	ldr	r0, [pc, #12]	; (8000efc <led_off+0x24>)
 8000ef0:	f002 f806 	bl	8002f00 <HAL_GPIO_WritePin>
}
 8000ef4:	bf00      	nop
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	40021400 	.word	0x40021400
 8000efc:	40021000 	.word	0x40021000

08000f00 <power_on>:

void power_on(void){
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOH, GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5, GPIO_PIN_SET);
 8000f04:	2201      	movs	r2, #1
 8000f06:	213c      	movs	r1, #60	; 0x3c
 8000f08:	4802      	ldr	r0, [pc, #8]	; (8000f14 <power_on+0x14>)
 8000f0a:	f001 fff9 	bl	8002f00 <HAL_GPIO_WritePin>
}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40021c00 	.word	0x40021c00

08000f18 <uart_receive_dma_no_it>:
  * @param[in]  pData: receive buff
  * @param[in]  Size:  buff size
  * @retval     set success or fail
  */
static int uart_receive_dma_no_it(UART_HandleTypeDef* huart, uint8_t* pData, uint32_t Size)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b086      	sub	sp, #24
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	60f8      	str	r0, [r7, #12]
 8000f20:	60b9      	str	r1, [r7, #8]
 8000f22:	607a      	str	r2, [r7, #4]
  uint32_t tmp1 = 0;
 8000f24:	2300      	movs	r3, #0
 8000f26:	617b      	str	r3, [r7, #20]

  tmp1 = huart->RxState;
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	617b      	str	r3, [r7, #20]

	if (tmp1 == HAL_UART_STATE_READY)
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	2b20      	cmp	r3, #32
 8000f36:	d125      	bne.n	8000f84 <uart_receive_dma_no_it+0x6c>
	{
		if ((pData == NULL) || (Size == 0))
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d002      	beq.n	8000f44 <uart_receive_dma_no_it+0x2c>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d101      	bne.n	8000f48 <uart_receive_dma_no_it+0x30>
		{
			return HAL_ERROR;
 8000f44:	2301      	movs	r3, #1
 8000f46:	e01e      	b.n	8000f86 <uart_receive_dma_no_it+0x6e>
		}

		huart->pRxBuffPtr = pData;
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	68ba      	ldr	r2, [r7, #8]
 8000f4c:	629a      	str	r2, [r3, #40]	; 0x28
		huart->RxXferSize = Size;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	b29a      	uxth	r2, r3
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	859a      	strh	r2, [r3, #44]	; 0x2c
		huart->ErrorCode  = HAL_UART_ERROR_NONE;
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	2200      	movs	r2, #0
 8000f5a:	63da      	str	r2, [r3, #60]	; 0x3c

		/* Enable the DMA Stream */
		HAL_DMA_Start(huart->hdmarx, (uint32_t)&huart->Instance->DR, (uint32_t)pData, Size);
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	3304      	adds	r3, #4
 8000f66:	4619      	mov	r1, r3
 8000f68:	68ba      	ldr	r2, [r7, #8]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	f001 fb54 	bl	8002618 <HAL_DMA_Start>

		/*
		 * Enable the DMA transfer for the receiver request by setting the DMAR bit
		 * in the UART CR3 register
		 */
		SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	695a      	ldr	r2, [r3, #20]
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000f7e:	615a      	str	r2, [r3, #20]

		return HAL_OK;
 8000f80:	2300      	movs	r3, #0
 8000f82:	e000      	b.n	8000f86 <uart_receive_dma_no_it+0x6e>
	}
	else
	{
		return HAL_BUSY;
 8000f84:	2302      	movs	r3, #2
	}
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3718      	adds	r7, #24
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}

08000f8e <dma_current_data_counter>:
  * @param[in]  dma_stream: where y can be 1 or 2 to select the DMA and x can be 0
  *             to 7 to select the DMA Stream.
  * @retval     The number of remaining data units in the current DMAy Streamx transfer.
  */
uint16_t dma_current_data_counter(DMA_Stream_TypeDef *dma_stream)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	b083      	sub	sp, #12
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	6078      	str	r0, [r7, #4]
  /* Return the number of remaining data units for DMAy Streamx */
  return ((uint16_t)(dma_stream->NDTR));
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	b29b      	uxth	r3, r3
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <rc_callback_handler>:
  * @param[out]  rc:   structure to save handled rc data
  * @param[in]   buff: the buff which saved raw rc data
  * @retval
  */
void rc_callback_handler(rc_info_t *rc, uint8_t *buff)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	6039      	str	r1, [r7, #0]
  rc->ch1 = (buff[0] | buff[1] << 8) & 0x07FF;
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	b21a      	sxth	r2, r3
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	3301      	adds	r3, #1
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	021b      	lsls	r3, r3, #8
 8000fc0:	b21b      	sxth	r3, r3
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	b21b      	sxth	r3, r3
 8000fc6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000fca:	b21a      	sxth	r2, r3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	801a      	strh	r2, [r3, #0]
  rc->ch1 -= 1024;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fd6:	b29b      	uxth	r3, r3
 8000fd8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8000fdc:	b29b      	uxth	r3, r3
 8000fde:	b21a      	sxth	r2, r3
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	801a      	strh	r2, [r3, #0]
  rc->ch2 = (buff[1] >> 3 | buff[2] << 5) & 0x07FF;
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	08db      	lsrs	r3, r3, #3
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	b21a      	sxth	r2, r3
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	3302      	adds	r3, #2
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	015b      	lsls	r3, r3, #5
 8000ff8:	b21b      	sxth	r3, r3
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	b21b      	sxth	r3, r3
 8000ffe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001002:	b21a      	sxth	r2, r3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	805a      	strh	r2, [r3, #2]
  rc->ch2 -= 1024;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800100e:	b29b      	uxth	r3, r3
 8001010:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001014:	b29b      	uxth	r3, r3
 8001016:	b21a      	sxth	r2, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	805a      	strh	r2, [r3, #2]
  rc->ch3 = (buff[2] >> 6 | buff[3] << 2 | buff[4] << 10) & 0x07FF;
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	3302      	adds	r3, #2
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	099b      	lsrs	r3, r3, #6
 8001024:	b2db      	uxtb	r3, r3
 8001026:	b21a      	sxth	r2, r3
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	3303      	adds	r3, #3
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	b21b      	sxth	r3, r3
 8001032:	4313      	orrs	r3, r2
 8001034:	b21a      	sxth	r2, r3
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	3304      	adds	r3, #4
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	029b      	lsls	r3, r3, #10
 800103e:	b21b      	sxth	r3, r3
 8001040:	4313      	orrs	r3, r2
 8001042:	b21b      	sxth	r3, r3
 8001044:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001048:	b21a      	sxth	r2, r3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	809a      	strh	r2, [r3, #4]
  rc->ch3 -= 1024;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001054:	b29b      	uxth	r3, r3
 8001056:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800105a:	b29b      	uxth	r3, r3
 800105c:	b21a      	sxth	r2, r3
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	809a      	strh	r2, [r3, #4]
  rc->ch4 = (buff[4] >> 1 | buff[5] << 7) & 0x07FF;
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	3304      	adds	r3, #4
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	085b      	lsrs	r3, r3, #1
 800106a:	b2db      	uxtb	r3, r3
 800106c:	b21a      	sxth	r2, r3
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	3305      	adds	r3, #5
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	01db      	lsls	r3, r3, #7
 8001076:	b21b      	sxth	r3, r3
 8001078:	4313      	orrs	r3, r2
 800107a:	b21b      	sxth	r3, r3
 800107c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001080:	b21a      	sxth	r2, r3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	80da      	strh	r2, [r3, #6]
  rc->ch4 -= 1024;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800108c:	b29b      	uxth	r3, r3
 800108e:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001092:	b29b      	uxth	r3, r3
 8001094:	b21a      	sxth	r2, r3
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	80da      	strh	r2, [r3, #6]

  rc->sw1 = ((buff[5] >> 4) & 0x000C) >> 2;
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	3305      	adds	r3, #5
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	091b      	lsrs	r3, r3, #4
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	109b      	asrs	r3, r3, #2
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	f003 0303 	and.w	r3, r3, #3
 80010ac:	b2da      	uxtb	r2, r3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	729a      	strb	r2, [r3, #10]
  rc->sw2 = (buff[5] >> 4) & 0x0003;
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	3305      	adds	r3, #5
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	091b      	lsrs	r3, r3, #4
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	f003 0303 	and.w	r3, r3, #3
 80010c0:	b2da      	uxtb	r2, r3
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	72da      	strb	r2, [r3, #11]

  if ((abs(rc->ch1) > 660) || \
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	bfb8      	it	lt
 80010d0:	425b      	neglt	r3, r3
 80010d2:	b29b      	uxth	r3, r3
 80010d4:	f5b3 7f25 	cmp.w	r3, #660	; 0x294
 80010d8:	d81d      	bhi.n	8001116 <rc_callback_handler+0x16e>
      (abs(rc->ch2) > 660) || \
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	bfb8      	it	lt
 80010e4:	425b      	neglt	r3, r3
 80010e6:	b29b      	uxth	r3, r3
  if ((abs(rc->ch1) > 660) || \
 80010e8:	f5b3 7f25 	cmp.w	r3, #660	; 0x294
 80010ec:	d813      	bhi.n	8001116 <rc_callback_handler+0x16e>
      (abs(rc->ch3) > 660) || \
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	bfb8      	it	lt
 80010f8:	425b      	neglt	r3, r3
 80010fa:	b29b      	uxth	r3, r3
      (abs(rc->ch2) > 660) || \
 80010fc:	f5b3 7f25 	cmp.w	r3, #660	; 0x294
 8001100:	d809      	bhi.n	8001116 <rc_callback_handler+0x16e>
      (abs(rc->ch4) > 660))
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001108:	2b00      	cmp	r3, #0
 800110a:	bfb8      	it	lt
 800110c:	425b      	neglt	r3, r3
 800110e:	b29b      	uxth	r3, r3
      (abs(rc->ch3) > 660) || \
 8001110:	f5b3 7f25 	cmp.w	r3, #660	; 0x294
 8001114:	d904      	bls.n	8001120 <rc_callback_handler+0x178>
  {
    memset(rc, 0, sizeof(rc_info_t));
 8001116:	2216      	movs	r2, #22
 8001118:	2100      	movs	r1, #0
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f003 fdba 	bl	8004c94 <memset>
  }

  rc->mouse.x = buff[6] | (buff[7] << 8);                    //!< Mouse X axis
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	3306      	adds	r3, #6
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	b21a      	sxth	r2, r3
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	3307      	adds	r3, #7
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	021b      	lsls	r3, r3, #8
 8001130:	b21b      	sxth	r3, r3
 8001132:	4313      	orrs	r3, r2
 8001134:	b21a      	sxth	r2, r3
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	819a      	strh	r2, [r3, #12]
  rc->mouse.y = buff[8] | (buff[9] << 8);                    //!< Mouse Y axis
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	3308      	adds	r3, #8
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	b21a      	sxth	r2, r3
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	3309      	adds	r3, #9
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	021b      	lsls	r3, r3, #8
 800114a:	b21b      	sxth	r3, r3
 800114c:	4313      	orrs	r3, r2
 800114e:	b21a      	sxth	r2, r3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	81da      	strh	r2, [r3, #14]
  rc->mouse.z = buff[10] | (buff[11] << 8);                  //!< Mouse Z axis
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	330a      	adds	r3, #10
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	b21a      	sxth	r2, r3
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	330b      	adds	r3, #11
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	021b      	lsls	r3, r3, #8
 8001164:	b21b      	sxth	r3, r3
 8001166:	4313      	orrs	r3, r2
 8001168:	b21a      	sxth	r2, r3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	821a      	strh	r2, [r3, #16]
  rc->mouse.l = buff[12];                                  //!< Mouse Left Is Press ?
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	7b1a      	ldrb	r2, [r3, #12]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	749a      	strb	r2, [r3, #18]
  rc->mouse.r = buff[13];                                  //!< Mouse Right Is Press ?
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	7b5a      	ldrb	r2, [r3, #13]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	74da      	strb	r2, [r3, #19]
  rc->kb.key_code = buff[14] | (buff[15] << 8);                    //!< KeyBoard value
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	330e      	adds	r3, #14
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	b21a      	sxth	r2, r3
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	330f      	adds	r3, #15
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	021b      	lsls	r3, r3, #8
 800118e:	b21b      	sxth	r3, r3
 8001190:	4313      	orrs	r3, r2
 8001192:	b21b      	sxth	r3, r3
 8001194:	b29a      	uxth	r2, r3
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	829a      	strh	r2, [r3, #20]
  rc->wheel = buff[16] | ( buff[17] << 8);
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	3310      	adds	r3, #16
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	b21a      	sxth	r2, r3
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	3311      	adds	r3, #17
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	021b      	lsls	r3, r3, #8
 80011aa:	b21b      	sxth	r3, r3
 80011ac:	4313      	orrs	r3, r2
 80011ae:	b21a      	sxth	r2, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	811a      	strh	r2, [r3, #8]
  rc->wheel -= 1024;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80011ba:	b29b      	uxth	r3, r3
 80011bc:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80011c0:	b29b      	uxth	r3, r3
 80011c2:	b21a      	sxth	r2, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	811a      	strh	r2, [r3, #8]
}
 80011c8:	bf00      	nop
 80011ca:	3708      	adds	r7, #8
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <uart_rx_idle_callback>:
  * @brief      clear idle it flag after uart receive a frame data
  * @param[in]  huart: uart IRQHandler id
  * @retval
  */
static void uart_rx_idle_callback(UART_HandleTypeDef* huart)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
	/* clear idle it flag avoid idle interrupt all the time */
	__HAL_UART_CLEAR_IDLEFLAG(huart);
 80011d8:	2300      	movs	r3, #0
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	68fb      	ldr	r3, [r7, #12]

	/* handle received data in idle interrupt */
	if (huart == &DBUS_HUART)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4a17      	ldr	r2, [pc, #92]	; (8001250 <uart_rx_idle_callback+0x80>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d127      	bne.n	8001246 <uart_rx_idle_callback+0x76>
	{
		/* clear DMA transfer complete flag */
		__HAL_DMA_DISABLE(huart->hdmarx);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f022 0201 	bic.w	r2, r2, #1
 8001208:	601a      	str	r2, [r3, #0]

		/* handle dbus data dbus_buf from DMA */
		if ((DBUS_MAX_LEN - dma_current_data_counter(huart->hdmarx->Instance)) == DBUS_BUFLEN)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff febc 	bl	8000f8e <dma_current_data_counter>
 8001216:	4603      	mov	r3, r0
 8001218:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
 800121c:	2b12      	cmp	r3, #18
 800121e:	d103      	bne.n	8001228 <uart_rx_idle_callback+0x58>
		{
			rc_callback_handler(&rc, dbus_buf);
 8001220:	490c      	ldr	r1, [pc, #48]	; (8001254 <uart_rx_idle_callback+0x84>)
 8001222:	480d      	ldr	r0, [pc, #52]	; (8001258 <uart_rx_idle_callback+0x88>)
 8001224:	f7ff fec0 	bl	8000fa8 <rc_callback_handler>
		}

		/* restart dma transmission */
		__HAL_DMA_SET_COUNTER(huart->hdmarx, DBUS_MAX_LEN);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	2224      	movs	r2, #36	; 0x24
 8001230:	605a      	str	r2, [r3, #4]
		__HAL_DMA_ENABLE(huart->hdmarx);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f042 0201 	orr.w	r2, r2, #1
 8001244:	601a      	str	r2, [r3, #0]
	}
}
 8001246:	bf00      	nop
 8001248:	3710      	adds	r7, #16
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	2000029c 	.word	0x2000029c
 8001254:	20000544 	.word	0x20000544
 8001258:	2000052c 	.word	0x2000052c

0800125c <uart_receive_handler>:
  * @brief      callback this function when uart interrupt
  * @param[in]  huart: uart IRQHandler id
  * @retval
  */
void uart_receive_handler(UART_HandleTypeDef *huart)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
	if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) &&
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 0310 	and.w	r3, r3, #16
 800126e:	2b10      	cmp	r3, #16
 8001270:	d109      	bne.n	8001286 <uart_receive_handler+0x2a>
			__HAL_UART_GET_IT_SOURCE(huart, UART_IT_IDLE))
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	f003 0310 	and.w	r3, r3, #16
	if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) &&
 800127c:	2b00      	cmp	r3, #0
 800127e:	d002      	beq.n	8001286 <uart_receive_handler+0x2a>
	{
		uart_rx_idle_callback(huart);
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	f7ff ffa5 	bl	80011d0 <uart_rx_idle_callback>
	}
}
 8001286:	bf00      	nop
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
	...

08001290 <dbus_uart_init>:
  * @brief   initialize dbus uart device
  * @param
  * @retval
  */
void dbus_uart_init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
	/* open uart idle it */
	__HAL_UART_CLEAR_IDLEFLAG(&DBUS_HUART);
 8001296:	2300      	movs	r3, #0
 8001298:	607b      	str	r3, [r7, #4]
 800129a:	4b0d      	ldr	r3, [pc, #52]	; (80012d0 <dbus_uart_init+0x40>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	607b      	str	r3, [r7, #4]
 80012a2:	4b0b      	ldr	r3, [pc, #44]	; (80012d0 <dbus_uart_init+0x40>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	607b      	str	r3, [r7, #4]
 80012aa:	687b      	ldr	r3, [r7, #4]
	__HAL_UART_ENABLE_IT(&DBUS_HUART, UART_IT_IDLE);
 80012ac:	4b08      	ldr	r3, [pc, #32]	; (80012d0 <dbus_uart_init+0x40>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	68da      	ldr	r2, [r3, #12]
 80012b2:	4b07      	ldr	r3, [pc, #28]	; (80012d0 <dbus_uart_init+0x40>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f042 0210 	orr.w	r2, r2, #16
 80012ba:	60da      	str	r2, [r3, #12]

	uart_receive_dma_no_it(&DBUS_HUART, dbus_buf, DBUS_MAX_LEN);
 80012bc:	2224      	movs	r2, #36	; 0x24
 80012be:	4905      	ldr	r1, [pc, #20]	; (80012d4 <dbus_uart_init+0x44>)
 80012c0:	4803      	ldr	r0, [pc, #12]	; (80012d0 <dbus_uart_init+0x40>)
 80012c2:	f7ff fe29 	bl	8000f18 <uart_receive_dma_no_it>
}
 80012c6:	bf00      	nop
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	2000029c 	.word	0x2000029c
 80012d4:	20000544 	.word	0x20000544

080012d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	607b      	str	r3, [r7, #4]
 80012e2:	4b10      	ldr	r3, [pc, #64]	; (8001324 <HAL_MspInit+0x4c>)
 80012e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e6:	4a0f      	ldr	r2, [pc, #60]	; (8001324 <HAL_MspInit+0x4c>)
 80012e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012ec:	6453      	str	r3, [r2, #68]	; 0x44
 80012ee:	4b0d      	ldr	r3, [pc, #52]	; (8001324 <HAL_MspInit+0x4c>)
 80012f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012f6:	607b      	str	r3, [r7, #4]
 80012f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	603b      	str	r3, [r7, #0]
 80012fe:	4b09      	ldr	r3, [pc, #36]	; (8001324 <HAL_MspInit+0x4c>)
 8001300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001302:	4a08      	ldr	r2, [pc, #32]	; (8001324 <HAL_MspInit+0x4c>)
 8001304:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001308:	6413      	str	r3, [r2, #64]	; 0x40
 800130a:	4b06      	ldr	r3, [pc, #24]	; (8001324 <HAL_MspInit+0x4c>)
 800130c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001312:	603b      	str	r3, [r7, #0]
 8001314:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001316:	bf00      	nop
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	40023800 	.word	0x40023800

08001328 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b08a      	sub	sp, #40	; 0x28
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001330:	f107 0314 	add.w	r3, r7, #20
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
 800133c:	60da      	str	r2, [r3, #12]
 800133e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a19      	ldr	r2, [pc, #100]	; (80013ac <HAL_SPI_MspInit+0x84>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d12c      	bne.n	80013a4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	613b      	str	r3, [r7, #16]
 800134e:	4b18      	ldr	r3, [pc, #96]	; (80013b0 <HAL_SPI_MspInit+0x88>)
 8001350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001352:	4a17      	ldr	r2, [pc, #92]	; (80013b0 <HAL_SPI_MspInit+0x88>)
 8001354:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001358:	6453      	str	r3, [r2, #68]	; 0x44
 800135a:	4b15      	ldr	r3, [pc, #84]	; (80013b0 <HAL_SPI_MspInit+0x88>)
 800135c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001362:	613b      	str	r3, [r7, #16]
 8001364:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	60fb      	str	r3, [r7, #12]
 800136a:	4b11      	ldr	r3, [pc, #68]	; (80013b0 <HAL_SPI_MspInit+0x88>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	4a10      	ldr	r2, [pc, #64]	; (80013b0 <HAL_SPI_MspInit+0x88>)
 8001370:	f043 0320 	orr.w	r3, r3, #32
 8001374:	6313      	str	r3, [r2, #48]	; 0x30
 8001376:	4b0e      	ldr	r3, [pc, #56]	; (80013b0 <HAL_SPI_MspInit+0x88>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	f003 0320 	and.w	r3, r3, #32
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF9     ------> SPI5_MOSI
    PF8     ------> SPI5_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_8;
 8001382:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001386:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001388:	2302      	movs	r3, #2
 800138a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138c:	2300      	movs	r3, #0
 800138e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001390:	2303      	movs	r3, #3
 8001392:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001394:	2305      	movs	r3, #5
 8001396:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001398:	f107 0314 	add.w	r3, r7, #20
 800139c:	4619      	mov	r1, r3
 800139e:	4805      	ldr	r0, [pc, #20]	; (80013b4 <HAL_SPI_MspInit+0x8c>)
 80013a0:	f001 fc02 	bl	8002ba8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 80013a4:	bf00      	nop
 80013a6:	3728      	adds	r7, #40	; 0x28
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	40015000 	.word	0x40015000
 80013b0:	40023800 	.word	0x40023800
 80013b4:	40021400 	.word	0x40021400

080013b8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b089      	sub	sp, #36	; 0x24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013c8:	d10e      	bne.n	80013e8 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	61fb      	str	r3, [r7, #28]
 80013ce:	4b31      	ldr	r3, [pc, #196]	; (8001494 <HAL_TIM_PWM_MspInit+0xdc>)
 80013d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d2:	4a30      	ldr	r2, [pc, #192]	; (8001494 <HAL_TIM_PWM_MspInit+0xdc>)
 80013d4:	f043 0301 	orr.w	r3, r3, #1
 80013d8:	6413      	str	r3, [r2, #64]	; 0x40
 80013da:	4b2e      	ldr	r3, [pc, #184]	; (8001494 <HAL_TIM_PWM_MspInit+0xdc>)
 80013dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	61fb      	str	r3, [r7, #28]
 80013e4:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 80013e6:	e04e      	b.n	8001486 <HAL_TIM_PWM_MspInit+0xce>
  else if(htim_pwm->Instance==TIM3)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a2a      	ldr	r2, [pc, #168]	; (8001498 <HAL_TIM_PWM_MspInit+0xe0>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d10e      	bne.n	8001410 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	61bb      	str	r3, [r7, #24]
 80013f6:	4b27      	ldr	r3, [pc, #156]	; (8001494 <HAL_TIM_PWM_MspInit+0xdc>)
 80013f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fa:	4a26      	ldr	r2, [pc, #152]	; (8001494 <HAL_TIM_PWM_MspInit+0xdc>)
 80013fc:	f043 0302 	orr.w	r3, r3, #2
 8001400:	6413      	str	r3, [r2, #64]	; 0x40
 8001402:	4b24      	ldr	r3, [pc, #144]	; (8001494 <HAL_TIM_PWM_MspInit+0xdc>)
 8001404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001406:	f003 0302 	and.w	r3, r3, #2
 800140a:	61bb      	str	r3, [r7, #24]
 800140c:	69bb      	ldr	r3, [r7, #24]
}
 800140e:	e03a      	b.n	8001486 <HAL_TIM_PWM_MspInit+0xce>
  else if(htim_pwm->Instance==TIM4)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a21      	ldr	r2, [pc, #132]	; (800149c <HAL_TIM_PWM_MspInit+0xe4>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d10e      	bne.n	8001438 <HAL_TIM_PWM_MspInit+0x80>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	617b      	str	r3, [r7, #20]
 800141e:	4b1d      	ldr	r3, [pc, #116]	; (8001494 <HAL_TIM_PWM_MspInit+0xdc>)
 8001420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001422:	4a1c      	ldr	r2, [pc, #112]	; (8001494 <HAL_TIM_PWM_MspInit+0xdc>)
 8001424:	f043 0304 	orr.w	r3, r3, #4
 8001428:	6413      	str	r3, [r2, #64]	; 0x40
 800142a:	4b1a      	ldr	r3, [pc, #104]	; (8001494 <HAL_TIM_PWM_MspInit+0xdc>)
 800142c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142e:	f003 0304 	and.w	r3, r3, #4
 8001432:	617b      	str	r3, [r7, #20]
 8001434:	697b      	ldr	r3, [r7, #20]
}
 8001436:	e026      	b.n	8001486 <HAL_TIM_PWM_MspInit+0xce>
  else if(htim_pwm->Instance==TIM5)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a18      	ldr	r2, [pc, #96]	; (80014a0 <HAL_TIM_PWM_MspInit+0xe8>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d10e      	bne.n	8001460 <HAL_TIM_PWM_MspInit+0xa8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	613b      	str	r3, [r7, #16]
 8001446:	4b13      	ldr	r3, [pc, #76]	; (8001494 <HAL_TIM_PWM_MspInit+0xdc>)
 8001448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144a:	4a12      	ldr	r2, [pc, #72]	; (8001494 <HAL_TIM_PWM_MspInit+0xdc>)
 800144c:	f043 0308 	orr.w	r3, r3, #8
 8001450:	6413      	str	r3, [r2, #64]	; 0x40
 8001452:	4b10      	ldr	r3, [pc, #64]	; (8001494 <HAL_TIM_PWM_MspInit+0xdc>)
 8001454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001456:	f003 0308 	and.w	r3, r3, #8
 800145a:	613b      	str	r3, [r7, #16]
 800145c:	693b      	ldr	r3, [r7, #16]
}
 800145e:	e012      	b.n	8001486 <HAL_TIM_PWM_MspInit+0xce>
  else if(htim_pwm->Instance==TIM12)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a0f      	ldr	r2, [pc, #60]	; (80014a4 <HAL_TIM_PWM_MspInit+0xec>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d10d      	bne.n	8001486 <HAL_TIM_PWM_MspInit+0xce>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	60fb      	str	r3, [r7, #12]
 800146e:	4b09      	ldr	r3, [pc, #36]	; (8001494 <HAL_TIM_PWM_MspInit+0xdc>)
 8001470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001472:	4a08      	ldr	r2, [pc, #32]	; (8001494 <HAL_TIM_PWM_MspInit+0xdc>)
 8001474:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001478:	6413      	str	r3, [r2, #64]	; 0x40
 800147a:	4b06      	ldr	r3, [pc, #24]	; (8001494 <HAL_TIM_PWM_MspInit+0xdc>)
 800147c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	68fb      	ldr	r3, [r7, #12]
}
 8001486:	bf00      	nop
 8001488:	3724      	adds	r7, #36	; 0x24
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	40023800 	.word	0x40023800
 8001498:	40000400 	.word	0x40000400
 800149c:	40000800 	.word	0x40000800
 80014a0:	40000c00 	.word	0x40000c00
 80014a4:	40001800 	.word	0x40001800

080014a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b08c      	sub	sp, #48	; 0x30
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b0:	f107 031c 	add.w	r3, r7, #28
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	605a      	str	r2, [r3, #4]
 80014ba:	609a      	str	r2, [r3, #8]
 80014bc:	60da      	str	r2, [r3, #12]
 80014be:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014c8:	d11e      	bne.n	8001508 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	61bb      	str	r3, [r7, #24]
 80014ce:	4b59      	ldr	r3, [pc, #356]	; (8001634 <HAL_TIM_MspPostInit+0x18c>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	4a58      	ldr	r2, [pc, #352]	; (8001634 <HAL_TIM_MspPostInit+0x18c>)
 80014d4:	f043 0301 	orr.w	r3, r3, #1
 80014d8:	6313      	str	r3, [r2, #48]	; 0x30
 80014da:	4b56      	ldr	r3, [pc, #344]	; (8001634 <HAL_TIM_MspPostInit+0x18c>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	61bb      	str	r3, [r7, #24]
 80014e4:	69bb      	ldr	r3, [r7, #24]
    PA1     ------> TIM2_CH2
    PA0/WKUP     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 80014e6:	230f      	movs	r3, #15
 80014e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ea:	2302      	movs	r3, #2
 80014ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ee:	2300      	movs	r3, #0
 80014f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f2:	2300      	movs	r3, #0
 80014f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80014f6:	2301      	movs	r3, #1
 80014f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014fa:	f107 031c 	add.w	r3, r7, #28
 80014fe:	4619      	mov	r1, r3
 8001500:	484d      	ldr	r0, [pc, #308]	; (8001638 <HAL_TIM_MspPostInit+0x190>)
 8001502:	f001 fb51 	bl	8002ba8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8001506:	e090      	b.n	800162a <HAL_TIM_MspPostInit+0x182>
  else if(htim->Instance==TIM3)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a4b      	ldr	r2, [pc, #300]	; (800163c <HAL_TIM_MspPostInit+0x194>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d11e      	bne.n	8001550 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	617b      	str	r3, [r7, #20]
 8001516:	4b47      	ldr	r3, [pc, #284]	; (8001634 <HAL_TIM_MspPostInit+0x18c>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	4a46      	ldr	r2, [pc, #280]	; (8001634 <HAL_TIM_MspPostInit+0x18c>)
 800151c:	f043 0302 	orr.w	r3, r3, #2
 8001520:	6313      	str	r3, [r2, #48]	; 0x30
 8001522:	4b44      	ldr	r3, [pc, #272]	; (8001634 <HAL_TIM_MspPostInit+0x18c>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	617b      	str	r3, [r7, #20]
 800152c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800152e:	2320      	movs	r3, #32
 8001530:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001532:	2302      	movs	r3, #2
 8001534:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001536:	2300      	movs	r3, #0
 8001538:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153a:	2300      	movs	r3, #0
 800153c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800153e:	2302      	movs	r3, #2
 8001540:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001542:	f107 031c 	add.w	r3, r7, #28
 8001546:	4619      	mov	r1, r3
 8001548:	483d      	ldr	r0, [pc, #244]	; (8001640 <HAL_TIM_MspPostInit+0x198>)
 800154a:	f001 fb2d 	bl	8002ba8 <HAL_GPIO_Init>
}
 800154e:	e06c      	b.n	800162a <HAL_TIM_MspPostInit+0x182>
  else if(htim->Instance==TIM4)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a3b      	ldr	r2, [pc, #236]	; (8001644 <HAL_TIM_MspPostInit+0x19c>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d11f      	bne.n	800159a <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	613b      	str	r3, [r7, #16]
 800155e:	4b35      	ldr	r3, [pc, #212]	; (8001634 <HAL_TIM_MspPostInit+0x18c>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	4a34      	ldr	r2, [pc, #208]	; (8001634 <HAL_TIM_MspPostInit+0x18c>)
 8001564:	f043 0308 	orr.w	r3, r3, #8
 8001568:	6313      	str	r3, [r2, #48]	; 0x30
 800156a:	4b32      	ldr	r3, [pc, #200]	; (8001634 <HAL_TIM_MspPostInit+0x18c>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	f003 0308 	and.w	r3, r3, #8
 8001572:	613b      	str	r3, [r7, #16]
 8001574:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12;
 8001576:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800157a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157c:	2302      	movs	r3, #2
 800157e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001584:	2300      	movs	r3, #0
 8001586:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001588:	2302      	movs	r3, #2
 800158a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800158c:	f107 031c 	add.w	r3, r7, #28
 8001590:	4619      	mov	r1, r3
 8001592:	482d      	ldr	r0, [pc, #180]	; (8001648 <HAL_TIM_MspPostInit+0x1a0>)
 8001594:	f001 fb08 	bl	8002ba8 <HAL_GPIO_Init>
}
 8001598:	e047      	b.n	800162a <HAL_TIM_MspPostInit+0x182>
  else if(htim->Instance==TIM5)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a2b      	ldr	r2, [pc, #172]	; (800164c <HAL_TIM_MspPostInit+0x1a4>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d11f      	bne.n	80015e4 <HAL_TIM_MspPostInit+0x13c>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80015a4:	2300      	movs	r3, #0
 80015a6:	60fb      	str	r3, [r7, #12]
 80015a8:	4b22      	ldr	r3, [pc, #136]	; (8001634 <HAL_TIM_MspPostInit+0x18c>)
 80015aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ac:	4a21      	ldr	r2, [pc, #132]	; (8001634 <HAL_TIM_MspPostInit+0x18c>)
 80015ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015b2:	6313      	str	r3, [r2, #48]	; 0x30
 80015b4:	4b1f      	ldr	r3, [pc, #124]	; (8001634 <HAL_TIM_MspPostInit+0x18c>)
 80015b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015bc:	60fb      	str	r3, [r7, #12]
 80015be:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10;
 80015c0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80015c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c6:	2302      	movs	r3, #2
 80015c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ca:	2300      	movs	r3, #0
 80015cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ce:	2300      	movs	r3, #0
 80015d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80015d2:	2302      	movs	r3, #2
 80015d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80015d6:	f107 031c 	add.w	r3, r7, #28
 80015da:	4619      	mov	r1, r3
 80015dc:	481c      	ldr	r0, [pc, #112]	; (8001650 <HAL_TIM_MspPostInit+0x1a8>)
 80015de:	f001 fae3 	bl	8002ba8 <HAL_GPIO_Init>
}
 80015e2:	e022      	b.n	800162a <HAL_TIM_MspPostInit+0x182>
  else if(htim->Instance==TIM12)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a1a      	ldr	r2, [pc, #104]	; (8001654 <HAL_TIM_MspPostInit+0x1ac>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d11d      	bne.n	800162a <HAL_TIM_MspPostInit+0x182>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	60bb      	str	r3, [r7, #8]
 80015f2:	4b10      	ldr	r3, [pc, #64]	; (8001634 <HAL_TIM_MspPostInit+0x18c>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	4a0f      	ldr	r2, [pc, #60]	; (8001634 <HAL_TIM_MspPostInit+0x18c>)
 80015f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015fc:	6313      	str	r3, [r2, #48]	; 0x30
 80015fe:	4b0d      	ldr	r3, [pc, #52]	; (8001634 <HAL_TIM_MspPostInit+0x18c>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001606:	60bb      	str	r3, [r7, #8]
 8001608:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800160a:	2340      	movs	r3, #64	; 0x40
 800160c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160e:	2302      	movs	r3, #2
 8001610:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001612:	2300      	movs	r3, #0
 8001614:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001616:	2300      	movs	r3, #0
 8001618:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800161a:	2309      	movs	r3, #9
 800161c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800161e:	f107 031c 	add.w	r3, r7, #28
 8001622:	4619      	mov	r1, r3
 8001624:	480a      	ldr	r0, [pc, #40]	; (8001650 <HAL_TIM_MspPostInit+0x1a8>)
 8001626:	f001 fabf 	bl	8002ba8 <HAL_GPIO_Init>
}
 800162a:	bf00      	nop
 800162c:	3730      	adds	r7, #48	; 0x30
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	40023800 	.word	0x40023800
 8001638:	40020000 	.word	0x40020000
 800163c:	40000400 	.word	0x40000400
 8001640:	40020400 	.word	0x40020400
 8001644:	40000800 	.word	0x40000800
 8001648:	40020c00 	.word	0x40020c00
 800164c:	40000c00 	.word	0x40000c00
 8001650:	40021c00 	.word	0x40021c00
 8001654:	40001800 	.word	0x40001800

08001658 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b08e      	sub	sp, #56	; 0x38
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001660:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	605a      	str	r2, [r3, #4]
 800166a:	609a      	str	r2, [r3, #8]
 800166c:	60da      	str	r2, [r3, #12]
 800166e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a9e      	ldr	r2, [pc, #632]	; (80018f0 <HAL_UART_MspInit+0x298>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d164      	bne.n	8001744 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800167a:	2300      	movs	r3, #0
 800167c:	623b      	str	r3, [r7, #32]
 800167e:	4b9d      	ldr	r3, [pc, #628]	; (80018f4 <HAL_UART_MspInit+0x29c>)
 8001680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001682:	4a9c      	ldr	r2, [pc, #624]	; (80018f4 <HAL_UART_MspInit+0x29c>)
 8001684:	f043 0310 	orr.w	r3, r3, #16
 8001688:	6453      	str	r3, [r2, #68]	; 0x44
 800168a:	4b9a      	ldr	r3, [pc, #616]	; (80018f4 <HAL_UART_MspInit+0x29c>)
 800168c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168e:	f003 0310 	and.w	r3, r3, #16
 8001692:	623b      	str	r3, [r7, #32]
 8001694:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001696:	2300      	movs	r3, #0
 8001698:	61fb      	str	r3, [r7, #28]
 800169a:	4b96      	ldr	r3, [pc, #600]	; (80018f4 <HAL_UART_MspInit+0x29c>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	4a95      	ldr	r2, [pc, #596]	; (80018f4 <HAL_UART_MspInit+0x29c>)
 80016a0:	f043 0302 	orr.w	r3, r3, #2
 80016a4:	6313      	str	r3, [r2, #48]	; 0x30
 80016a6:	4b93      	ldr	r3, [pc, #588]	; (80018f4 <HAL_UART_MspInit+0x29c>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	f003 0302 	and.w	r3, r3, #2
 80016ae:	61fb      	str	r3, [r7, #28]
 80016b0:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 80016b2:	23c0      	movs	r3, #192	; 0xc0
 80016b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b6:	2302      	movs	r3, #2
 80016b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ba:	2300      	movs	r3, #0
 80016bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016be:	2303      	movs	r3, #3
 80016c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016c2:	2307      	movs	r3, #7
 80016c4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ca:	4619      	mov	r1, r3
 80016cc:	488a      	ldr	r0, [pc, #552]	; (80018f8 <HAL_UART_MspInit+0x2a0>)
 80016ce:	f001 fa6b 	bl	8002ba8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80016d2:	4b8a      	ldr	r3, [pc, #552]	; (80018fc <HAL_UART_MspInit+0x2a4>)
 80016d4:	4a8a      	ldr	r2, [pc, #552]	; (8001900 <HAL_UART_MspInit+0x2a8>)
 80016d6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80016d8:	4b88      	ldr	r3, [pc, #544]	; (80018fc <HAL_UART_MspInit+0x2a4>)
 80016da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016de:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016e0:	4b86      	ldr	r3, [pc, #536]	; (80018fc <HAL_UART_MspInit+0x2a4>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016e6:	4b85      	ldr	r3, [pc, #532]	; (80018fc <HAL_UART_MspInit+0x2a4>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80016ec:	4b83      	ldr	r3, [pc, #524]	; (80018fc <HAL_UART_MspInit+0x2a4>)
 80016ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016f2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016f4:	4b81      	ldr	r3, [pc, #516]	; (80018fc <HAL_UART_MspInit+0x2a4>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016fa:	4b80      	ldr	r3, [pc, #512]	; (80018fc <HAL_UART_MspInit+0x2a4>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001700:	4b7e      	ldr	r3, [pc, #504]	; (80018fc <HAL_UART_MspInit+0x2a4>)
 8001702:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001706:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001708:	4b7c      	ldr	r3, [pc, #496]	; (80018fc <HAL_UART_MspInit+0x2a4>)
 800170a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800170e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001710:	4b7a      	ldr	r3, [pc, #488]	; (80018fc <HAL_UART_MspInit+0x2a4>)
 8001712:	2200      	movs	r2, #0
 8001714:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001716:	4879      	ldr	r0, [pc, #484]	; (80018fc <HAL_UART_MspInit+0x2a4>)
 8001718:	f000 fed0 	bl	80024bc <HAL_DMA_Init>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001722:	f7ff fb6f 	bl	8000e04 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4a74      	ldr	r2, [pc, #464]	; (80018fc <HAL_UART_MspInit+0x2a4>)
 800172a:	635a      	str	r2, [r3, #52]	; 0x34
 800172c:	4a73      	ldr	r2, [pc, #460]	; (80018fc <HAL_UART_MspInit+0x2a4>)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001732:	2200      	movs	r2, #0
 8001734:	2100      	movs	r1, #0
 8001736:	2025      	movs	r0, #37	; 0x25
 8001738:	f000 fe7d 	bl	8002436 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800173c:	2025      	movs	r0, #37	; 0x25
 800173e:	f000 fe96 	bl	800246e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001742:	e0d0      	b.n	80018e6 <HAL_UART_MspInit+0x28e>
  else if(huart->Instance==USART2)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a6e      	ldr	r2, [pc, #440]	; (8001904 <HAL_UART_MspInit+0x2ac>)
 800174a:	4293      	cmp	r3, r2
 800174c:	f040 8091 	bne.w	8001872 <HAL_UART_MspInit+0x21a>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001750:	2300      	movs	r3, #0
 8001752:	61bb      	str	r3, [r7, #24]
 8001754:	4b67      	ldr	r3, [pc, #412]	; (80018f4 <HAL_UART_MspInit+0x29c>)
 8001756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001758:	4a66      	ldr	r2, [pc, #408]	; (80018f4 <HAL_UART_MspInit+0x29c>)
 800175a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800175e:	6413      	str	r3, [r2, #64]	; 0x40
 8001760:	4b64      	ldr	r3, [pc, #400]	; (80018f4 <HAL_UART_MspInit+0x29c>)
 8001762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001764:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001768:	61bb      	str	r3, [r7, #24]
 800176a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800176c:	2300      	movs	r3, #0
 800176e:	617b      	str	r3, [r7, #20]
 8001770:	4b60      	ldr	r3, [pc, #384]	; (80018f4 <HAL_UART_MspInit+0x29c>)
 8001772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001774:	4a5f      	ldr	r2, [pc, #380]	; (80018f4 <HAL_UART_MspInit+0x29c>)
 8001776:	f043 0308 	orr.w	r3, r3, #8
 800177a:	6313      	str	r3, [r2, #48]	; 0x30
 800177c:	4b5d      	ldr	r3, [pc, #372]	; (80018f4 <HAL_UART_MspInit+0x29c>)
 800177e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001780:	f003 0308 	and.w	r3, r3, #8
 8001784:	617b      	str	r3, [r7, #20]
 8001786:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5;
 8001788:	2360      	movs	r3, #96	; 0x60
 800178a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178c:	2302      	movs	r3, #2
 800178e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001790:	2300      	movs	r3, #0
 8001792:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001794:	2303      	movs	r3, #3
 8001796:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001798:	2307      	movs	r3, #7
 800179a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800179c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017a0:	4619      	mov	r1, r3
 80017a2:	4859      	ldr	r0, [pc, #356]	; (8001908 <HAL_UART_MspInit+0x2b0>)
 80017a4:	f001 fa00 	bl	8002ba8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80017a8:	4b58      	ldr	r3, [pc, #352]	; (800190c <HAL_UART_MspInit+0x2b4>)
 80017aa:	4a59      	ldr	r2, [pc, #356]	; (8001910 <HAL_UART_MspInit+0x2b8>)
 80017ac:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80017ae:	4b57      	ldr	r3, [pc, #348]	; (800190c <HAL_UART_MspInit+0x2b4>)
 80017b0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017b4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017b6:	4b55      	ldr	r3, [pc, #340]	; (800190c <HAL_UART_MspInit+0x2b4>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017bc:	4b53      	ldr	r3, [pc, #332]	; (800190c <HAL_UART_MspInit+0x2b4>)
 80017be:	2200      	movs	r2, #0
 80017c0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80017c2:	4b52      	ldr	r3, [pc, #328]	; (800190c <HAL_UART_MspInit+0x2b4>)
 80017c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017c8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017ca:	4b50      	ldr	r3, [pc, #320]	; (800190c <HAL_UART_MspInit+0x2b4>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017d0:	4b4e      	ldr	r3, [pc, #312]	; (800190c <HAL_UART_MspInit+0x2b4>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80017d6:	4b4d      	ldr	r3, [pc, #308]	; (800190c <HAL_UART_MspInit+0x2b4>)
 80017d8:	2200      	movs	r2, #0
 80017da:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80017dc:	4b4b      	ldr	r3, [pc, #300]	; (800190c <HAL_UART_MspInit+0x2b4>)
 80017de:	2200      	movs	r2, #0
 80017e0:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017e2:	4b4a      	ldr	r3, [pc, #296]	; (800190c <HAL_UART_MspInit+0x2b4>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80017e8:	4848      	ldr	r0, [pc, #288]	; (800190c <HAL_UART_MspInit+0x2b4>)
 80017ea:	f000 fe67 	bl	80024bc <HAL_DMA_Init>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <HAL_UART_MspInit+0x1a0>
      Error_Handler();
 80017f4:	f7ff fb06 	bl	8000e04 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	4a44      	ldr	r2, [pc, #272]	; (800190c <HAL_UART_MspInit+0x2b4>)
 80017fc:	635a      	str	r2, [r3, #52]	; 0x34
 80017fe:	4a43      	ldr	r2, [pc, #268]	; (800190c <HAL_UART_MspInit+0x2b4>)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001804:	4b43      	ldr	r3, [pc, #268]	; (8001914 <HAL_UART_MspInit+0x2bc>)
 8001806:	4a44      	ldr	r2, [pc, #272]	; (8001918 <HAL_UART_MspInit+0x2c0>)
 8001808:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800180a:	4b42      	ldr	r3, [pc, #264]	; (8001914 <HAL_UART_MspInit+0x2bc>)
 800180c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001810:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001812:	4b40      	ldr	r3, [pc, #256]	; (8001914 <HAL_UART_MspInit+0x2bc>)
 8001814:	2240      	movs	r2, #64	; 0x40
 8001816:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001818:	4b3e      	ldr	r3, [pc, #248]	; (8001914 <HAL_UART_MspInit+0x2bc>)
 800181a:	2200      	movs	r2, #0
 800181c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800181e:	4b3d      	ldr	r3, [pc, #244]	; (8001914 <HAL_UART_MspInit+0x2bc>)
 8001820:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001824:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001826:	4b3b      	ldr	r3, [pc, #236]	; (8001914 <HAL_UART_MspInit+0x2bc>)
 8001828:	2200      	movs	r2, #0
 800182a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800182c:	4b39      	ldr	r3, [pc, #228]	; (8001914 <HAL_UART_MspInit+0x2bc>)
 800182e:	2200      	movs	r2, #0
 8001830:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001832:	4b38      	ldr	r3, [pc, #224]	; (8001914 <HAL_UART_MspInit+0x2bc>)
 8001834:	2200      	movs	r2, #0
 8001836:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001838:	4b36      	ldr	r3, [pc, #216]	; (8001914 <HAL_UART_MspInit+0x2bc>)
 800183a:	2200      	movs	r2, #0
 800183c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800183e:	4b35      	ldr	r3, [pc, #212]	; (8001914 <HAL_UART_MspInit+0x2bc>)
 8001840:	2200      	movs	r2, #0
 8001842:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001844:	4833      	ldr	r0, [pc, #204]	; (8001914 <HAL_UART_MspInit+0x2bc>)
 8001846:	f000 fe39 	bl	80024bc <HAL_DMA_Init>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <HAL_UART_MspInit+0x1fc>
      Error_Handler();
 8001850:	f7ff fad8 	bl	8000e04 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	4a2f      	ldr	r2, [pc, #188]	; (8001914 <HAL_UART_MspInit+0x2bc>)
 8001858:	631a      	str	r2, [r3, #48]	; 0x30
 800185a:	4a2e      	ldr	r2, [pc, #184]	; (8001914 <HAL_UART_MspInit+0x2bc>)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001860:	2200      	movs	r2, #0
 8001862:	2100      	movs	r1, #0
 8001864:	2026      	movs	r0, #38	; 0x26
 8001866:	f000 fde6 	bl	8002436 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800186a:	2026      	movs	r0, #38	; 0x26
 800186c:	f000 fdff 	bl	800246e <HAL_NVIC_EnableIRQ>
}
 8001870:	e039      	b.n	80018e6 <HAL_UART_MspInit+0x28e>
  else if(huart->Instance==USART6)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a29      	ldr	r2, [pc, #164]	; (800191c <HAL_UART_MspInit+0x2c4>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d134      	bne.n	80018e6 <HAL_UART_MspInit+0x28e>
    __HAL_RCC_USART6_CLK_ENABLE();
 800187c:	2300      	movs	r3, #0
 800187e:	613b      	str	r3, [r7, #16]
 8001880:	4b1c      	ldr	r3, [pc, #112]	; (80018f4 <HAL_UART_MspInit+0x29c>)
 8001882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001884:	4a1b      	ldr	r2, [pc, #108]	; (80018f4 <HAL_UART_MspInit+0x29c>)
 8001886:	f043 0320 	orr.w	r3, r3, #32
 800188a:	6453      	str	r3, [r2, #68]	; 0x44
 800188c:	4b19      	ldr	r3, [pc, #100]	; (80018f4 <HAL_UART_MspInit+0x29c>)
 800188e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001890:	f003 0320 	and.w	r3, r3, #32
 8001894:	613b      	str	r3, [r7, #16]
 8001896:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001898:	2300      	movs	r3, #0
 800189a:	60fb      	str	r3, [r7, #12]
 800189c:	4b15      	ldr	r3, [pc, #84]	; (80018f4 <HAL_UART_MspInit+0x29c>)
 800189e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a0:	4a14      	ldr	r2, [pc, #80]	; (80018f4 <HAL_UART_MspInit+0x29c>)
 80018a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018a6:	6313      	str	r3, [r2, #48]	; 0x30
 80018a8:	4b12      	ldr	r3, [pc, #72]	; (80018f4 <HAL_UART_MspInit+0x29c>)
 80018aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018b0:	60fb      	str	r3, [r7, #12]
 80018b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 80018b4:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 80018b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ba:	2302      	movs	r3, #2
 80018bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018be:	2300      	movs	r3, #0
 80018c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018c2:	2303      	movs	r3, #3
 80018c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80018c6:	2308      	movs	r3, #8
 80018c8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80018ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018ce:	4619      	mov	r1, r3
 80018d0:	4813      	ldr	r0, [pc, #76]	; (8001920 <HAL_UART_MspInit+0x2c8>)
 80018d2:	f001 f969 	bl	8002ba8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80018d6:	2200      	movs	r2, #0
 80018d8:	2100      	movs	r1, #0
 80018da:	2047      	movs	r0, #71	; 0x47
 80018dc:	f000 fdab 	bl	8002436 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80018e0:	2047      	movs	r0, #71	; 0x47
 80018e2:	f000 fdc4 	bl	800246e <HAL_NVIC_EnableIRQ>
}
 80018e6:	bf00      	nop
 80018e8:	3738      	adds	r7, #56	; 0x38
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	40011000 	.word	0x40011000
 80018f4:	40023800 	.word	0x40023800
 80018f8:	40020400 	.word	0x40020400
 80018fc:	200001dc 	.word	0x200001dc
 8001900:	40026440 	.word	0x40026440
 8001904:	40004400 	.word	0x40004400
 8001908:	40020c00 	.word	0x40020c00
 800190c:	2000002c 	.word	0x2000002c
 8001910:	40026088 	.word	0x40026088
 8001914:	2000023c 	.word	0x2000023c
 8001918:	400260a0 	.word	0x400260a0
 800191c:	40011400 	.word	0x40011400
 8001920:	40021800 	.word	0x40021800

08001924 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001928:	bf00      	nop
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr

08001932 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001932:	b480      	push	{r7}
 8001934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001936:	e7fe      	b.n	8001936 <HardFault_Handler+0x4>

08001938 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800193c:	e7fe      	b.n	800193c <MemManage_Handler+0x4>

0800193e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800193e:	b480      	push	{r7}
 8001940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001942:	e7fe      	b.n	8001942 <BusFault_Handler+0x4>

08001944 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001948:	e7fe      	b.n	8001948 <UsageFault_Handler+0x4>

0800194a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800194a:	b480      	push	{r7}
 800194c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800194e:	bf00      	nop
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800195c:	bf00      	nop
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr

08001966 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001966:	b480      	push	{r7}
 8001968:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800196a:	bf00      	nop
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001978:	f000 f8fc 	bl	8001b74 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 800197c:	f000 fd91 	bl	80024a2 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001980:	bf00      	nop
 8001982:	bd80      	pop	{r7, pc}

08001984 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001988:	4802      	ldr	r0, [pc, #8]	; (8001994 <DMA1_Stream5_IRQHandler+0x10>)
 800198a:	f000 fea3 	bl	80026d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800198e:	bf00      	nop
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	2000002c 	.word	0x2000002c

08001998 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800199c:	4802      	ldr	r0, [pc, #8]	; (80019a8 <DMA1_Stream6_IRQHandler+0x10>)
 800199e:	f000 fe99 	bl	80026d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80019a2:	bf00      	nop
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	2000023c 	.word	0x2000023c

080019ac <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80019b0:	4802      	ldr	r0, [pc, #8]	; (80019bc <CAN1_TX_IRQHandler+0x10>)
 80019b2:	f000 fa35 	bl	8001e20 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 80019b6:	bf00      	nop
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	2000046c 	.word	0x2000046c

080019c0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80019c4:	4802      	ldr	r0, [pc, #8]	; (80019d0 <CAN1_RX0_IRQHandler+0x10>)
 80019c6:	f000 fa2b 	bl	8001e20 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	2000046c 	.word	0x2000046c

080019d4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  uart_receive_handler(&huart1);
 80019d8:	4803      	ldr	r0, [pc, #12]	; (80019e8 <USART1_IRQHandler+0x14>)
 80019da:	f7ff fc3f 	bl	800125c <uart_receive_handler>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80019de:	4802      	ldr	r0, [pc, #8]	; (80019e8 <USART1_IRQHandler+0x14>)
 80019e0:	f002 fb58 	bl	8004094 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80019e4:	bf00      	nop
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	2000029c 	.word	0x2000029c

080019ec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80019f0:	4802      	ldr	r0, [pc, #8]	; (80019fc <USART2_IRQHandler+0x10>)
 80019f2:	f002 fb4f 	bl	8004094 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80019f6:	bf00      	nop
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	2000042c 	.word	0x2000042c

08001a00 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001a04:	4802      	ldr	r0, [pc, #8]	; (8001a10 <DMA2_Stream2_IRQHandler+0x10>)
 8001a06:	f000 fe65 	bl	80026d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001a0a:	bf00      	nop
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	200001dc 	.word	0x200001dc

08001a14 <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupts.
  */
void CAN2_TX_IRQHandler(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001a18:	4802      	ldr	r0, [pc, #8]	; (8001a24 <CAN2_TX_IRQHandler+0x10>)
 8001a1a:	f000 fa01 	bl	8001e20 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 8001a1e:	bf00      	nop
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	200001b4 	.word	0x200001b4

08001a28 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001a2c:	4802      	ldr	r0, [pc, #8]	; (8001a38 <CAN2_RX0_IRQHandler+0x10>)
 8001a2e:	f000 f9f7 	bl	8001e20 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8001a32:	bf00      	nop
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	200001b4 	.word	0x200001b4

08001a3c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001a40:	4802      	ldr	r0, [pc, #8]	; (8001a4c <USART6_IRQHandler+0x10>)
 8001a42:	f002 fb27 	bl	8004094 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001a46:	bf00      	nop
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	200002e4 	.word	0x200002e4

08001a50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a54:	4b08      	ldr	r3, [pc, #32]	; (8001a78 <SystemInit+0x28>)
 8001a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a5a:	4a07      	ldr	r2, [pc, #28]	; (8001a78 <SystemInit+0x28>)
 8001a5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a64:	4b04      	ldr	r3, [pc, #16]	; (8001a78 <SystemInit+0x28>)
 8001a66:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a6a:	609a      	str	r2, [r3, #8]
#endif
}
 8001a6c:	bf00      	nop
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	e000ed00 	.word	0xe000ed00

08001a7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ab4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001a80:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001a82:	e003      	b.n	8001a8c <LoopCopyDataInit>

08001a84 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001a84:	4b0c      	ldr	r3, [pc, #48]	; (8001ab8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001a86:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001a88:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001a8a:	3104      	adds	r1, #4

08001a8c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001a8c:	480b      	ldr	r0, [pc, #44]	; (8001abc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001a8e:	4b0c      	ldr	r3, [pc, #48]	; (8001ac0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001a90:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001a92:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001a94:	d3f6      	bcc.n	8001a84 <CopyDataInit>
  ldr  r2, =_sbss
 8001a96:	4a0b      	ldr	r2, [pc, #44]	; (8001ac4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001a98:	e002      	b.n	8001aa0 <LoopFillZerobss>

08001a9a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001a9a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001a9c:	f842 3b04 	str.w	r3, [r2], #4

08001aa0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001aa0:	4b09      	ldr	r3, [pc, #36]	; (8001ac8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001aa2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001aa4:	d3f9      	bcc.n	8001a9a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001aa6:	f7ff ffd3 	bl	8001a50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001aaa:	f003 f8cf 	bl	8004c4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001aae:	f7fe fd59 	bl	8000564 <main>
  bx  lr    
 8001ab2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ab4:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001ab8:	08004cec 	.word	0x08004cec
  ldr  r0, =_sdata
 8001abc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001ac0:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001ac4:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001ac8:	2000056c 	.word	0x2000056c

08001acc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001acc:	e7fe      	b.n	8001acc <ADC_IRQHandler>
	...

08001ad0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ad4:	4b0e      	ldr	r3, [pc, #56]	; (8001b10 <HAL_Init+0x40>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a0d      	ldr	r2, [pc, #52]	; (8001b10 <HAL_Init+0x40>)
 8001ada:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ade:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ae0:	4b0b      	ldr	r3, [pc, #44]	; (8001b10 <HAL_Init+0x40>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a0a      	ldr	r2, [pc, #40]	; (8001b10 <HAL_Init+0x40>)
 8001ae6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001aea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001aec:	4b08      	ldr	r3, [pc, #32]	; (8001b10 <HAL_Init+0x40>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a07      	ldr	r2, [pc, #28]	; (8001b10 <HAL_Init+0x40>)
 8001af2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001af6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001af8:	2003      	movs	r0, #3
 8001afa:	f000 fc91 	bl	8002420 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001afe:	2000      	movs	r0, #0
 8001b00:	f000 f808 	bl	8001b14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b04:	f7ff fbe8 	bl	80012d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b08:	2300      	movs	r3, #0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	40023c00 	.word	0x40023c00

08001b14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b1c:	4b12      	ldr	r3, [pc, #72]	; (8001b68 <HAL_InitTick+0x54>)
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	4b12      	ldr	r3, [pc, #72]	; (8001b6c <HAL_InitTick+0x58>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	4619      	mov	r1, r3
 8001b26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b32:	4618      	mov	r0, r3
 8001b34:	f000 fca9 	bl	800248a <HAL_SYSTICK_Config>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e00e      	b.n	8001b60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2b0f      	cmp	r3, #15
 8001b46:	d80a      	bhi.n	8001b5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b48:	2200      	movs	r2, #0
 8001b4a:	6879      	ldr	r1, [r7, #4]
 8001b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b50:	f000 fc71 	bl	8002436 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b54:	4a06      	ldr	r2, [pc, #24]	; (8001b70 <HAL_InitTick+0x5c>)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	e000      	b.n	8001b60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3708      	adds	r7, #8
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	20000000 	.word	0x20000000
 8001b6c:	20000008 	.word	0x20000008
 8001b70:	20000004 	.word	0x20000004

08001b74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b78:	4b06      	ldr	r3, [pc, #24]	; (8001b94 <HAL_IncTick+0x20>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	4b06      	ldr	r3, [pc, #24]	; (8001b98 <HAL_IncTick+0x24>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4413      	add	r3, r2
 8001b84:	4a04      	ldr	r2, [pc, #16]	; (8001b98 <HAL_IncTick+0x24>)
 8001b86:	6013      	str	r3, [r2, #0]
}
 8001b88:	bf00      	nop
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	20000008 	.word	0x20000008
 8001b98:	20000568 	.word	0x20000568

08001b9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  return uwTick;
 8001ba0:	4b03      	ldr	r3, [pc, #12]	; (8001bb0 <HAL_GetTick+0x14>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	20000568 	.word	0x20000568

08001bb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bbc:	f7ff ffee 	bl	8001b9c <HAL_GetTick>
 8001bc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bcc:	d005      	beq.n	8001bda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bce:	4b0a      	ldr	r3, [pc, #40]	; (8001bf8 <HAL_Delay+0x44>)
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001bda:	bf00      	nop
 8001bdc:	f7ff ffde 	bl	8001b9c <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	68fa      	ldr	r2, [r7, #12]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d8f7      	bhi.n	8001bdc <HAL_Delay+0x28>
  {
  }
}
 8001bec:	bf00      	nop
 8001bee:	bf00      	nop
 8001bf0:	3710      	adds	r7, #16
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	20000008 	.word	0x20000008

08001bfc <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b087      	sub	sp, #28
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	60f8      	str	r0, [r7, #12]
 8001c04:	60b9      	str	r1, [r7, #8]
 8001c06:	607a      	str	r2, [r7, #4]
 8001c08:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c10:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001c12:	7dfb      	ldrb	r3, [r7, #23]
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d003      	beq.n	8001c20 <HAL_CAN_GetRxMessage+0x24>
 8001c18:	7dfb      	ldrb	r3, [r7, #23]
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	f040 80f3 	bne.w	8001e06 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d10e      	bne.n	8001c44 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	f003 0303 	and.w	r3, r3, #3
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d116      	bne.n	8001c62 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c38:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e0e7      	b.n	8001e14 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	691b      	ldr	r3, [r3, #16]
 8001c4a:	f003 0303 	and.w	r3, r3, #3
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d107      	bne.n	8001c62 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c56:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e0d8      	b.n	8001e14 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	331b      	adds	r3, #27
 8001c6a:	011b      	lsls	r3, r3, #4
 8001c6c:	4413      	add	r3, r2
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0204 	and.w	r2, r3, #4
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d10c      	bne.n	8001c9a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	331b      	adds	r3, #27
 8001c88:	011b      	lsls	r3, r3, #4
 8001c8a:	4413      	add	r3, r2
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	0d5b      	lsrs	r3, r3, #21
 8001c90:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	601a      	str	r2, [r3, #0]
 8001c98:	e00b      	b.n	8001cb2 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	331b      	adds	r3, #27
 8001ca2:	011b      	lsls	r3, r3, #4
 8001ca4:	4413      	add	r3, r2
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	08db      	lsrs	r3, r3, #3
 8001caa:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	331b      	adds	r3, #27
 8001cba:	011b      	lsls	r3, r3, #4
 8001cbc:	4413      	add	r3, r2
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 0202 	and.w	r2, r3, #2
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	331b      	adds	r3, #27
 8001cd0:	011b      	lsls	r3, r3, #4
 8001cd2:	4413      	add	r3, r2
 8001cd4:	3304      	adds	r3, #4
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 020f 	and.w	r2, r3, #15
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	331b      	adds	r3, #27
 8001ce8:	011b      	lsls	r3, r3, #4
 8001cea:	4413      	add	r3, r2
 8001cec:	3304      	adds	r3, #4
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	0a1b      	lsrs	r3, r3, #8
 8001cf2:	b2da      	uxtb	r2, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	331b      	adds	r3, #27
 8001d00:	011b      	lsls	r3, r3, #4
 8001d02:	4413      	add	r3, r2
 8001d04:	3304      	adds	r3, #4
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	0c1b      	lsrs	r3, r3, #16
 8001d0a:	b29a      	uxth	r2, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	011b      	lsls	r3, r3, #4
 8001d18:	4413      	add	r3, r2
 8001d1a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	b2da      	uxtb	r2, r3
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	011b      	lsls	r3, r3, #4
 8001d2e:	4413      	add	r3, r2
 8001d30:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	0a1a      	lsrs	r2, r3, #8
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	b2d2      	uxtb	r2, r2
 8001d3e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	011b      	lsls	r3, r3, #4
 8001d48:	4413      	add	r3, r2
 8001d4a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	0c1a      	lsrs	r2, r3, #16
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	3302      	adds	r3, #2
 8001d56:	b2d2      	uxtb	r2, r2
 8001d58:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	011b      	lsls	r3, r3, #4
 8001d62:	4413      	add	r3, r2
 8001d64:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	0e1a      	lsrs	r2, r3, #24
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	3303      	adds	r3, #3
 8001d70:	b2d2      	uxtb	r2, r2
 8001d72:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	011b      	lsls	r3, r3, #4
 8001d7c:	4413      	add	r3, r2
 8001d7e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	3304      	adds	r3, #4
 8001d88:	b2d2      	uxtb	r2, r2
 8001d8a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	011b      	lsls	r3, r3, #4
 8001d94:	4413      	add	r3, r2
 8001d96:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	0a1a      	lsrs	r2, r3, #8
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	3305      	adds	r3, #5
 8001da2:	b2d2      	uxtb	r2, r2
 8001da4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	011b      	lsls	r3, r3, #4
 8001dae:	4413      	add	r3, r2
 8001db0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	0c1a      	lsrs	r2, r3, #16
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	3306      	adds	r3, #6
 8001dbc:	b2d2      	uxtb	r2, r2
 8001dbe:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	011b      	lsls	r3, r3, #4
 8001dc8:	4413      	add	r3, r2
 8001dca:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	0e1a      	lsrs	r2, r3, #24
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	3307      	adds	r3, #7
 8001dd6:	b2d2      	uxtb	r2, r2
 8001dd8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d108      	bne.n	8001df2 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	68da      	ldr	r2, [r3, #12]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f042 0220 	orr.w	r2, r2, #32
 8001dee:	60da      	str	r2, [r3, #12]
 8001df0:	e007      	b.n	8001e02 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	691a      	ldr	r2, [r3, #16]
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f042 0220 	orr.w	r2, r2, #32
 8001e00:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001e02:	2300      	movs	r3, #0
 8001e04:	e006      	b.n	8001e14 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
  }
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	371c      	adds	r7, #28
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b08a      	sub	sp, #40	; 0x28
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	695b      	ldr	r3, [r3, #20]
 8001e32:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	691b      	ldr	r3, [r3, #16]
 8001e52:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	699b      	ldr	r3, [r3, #24]
 8001e5a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001e5c:	6a3b      	ldr	r3, [r7, #32]
 8001e5e:	f003 0301 	and.w	r3, r3, #1
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d07c      	beq.n	8001f60 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	f003 0301 	and.w	r3, r3, #1
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d023      	beq.n	8001eb8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2201      	movs	r2, #1
 8001e76:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d003      	beq.n	8001e8a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f000 f983 	bl	800218e <HAL_CAN_TxMailbox0CompleteCallback>
 8001e88:	e016      	b.n	8001eb8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	f003 0304 	and.w	r3, r3, #4
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d004      	beq.n	8001e9e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e96:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e9a:	627b      	str	r3, [r7, #36]	; 0x24
 8001e9c:	e00c      	b.n	8001eb8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001e9e:	69bb      	ldr	r3, [r7, #24]
 8001ea0:	f003 0308 	and.w	r3, r3, #8
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d004      	beq.n	8001eb2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eaa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001eae:	627b      	str	r3, [r7, #36]	; 0x24
 8001eb0:	e002      	b.n	8001eb8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f000 f989 	bl	80021ca <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d024      	beq.n	8001f0c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001eca:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d003      	beq.n	8001ede <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f000 f963 	bl	80021a2 <HAL_CAN_TxMailbox1CompleteCallback>
 8001edc:	e016      	b.n	8001f0c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d004      	beq.n	8001ef2 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001eee:	627b      	str	r3, [r7, #36]	; 0x24
 8001ef0:	e00c      	b.n	8001f0c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001ef2:	69bb      	ldr	r3, [r7, #24]
 8001ef4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d004      	beq.n	8001f06 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f02:	627b      	str	r3, [r7, #36]	; 0x24
 8001f04:	e002      	b.n	8001f0c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f000 f969 	bl	80021de <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d024      	beq.n	8001f60 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001f1e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d003      	beq.n	8001f32 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f000 f943 	bl	80021b6 <HAL_CAN_TxMailbox2CompleteCallback>
 8001f30:	e016      	b.n	8001f60 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001f32:	69bb      	ldr	r3, [r7, #24]
 8001f34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d004      	beq.n	8001f46 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f42:	627b      	str	r3, [r7, #36]	; 0x24
 8001f44:	e00c      	b.n	8001f60 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d004      	beq.n	8001f5a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f56:	627b      	str	r3, [r7, #36]	; 0x24
 8001f58:	e002      	b.n	8001f60 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f000 f949 	bl	80021f2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001f60:	6a3b      	ldr	r3, [r7, #32]
 8001f62:	f003 0308 	and.w	r3, r3, #8
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d00c      	beq.n	8001f84 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	f003 0310 	and.w	r3, r3, #16
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d007      	beq.n	8001f84 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f7a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2210      	movs	r2, #16
 8001f82:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001f84:	6a3b      	ldr	r3, [r7, #32]
 8001f86:	f003 0304 	and.w	r3, r3, #4
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d00b      	beq.n	8001fa6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	f003 0308 	and.w	r3, r3, #8
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d006      	beq.n	8001fa6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2208      	movs	r2, #8
 8001f9e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f000 f930 	bl	8002206 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001fa6:	6a3b      	ldr	r3, [r7, #32]
 8001fa8:	f003 0302 	and.w	r3, r3, #2
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d009      	beq.n	8001fc4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	68db      	ldr	r3, [r3, #12]
 8001fb6:	f003 0303 	and.w	r3, r3, #3
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d002      	beq.n	8001fc4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f7fe ff28 	bl	8000e14 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001fc4:	6a3b      	ldr	r3, [r7, #32]
 8001fc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d00c      	beq.n	8001fe8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	f003 0310 	and.w	r3, r3, #16
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d007      	beq.n	8001fe8 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fde:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	2210      	movs	r2, #16
 8001fe6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001fe8:	6a3b      	ldr	r3, [r7, #32]
 8001fea:	f003 0320 	and.w	r3, r3, #32
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d00b      	beq.n	800200a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	f003 0308 	and.w	r3, r3, #8
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d006      	beq.n	800200a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2208      	movs	r2, #8
 8002002:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f000 f912 	bl	800222e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800200a:	6a3b      	ldr	r3, [r7, #32]
 800200c:	f003 0310 	and.w	r3, r3, #16
 8002010:	2b00      	cmp	r3, #0
 8002012:	d009      	beq.n	8002028 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	691b      	ldr	r3, [r3, #16]
 800201a:	f003 0303 	and.w	r3, r3, #3
 800201e:	2b00      	cmp	r3, #0
 8002020:	d002      	beq.n	8002028 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f000 f8f9 	bl	800221a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002028:	6a3b      	ldr	r3, [r7, #32]
 800202a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d00b      	beq.n	800204a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	f003 0310 	and.w	r3, r3, #16
 8002038:	2b00      	cmp	r3, #0
 800203a:	d006      	beq.n	800204a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2210      	movs	r2, #16
 8002042:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f000 f8fc 	bl	8002242 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800204a:	6a3b      	ldr	r3, [r7, #32]
 800204c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d00b      	beq.n	800206c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	f003 0308 	and.w	r3, r3, #8
 800205a:	2b00      	cmp	r3, #0
 800205c:	d006      	beq.n	800206c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	2208      	movs	r2, #8
 8002064:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f000 f8f5 	bl	8002256 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800206c:	6a3b      	ldr	r3, [r7, #32]
 800206e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d07b      	beq.n	800216e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	f003 0304 	and.w	r3, r3, #4
 800207c:	2b00      	cmp	r3, #0
 800207e:	d072      	beq.n	8002166 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002080:	6a3b      	ldr	r3, [r7, #32]
 8002082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002086:	2b00      	cmp	r3, #0
 8002088:	d008      	beq.n	800209c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002090:	2b00      	cmp	r3, #0
 8002092:	d003      	beq.n	800209c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002096:	f043 0301 	orr.w	r3, r3, #1
 800209a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800209c:	6a3b      	ldr	r3, [r7, #32]
 800209e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d008      	beq.n	80020b8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d003      	beq.n	80020b8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80020b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b2:	f043 0302 	orr.w	r3, r3, #2
 80020b6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80020b8:	6a3b      	ldr	r3, [r7, #32]
 80020ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d008      	beq.n	80020d4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d003      	beq.n	80020d4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80020cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ce:	f043 0304 	orr.w	r3, r3, #4
 80020d2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80020d4:	6a3b      	ldr	r3, [r7, #32]
 80020d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d043      	beq.n	8002166 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d03e      	beq.n	8002166 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80020ee:	2b60      	cmp	r3, #96	; 0x60
 80020f0:	d02b      	beq.n	800214a <HAL_CAN_IRQHandler+0x32a>
 80020f2:	2b60      	cmp	r3, #96	; 0x60
 80020f4:	d82e      	bhi.n	8002154 <HAL_CAN_IRQHandler+0x334>
 80020f6:	2b50      	cmp	r3, #80	; 0x50
 80020f8:	d022      	beq.n	8002140 <HAL_CAN_IRQHandler+0x320>
 80020fa:	2b50      	cmp	r3, #80	; 0x50
 80020fc:	d82a      	bhi.n	8002154 <HAL_CAN_IRQHandler+0x334>
 80020fe:	2b40      	cmp	r3, #64	; 0x40
 8002100:	d019      	beq.n	8002136 <HAL_CAN_IRQHandler+0x316>
 8002102:	2b40      	cmp	r3, #64	; 0x40
 8002104:	d826      	bhi.n	8002154 <HAL_CAN_IRQHandler+0x334>
 8002106:	2b30      	cmp	r3, #48	; 0x30
 8002108:	d010      	beq.n	800212c <HAL_CAN_IRQHandler+0x30c>
 800210a:	2b30      	cmp	r3, #48	; 0x30
 800210c:	d822      	bhi.n	8002154 <HAL_CAN_IRQHandler+0x334>
 800210e:	2b10      	cmp	r3, #16
 8002110:	d002      	beq.n	8002118 <HAL_CAN_IRQHandler+0x2f8>
 8002112:	2b20      	cmp	r3, #32
 8002114:	d005      	beq.n	8002122 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002116:	e01d      	b.n	8002154 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211a:	f043 0308 	orr.w	r3, r3, #8
 800211e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002120:	e019      	b.n	8002156 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002124:	f043 0310 	orr.w	r3, r3, #16
 8002128:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800212a:	e014      	b.n	8002156 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800212c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212e:	f043 0320 	orr.w	r3, r3, #32
 8002132:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002134:	e00f      	b.n	8002156 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002138:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800213c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800213e:	e00a      	b.n	8002156 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002142:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002146:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002148:	e005      	b.n	8002156 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800214a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002150:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002152:	e000      	b.n	8002156 <HAL_CAN_IRQHandler+0x336>
            break;
 8002154:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	699a      	ldr	r2, [r3, #24]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002164:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2204      	movs	r2, #4
 800216c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800216e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002170:	2b00      	cmp	r3, #0
 8002172:	d008      	beq.n	8002186 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217a:	431a      	orrs	r2, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f000 f872 	bl	800226a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002186:	bf00      	nop
 8002188:	3728      	adds	r7, #40	; 0x28
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800218e:	b480      	push	{r7}
 8002190:	b083      	sub	sp, #12
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002196:	bf00      	nop
 8002198:	370c      	adds	r7, #12
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr

080021a2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80021a2:	b480      	push	{r7}
 80021a4:	b083      	sub	sp, #12
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80021aa:	bf00      	nop
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr

080021b6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80021b6:	b480      	push	{r7}
 80021b8:	b083      	sub	sp, #12
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80021be:	bf00      	nop
 80021c0:	370c      	adds	r7, #12
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr

080021ca <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80021ca:	b480      	push	{r7}
 80021cc:	b083      	sub	sp, #12
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80021d2:	bf00      	nop
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr

080021de <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80021de:	b480      	push	{r7}
 80021e0:	b083      	sub	sp, #12
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80021e6:	bf00      	nop
 80021e8:	370c      	adds	r7, #12
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr

080021f2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80021f2:	b480      	push	{r7}
 80021f4:	b083      	sub	sp, #12
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80021fa:	bf00      	nop
 80021fc:	370c      	adds	r7, #12
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr

08002206 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002206:	b480      	push	{r7}
 8002208:	b083      	sub	sp, #12
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800220e:	bf00      	nop
 8002210:	370c      	adds	r7, #12
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr

0800221a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800221a:	b480      	push	{r7}
 800221c:	b083      	sub	sp, #12
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002222:	bf00      	nop
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr

0800222e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800222e:	b480      	push	{r7}
 8002230:	b083      	sub	sp, #12
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002236:	bf00      	nop
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr

08002242 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002242:	b480      	push	{r7}
 8002244:	b083      	sub	sp, #12
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800224a:	bf00      	nop
 800224c:	370c      	adds	r7, #12
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr

08002256 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002256:	b480      	push	{r7}
 8002258:	b083      	sub	sp, #12
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800225e:	bf00      	nop
 8002260:	370c      	adds	r7, #12
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr

0800226a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800226a:	b480      	push	{r7}
 800226c:	b083      	sub	sp, #12
 800226e:	af00      	add	r7, sp, #0
 8002270:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002272:	bf00      	nop
 8002274:	370c      	adds	r7, #12
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
	...

08002280 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002280:	b480      	push	{r7}
 8002282:	b085      	sub	sp, #20
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f003 0307 	and.w	r3, r3, #7
 800228e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002290:	4b0c      	ldr	r3, [pc, #48]	; (80022c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002296:	68ba      	ldr	r2, [r7, #8]
 8002298:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800229c:	4013      	ands	r3, r2
 800229e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022b2:	4a04      	ldr	r2, [pc, #16]	; (80022c4 <__NVIC_SetPriorityGrouping+0x44>)
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	60d3      	str	r3, [r2, #12]
}
 80022b8:	bf00      	nop
 80022ba:	3714      	adds	r7, #20
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr
 80022c4:	e000ed00 	.word	0xe000ed00

080022c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022cc:	4b04      	ldr	r3, [pc, #16]	; (80022e0 <__NVIC_GetPriorityGrouping+0x18>)
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	0a1b      	lsrs	r3, r3, #8
 80022d2:	f003 0307 	and.w	r3, r3, #7
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr
 80022e0:	e000ed00 	.word	0xe000ed00

080022e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	4603      	mov	r3, r0
 80022ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	db0b      	blt.n	800230e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022f6:	79fb      	ldrb	r3, [r7, #7]
 80022f8:	f003 021f 	and.w	r2, r3, #31
 80022fc:	4907      	ldr	r1, [pc, #28]	; (800231c <__NVIC_EnableIRQ+0x38>)
 80022fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002302:	095b      	lsrs	r3, r3, #5
 8002304:	2001      	movs	r0, #1
 8002306:	fa00 f202 	lsl.w	r2, r0, r2
 800230a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800230e:	bf00      	nop
 8002310:	370c      	adds	r7, #12
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	e000e100 	.word	0xe000e100

08002320 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	4603      	mov	r3, r0
 8002328:	6039      	str	r1, [r7, #0]
 800232a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800232c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002330:	2b00      	cmp	r3, #0
 8002332:	db0a      	blt.n	800234a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	b2da      	uxtb	r2, r3
 8002338:	490c      	ldr	r1, [pc, #48]	; (800236c <__NVIC_SetPriority+0x4c>)
 800233a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800233e:	0112      	lsls	r2, r2, #4
 8002340:	b2d2      	uxtb	r2, r2
 8002342:	440b      	add	r3, r1
 8002344:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002348:	e00a      	b.n	8002360 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	b2da      	uxtb	r2, r3
 800234e:	4908      	ldr	r1, [pc, #32]	; (8002370 <__NVIC_SetPriority+0x50>)
 8002350:	79fb      	ldrb	r3, [r7, #7]
 8002352:	f003 030f 	and.w	r3, r3, #15
 8002356:	3b04      	subs	r3, #4
 8002358:	0112      	lsls	r2, r2, #4
 800235a:	b2d2      	uxtb	r2, r2
 800235c:	440b      	add	r3, r1
 800235e:	761a      	strb	r2, [r3, #24]
}
 8002360:	bf00      	nop
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr
 800236c:	e000e100 	.word	0xe000e100
 8002370:	e000ed00 	.word	0xe000ed00

08002374 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002374:	b480      	push	{r7}
 8002376:	b089      	sub	sp, #36	; 0x24
 8002378:	af00      	add	r7, sp, #0
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	60b9      	str	r1, [r7, #8]
 800237e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	f003 0307 	and.w	r3, r3, #7
 8002386:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	f1c3 0307 	rsb	r3, r3, #7
 800238e:	2b04      	cmp	r3, #4
 8002390:	bf28      	it	cs
 8002392:	2304      	movcs	r3, #4
 8002394:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	3304      	adds	r3, #4
 800239a:	2b06      	cmp	r3, #6
 800239c:	d902      	bls.n	80023a4 <NVIC_EncodePriority+0x30>
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	3b03      	subs	r3, #3
 80023a2:	e000      	b.n	80023a6 <NVIC_EncodePriority+0x32>
 80023a4:	2300      	movs	r3, #0
 80023a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023a8:	f04f 32ff 	mov.w	r2, #4294967295
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	fa02 f303 	lsl.w	r3, r2, r3
 80023b2:	43da      	mvns	r2, r3
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	401a      	ands	r2, r3
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023bc:	f04f 31ff 	mov.w	r1, #4294967295
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	fa01 f303 	lsl.w	r3, r1, r3
 80023c6:	43d9      	mvns	r1, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023cc:	4313      	orrs	r3, r2
         );
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3724      	adds	r7, #36	; 0x24
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
	...

080023dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	3b01      	subs	r3, #1
 80023e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023ec:	d301      	bcc.n	80023f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023ee:	2301      	movs	r3, #1
 80023f0:	e00f      	b.n	8002412 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023f2:	4a0a      	ldr	r2, [pc, #40]	; (800241c <SysTick_Config+0x40>)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	3b01      	subs	r3, #1
 80023f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023fa:	210f      	movs	r1, #15
 80023fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002400:	f7ff ff8e 	bl	8002320 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002404:	4b05      	ldr	r3, [pc, #20]	; (800241c <SysTick_Config+0x40>)
 8002406:	2200      	movs	r2, #0
 8002408:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800240a:	4b04      	ldr	r3, [pc, #16]	; (800241c <SysTick_Config+0x40>)
 800240c:	2207      	movs	r2, #7
 800240e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	e000e010 	.word	0xe000e010

08002420 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f7ff ff29 	bl	8002280 <__NVIC_SetPriorityGrouping>
}
 800242e:	bf00      	nop
 8002430:	3708      	adds	r7, #8
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002436:	b580      	push	{r7, lr}
 8002438:	b086      	sub	sp, #24
 800243a:	af00      	add	r7, sp, #0
 800243c:	4603      	mov	r3, r0
 800243e:	60b9      	str	r1, [r7, #8]
 8002440:	607a      	str	r2, [r7, #4]
 8002442:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002444:	2300      	movs	r3, #0
 8002446:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002448:	f7ff ff3e 	bl	80022c8 <__NVIC_GetPriorityGrouping>
 800244c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	68b9      	ldr	r1, [r7, #8]
 8002452:	6978      	ldr	r0, [r7, #20]
 8002454:	f7ff ff8e 	bl	8002374 <NVIC_EncodePriority>
 8002458:	4602      	mov	r2, r0
 800245a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800245e:	4611      	mov	r1, r2
 8002460:	4618      	mov	r0, r3
 8002462:	f7ff ff5d 	bl	8002320 <__NVIC_SetPriority>
}
 8002466:	bf00      	nop
 8002468:	3718      	adds	r7, #24
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}

0800246e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800246e:	b580      	push	{r7, lr}
 8002470:	b082      	sub	sp, #8
 8002472:	af00      	add	r7, sp, #0
 8002474:	4603      	mov	r3, r0
 8002476:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002478:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800247c:	4618      	mov	r0, r3
 800247e:	f7ff ff31 	bl	80022e4 <__NVIC_EnableIRQ>
}
 8002482:	bf00      	nop
 8002484:	3708      	adds	r7, #8
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}

0800248a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800248a:	b580      	push	{r7, lr}
 800248c:	b082      	sub	sp, #8
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f7ff ffa2 	bl	80023dc <SysTick_Config>
 8002498:	4603      	mov	r3, r0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3708      	adds	r7, #8
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80024a2:	b580      	push	{r7, lr}
 80024a4:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80024a6:	f000 f802 	bl	80024ae <HAL_SYSTICK_Callback>
}
 80024aa:	bf00      	nop
 80024ac:	bd80      	pop	{r7, pc}

080024ae <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80024ae:	b480      	push	{r7}
 80024b0:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80024b2:	bf00      	nop
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b086      	sub	sp, #24
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80024c4:	2300      	movs	r3, #0
 80024c6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80024c8:	f7ff fb68 	bl	8001b9c <HAL_GetTick>
 80024cc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d101      	bne.n	80024d8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e099      	b.n	800260c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2200      	movs	r2, #0
 80024dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2202      	movs	r2, #2
 80024e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f022 0201 	bic.w	r2, r2, #1
 80024f6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024f8:	e00f      	b.n	800251a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024fa:	f7ff fb4f 	bl	8001b9c <HAL_GetTick>
 80024fe:	4602      	mov	r2, r0
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	2b05      	cmp	r3, #5
 8002506:	d908      	bls.n	800251a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2220      	movs	r2, #32
 800250c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2203      	movs	r2, #3
 8002512:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e078      	b.n	800260c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0301 	and.w	r3, r3, #1
 8002524:	2b00      	cmp	r3, #0
 8002526:	d1e8      	bne.n	80024fa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002530:	697a      	ldr	r2, [r7, #20]
 8002532:	4b38      	ldr	r3, [pc, #224]	; (8002614 <HAL_DMA_Init+0x158>)
 8002534:	4013      	ands	r3, r2
 8002536:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685a      	ldr	r2, [r3, #4]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002546:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	691b      	ldr	r3, [r3, #16]
 800254c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002552:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	699b      	ldr	r3, [r3, #24]
 8002558:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800255e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6a1b      	ldr	r3, [r3, #32]
 8002564:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002566:	697a      	ldr	r2, [r7, #20]
 8002568:	4313      	orrs	r3, r2
 800256a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002570:	2b04      	cmp	r3, #4
 8002572:	d107      	bne.n	8002584 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257c:	4313      	orrs	r3, r2
 800257e:	697a      	ldr	r2, [r7, #20]
 8002580:	4313      	orrs	r3, r2
 8002582:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	697a      	ldr	r2, [r7, #20]
 800258a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	695b      	ldr	r3, [r3, #20]
 8002592:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	f023 0307 	bic.w	r3, r3, #7
 800259a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a0:	697a      	ldr	r2, [r7, #20]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025aa:	2b04      	cmp	r3, #4
 80025ac:	d117      	bne.n	80025de <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b2:	697a      	ldr	r2, [r7, #20]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d00e      	beq.n	80025de <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f000 fa75 	bl	8002ab0 <DMA_CheckFifoParam>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d008      	beq.n	80025de <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2240      	movs	r2, #64	; 0x40
 80025d0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2201      	movs	r2, #1
 80025d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80025da:	2301      	movs	r3, #1
 80025dc:	e016      	b.n	800260c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	697a      	ldr	r2, [r7, #20]
 80025e4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f000 fa2c 	bl	8002a44 <DMA_CalcBaseAndBitshift>
 80025ec:	4603      	mov	r3, r0
 80025ee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025f4:	223f      	movs	r2, #63	; 0x3f
 80025f6:	409a      	lsls	r2, r3
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2201      	movs	r2, #1
 8002606:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800260a:	2300      	movs	r3, #0
}
 800260c:	4618      	mov	r0, r3
 800260e:	3718      	adds	r7, #24
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	f010803f 	.word	0xf010803f

08002618 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b086      	sub	sp, #24
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	607a      	str	r2, [r7, #4]
 8002624:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002626:	2300      	movs	r3, #0
 8002628:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002630:	2b01      	cmp	r3, #1
 8002632:	d101      	bne.n	8002638 <HAL_DMA_Start+0x20>
 8002634:	2302      	movs	r3, #2
 8002636:	e026      	b.n	8002686 <HAL_DMA_Start+0x6e>
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2201      	movs	r2, #1
 800263c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002646:	b2db      	uxtb	r3, r3
 8002648:	2b01      	cmp	r3, #1
 800264a:	d115      	bne.n	8002678 <HAL_DMA_Start+0x60>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2202      	movs	r2, #2
 8002650:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2200      	movs	r2, #0
 8002658:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	68b9      	ldr	r1, [r7, #8]
 8002660:	68f8      	ldr	r0, [r7, #12]
 8002662:	f000 f9c1 	bl	80029e8 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f042 0201 	orr.w	r2, r2, #1
 8002674:	601a      	str	r2, [r3, #0]
 8002676:	e005      	b.n	8002684 <HAL_DMA_Start+0x6c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2200      	movs	r2, #0
 800267c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002680:	2302      	movs	r3, #2
 8002682:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
 8002684:	7dfb      	ldrb	r3, [r7, #23]
}
 8002686:	4618      	mov	r0, r3
 8002688:	3718      	adds	r7, #24
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}

0800268e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800268e:	b480      	push	{r7}
 8002690:	b083      	sub	sp, #12
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800269c:	b2db      	uxtb	r3, r3
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d004      	beq.n	80026ac <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2280      	movs	r2, #128	; 0x80
 80026a6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e00c      	b.n	80026c6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2205      	movs	r2, #5
 80026b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f022 0201 	bic.w	r2, r2, #1
 80026c2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	370c      	adds	r7, #12
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
	...

080026d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b086      	sub	sp, #24
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80026dc:	2300      	movs	r3, #0
 80026de:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80026e0:	4b92      	ldr	r3, [pc, #584]	; (800292c <HAL_DMA_IRQHandler+0x258>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a92      	ldr	r2, [pc, #584]	; (8002930 <HAL_DMA_IRQHandler+0x25c>)
 80026e6:	fba2 2303 	umull	r2, r3, r2, r3
 80026ea:	0a9b      	lsrs	r3, r3, #10
 80026ec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026f2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026fe:	2208      	movs	r2, #8
 8002700:	409a      	lsls	r2, r3
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	4013      	ands	r3, r2
 8002706:	2b00      	cmp	r3, #0
 8002708:	d01a      	beq.n	8002740 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0304 	and.w	r3, r3, #4
 8002714:	2b00      	cmp	r3, #0
 8002716:	d013      	beq.n	8002740 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f022 0204 	bic.w	r2, r2, #4
 8002726:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800272c:	2208      	movs	r2, #8
 800272e:	409a      	lsls	r2, r3
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002738:	f043 0201 	orr.w	r2, r3, #1
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002744:	2201      	movs	r2, #1
 8002746:	409a      	lsls	r2, r3
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	4013      	ands	r3, r2
 800274c:	2b00      	cmp	r3, #0
 800274e:	d012      	beq.n	8002776 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	695b      	ldr	r3, [r3, #20]
 8002756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800275a:	2b00      	cmp	r3, #0
 800275c:	d00b      	beq.n	8002776 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002762:	2201      	movs	r2, #1
 8002764:	409a      	lsls	r2, r3
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800276e:	f043 0202 	orr.w	r2, r3, #2
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800277a:	2204      	movs	r2, #4
 800277c:	409a      	lsls	r2, r3
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	4013      	ands	r3, r2
 8002782:	2b00      	cmp	r3, #0
 8002784:	d012      	beq.n	80027ac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0302 	and.w	r3, r3, #2
 8002790:	2b00      	cmp	r3, #0
 8002792:	d00b      	beq.n	80027ac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002798:	2204      	movs	r2, #4
 800279a:	409a      	lsls	r2, r3
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027a4:	f043 0204 	orr.w	r2, r3, #4
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027b0:	2210      	movs	r2, #16
 80027b2:	409a      	lsls	r2, r3
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	4013      	ands	r3, r2
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d043      	beq.n	8002844 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0308 	and.w	r3, r3, #8
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d03c      	beq.n	8002844 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ce:	2210      	movs	r2, #16
 80027d0:	409a      	lsls	r2, r3
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d018      	beq.n	8002816 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d108      	bne.n	8002804 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d024      	beq.n	8002844 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	4798      	blx	r3
 8002802:	e01f      	b.n	8002844 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002808:	2b00      	cmp	r3, #0
 800280a:	d01b      	beq.n	8002844 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	4798      	blx	r3
 8002814:	e016      	b.n	8002844 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002820:	2b00      	cmp	r3, #0
 8002822:	d107      	bne.n	8002834 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f022 0208 	bic.w	r2, r2, #8
 8002832:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002838:	2b00      	cmp	r3, #0
 800283a:	d003      	beq.n	8002844 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002848:	2220      	movs	r2, #32
 800284a:	409a      	lsls	r2, r3
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	4013      	ands	r3, r2
 8002850:	2b00      	cmp	r3, #0
 8002852:	f000 808e 	beq.w	8002972 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0310 	and.w	r3, r3, #16
 8002860:	2b00      	cmp	r3, #0
 8002862:	f000 8086 	beq.w	8002972 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800286a:	2220      	movs	r2, #32
 800286c:	409a      	lsls	r2, r3
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002878:	b2db      	uxtb	r3, r3
 800287a:	2b05      	cmp	r3, #5
 800287c:	d136      	bne.n	80028ec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f022 0216 	bic.w	r2, r2, #22
 800288c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	695a      	ldr	r2, [r3, #20]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800289c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d103      	bne.n	80028ae <HAL_DMA_IRQHandler+0x1da>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d007      	beq.n	80028be <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f022 0208 	bic.w	r2, r2, #8
 80028bc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028c2:	223f      	movs	r2, #63	; 0x3f
 80028c4:	409a      	lsls	r2, r3
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2201      	movs	r2, #1
 80028d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d07d      	beq.n	80029de <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	4798      	blx	r3
        }
        return;
 80028ea:	e078      	b.n	80029de <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d01c      	beq.n	8002934 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d108      	bne.n	800291a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290c:	2b00      	cmp	r3, #0
 800290e:	d030      	beq.n	8002972 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	4798      	blx	r3
 8002918:	e02b      	b.n	8002972 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800291e:	2b00      	cmp	r3, #0
 8002920:	d027      	beq.n	8002972 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	4798      	blx	r3
 800292a:	e022      	b.n	8002972 <HAL_DMA_IRQHandler+0x29e>
 800292c:	20000000 	.word	0x20000000
 8002930:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800293e:	2b00      	cmp	r3, #0
 8002940:	d10f      	bne.n	8002962 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f022 0210 	bic.w	r2, r2, #16
 8002950:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2201      	movs	r2, #1
 800295e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002966:	2b00      	cmp	r3, #0
 8002968:	d003      	beq.n	8002972 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002976:	2b00      	cmp	r3, #0
 8002978:	d032      	beq.n	80029e0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800297e:	f003 0301 	and.w	r3, r3, #1
 8002982:	2b00      	cmp	r3, #0
 8002984:	d022      	beq.n	80029cc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2205      	movs	r2, #5
 800298a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f022 0201 	bic.w	r2, r2, #1
 800299c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	3301      	adds	r3, #1
 80029a2:	60bb      	str	r3, [r7, #8]
 80029a4:	697a      	ldr	r2, [r7, #20]
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d307      	bcc.n	80029ba <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0301 	and.w	r3, r3, #1
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d1f2      	bne.n	800299e <HAL_DMA_IRQHandler+0x2ca>
 80029b8:	e000      	b.n	80029bc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80029ba:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d005      	beq.n	80029e0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	4798      	blx	r3
 80029dc:	e000      	b.n	80029e0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80029de:	bf00      	nop
    }
  }
}
 80029e0:	3718      	adds	r7, #24
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop

080029e8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b085      	sub	sp, #20
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]
 80029f4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002a04:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	683a      	ldr	r2, [r7, #0]
 8002a0c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	2b40      	cmp	r3, #64	; 0x40
 8002a14:	d108      	bne.n	8002a28 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	68ba      	ldr	r2, [r7, #8]
 8002a24:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002a26:	e007      	b.n	8002a38 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	68ba      	ldr	r2, [r7, #8]
 8002a2e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	60da      	str	r2, [r3, #12]
}
 8002a38:	bf00      	nop
 8002a3a:	3714      	adds	r7, #20
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr

08002a44 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b085      	sub	sp, #20
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	3b10      	subs	r3, #16
 8002a54:	4a14      	ldr	r2, [pc, #80]	; (8002aa8 <DMA_CalcBaseAndBitshift+0x64>)
 8002a56:	fba2 2303 	umull	r2, r3, r2, r3
 8002a5a:	091b      	lsrs	r3, r3, #4
 8002a5c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002a5e:	4a13      	ldr	r2, [pc, #76]	; (8002aac <DMA_CalcBaseAndBitshift+0x68>)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	4413      	add	r3, r2
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	461a      	mov	r2, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2b03      	cmp	r3, #3
 8002a70:	d909      	bls.n	8002a86 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a7a:	f023 0303 	bic.w	r3, r3, #3
 8002a7e:	1d1a      	adds	r2, r3, #4
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	659a      	str	r2, [r3, #88]	; 0x58
 8002a84:	e007      	b.n	8002a96 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a8e:	f023 0303 	bic.w	r3, r3, #3
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3714      	adds	r7, #20
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	aaaaaaab 	.word	0xaaaaaaab
 8002aac:	08004cd4 	.word	0x08004cd4

08002ab0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b085      	sub	sp, #20
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	699b      	ldr	r3, [r3, #24]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d11f      	bne.n	8002b0a <DMA_CheckFifoParam+0x5a>
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	2b03      	cmp	r3, #3
 8002ace:	d856      	bhi.n	8002b7e <DMA_CheckFifoParam+0xce>
 8002ad0:	a201      	add	r2, pc, #4	; (adr r2, 8002ad8 <DMA_CheckFifoParam+0x28>)
 8002ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ad6:	bf00      	nop
 8002ad8:	08002ae9 	.word	0x08002ae9
 8002adc:	08002afb 	.word	0x08002afb
 8002ae0:	08002ae9 	.word	0x08002ae9
 8002ae4:	08002b7f 	.word	0x08002b7f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d046      	beq.n	8002b82 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002af8:	e043      	b.n	8002b82 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002afe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b02:	d140      	bne.n	8002b86 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b08:	e03d      	b.n	8002b86 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b12:	d121      	bne.n	8002b58 <DMA_CheckFifoParam+0xa8>
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	2b03      	cmp	r3, #3
 8002b18:	d837      	bhi.n	8002b8a <DMA_CheckFifoParam+0xda>
 8002b1a:	a201      	add	r2, pc, #4	; (adr r2, 8002b20 <DMA_CheckFifoParam+0x70>)
 8002b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b20:	08002b31 	.word	0x08002b31
 8002b24:	08002b37 	.word	0x08002b37
 8002b28:	08002b31 	.word	0x08002b31
 8002b2c:	08002b49 	.word	0x08002b49
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	73fb      	strb	r3, [r7, #15]
      break;
 8002b34:	e030      	b.n	8002b98 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d025      	beq.n	8002b8e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b46:	e022      	b.n	8002b8e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b4c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b50:	d11f      	bne.n	8002b92 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002b56:	e01c      	b.n	8002b92 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d903      	bls.n	8002b66 <DMA_CheckFifoParam+0xb6>
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	2b03      	cmp	r3, #3
 8002b62:	d003      	beq.n	8002b6c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002b64:	e018      	b.n	8002b98 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	73fb      	strb	r3, [r7, #15]
      break;
 8002b6a:	e015      	b.n	8002b98 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d00e      	beq.n	8002b96 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	73fb      	strb	r3, [r7, #15]
      break;
 8002b7c:	e00b      	b.n	8002b96 <DMA_CheckFifoParam+0xe6>
      break;
 8002b7e:	bf00      	nop
 8002b80:	e00a      	b.n	8002b98 <DMA_CheckFifoParam+0xe8>
      break;
 8002b82:	bf00      	nop
 8002b84:	e008      	b.n	8002b98 <DMA_CheckFifoParam+0xe8>
      break;
 8002b86:	bf00      	nop
 8002b88:	e006      	b.n	8002b98 <DMA_CheckFifoParam+0xe8>
      break;
 8002b8a:	bf00      	nop
 8002b8c:	e004      	b.n	8002b98 <DMA_CheckFifoParam+0xe8>
      break;
 8002b8e:	bf00      	nop
 8002b90:	e002      	b.n	8002b98 <DMA_CheckFifoParam+0xe8>
      break;   
 8002b92:	bf00      	nop
 8002b94:	e000      	b.n	8002b98 <DMA_CheckFifoParam+0xe8>
      break;
 8002b96:	bf00      	nop
    }
  } 
  
  return status; 
 8002b98:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3714      	adds	r7, #20
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop

08002ba8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b089      	sub	sp, #36	; 0x24
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	61fb      	str	r3, [r7, #28]
 8002bc2:	e177      	b.n	8002eb4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bcc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	697a      	ldr	r2, [r7, #20]
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002bd8:	693a      	ldr	r2, [r7, #16]
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	f040 8166 	bne.w	8002eae <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d00b      	beq.n	8002c02 <HAL_GPIO_Init+0x5a>
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d007      	beq.n	8002c02 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002bf6:	2b11      	cmp	r3, #17
 8002bf8:	d003      	beq.n	8002c02 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	2b12      	cmp	r3, #18
 8002c00:	d130      	bne.n	8002c64 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	005b      	lsls	r3, r3, #1
 8002c0c:	2203      	movs	r2, #3
 8002c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c12:	43db      	mvns	r3, r3
 8002c14:	69ba      	ldr	r2, [r7, #24]
 8002c16:	4013      	ands	r3, r2
 8002c18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	68da      	ldr	r2, [r3, #12]
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	005b      	lsls	r3, r3, #1
 8002c22:	fa02 f303 	lsl.w	r3, r2, r3
 8002c26:	69ba      	ldr	r2, [r7, #24]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	69ba      	ldr	r2, [r7, #24]
 8002c30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c38:	2201      	movs	r2, #1
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c40:	43db      	mvns	r3, r3
 8002c42:	69ba      	ldr	r2, [r7, #24]
 8002c44:	4013      	ands	r3, r2
 8002c46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	091b      	lsrs	r3, r3, #4
 8002c4e:	f003 0201 	and.w	r2, r3, #1
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	fa02 f303 	lsl.w	r3, r2, r3
 8002c58:	69ba      	ldr	r2, [r7, #24]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	69ba      	ldr	r2, [r7, #24]
 8002c62:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	005b      	lsls	r3, r3, #1
 8002c6e:	2203      	movs	r2, #3
 8002c70:	fa02 f303 	lsl.w	r3, r2, r3
 8002c74:	43db      	mvns	r3, r3
 8002c76:	69ba      	ldr	r2, [r7, #24]
 8002c78:	4013      	ands	r3, r2
 8002c7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	689a      	ldr	r2, [r3, #8]
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	005b      	lsls	r3, r3, #1
 8002c84:	fa02 f303 	lsl.w	r3, r2, r3
 8002c88:	69ba      	ldr	r2, [r7, #24]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	69ba      	ldr	r2, [r7, #24]
 8002c92:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	d003      	beq.n	8002ca4 <HAL_GPIO_Init+0xfc>
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	2b12      	cmp	r3, #18
 8002ca2:	d123      	bne.n	8002cec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	08da      	lsrs	r2, r3, #3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	3208      	adds	r2, #8
 8002cac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	f003 0307 	and.w	r3, r3, #7
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	220f      	movs	r2, #15
 8002cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc0:	43db      	mvns	r3, r3
 8002cc2:	69ba      	ldr	r2, [r7, #24]
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	691a      	ldr	r2, [r3, #16]
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	f003 0307 	and.w	r3, r3, #7
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	08da      	lsrs	r2, r3, #3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	3208      	adds	r2, #8
 8002ce6:	69b9      	ldr	r1, [r7, #24]
 8002ce8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	005b      	lsls	r3, r3, #1
 8002cf6:	2203      	movs	r2, #3
 8002cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfc:	43db      	mvns	r3, r3
 8002cfe:	69ba      	ldr	r2, [r7, #24]
 8002d00:	4013      	ands	r3, r2
 8002d02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f003 0203 	and.w	r2, r3, #3
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	005b      	lsls	r3, r3, #1
 8002d10:	fa02 f303 	lsl.w	r3, r2, r3
 8002d14:	69ba      	ldr	r2, [r7, #24]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	69ba      	ldr	r2, [r7, #24]
 8002d1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	f000 80c0 	beq.w	8002eae <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d2e:	2300      	movs	r3, #0
 8002d30:	60fb      	str	r3, [r7, #12]
 8002d32:	4b66      	ldr	r3, [pc, #408]	; (8002ecc <HAL_GPIO_Init+0x324>)
 8002d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d36:	4a65      	ldr	r2, [pc, #404]	; (8002ecc <HAL_GPIO_Init+0x324>)
 8002d38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d3c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d3e:	4b63      	ldr	r3, [pc, #396]	; (8002ecc <HAL_GPIO_Init+0x324>)
 8002d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d46:	60fb      	str	r3, [r7, #12]
 8002d48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d4a:	4a61      	ldr	r2, [pc, #388]	; (8002ed0 <HAL_GPIO_Init+0x328>)
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	089b      	lsrs	r3, r3, #2
 8002d50:	3302      	adds	r3, #2
 8002d52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	f003 0303 	and.w	r3, r3, #3
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	220f      	movs	r2, #15
 8002d62:	fa02 f303 	lsl.w	r3, r2, r3
 8002d66:	43db      	mvns	r3, r3
 8002d68:	69ba      	ldr	r2, [r7, #24]
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a58      	ldr	r2, [pc, #352]	; (8002ed4 <HAL_GPIO_Init+0x32c>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d037      	beq.n	8002de6 <HAL_GPIO_Init+0x23e>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a57      	ldr	r2, [pc, #348]	; (8002ed8 <HAL_GPIO_Init+0x330>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d031      	beq.n	8002de2 <HAL_GPIO_Init+0x23a>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a56      	ldr	r2, [pc, #344]	; (8002edc <HAL_GPIO_Init+0x334>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d02b      	beq.n	8002dde <HAL_GPIO_Init+0x236>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a55      	ldr	r2, [pc, #340]	; (8002ee0 <HAL_GPIO_Init+0x338>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d025      	beq.n	8002dda <HAL_GPIO_Init+0x232>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a54      	ldr	r2, [pc, #336]	; (8002ee4 <HAL_GPIO_Init+0x33c>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d01f      	beq.n	8002dd6 <HAL_GPIO_Init+0x22e>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a53      	ldr	r2, [pc, #332]	; (8002ee8 <HAL_GPIO_Init+0x340>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d019      	beq.n	8002dd2 <HAL_GPIO_Init+0x22a>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a52      	ldr	r2, [pc, #328]	; (8002eec <HAL_GPIO_Init+0x344>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d013      	beq.n	8002dce <HAL_GPIO_Init+0x226>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a51      	ldr	r2, [pc, #324]	; (8002ef0 <HAL_GPIO_Init+0x348>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d00d      	beq.n	8002dca <HAL_GPIO_Init+0x222>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a50      	ldr	r2, [pc, #320]	; (8002ef4 <HAL_GPIO_Init+0x34c>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d007      	beq.n	8002dc6 <HAL_GPIO_Init+0x21e>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a4f      	ldr	r2, [pc, #316]	; (8002ef8 <HAL_GPIO_Init+0x350>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d101      	bne.n	8002dc2 <HAL_GPIO_Init+0x21a>
 8002dbe:	2309      	movs	r3, #9
 8002dc0:	e012      	b.n	8002de8 <HAL_GPIO_Init+0x240>
 8002dc2:	230a      	movs	r3, #10
 8002dc4:	e010      	b.n	8002de8 <HAL_GPIO_Init+0x240>
 8002dc6:	2308      	movs	r3, #8
 8002dc8:	e00e      	b.n	8002de8 <HAL_GPIO_Init+0x240>
 8002dca:	2307      	movs	r3, #7
 8002dcc:	e00c      	b.n	8002de8 <HAL_GPIO_Init+0x240>
 8002dce:	2306      	movs	r3, #6
 8002dd0:	e00a      	b.n	8002de8 <HAL_GPIO_Init+0x240>
 8002dd2:	2305      	movs	r3, #5
 8002dd4:	e008      	b.n	8002de8 <HAL_GPIO_Init+0x240>
 8002dd6:	2304      	movs	r3, #4
 8002dd8:	e006      	b.n	8002de8 <HAL_GPIO_Init+0x240>
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e004      	b.n	8002de8 <HAL_GPIO_Init+0x240>
 8002dde:	2302      	movs	r3, #2
 8002de0:	e002      	b.n	8002de8 <HAL_GPIO_Init+0x240>
 8002de2:	2301      	movs	r3, #1
 8002de4:	e000      	b.n	8002de8 <HAL_GPIO_Init+0x240>
 8002de6:	2300      	movs	r3, #0
 8002de8:	69fa      	ldr	r2, [r7, #28]
 8002dea:	f002 0203 	and.w	r2, r2, #3
 8002dee:	0092      	lsls	r2, r2, #2
 8002df0:	4093      	lsls	r3, r2
 8002df2:	69ba      	ldr	r2, [r7, #24]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002df8:	4935      	ldr	r1, [pc, #212]	; (8002ed0 <HAL_GPIO_Init+0x328>)
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	089b      	lsrs	r3, r3, #2
 8002dfe:	3302      	adds	r3, #2
 8002e00:	69ba      	ldr	r2, [r7, #24]
 8002e02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e06:	4b3d      	ldr	r3, [pc, #244]	; (8002efc <HAL_GPIO_Init+0x354>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	43db      	mvns	r3, r3
 8002e10:	69ba      	ldr	r2, [r7, #24]
 8002e12:	4013      	ands	r3, r2
 8002e14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d003      	beq.n	8002e2a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002e22:	69ba      	ldr	r2, [r7, #24]
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e2a:	4a34      	ldr	r2, [pc, #208]	; (8002efc <HAL_GPIO_Init+0x354>)
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002e30:	4b32      	ldr	r3, [pc, #200]	; (8002efc <HAL_GPIO_Init+0x354>)
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	43db      	mvns	r3, r3
 8002e3a:	69ba      	ldr	r2, [r7, #24]
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d003      	beq.n	8002e54 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002e4c:	69ba      	ldr	r2, [r7, #24]
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e54:	4a29      	ldr	r2, [pc, #164]	; (8002efc <HAL_GPIO_Init+0x354>)
 8002e56:	69bb      	ldr	r3, [r7, #24]
 8002e58:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e5a:	4b28      	ldr	r3, [pc, #160]	; (8002efc <HAL_GPIO_Init+0x354>)
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	43db      	mvns	r3, r3
 8002e64:	69ba      	ldr	r2, [r7, #24]
 8002e66:	4013      	ands	r3, r2
 8002e68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d003      	beq.n	8002e7e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002e76:	69ba      	ldr	r2, [r7, #24]
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e7e:	4a1f      	ldr	r2, [pc, #124]	; (8002efc <HAL_GPIO_Init+0x354>)
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e84:	4b1d      	ldr	r3, [pc, #116]	; (8002efc <HAL_GPIO_Init+0x354>)
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	43db      	mvns	r3, r3
 8002e8e:	69ba      	ldr	r2, [r7, #24]
 8002e90:	4013      	ands	r3, r2
 8002e92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d003      	beq.n	8002ea8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002ea0:	69ba      	ldr	r2, [r7, #24]
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ea8:	4a14      	ldr	r2, [pc, #80]	; (8002efc <HAL_GPIO_Init+0x354>)
 8002eaa:	69bb      	ldr	r3, [r7, #24]
 8002eac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	3301      	adds	r3, #1
 8002eb2:	61fb      	str	r3, [r7, #28]
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	2b0f      	cmp	r3, #15
 8002eb8:	f67f ae84 	bls.w	8002bc4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ebc:	bf00      	nop
 8002ebe:	bf00      	nop
 8002ec0:	3724      	adds	r7, #36	; 0x24
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	40023800 	.word	0x40023800
 8002ed0:	40013800 	.word	0x40013800
 8002ed4:	40020000 	.word	0x40020000
 8002ed8:	40020400 	.word	0x40020400
 8002edc:	40020800 	.word	0x40020800
 8002ee0:	40020c00 	.word	0x40020c00
 8002ee4:	40021000 	.word	0x40021000
 8002ee8:	40021400 	.word	0x40021400
 8002eec:	40021800 	.word	0x40021800
 8002ef0:	40021c00 	.word	0x40021c00
 8002ef4:	40022000 	.word	0x40022000
 8002ef8:	40022400 	.word	0x40022400
 8002efc:	40013c00 	.word	0x40013c00

08002f00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	460b      	mov	r3, r1
 8002f0a:	807b      	strh	r3, [r7, #2]
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f10:	787b      	ldrb	r3, [r7, #1]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d003      	beq.n	8002f1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f16:	887a      	ldrh	r2, [r7, #2]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f1c:	e003      	b.n	8002f26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f1e:	887b      	ldrh	r3, [r7, #2]
 8002f20:	041a      	lsls	r2, r3, #16
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	619a      	str	r2, [r3, #24]
}
 8002f26:	bf00      	nop
 8002f28:	370c      	adds	r7, #12
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr
	...

08002f34 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b086      	sub	sp, #24
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d101      	bne.n	8002f46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e25b      	b.n	80033fe <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0301 	and.w	r3, r3, #1
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d075      	beq.n	800303e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f52:	4ba3      	ldr	r3, [pc, #652]	; (80031e0 <HAL_RCC_OscConfig+0x2ac>)
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	f003 030c 	and.w	r3, r3, #12
 8002f5a:	2b04      	cmp	r3, #4
 8002f5c:	d00c      	beq.n	8002f78 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f5e:	4ba0      	ldr	r3, [pc, #640]	; (80031e0 <HAL_RCC_OscConfig+0x2ac>)
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f66:	2b08      	cmp	r3, #8
 8002f68:	d112      	bne.n	8002f90 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f6a:	4b9d      	ldr	r3, [pc, #628]	; (80031e0 <HAL_RCC_OscConfig+0x2ac>)
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f76:	d10b      	bne.n	8002f90 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f78:	4b99      	ldr	r3, [pc, #612]	; (80031e0 <HAL_RCC_OscConfig+0x2ac>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d05b      	beq.n	800303c <HAL_RCC_OscConfig+0x108>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d157      	bne.n	800303c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e236      	b.n	80033fe <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f98:	d106      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x74>
 8002f9a:	4b91      	ldr	r3, [pc, #580]	; (80031e0 <HAL_RCC_OscConfig+0x2ac>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a90      	ldr	r2, [pc, #576]	; (80031e0 <HAL_RCC_OscConfig+0x2ac>)
 8002fa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fa4:	6013      	str	r3, [r2, #0]
 8002fa6:	e01d      	b.n	8002fe4 <HAL_RCC_OscConfig+0xb0>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fb0:	d10c      	bne.n	8002fcc <HAL_RCC_OscConfig+0x98>
 8002fb2:	4b8b      	ldr	r3, [pc, #556]	; (80031e0 <HAL_RCC_OscConfig+0x2ac>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a8a      	ldr	r2, [pc, #552]	; (80031e0 <HAL_RCC_OscConfig+0x2ac>)
 8002fb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fbc:	6013      	str	r3, [r2, #0]
 8002fbe:	4b88      	ldr	r3, [pc, #544]	; (80031e0 <HAL_RCC_OscConfig+0x2ac>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a87      	ldr	r2, [pc, #540]	; (80031e0 <HAL_RCC_OscConfig+0x2ac>)
 8002fc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fc8:	6013      	str	r3, [r2, #0]
 8002fca:	e00b      	b.n	8002fe4 <HAL_RCC_OscConfig+0xb0>
 8002fcc:	4b84      	ldr	r3, [pc, #528]	; (80031e0 <HAL_RCC_OscConfig+0x2ac>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a83      	ldr	r2, [pc, #524]	; (80031e0 <HAL_RCC_OscConfig+0x2ac>)
 8002fd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fd6:	6013      	str	r3, [r2, #0]
 8002fd8:	4b81      	ldr	r3, [pc, #516]	; (80031e0 <HAL_RCC_OscConfig+0x2ac>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a80      	ldr	r2, [pc, #512]	; (80031e0 <HAL_RCC_OscConfig+0x2ac>)
 8002fde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fe2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d013      	beq.n	8003014 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fec:	f7fe fdd6 	bl	8001b9c <HAL_GetTick>
 8002ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ff2:	e008      	b.n	8003006 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ff4:	f7fe fdd2 	bl	8001b9c <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	2b64      	cmp	r3, #100	; 0x64
 8003000:	d901      	bls.n	8003006 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e1fb      	b.n	80033fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003006:	4b76      	ldr	r3, [pc, #472]	; (80031e0 <HAL_RCC_OscConfig+0x2ac>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d0f0      	beq.n	8002ff4 <HAL_RCC_OscConfig+0xc0>
 8003012:	e014      	b.n	800303e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003014:	f7fe fdc2 	bl	8001b9c <HAL_GetTick>
 8003018:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800301a:	e008      	b.n	800302e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800301c:	f7fe fdbe 	bl	8001b9c <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	2b64      	cmp	r3, #100	; 0x64
 8003028:	d901      	bls.n	800302e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e1e7      	b.n	80033fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800302e:	4b6c      	ldr	r3, [pc, #432]	; (80031e0 <HAL_RCC_OscConfig+0x2ac>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d1f0      	bne.n	800301c <HAL_RCC_OscConfig+0xe8>
 800303a:	e000      	b.n	800303e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800303c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0302 	and.w	r3, r3, #2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d063      	beq.n	8003112 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800304a:	4b65      	ldr	r3, [pc, #404]	; (80031e0 <HAL_RCC_OscConfig+0x2ac>)
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f003 030c 	and.w	r3, r3, #12
 8003052:	2b00      	cmp	r3, #0
 8003054:	d00b      	beq.n	800306e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003056:	4b62      	ldr	r3, [pc, #392]	; (80031e0 <HAL_RCC_OscConfig+0x2ac>)
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800305e:	2b08      	cmp	r3, #8
 8003060:	d11c      	bne.n	800309c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003062:	4b5f      	ldr	r3, [pc, #380]	; (80031e0 <HAL_RCC_OscConfig+0x2ac>)
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d116      	bne.n	800309c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800306e:	4b5c      	ldr	r3, [pc, #368]	; (80031e0 <HAL_RCC_OscConfig+0x2ac>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0302 	and.w	r3, r3, #2
 8003076:	2b00      	cmp	r3, #0
 8003078:	d005      	beq.n	8003086 <HAL_RCC_OscConfig+0x152>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	2b01      	cmp	r3, #1
 8003080:	d001      	beq.n	8003086 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e1bb      	b.n	80033fe <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003086:	4b56      	ldr	r3, [pc, #344]	; (80031e0 <HAL_RCC_OscConfig+0x2ac>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	00db      	lsls	r3, r3, #3
 8003094:	4952      	ldr	r1, [pc, #328]	; (80031e0 <HAL_RCC_OscConfig+0x2ac>)
 8003096:	4313      	orrs	r3, r2
 8003098:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800309a:	e03a      	b.n	8003112 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d020      	beq.n	80030e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030a4:	4b4f      	ldr	r3, [pc, #316]	; (80031e4 <HAL_RCC_OscConfig+0x2b0>)
 80030a6:	2201      	movs	r2, #1
 80030a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030aa:	f7fe fd77 	bl	8001b9c <HAL_GetTick>
 80030ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030b0:	e008      	b.n	80030c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030b2:	f7fe fd73 	bl	8001b9c <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d901      	bls.n	80030c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80030c0:	2303      	movs	r3, #3
 80030c2:	e19c      	b.n	80033fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030c4:	4b46      	ldr	r3, [pc, #280]	; (80031e0 <HAL_RCC_OscConfig+0x2ac>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0302 	and.w	r3, r3, #2
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d0f0      	beq.n	80030b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030d0:	4b43      	ldr	r3, [pc, #268]	; (80031e0 <HAL_RCC_OscConfig+0x2ac>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	691b      	ldr	r3, [r3, #16]
 80030dc:	00db      	lsls	r3, r3, #3
 80030de:	4940      	ldr	r1, [pc, #256]	; (80031e0 <HAL_RCC_OscConfig+0x2ac>)
 80030e0:	4313      	orrs	r3, r2
 80030e2:	600b      	str	r3, [r1, #0]
 80030e4:	e015      	b.n	8003112 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030e6:	4b3f      	ldr	r3, [pc, #252]	; (80031e4 <HAL_RCC_OscConfig+0x2b0>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ec:	f7fe fd56 	bl	8001b9c <HAL_GetTick>
 80030f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030f2:	e008      	b.n	8003106 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030f4:	f7fe fd52 	bl	8001b9c <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d901      	bls.n	8003106 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e17b      	b.n	80033fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003106:	4b36      	ldr	r3, [pc, #216]	; (80031e0 <HAL_RCC_OscConfig+0x2ac>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0302 	and.w	r3, r3, #2
 800310e:	2b00      	cmp	r3, #0
 8003110:	d1f0      	bne.n	80030f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0308 	and.w	r3, r3, #8
 800311a:	2b00      	cmp	r3, #0
 800311c:	d030      	beq.n	8003180 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	695b      	ldr	r3, [r3, #20]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d016      	beq.n	8003154 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003126:	4b30      	ldr	r3, [pc, #192]	; (80031e8 <HAL_RCC_OscConfig+0x2b4>)
 8003128:	2201      	movs	r2, #1
 800312a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800312c:	f7fe fd36 	bl	8001b9c <HAL_GetTick>
 8003130:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003132:	e008      	b.n	8003146 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003134:	f7fe fd32 	bl	8001b9c <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	2b02      	cmp	r3, #2
 8003140:	d901      	bls.n	8003146 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e15b      	b.n	80033fe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003146:	4b26      	ldr	r3, [pc, #152]	; (80031e0 <HAL_RCC_OscConfig+0x2ac>)
 8003148:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800314a:	f003 0302 	and.w	r3, r3, #2
 800314e:	2b00      	cmp	r3, #0
 8003150:	d0f0      	beq.n	8003134 <HAL_RCC_OscConfig+0x200>
 8003152:	e015      	b.n	8003180 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003154:	4b24      	ldr	r3, [pc, #144]	; (80031e8 <HAL_RCC_OscConfig+0x2b4>)
 8003156:	2200      	movs	r2, #0
 8003158:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800315a:	f7fe fd1f 	bl	8001b9c <HAL_GetTick>
 800315e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003160:	e008      	b.n	8003174 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003162:	f7fe fd1b 	bl	8001b9c <HAL_GetTick>
 8003166:	4602      	mov	r2, r0
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	2b02      	cmp	r3, #2
 800316e:	d901      	bls.n	8003174 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003170:	2303      	movs	r3, #3
 8003172:	e144      	b.n	80033fe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003174:	4b1a      	ldr	r3, [pc, #104]	; (80031e0 <HAL_RCC_OscConfig+0x2ac>)
 8003176:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003178:	f003 0302 	and.w	r3, r3, #2
 800317c:	2b00      	cmp	r3, #0
 800317e:	d1f0      	bne.n	8003162 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0304 	and.w	r3, r3, #4
 8003188:	2b00      	cmp	r3, #0
 800318a:	f000 80a0 	beq.w	80032ce <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800318e:	2300      	movs	r3, #0
 8003190:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003192:	4b13      	ldr	r3, [pc, #76]	; (80031e0 <HAL_RCC_OscConfig+0x2ac>)
 8003194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d10f      	bne.n	80031be <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800319e:	2300      	movs	r3, #0
 80031a0:	60bb      	str	r3, [r7, #8]
 80031a2:	4b0f      	ldr	r3, [pc, #60]	; (80031e0 <HAL_RCC_OscConfig+0x2ac>)
 80031a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a6:	4a0e      	ldr	r2, [pc, #56]	; (80031e0 <HAL_RCC_OscConfig+0x2ac>)
 80031a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031ac:	6413      	str	r3, [r2, #64]	; 0x40
 80031ae:	4b0c      	ldr	r3, [pc, #48]	; (80031e0 <HAL_RCC_OscConfig+0x2ac>)
 80031b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031b6:	60bb      	str	r3, [r7, #8]
 80031b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031ba:	2301      	movs	r3, #1
 80031bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031be:	4b0b      	ldr	r3, [pc, #44]	; (80031ec <HAL_RCC_OscConfig+0x2b8>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d121      	bne.n	800320e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031ca:	4b08      	ldr	r3, [pc, #32]	; (80031ec <HAL_RCC_OscConfig+0x2b8>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a07      	ldr	r2, [pc, #28]	; (80031ec <HAL_RCC_OscConfig+0x2b8>)
 80031d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031d6:	f7fe fce1 	bl	8001b9c <HAL_GetTick>
 80031da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031dc:	e011      	b.n	8003202 <HAL_RCC_OscConfig+0x2ce>
 80031de:	bf00      	nop
 80031e0:	40023800 	.word	0x40023800
 80031e4:	42470000 	.word	0x42470000
 80031e8:	42470e80 	.word	0x42470e80
 80031ec:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031f0:	f7fe fcd4 	bl	8001b9c <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e0fd      	b.n	80033fe <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003202:	4b81      	ldr	r3, [pc, #516]	; (8003408 <HAL_RCC_OscConfig+0x4d4>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800320a:	2b00      	cmp	r3, #0
 800320c:	d0f0      	beq.n	80031f0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	2b01      	cmp	r3, #1
 8003214:	d106      	bne.n	8003224 <HAL_RCC_OscConfig+0x2f0>
 8003216:	4b7d      	ldr	r3, [pc, #500]	; (800340c <HAL_RCC_OscConfig+0x4d8>)
 8003218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800321a:	4a7c      	ldr	r2, [pc, #496]	; (800340c <HAL_RCC_OscConfig+0x4d8>)
 800321c:	f043 0301 	orr.w	r3, r3, #1
 8003220:	6713      	str	r3, [r2, #112]	; 0x70
 8003222:	e01c      	b.n	800325e <HAL_RCC_OscConfig+0x32a>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	2b05      	cmp	r3, #5
 800322a:	d10c      	bne.n	8003246 <HAL_RCC_OscConfig+0x312>
 800322c:	4b77      	ldr	r3, [pc, #476]	; (800340c <HAL_RCC_OscConfig+0x4d8>)
 800322e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003230:	4a76      	ldr	r2, [pc, #472]	; (800340c <HAL_RCC_OscConfig+0x4d8>)
 8003232:	f043 0304 	orr.w	r3, r3, #4
 8003236:	6713      	str	r3, [r2, #112]	; 0x70
 8003238:	4b74      	ldr	r3, [pc, #464]	; (800340c <HAL_RCC_OscConfig+0x4d8>)
 800323a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800323c:	4a73      	ldr	r2, [pc, #460]	; (800340c <HAL_RCC_OscConfig+0x4d8>)
 800323e:	f043 0301 	orr.w	r3, r3, #1
 8003242:	6713      	str	r3, [r2, #112]	; 0x70
 8003244:	e00b      	b.n	800325e <HAL_RCC_OscConfig+0x32a>
 8003246:	4b71      	ldr	r3, [pc, #452]	; (800340c <HAL_RCC_OscConfig+0x4d8>)
 8003248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800324a:	4a70      	ldr	r2, [pc, #448]	; (800340c <HAL_RCC_OscConfig+0x4d8>)
 800324c:	f023 0301 	bic.w	r3, r3, #1
 8003250:	6713      	str	r3, [r2, #112]	; 0x70
 8003252:	4b6e      	ldr	r3, [pc, #440]	; (800340c <HAL_RCC_OscConfig+0x4d8>)
 8003254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003256:	4a6d      	ldr	r2, [pc, #436]	; (800340c <HAL_RCC_OscConfig+0x4d8>)
 8003258:	f023 0304 	bic.w	r3, r3, #4
 800325c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d015      	beq.n	8003292 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003266:	f7fe fc99 	bl	8001b9c <HAL_GetTick>
 800326a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800326c:	e00a      	b.n	8003284 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800326e:	f7fe fc95 	bl	8001b9c <HAL_GetTick>
 8003272:	4602      	mov	r2, r0
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	f241 3288 	movw	r2, #5000	; 0x1388
 800327c:	4293      	cmp	r3, r2
 800327e:	d901      	bls.n	8003284 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	e0bc      	b.n	80033fe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003284:	4b61      	ldr	r3, [pc, #388]	; (800340c <HAL_RCC_OscConfig+0x4d8>)
 8003286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003288:	f003 0302 	and.w	r3, r3, #2
 800328c:	2b00      	cmp	r3, #0
 800328e:	d0ee      	beq.n	800326e <HAL_RCC_OscConfig+0x33a>
 8003290:	e014      	b.n	80032bc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003292:	f7fe fc83 	bl	8001b9c <HAL_GetTick>
 8003296:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003298:	e00a      	b.n	80032b0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800329a:	f7fe fc7f 	bl	8001b9c <HAL_GetTick>
 800329e:	4602      	mov	r2, r0
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d901      	bls.n	80032b0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80032ac:	2303      	movs	r3, #3
 80032ae:	e0a6      	b.n	80033fe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032b0:	4b56      	ldr	r3, [pc, #344]	; (800340c <HAL_RCC_OscConfig+0x4d8>)
 80032b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b4:	f003 0302 	and.w	r3, r3, #2
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d1ee      	bne.n	800329a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032bc:	7dfb      	ldrb	r3, [r7, #23]
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d105      	bne.n	80032ce <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032c2:	4b52      	ldr	r3, [pc, #328]	; (800340c <HAL_RCC_OscConfig+0x4d8>)
 80032c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c6:	4a51      	ldr	r2, [pc, #324]	; (800340c <HAL_RCC_OscConfig+0x4d8>)
 80032c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032cc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	699b      	ldr	r3, [r3, #24]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	f000 8092 	beq.w	80033fc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032d8:	4b4c      	ldr	r3, [pc, #304]	; (800340c <HAL_RCC_OscConfig+0x4d8>)
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	f003 030c 	and.w	r3, r3, #12
 80032e0:	2b08      	cmp	r3, #8
 80032e2:	d05c      	beq.n	800339e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	699b      	ldr	r3, [r3, #24]
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	d141      	bne.n	8003370 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032ec:	4b48      	ldr	r3, [pc, #288]	; (8003410 <HAL_RCC_OscConfig+0x4dc>)
 80032ee:	2200      	movs	r2, #0
 80032f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032f2:	f7fe fc53 	bl	8001b9c <HAL_GetTick>
 80032f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032f8:	e008      	b.n	800330c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032fa:	f7fe fc4f 	bl	8001b9c <HAL_GetTick>
 80032fe:	4602      	mov	r2, r0
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	2b02      	cmp	r3, #2
 8003306:	d901      	bls.n	800330c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	e078      	b.n	80033fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800330c:	4b3f      	ldr	r3, [pc, #252]	; (800340c <HAL_RCC_OscConfig+0x4d8>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d1f0      	bne.n	80032fa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	69da      	ldr	r2, [r3, #28]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a1b      	ldr	r3, [r3, #32]
 8003320:	431a      	orrs	r2, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003326:	019b      	lsls	r3, r3, #6
 8003328:	431a      	orrs	r2, r3
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800332e:	085b      	lsrs	r3, r3, #1
 8003330:	3b01      	subs	r3, #1
 8003332:	041b      	lsls	r3, r3, #16
 8003334:	431a      	orrs	r2, r3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800333a:	061b      	lsls	r3, r3, #24
 800333c:	4933      	ldr	r1, [pc, #204]	; (800340c <HAL_RCC_OscConfig+0x4d8>)
 800333e:	4313      	orrs	r3, r2
 8003340:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003342:	4b33      	ldr	r3, [pc, #204]	; (8003410 <HAL_RCC_OscConfig+0x4dc>)
 8003344:	2201      	movs	r2, #1
 8003346:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003348:	f7fe fc28 	bl	8001b9c <HAL_GetTick>
 800334c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800334e:	e008      	b.n	8003362 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003350:	f7fe fc24 	bl	8001b9c <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	2b02      	cmp	r3, #2
 800335c:	d901      	bls.n	8003362 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e04d      	b.n	80033fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003362:	4b2a      	ldr	r3, [pc, #168]	; (800340c <HAL_RCC_OscConfig+0x4d8>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d0f0      	beq.n	8003350 <HAL_RCC_OscConfig+0x41c>
 800336e:	e045      	b.n	80033fc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003370:	4b27      	ldr	r3, [pc, #156]	; (8003410 <HAL_RCC_OscConfig+0x4dc>)
 8003372:	2200      	movs	r2, #0
 8003374:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003376:	f7fe fc11 	bl	8001b9c <HAL_GetTick>
 800337a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800337c:	e008      	b.n	8003390 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800337e:	f7fe fc0d 	bl	8001b9c <HAL_GetTick>
 8003382:	4602      	mov	r2, r0
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	2b02      	cmp	r3, #2
 800338a:	d901      	bls.n	8003390 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	e036      	b.n	80033fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003390:	4b1e      	ldr	r3, [pc, #120]	; (800340c <HAL_RCC_OscConfig+0x4d8>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003398:	2b00      	cmp	r3, #0
 800339a:	d1f0      	bne.n	800337e <HAL_RCC_OscConfig+0x44a>
 800339c:	e02e      	b.n	80033fc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	699b      	ldr	r3, [r3, #24]
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d101      	bne.n	80033aa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e029      	b.n	80033fe <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80033aa:	4b18      	ldr	r3, [pc, #96]	; (800340c <HAL_RCC_OscConfig+0x4d8>)
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	69db      	ldr	r3, [r3, #28]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d11c      	bne.n	80033f8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d115      	bne.n	80033f8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80033cc:	68fa      	ldr	r2, [r7, #12]
 80033ce:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80033d2:	4013      	ands	r3, r2
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80033d8:	4293      	cmp	r3, r2
 80033da:	d10d      	bne.n	80033f8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d106      	bne.n	80033f8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d001      	beq.n	80033fc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e000      	b.n	80033fe <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3718      	adds	r7, #24
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	40007000 	.word	0x40007000
 800340c:	40023800 	.word	0x40023800
 8003410:	42470060 	.word	0x42470060

08003414 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d101      	bne.n	8003428 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e0cc      	b.n	80035c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003428:	4b68      	ldr	r3, [pc, #416]	; (80035cc <HAL_RCC_ClockConfig+0x1b8>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 030f 	and.w	r3, r3, #15
 8003430:	683a      	ldr	r2, [r7, #0]
 8003432:	429a      	cmp	r2, r3
 8003434:	d90c      	bls.n	8003450 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003436:	4b65      	ldr	r3, [pc, #404]	; (80035cc <HAL_RCC_ClockConfig+0x1b8>)
 8003438:	683a      	ldr	r2, [r7, #0]
 800343a:	b2d2      	uxtb	r2, r2
 800343c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800343e:	4b63      	ldr	r3, [pc, #396]	; (80035cc <HAL_RCC_ClockConfig+0x1b8>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 030f 	and.w	r3, r3, #15
 8003446:	683a      	ldr	r2, [r7, #0]
 8003448:	429a      	cmp	r2, r3
 800344a:	d001      	beq.n	8003450 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e0b8      	b.n	80035c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0302 	and.w	r3, r3, #2
 8003458:	2b00      	cmp	r3, #0
 800345a:	d020      	beq.n	800349e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0304 	and.w	r3, r3, #4
 8003464:	2b00      	cmp	r3, #0
 8003466:	d005      	beq.n	8003474 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003468:	4b59      	ldr	r3, [pc, #356]	; (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	4a58      	ldr	r2, [pc, #352]	; (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 800346e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003472:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0308 	and.w	r3, r3, #8
 800347c:	2b00      	cmp	r3, #0
 800347e:	d005      	beq.n	800348c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003480:	4b53      	ldr	r3, [pc, #332]	; (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	4a52      	ldr	r2, [pc, #328]	; (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003486:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800348a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800348c:	4b50      	ldr	r3, [pc, #320]	; (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	494d      	ldr	r1, [pc, #308]	; (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 800349a:	4313      	orrs	r3, r2
 800349c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0301 	and.w	r3, r3, #1
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d044      	beq.n	8003534 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d107      	bne.n	80034c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034b2:	4b47      	ldr	r3, [pc, #284]	; (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d119      	bne.n	80034f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e07f      	b.n	80035c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d003      	beq.n	80034d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034ce:	2b03      	cmp	r3, #3
 80034d0:	d107      	bne.n	80034e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034d2:	4b3f      	ldr	r3, [pc, #252]	; (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d109      	bne.n	80034f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e06f      	b.n	80035c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034e2:	4b3b      	ldr	r3, [pc, #236]	; (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0302 	and.w	r3, r3, #2
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d101      	bne.n	80034f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e067      	b.n	80035c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034f2:	4b37      	ldr	r3, [pc, #220]	; (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	f023 0203 	bic.w	r2, r3, #3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	4934      	ldr	r1, [pc, #208]	; (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003500:	4313      	orrs	r3, r2
 8003502:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003504:	f7fe fb4a 	bl	8001b9c <HAL_GetTick>
 8003508:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800350a:	e00a      	b.n	8003522 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800350c:	f7fe fb46 	bl	8001b9c <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	f241 3288 	movw	r2, #5000	; 0x1388
 800351a:	4293      	cmp	r3, r2
 800351c:	d901      	bls.n	8003522 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e04f      	b.n	80035c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003522:	4b2b      	ldr	r3, [pc, #172]	; (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	f003 020c 	and.w	r2, r3, #12
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	429a      	cmp	r2, r3
 8003532:	d1eb      	bne.n	800350c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003534:	4b25      	ldr	r3, [pc, #148]	; (80035cc <HAL_RCC_ClockConfig+0x1b8>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 030f 	and.w	r3, r3, #15
 800353c:	683a      	ldr	r2, [r7, #0]
 800353e:	429a      	cmp	r2, r3
 8003540:	d20c      	bcs.n	800355c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003542:	4b22      	ldr	r3, [pc, #136]	; (80035cc <HAL_RCC_ClockConfig+0x1b8>)
 8003544:	683a      	ldr	r2, [r7, #0]
 8003546:	b2d2      	uxtb	r2, r2
 8003548:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800354a:	4b20      	ldr	r3, [pc, #128]	; (80035cc <HAL_RCC_ClockConfig+0x1b8>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 030f 	and.w	r3, r3, #15
 8003552:	683a      	ldr	r2, [r7, #0]
 8003554:	429a      	cmp	r2, r3
 8003556:	d001      	beq.n	800355c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e032      	b.n	80035c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0304 	and.w	r3, r3, #4
 8003564:	2b00      	cmp	r3, #0
 8003566:	d008      	beq.n	800357a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003568:	4b19      	ldr	r3, [pc, #100]	; (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	4916      	ldr	r1, [pc, #88]	; (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003576:	4313      	orrs	r3, r2
 8003578:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0308 	and.w	r3, r3, #8
 8003582:	2b00      	cmp	r3, #0
 8003584:	d009      	beq.n	800359a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003586:	4b12      	ldr	r3, [pc, #72]	; (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	00db      	lsls	r3, r3, #3
 8003594:	490e      	ldr	r1, [pc, #56]	; (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003596:	4313      	orrs	r3, r2
 8003598:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800359a:	f000 f821 	bl	80035e0 <HAL_RCC_GetSysClockFreq>
 800359e:	4602      	mov	r2, r0
 80035a0:	4b0b      	ldr	r3, [pc, #44]	; (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	091b      	lsrs	r3, r3, #4
 80035a6:	f003 030f 	and.w	r3, r3, #15
 80035aa:	490a      	ldr	r1, [pc, #40]	; (80035d4 <HAL_RCC_ClockConfig+0x1c0>)
 80035ac:	5ccb      	ldrb	r3, [r1, r3]
 80035ae:	fa22 f303 	lsr.w	r3, r2, r3
 80035b2:	4a09      	ldr	r2, [pc, #36]	; (80035d8 <HAL_RCC_ClockConfig+0x1c4>)
 80035b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80035b6:	4b09      	ldr	r3, [pc, #36]	; (80035dc <HAL_RCC_ClockConfig+0x1c8>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4618      	mov	r0, r3
 80035bc:	f7fe faaa 	bl	8001b14 <HAL_InitTick>

  return HAL_OK;
 80035c0:	2300      	movs	r3, #0
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3710      	adds	r7, #16
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	40023c00 	.word	0x40023c00
 80035d0:	40023800 	.word	0x40023800
 80035d4:	08004cbc 	.word	0x08004cbc
 80035d8:	20000000 	.word	0x20000000
 80035dc:	20000004 	.word	0x20000004

080035e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035e0:	b5b0      	push	{r4, r5, r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80035e6:	2100      	movs	r1, #0
 80035e8:	6079      	str	r1, [r7, #4]
 80035ea:	2100      	movs	r1, #0
 80035ec:	60f9      	str	r1, [r7, #12]
 80035ee:	2100      	movs	r1, #0
 80035f0:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80035f2:	2100      	movs	r1, #0
 80035f4:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035f6:	4952      	ldr	r1, [pc, #328]	; (8003740 <HAL_RCC_GetSysClockFreq+0x160>)
 80035f8:	6889      	ldr	r1, [r1, #8]
 80035fa:	f001 010c 	and.w	r1, r1, #12
 80035fe:	2908      	cmp	r1, #8
 8003600:	d00d      	beq.n	800361e <HAL_RCC_GetSysClockFreq+0x3e>
 8003602:	2908      	cmp	r1, #8
 8003604:	f200 8094 	bhi.w	8003730 <HAL_RCC_GetSysClockFreq+0x150>
 8003608:	2900      	cmp	r1, #0
 800360a:	d002      	beq.n	8003612 <HAL_RCC_GetSysClockFreq+0x32>
 800360c:	2904      	cmp	r1, #4
 800360e:	d003      	beq.n	8003618 <HAL_RCC_GetSysClockFreq+0x38>
 8003610:	e08e      	b.n	8003730 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003612:	4b4c      	ldr	r3, [pc, #304]	; (8003744 <HAL_RCC_GetSysClockFreq+0x164>)
 8003614:	60bb      	str	r3, [r7, #8]
       break;
 8003616:	e08e      	b.n	8003736 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003618:	4b4b      	ldr	r3, [pc, #300]	; (8003748 <HAL_RCC_GetSysClockFreq+0x168>)
 800361a:	60bb      	str	r3, [r7, #8]
      break;
 800361c:	e08b      	b.n	8003736 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800361e:	4948      	ldr	r1, [pc, #288]	; (8003740 <HAL_RCC_GetSysClockFreq+0x160>)
 8003620:	6849      	ldr	r1, [r1, #4]
 8003622:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003626:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003628:	4945      	ldr	r1, [pc, #276]	; (8003740 <HAL_RCC_GetSysClockFreq+0x160>)
 800362a:	6849      	ldr	r1, [r1, #4]
 800362c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003630:	2900      	cmp	r1, #0
 8003632:	d024      	beq.n	800367e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003634:	4942      	ldr	r1, [pc, #264]	; (8003740 <HAL_RCC_GetSysClockFreq+0x160>)
 8003636:	6849      	ldr	r1, [r1, #4]
 8003638:	0989      	lsrs	r1, r1, #6
 800363a:	4608      	mov	r0, r1
 800363c:	f04f 0100 	mov.w	r1, #0
 8003640:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003644:	f04f 0500 	mov.w	r5, #0
 8003648:	ea00 0204 	and.w	r2, r0, r4
 800364c:	ea01 0305 	and.w	r3, r1, r5
 8003650:	493d      	ldr	r1, [pc, #244]	; (8003748 <HAL_RCC_GetSysClockFreq+0x168>)
 8003652:	fb01 f003 	mul.w	r0, r1, r3
 8003656:	2100      	movs	r1, #0
 8003658:	fb01 f102 	mul.w	r1, r1, r2
 800365c:	1844      	adds	r4, r0, r1
 800365e:	493a      	ldr	r1, [pc, #232]	; (8003748 <HAL_RCC_GetSysClockFreq+0x168>)
 8003660:	fba2 0101 	umull	r0, r1, r2, r1
 8003664:	1863      	adds	r3, r4, r1
 8003666:	4619      	mov	r1, r3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	461a      	mov	r2, r3
 800366c:	f04f 0300 	mov.w	r3, #0
 8003670:	f7fc fdbc 	bl	80001ec <__aeabi_uldivmod>
 8003674:	4602      	mov	r2, r0
 8003676:	460b      	mov	r3, r1
 8003678:	4613      	mov	r3, r2
 800367a:	60fb      	str	r3, [r7, #12]
 800367c:	e04a      	b.n	8003714 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800367e:	4b30      	ldr	r3, [pc, #192]	; (8003740 <HAL_RCC_GetSysClockFreq+0x160>)
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	099b      	lsrs	r3, r3, #6
 8003684:	461a      	mov	r2, r3
 8003686:	f04f 0300 	mov.w	r3, #0
 800368a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800368e:	f04f 0100 	mov.w	r1, #0
 8003692:	ea02 0400 	and.w	r4, r2, r0
 8003696:	ea03 0501 	and.w	r5, r3, r1
 800369a:	4620      	mov	r0, r4
 800369c:	4629      	mov	r1, r5
 800369e:	f04f 0200 	mov.w	r2, #0
 80036a2:	f04f 0300 	mov.w	r3, #0
 80036a6:	014b      	lsls	r3, r1, #5
 80036a8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80036ac:	0142      	lsls	r2, r0, #5
 80036ae:	4610      	mov	r0, r2
 80036b0:	4619      	mov	r1, r3
 80036b2:	1b00      	subs	r0, r0, r4
 80036b4:	eb61 0105 	sbc.w	r1, r1, r5
 80036b8:	f04f 0200 	mov.w	r2, #0
 80036bc:	f04f 0300 	mov.w	r3, #0
 80036c0:	018b      	lsls	r3, r1, #6
 80036c2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80036c6:	0182      	lsls	r2, r0, #6
 80036c8:	1a12      	subs	r2, r2, r0
 80036ca:	eb63 0301 	sbc.w	r3, r3, r1
 80036ce:	f04f 0000 	mov.w	r0, #0
 80036d2:	f04f 0100 	mov.w	r1, #0
 80036d6:	00d9      	lsls	r1, r3, #3
 80036d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80036dc:	00d0      	lsls	r0, r2, #3
 80036de:	4602      	mov	r2, r0
 80036e0:	460b      	mov	r3, r1
 80036e2:	1912      	adds	r2, r2, r4
 80036e4:	eb45 0303 	adc.w	r3, r5, r3
 80036e8:	f04f 0000 	mov.w	r0, #0
 80036ec:	f04f 0100 	mov.w	r1, #0
 80036f0:	0299      	lsls	r1, r3, #10
 80036f2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80036f6:	0290      	lsls	r0, r2, #10
 80036f8:	4602      	mov	r2, r0
 80036fa:	460b      	mov	r3, r1
 80036fc:	4610      	mov	r0, r2
 80036fe:	4619      	mov	r1, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	461a      	mov	r2, r3
 8003704:	f04f 0300 	mov.w	r3, #0
 8003708:	f7fc fd70 	bl	80001ec <__aeabi_uldivmod>
 800370c:	4602      	mov	r2, r0
 800370e:	460b      	mov	r3, r1
 8003710:	4613      	mov	r3, r2
 8003712:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003714:	4b0a      	ldr	r3, [pc, #40]	; (8003740 <HAL_RCC_GetSysClockFreq+0x160>)
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	0c1b      	lsrs	r3, r3, #16
 800371a:	f003 0303 	and.w	r3, r3, #3
 800371e:	3301      	adds	r3, #1
 8003720:	005b      	lsls	r3, r3, #1
 8003722:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003724:	68fa      	ldr	r2, [r7, #12]
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	fbb2 f3f3 	udiv	r3, r2, r3
 800372c:	60bb      	str	r3, [r7, #8]
      break;
 800372e:	e002      	b.n	8003736 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003730:	4b04      	ldr	r3, [pc, #16]	; (8003744 <HAL_RCC_GetSysClockFreq+0x164>)
 8003732:	60bb      	str	r3, [r7, #8]
      break;
 8003734:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003736:	68bb      	ldr	r3, [r7, #8]
}
 8003738:	4618      	mov	r0, r3
 800373a:	3710      	adds	r7, #16
 800373c:	46bd      	mov	sp, r7
 800373e:	bdb0      	pop	{r4, r5, r7, pc}
 8003740:	40023800 	.word	0x40023800
 8003744:	00f42400 	.word	0x00f42400
 8003748:	00b71b00 	.word	0x00b71b00

0800374c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800374c:	b480      	push	{r7}
 800374e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003750:	4b03      	ldr	r3, [pc, #12]	; (8003760 <HAL_RCC_GetHCLKFreq+0x14>)
 8003752:	681b      	ldr	r3, [r3, #0]
}
 8003754:	4618      	mov	r0, r3
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr
 800375e:	bf00      	nop
 8003760:	20000000 	.word	0x20000000

08003764 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003768:	f7ff fff0 	bl	800374c <HAL_RCC_GetHCLKFreq>
 800376c:	4602      	mov	r2, r0
 800376e:	4b05      	ldr	r3, [pc, #20]	; (8003784 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	0a9b      	lsrs	r3, r3, #10
 8003774:	f003 0307 	and.w	r3, r3, #7
 8003778:	4903      	ldr	r1, [pc, #12]	; (8003788 <HAL_RCC_GetPCLK1Freq+0x24>)
 800377a:	5ccb      	ldrb	r3, [r1, r3]
 800377c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003780:	4618      	mov	r0, r3
 8003782:	bd80      	pop	{r7, pc}
 8003784:	40023800 	.word	0x40023800
 8003788:	08004ccc 	.word	0x08004ccc

0800378c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003790:	f7ff ffdc 	bl	800374c <HAL_RCC_GetHCLKFreq>
 8003794:	4602      	mov	r2, r0
 8003796:	4b05      	ldr	r3, [pc, #20]	; (80037ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	0b5b      	lsrs	r3, r3, #13
 800379c:	f003 0307 	and.w	r3, r3, #7
 80037a0:	4903      	ldr	r1, [pc, #12]	; (80037b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037a2:	5ccb      	ldrb	r3, [r1, r3]
 80037a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	40023800 	.word	0x40023800
 80037b0:	08004ccc 	.word	0x08004ccc

080037b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d101      	bne.n	80037c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e056      	b.n	8003874 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d106      	bne.n	80037e6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f7fd fda1 	bl	8001328 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2202      	movs	r2, #2
 80037ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037fc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	685a      	ldr	r2, [r3, #4]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	431a      	orrs	r2, r3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	431a      	orrs	r2, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	691b      	ldr	r3, [r3, #16]
 8003812:	431a      	orrs	r2, r3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	695b      	ldr	r3, [r3, #20]
 8003818:	431a      	orrs	r2, r3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	699b      	ldr	r3, [r3, #24]
 800381e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003822:	431a      	orrs	r2, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	69db      	ldr	r3, [r3, #28]
 8003828:	431a      	orrs	r2, r3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a1b      	ldr	r3, [r3, #32]
 800382e:	ea42 0103 	orr.w	r1, r2, r3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	430a      	orrs	r2, r1
 800383c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	699b      	ldr	r3, [r3, #24]
 8003842:	0c1b      	lsrs	r3, r3, #16
 8003844:	f003 0104 	and.w	r1, r3, #4
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	430a      	orrs	r2, r1
 8003852:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	69da      	ldr	r2, [r3, #28]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003862:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2201      	movs	r2, #1
 800386e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003872:	2300      	movs	r3, #0
}
 8003874:	4618      	mov	r0, r3
 8003876:	3708      	adds	r7, #8
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}

0800387c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d101      	bne.n	800388e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e01d      	b.n	80038ca <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003894:	b2db      	uxtb	r3, r3
 8003896:	2b00      	cmp	r3, #0
 8003898:	d106      	bne.n	80038a8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f7fd fd88 	bl	80013b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2202      	movs	r2, #2
 80038ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	3304      	adds	r3, #4
 80038b8:	4619      	mov	r1, r3
 80038ba:	4610      	mov	r0, r2
 80038bc:	f000 f8d0 	bl	8003a60 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3708      	adds	r7, #8
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
	...

080038d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	60b9      	str	r1, [r7, #8]
 80038de:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d101      	bne.n	80038ee <HAL_TIM_PWM_ConfigChannel+0x1a>
 80038ea:	2302      	movs	r3, #2
 80038ec:	e0b4      	b.n	8003a58 <HAL_TIM_PWM_ConfigChannel+0x184>
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2201      	movs	r2, #1
 80038f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2202      	movs	r2, #2
 80038fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2b0c      	cmp	r3, #12
 8003902:	f200 809f 	bhi.w	8003a44 <HAL_TIM_PWM_ConfigChannel+0x170>
 8003906:	a201      	add	r2, pc, #4	; (adr r2, 800390c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800390c:	08003941 	.word	0x08003941
 8003910:	08003a45 	.word	0x08003a45
 8003914:	08003a45 	.word	0x08003a45
 8003918:	08003a45 	.word	0x08003a45
 800391c:	08003981 	.word	0x08003981
 8003920:	08003a45 	.word	0x08003a45
 8003924:	08003a45 	.word	0x08003a45
 8003928:	08003a45 	.word	0x08003a45
 800392c:	080039c3 	.word	0x080039c3
 8003930:	08003a45 	.word	0x08003a45
 8003934:	08003a45 	.word	0x08003a45
 8003938:	08003a45 	.word	0x08003a45
 800393c:	08003a03 	.word	0x08003a03
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	68b9      	ldr	r1, [r7, #8]
 8003946:	4618      	mov	r0, r3
 8003948:	f000 f92a 	bl	8003ba0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	699a      	ldr	r2, [r3, #24]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f042 0208 	orr.w	r2, r2, #8
 800395a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	699a      	ldr	r2, [r3, #24]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f022 0204 	bic.w	r2, r2, #4
 800396a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	6999      	ldr	r1, [r3, #24]
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	691a      	ldr	r2, [r3, #16]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	430a      	orrs	r2, r1
 800397c:	619a      	str	r2, [r3, #24]
      break;
 800397e:	e062      	b.n	8003a46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	68b9      	ldr	r1, [r7, #8]
 8003986:	4618      	mov	r0, r3
 8003988:	f000 f97a 	bl	8003c80 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	699a      	ldr	r2, [r3, #24]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800399a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	699a      	ldr	r2, [r3, #24]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	6999      	ldr	r1, [r3, #24]
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	021a      	lsls	r2, r3, #8
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	430a      	orrs	r2, r1
 80039be:	619a      	str	r2, [r3, #24]
      break;
 80039c0:	e041      	b.n	8003a46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	68b9      	ldr	r1, [r7, #8]
 80039c8:	4618      	mov	r0, r3
 80039ca:	f000 f9cf 	bl	8003d6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	69da      	ldr	r2, [r3, #28]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f042 0208 	orr.w	r2, r2, #8
 80039dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	69da      	ldr	r2, [r3, #28]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f022 0204 	bic.w	r2, r2, #4
 80039ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	69d9      	ldr	r1, [r3, #28]
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	691a      	ldr	r2, [r3, #16]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	430a      	orrs	r2, r1
 80039fe:	61da      	str	r2, [r3, #28]
      break;
 8003a00:	e021      	b.n	8003a46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	68b9      	ldr	r1, [r7, #8]
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f000 fa23 	bl	8003e54 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	69da      	ldr	r2, [r3, #28]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	69da      	ldr	r2, [r3, #28]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	69d9      	ldr	r1, [r3, #28]
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	691b      	ldr	r3, [r3, #16]
 8003a38:	021a      	lsls	r2, r3, #8
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	430a      	orrs	r2, r1
 8003a40:	61da      	str	r2, [r3, #28]
      break;
 8003a42:	e000      	b.n	8003a46 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003a44:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a56:	2300      	movs	r3, #0
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3710      	adds	r7, #16
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b085      	sub	sp, #20
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	4a40      	ldr	r2, [pc, #256]	; (8003b74 <TIM_Base_SetConfig+0x114>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d013      	beq.n	8003aa0 <TIM_Base_SetConfig+0x40>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a7e:	d00f      	beq.n	8003aa0 <TIM_Base_SetConfig+0x40>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	4a3d      	ldr	r2, [pc, #244]	; (8003b78 <TIM_Base_SetConfig+0x118>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d00b      	beq.n	8003aa0 <TIM_Base_SetConfig+0x40>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	4a3c      	ldr	r2, [pc, #240]	; (8003b7c <TIM_Base_SetConfig+0x11c>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d007      	beq.n	8003aa0 <TIM_Base_SetConfig+0x40>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	4a3b      	ldr	r2, [pc, #236]	; (8003b80 <TIM_Base_SetConfig+0x120>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d003      	beq.n	8003aa0 <TIM_Base_SetConfig+0x40>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	4a3a      	ldr	r2, [pc, #232]	; (8003b84 <TIM_Base_SetConfig+0x124>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d108      	bne.n	8003ab2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aa6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	68fa      	ldr	r2, [r7, #12]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a2f      	ldr	r2, [pc, #188]	; (8003b74 <TIM_Base_SetConfig+0x114>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d02b      	beq.n	8003b12 <TIM_Base_SetConfig+0xb2>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ac0:	d027      	beq.n	8003b12 <TIM_Base_SetConfig+0xb2>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a2c      	ldr	r2, [pc, #176]	; (8003b78 <TIM_Base_SetConfig+0x118>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d023      	beq.n	8003b12 <TIM_Base_SetConfig+0xb2>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a2b      	ldr	r2, [pc, #172]	; (8003b7c <TIM_Base_SetConfig+0x11c>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d01f      	beq.n	8003b12 <TIM_Base_SetConfig+0xb2>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a2a      	ldr	r2, [pc, #168]	; (8003b80 <TIM_Base_SetConfig+0x120>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d01b      	beq.n	8003b12 <TIM_Base_SetConfig+0xb2>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a29      	ldr	r2, [pc, #164]	; (8003b84 <TIM_Base_SetConfig+0x124>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d017      	beq.n	8003b12 <TIM_Base_SetConfig+0xb2>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a28      	ldr	r2, [pc, #160]	; (8003b88 <TIM_Base_SetConfig+0x128>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d013      	beq.n	8003b12 <TIM_Base_SetConfig+0xb2>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4a27      	ldr	r2, [pc, #156]	; (8003b8c <TIM_Base_SetConfig+0x12c>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d00f      	beq.n	8003b12 <TIM_Base_SetConfig+0xb2>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a26      	ldr	r2, [pc, #152]	; (8003b90 <TIM_Base_SetConfig+0x130>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d00b      	beq.n	8003b12 <TIM_Base_SetConfig+0xb2>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a25      	ldr	r2, [pc, #148]	; (8003b94 <TIM_Base_SetConfig+0x134>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d007      	beq.n	8003b12 <TIM_Base_SetConfig+0xb2>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a24      	ldr	r2, [pc, #144]	; (8003b98 <TIM_Base_SetConfig+0x138>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d003      	beq.n	8003b12 <TIM_Base_SetConfig+0xb2>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a23      	ldr	r2, [pc, #140]	; (8003b9c <TIM_Base_SetConfig+0x13c>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d108      	bne.n	8003b24 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	68fa      	ldr	r2, [r7, #12]
 8003b20:	4313      	orrs	r3, r2
 8003b22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	695b      	ldr	r3, [r3, #20]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	68fa      	ldr	r2, [r7, #12]
 8003b36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	689a      	ldr	r2, [r3, #8]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	4a0a      	ldr	r2, [pc, #40]	; (8003b74 <TIM_Base_SetConfig+0x114>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d003      	beq.n	8003b58 <TIM_Base_SetConfig+0xf8>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	4a0c      	ldr	r2, [pc, #48]	; (8003b84 <TIM_Base_SetConfig+0x124>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d103      	bne.n	8003b60 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	691a      	ldr	r2, [r3, #16]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	615a      	str	r2, [r3, #20]
}
 8003b66:	bf00      	nop
 8003b68:	3714      	adds	r7, #20
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop
 8003b74:	40010000 	.word	0x40010000
 8003b78:	40000400 	.word	0x40000400
 8003b7c:	40000800 	.word	0x40000800
 8003b80:	40000c00 	.word	0x40000c00
 8003b84:	40010400 	.word	0x40010400
 8003b88:	40014000 	.word	0x40014000
 8003b8c:	40014400 	.word	0x40014400
 8003b90:	40014800 	.word	0x40014800
 8003b94:	40001800 	.word	0x40001800
 8003b98:	40001c00 	.word	0x40001c00
 8003b9c:	40002000 	.word	0x40002000

08003ba0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b087      	sub	sp, #28
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a1b      	ldr	r3, [r3, #32]
 8003bae:	f023 0201 	bic.w	r2, r3, #1
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6a1b      	ldr	r3, [r3, #32]
 8003bba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	699b      	ldr	r3, [r3, #24]
 8003bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f023 0303 	bic.w	r3, r3, #3
 8003bd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	68fa      	ldr	r2, [r7, #12]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	f023 0302 	bic.w	r3, r3, #2
 8003be8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	697a      	ldr	r2, [r7, #20]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	4a20      	ldr	r2, [pc, #128]	; (8003c78 <TIM_OC1_SetConfig+0xd8>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d003      	beq.n	8003c04 <TIM_OC1_SetConfig+0x64>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	4a1f      	ldr	r2, [pc, #124]	; (8003c7c <TIM_OC1_SetConfig+0xdc>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d10c      	bne.n	8003c1e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	f023 0308 	bic.w	r3, r3, #8
 8003c0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	697a      	ldr	r2, [r7, #20]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	f023 0304 	bic.w	r3, r3, #4
 8003c1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a15      	ldr	r2, [pc, #84]	; (8003c78 <TIM_OC1_SetConfig+0xd8>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d003      	beq.n	8003c2e <TIM_OC1_SetConfig+0x8e>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a14      	ldr	r2, [pc, #80]	; (8003c7c <TIM_OC1_SetConfig+0xdc>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d111      	bne.n	8003c52 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	695b      	ldr	r3, [r3, #20]
 8003c42:	693a      	ldr	r2, [r7, #16]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	699b      	ldr	r3, [r3, #24]
 8003c4c:	693a      	ldr	r2, [r7, #16]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	693a      	ldr	r2, [r7, #16]
 8003c56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	68fa      	ldr	r2, [r7, #12]
 8003c5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	685a      	ldr	r2, [r3, #4]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	697a      	ldr	r2, [r7, #20]
 8003c6a:	621a      	str	r2, [r3, #32]
}
 8003c6c:	bf00      	nop
 8003c6e:	371c      	adds	r7, #28
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr
 8003c78:	40010000 	.word	0x40010000
 8003c7c:	40010400 	.word	0x40010400

08003c80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b087      	sub	sp, #28
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6a1b      	ldr	r3, [r3, #32]
 8003c8e:	f023 0210 	bic.w	r2, r3, #16
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a1b      	ldr	r3, [r3, #32]
 8003c9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	699b      	ldr	r3, [r3, #24]
 8003ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	021b      	lsls	r3, r3, #8
 8003cbe:	68fa      	ldr	r2, [r7, #12]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	f023 0320 	bic.w	r3, r3, #32
 8003cca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	011b      	lsls	r3, r3, #4
 8003cd2:	697a      	ldr	r2, [r7, #20]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	4a22      	ldr	r2, [pc, #136]	; (8003d64 <TIM_OC2_SetConfig+0xe4>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d003      	beq.n	8003ce8 <TIM_OC2_SetConfig+0x68>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4a21      	ldr	r2, [pc, #132]	; (8003d68 <TIM_OC2_SetConfig+0xe8>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d10d      	bne.n	8003d04 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	011b      	lsls	r3, r3, #4
 8003cf6:	697a      	ldr	r2, [r7, #20]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d02:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	4a17      	ldr	r2, [pc, #92]	; (8003d64 <TIM_OC2_SetConfig+0xe4>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d003      	beq.n	8003d14 <TIM_OC2_SetConfig+0x94>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	4a16      	ldr	r2, [pc, #88]	; (8003d68 <TIM_OC2_SetConfig+0xe8>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d113      	bne.n	8003d3c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	695b      	ldr	r3, [r3, #20]
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	693a      	ldr	r2, [r7, #16]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	699b      	ldr	r3, [r3, #24]
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	693a      	ldr	r2, [r7, #16]
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	693a      	ldr	r2, [r7, #16]
 8003d40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	68fa      	ldr	r2, [r7, #12]
 8003d46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	685a      	ldr	r2, [r3, #4]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	697a      	ldr	r2, [r7, #20]
 8003d54:	621a      	str	r2, [r3, #32]
}
 8003d56:	bf00      	nop
 8003d58:	371c      	adds	r7, #28
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop
 8003d64:	40010000 	.word	0x40010000
 8003d68:	40010400 	.word	0x40010400

08003d6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b087      	sub	sp, #28
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a1b      	ldr	r3, [r3, #32]
 8003d7a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a1b      	ldr	r3, [r3, #32]
 8003d86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	69db      	ldr	r3, [r3, #28]
 8003d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f023 0303 	bic.w	r3, r3, #3
 8003da2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	68fa      	ldr	r2, [r7, #12]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003db4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	021b      	lsls	r3, r3, #8
 8003dbc:	697a      	ldr	r2, [r7, #20]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a21      	ldr	r2, [pc, #132]	; (8003e4c <TIM_OC3_SetConfig+0xe0>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d003      	beq.n	8003dd2 <TIM_OC3_SetConfig+0x66>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a20      	ldr	r2, [pc, #128]	; (8003e50 <TIM_OC3_SetConfig+0xe4>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d10d      	bne.n	8003dee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003dd8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	021b      	lsls	r3, r3, #8
 8003de0:	697a      	ldr	r2, [r7, #20]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003dec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4a16      	ldr	r2, [pc, #88]	; (8003e4c <TIM_OC3_SetConfig+0xe0>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d003      	beq.n	8003dfe <TIM_OC3_SetConfig+0x92>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4a15      	ldr	r2, [pc, #84]	; (8003e50 <TIM_OC3_SetConfig+0xe4>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d113      	bne.n	8003e26 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	695b      	ldr	r3, [r3, #20]
 8003e12:	011b      	lsls	r3, r3, #4
 8003e14:	693a      	ldr	r2, [r7, #16]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	699b      	ldr	r3, [r3, #24]
 8003e1e:	011b      	lsls	r3, r3, #4
 8003e20:	693a      	ldr	r2, [r7, #16]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	693a      	ldr	r2, [r7, #16]
 8003e2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	68fa      	ldr	r2, [r7, #12]
 8003e30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	685a      	ldr	r2, [r3, #4]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	697a      	ldr	r2, [r7, #20]
 8003e3e:	621a      	str	r2, [r3, #32]
}
 8003e40:	bf00      	nop
 8003e42:	371c      	adds	r7, #28
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr
 8003e4c:	40010000 	.word	0x40010000
 8003e50:	40010400 	.word	0x40010400

08003e54 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b087      	sub	sp, #28
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a1b      	ldr	r3, [r3, #32]
 8003e62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a1b      	ldr	r3, [r3, #32]
 8003e6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	69db      	ldr	r3, [r3, #28]
 8003e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	021b      	lsls	r3, r3, #8
 8003e92:	68fa      	ldr	r2, [r7, #12]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	031b      	lsls	r3, r3, #12
 8003ea6:	693a      	ldr	r2, [r7, #16]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4a12      	ldr	r2, [pc, #72]	; (8003ef8 <TIM_OC4_SetConfig+0xa4>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d003      	beq.n	8003ebc <TIM_OC4_SetConfig+0x68>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	4a11      	ldr	r2, [pc, #68]	; (8003efc <TIM_OC4_SetConfig+0xa8>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d109      	bne.n	8003ed0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ec2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	695b      	ldr	r3, [r3, #20]
 8003ec8:	019b      	lsls	r3, r3, #6
 8003eca:	697a      	ldr	r2, [r7, #20]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	697a      	ldr	r2, [r7, #20]
 8003ed4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	68fa      	ldr	r2, [r7, #12]
 8003eda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	685a      	ldr	r2, [r3, #4]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	693a      	ldr	r2, [r7, #16]
 8003ee8:	621a      	str	r2, [r3, #32]
}
 8003eea:	bf00      	nop
 8003eec:	371c      	adds	r7, #28
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr
 8003ef6:	bf00      	nop
 8003ef8:	40010000 	.word	0x40010000
 8003efc:	40010400 	.word	0x40010400

08003f00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b085      	sub	sp, #20
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d101      	bne.n	8003f18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f14:	2302      	movs	r3, #2
 8003f16:	e05a      	b.n	8003fce <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2202      	movs	r2, #2
 8003f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	68fa      	ldr	r2, [r7, #12]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	68fa      	ldr	r2, [r7, #12]
 8003f50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a21      	ldr	r2, [pc, #132]	; (8003fdc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d022      	beq.n	8003fa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f64:	d01d      	beq.n	8003fa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a1d      	ldr	r2, [pc, #116]	; (8003fe0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d018      	beq.n	8003fa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a1b      	ldr	r2, [pc, #108]	; (8003fe4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d013      	beq.n	8003fa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a1a      	ldr	r2, [pc, #104]	; (8003fe8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d00e      	beq.n	8003fa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a18      	ldr	r2, [pc, #96]	; (8003fec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d009      	beq.n	8003fa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a17      	ldr	r2, [pc, #92]	; (8003ff0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d004      	beq.n	8003fa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a15      	ldr	r2, [pc, #84]	; (8003ff4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d10c      	bne.n	8003fbc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fa8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	68ba      	ldr	r2, [r7, #8]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	68ba      	ldr	r2, [r7, #8]
 8003fba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003fcc:	2300      	movs	r3, #0
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3714      	adds	r7, #20
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr
 8003fda:	bf00      	nop
 8003fdc:	40010000 	.word	0x40010000
 8003fe0:	40000400 	.word	0x40000400
 8003fe4:	40000800 	.word	0x40000800
 8003fe8:	40000c00 	.word	0x40000c00
 8003fec:	40010400 	.word	0x40010400
 8003ff0:	40014000 	.word	0x40014000
 8003ff4:	40001800 	.word	0x40001800

08003ff8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b082      	sub	sp, #8
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d101      	bne.n	800400a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e03f      	b.n	800408a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004010:	b2db      	uxtb	r3, r3
 8004012:	2b00      	cmp	r3, #0
 8004014:	d106      	bne.n	8004024 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f7fd fb1a 	bl	8001658 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2224      	movs	r2, #36	; 0x24
 8004028:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	68da      	ldr	r2, [r3, #12]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800403a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f000 fa69 	bl	8004514 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	691a      	ldr	r2, [r3, #16]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004050:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	695a      	ldr	r2, [r3, #20]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004060:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	68da      	ldr	r2, [r3, #12]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004070:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2220      	movs	r2, #32
 800407c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2220      	movs	r2, #32
 8004084:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004088:	2300      	movs	r3, #0
}
 800408a:	4618      	mov	r0, r3
 800408c:	3708      	adds	r7, #8
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
	...

08004094 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b088      	sub	sp, #32
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	68db      	ldr	r3, [r3, #12]
 80040aa:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	695b      	ldr	r3, [r3, #20]
 80040b2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80040b4:	2300      	movs	r3, #0
 80040b6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80040b8:	2300      	movs	r3, #0
 80040ba:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	f003 030f 	and.w	r3, r3, #15
 80040c2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d10d      	bne.n	80040e6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80040ca:	69fb      	ldr	r3, [r7, #28]
 80040cc:	f003 0320 	and.w	r3, r3, #32
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d008      	beq.n	80040e6 <HAL_UART_IRQHandler+0x52>
 80040d4:	69bb      	ldr	r3, [r7, #24]
 80040d6:	f003 0320 	and.w	r3, r3, #32
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d003      	beq.n	80040e6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f000 f996 	bl	8004410 <UART_Receive_IT>
      return;
 80040e4:	e0d0      	b.n	8004288 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	f000 80b0 	beq.w	800424e <HAL_UART_IRQHandler+0x1ba>
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	f003 0301 	and.w	r3, r3, #1
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d105      	bne.n	8004104 <HAL_UART_IRQHandler+0x70>
 80040f8:	69bb      	ldr	r3, [r7, #24]
 80040fa:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80040fe:	2b00      	cmp	r3, #0
 8004100:	f000 80a5 	beq.w	800424e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	f003 0301 	and.w	r3, r3, #1
 800410a:	2b00      	cmp	r3, #0
 800410c:	d00a      	beq.n	8004124 <HAL_UART_IRQHandler+0x90>
 800410e:	69bb      	ldr	r3, [r7, #24]
 8004110:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004114:	2b00      	cmp	r3, #0
 8004116:	d005      	beq.n	8004124 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800411c:	f043 0201 	orr.w	r2, r3, #1
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004124:	69fb      	ldr	r3, [r7, #28]
 8004126:	f003 0304 	and.w	r3, r3, #4
 800412a:	2b00      	cmp	r3, #0
 800412c:	d00a      	beq.n	8004144 <HAL_UART_IRQHandler+0xb0>
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	f003 0301 	and.w	r3, r3, #1
 8004134:	2b00      	cmp	r3, #0
 8004136:	d005      	beq.n	8004144 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800413c:	f043 0202 	orr.w	r2, r3, #2
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	f003 0302 	and.w	r3, r3, #2
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00a      	beq.n	8004164 <HAL_UART_IRQHandler+0xd0>
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	f003 0301 	and.w	r3, r3, #1
 8004154:	2b00      	cmp	r3, #0
 8004156:	d005      	beq.n	8004164 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800415c:	f043 0204 	orr.w	r2, r3, #4
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	f003 0308 	and.w	r3, r3, #8
 800416a:	2b00      	cmp	r3, #0
 800416c:	d00f      	beq.n	800418e <HAL_UART_IRQHandler+0xfa>
 800416e:	69bb      	ldr	r3, [r7, #24]
 8004170:	f003 0320 	and.w	r3, r3, #32
 8004174:	2b00      	cmp	r3, #0
 8004176:	d104      	bne.n	8004182 <HAL_UART_IRQHandler+0xee>
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	f003 0301 	and.w	r3, r3, #1
 800417e:	2b00      	cmp	r3, #0
 8004180:	d005      	beq.n	800418e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004186:	f043 0208 	orr.w	r2, r3, #8
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004192:	2b00      	cmp	r3, #0
 8004194:	d077      	beq.n	8004286 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004196:	69fb      	ldr	r3, [r7, #28]
 8004198:	f003 0320 	and.w	r3, r3, #32
 800419c:	2b00      	cmp	r3, #0
 800419e:	d007      	beq.n	80041b0 <HAL_UART_IRQHandler+0x11c>
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	f003 0320 	and.w	r3, r3, #32
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d002      	beq.n	80041b0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f000 f930 	bl	8004410 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	695b      	ldr	r3, [r3, #20]
 80041b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ba:	2b40      	cmp	r3, #64	; 0x40
 80041bc:	bf0c      	ite	eq
 80041be:	2301      	moveq	r3, #1
 80041c0:	2300      	movne	r3, #0
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ca:	f003 0308 	and.w	r3, r3, #8
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d102      	bne.n	80041d8 <HAL_UART_IRQHandler+0x144>
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d031      	beq.n	800423c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	f000 f879 	bl	80042d0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	695b      	ldr	r3, [r3, #20]
 80041e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041e8:	2b40      	cmp	r3, #64	; 0x40
 80041ea:	d123      	bne.n	8004234 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	695a      	ldr	r2, [r3, #20]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041fa:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004200:	2b00      	cmp	r3, #0
 8004202:	d013      	beq.n	800422c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004208:	4a21      	ldr	r2, [pc, #132]	; (8004290 <HAL_UART_IRQHandler+0x1fc>)
 800420a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004210:	4618      	mov	r0, r3
 8004212:	f7fe fa3c 	bl	800268e <HAL_DMA_Abort_IT>
 8004216:	4603      	mov	r3, r0
 8004218:	2b00      	cmp	r3, #0
 800421a:	d016      	beq.n	800424a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004220:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004226:	4610      	mov	r0, r2
 8004228:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800422a:	e00e      	b.n	800424a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f000 f845 	bl	80042bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004232:	e00a      	b.n	800424a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f000 f841 	bl	80042bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800423a:	e006      	b.n	800424a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f000 f83d 	bl	80042bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004248:	e01d      	b.n	8004286 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800424a:	bf00      	nop
    return;
 800424c:	e01b      	b.n	8004286 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800424e:	69fb      	ldr	r3, [r7, #28]
 8004250:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004254:	2b00      	cmp	r3, #0
 8004256:	d008      	beq.n	800426a <HAL_UART_IRQHandler+0x1d6>
 8004258:	69bb      	ldr	r3, [r7, #24]
 800425a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800425e:	2b00      	cmp	r3, #0
 8004260:	d003      	beq.n	800426a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f000 f866 	bl	8004334 <UART_Transmit_IT>
    return;
 8004268:	e00e      	b.n	8004288 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004270:	2b00      	cmp	r3, #0
 8004272:	d009      	beq.n	8004288 <HAL_UART_IRQHandler+0x1f4>
 8004274:	69bb      	ldr	r3, [r7, #24]
 8004276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800427a:	2b00      	cmp	r3, #0
 800427c:	d004      	beq.n	8004288 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f000 f8ae 	bl	80043e0 <UART_EndTransmit_IT>
    return;
 8004284:	e000      	b.n	8004288 <HAL_UART_IRQHandler+0x1f4>
    return;
 8004286:	bf00      	nop
  }
}
 8004288:	3720      	adds	r7, #32
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop
 8004290:	0800430d 	.word	0x0800430d

08004294 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800429c:	bf00      	nop
 800429e:	370c      	adds	r7, #12
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr

080042a8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80042b0:	bf00      	nop
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr

080042bc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80042c4:	bf00      	nop
 80042c6:	370c      	adds	r7, #12
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr

080042d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b083      	sub	sp, #12
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	68da      	ldr	r2, [r3, #12]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80042e6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	695a      	ldr	r2, [r3, #20]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f022 0201 	bic.w	r2, r2, #1
 80042f6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2220      	movs	r2, #32
 80042fc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004300:	bf00      	nop
 8004302:	370c      	adds	r7, #12
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr

0800430c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004318:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2200      	movs	r2, #0
 800431e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2200      	movs	r2, #0
 8004324:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004326:	68f8      	ldr	r0, [r7, #12]
 8004328:	f7ff ffc8 	bl	80042bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800432c:	bf00      	nop
 800432e:	3710      	adds	r7, #16
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}

08004334 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004334:	b480      	push	{r7}
 8004336:	b085      	sub	sp, #20
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004342:	b2db      	uxtb	r3, r3
 8004344:	2b21      	cmp	r3, #33	; 0x21
 8004346:	d144      	bne.n	80043d2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004350:	d11a      	bne.n	8004388 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6a1b      	ldr	r3, [r3, #32]
 8004356:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	881b      	ldrh	r3, [r3, #0]
 800435c:	461a      	mov	r2, r3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004366:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	691b      	ldr	r3, [r3, #16]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d105      	bne.n	800437c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6a1b      	ldr	r3, [r3, #32]
 8004374:	1c9a      	adds	r2, r3, #2
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	621a      	str	r2, [r3, #32]
 800437a:	e00e      	b.n	800439a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6a1b      	ldr	r3, [r3, #32]
 8004380:	1c5a      	adds	r2, r3, #1
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	621a      	str	r2, [r3, #32]
 8004386:	e008      	b.n	800439a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6a1b      	ldr	r3, [r3, #32]
 800438c:	1c59      	adds	r1, r3, #1
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	6211      	str	r1, [r2, #32]
 8004392:	781a      	ldrb	r2, [r3, #0]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800439e:	b29b      	uxth	r3, r3
 80043a0:	3b01      	subs	r3, #1
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	4619      	mov	r1, r3
 80043a8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d10f      	bne.n	80043ce <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	68da      	ldr	r2, [r3, #12]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80043bc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	68da      	ldr	r2, [r3, #12]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043cc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80043ce:	2300      	movs	r3, #0
 80043d0:	e000      	b.n	80043d4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80043d2:	2302      	movs	r3, #2
  }
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3714      	adds	r7, #20
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr

080043e0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b082      	sub	sp, #8
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	68da      	ldr	r2, [r3, #12]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043f6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2220      	movs	r2, #32
 80043fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f7ff ff47 	bl	8004294 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004406:	2300      	movs	r3, #0
}
 8004408:	4618      	mov	r0, r3
 800440a:	3708      	adds	r7, #8
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}

08004410 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800441e:	b2db      	uxtb	r3, r3
 8004420:	2b22      	cmp	r3, #34	; 0x22
 8004422:	d171      	bne.n	8004508 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800442c:	d123      	bne.n	8004476 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004432:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	691b      	ldr	r3, [r3, #16]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d10e      	bne.n	800445a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	b29b      	uxth	r3, r3
 8004444:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004448:	b29a      	uxth	r2, r3
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004452:	1c9a      	adds	r2, r3, #2
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	629a      	str	r2, [r3, #40]	; 0x28
 8004458:	e029      	b.n	80044ae <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	b29b      	uxth	r3, r3
 8004462:	b2db      	uxtb	r3, r3
 8004464:	b29a      	uxth	r2, r3
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800446e:	1c5a      	adds	r2, r3, #1
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	629a      	str	r2, [r3, #40]	; 0x28
 8004474:	e01b      	b.n	80044ae <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d10a      	bne.n	8004494 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	6858      	ldr	r0, [r3, #4]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004488:	1c59      	adds	r1, r3, #1
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	6291      	str	r1, [r2, #40]	; 0x28
 800448e:	b2c2      	uxtb	r2, r0
 8004490:	701a      	strb	r2, [r3, #0]
 8004492:	e00c      	b.n	80044ae <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	b2da      	uxtb	r2, r3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a0:	1c58      	adds	r0, r3, #1
 80044a2:	6879      	ldr	r1, [r7, #4]
 80044a4:	6288      	str	r0, [r1, #40]	; 0x28
 80044a6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80044aa:	b2d2      	uxtb	r2, r2
 80044ac:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	3b01      	subs	r3, #1
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	4619      	mov	r1, r3
 80044bc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d120      	bne.n	8004504 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	68da      	ldr	r2, [r3, #12]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f022 0220 	bic.w	r2, r2, #32
 80044d0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	68da      	ldr	r2, [r3, #12]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044e0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	695a      	ldr	r2, [r3, #20]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f022 0201 	bic.w	r2, r2, #1
 80044f0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2220      	movs	r2, #32
 80044f6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f7ff fed4 	bl	80042a8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004500:	2300      	movs	r3, #0
 8004502:	e002      	b.n	800450a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004504:	2300      	movs	r3, #0
 8004506:	e000      	b.n	800450a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004508:	2302      	movs	r3, #2
  }
}
 800450a:	4618      	mov	r0, r3
 800450c:	3710      	adds	r7, #16
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
	...

08004514 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004518:	b0bd      	sub	sp, #244	; 0xf4
 800451a:	af00      	add	r7, sp, #0
 800451c:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004520:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	691b      	ldr	r3, [r3, #16]
 8004528:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800452c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004530:	68d9      	ldr	r1, [r3, #12]
 8004532:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	ea40 0301 	orr.w	r3, r0, r1
 800453c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800453e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004542:	689a      	ldr	r2, [r3, #8]
 8004544:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	431a      	orrs	r2, r3
 800454c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004550:	695b      	ldr	r3, [r3, #20]
 8004552:	431a      	orrs	r2, r3
 8004554:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004558:	69db      	ldr	r3, [r3, #28]
 800455a:	4313      	orrs	r3, r2
 800455c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8004560:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800456c:	f021 010c 	bic.w	r1, r1, #12
 8004570:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800457a:	430b      	orrs	r3, r1
 800457c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800457e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	695b      	ldr	r3, [r3, #20]
 8004586:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800458a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800458e:	6999      	ldr	r1, [r3, #24]
 8004590:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	ea40 0301 	orr.w	r3, r0, r1
 800459a:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800459c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045a0:	69db      	ldr	r3, [r3, #28]
 80045a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045a6:	f040 81a5 	bne.w	80048f4 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80045aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	4bcd      	ldr	r3, [pc, #820]	; (80048e8 <UART_SetConfig+0x3d4>)
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d006      	beq.n	80045c4 <UART_SetConfig+0xb0>
 80045b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	4bcb      	ldr	r3, [pc, #812]	; (80048ec <UART_SetConfig+0x3d8>)
 80045be:	429a      	cmp	r2, r3
 80045c0:	f040 80cb 	bne.w	800475a <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80045c4:	f7ff f8e2 	bl	800378c <HAL_RCC_GetPCLK2Freq>
 80045c8:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80045cc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80045d0:	461c      	mov	r4, r3
 80045d2:	f04f 0500 	mov.w	r5, #0
 80045d6:	4622      	mov	r2, r4
 80045d8:	462b      	mov	r3, r5
 80045da:	1891      	adds	r1, r2, r2
 80045dc:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 80045e0:	415b      	adcs	r3, r3
 80045e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80045e6:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80045ea:	1912      	adds	r2, r2, r4
 80045ec:	eb45 0303 	adc.w	r3, r5, r3
 80045f0:	f04f 0000 	mov.w	r0, #0
 80045f4:	f04f 0100 	mov.w	r1, #0
 80045f8:	00d9      	lsls	r1, r3, #3
 80045fa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80045fe:	00d0      	lsls	r0, r2, #3
 8004600:	4602      	mov	r2, r0
 8004602:	460b      	mov	r3, r1
 8004604:	1911      	adds	r1, r2, r4
 8004606:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 800460a:	416b      	adcs	r3, r5
 800460c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004610:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	461a      	mov	r2, r3
 8004618:	f04f 0300 	mov.w	r3, #0
 800461c:	1891      	adds	r1, r2, r2
 800461e:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8004622:	415b      	adcs	r3, r3
 8004624:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004628:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800462c:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8004630:	f7fb fddc 	bl	80001ec <__aeabi_uldivmod>
 8004634:	4602      	mov	r2, r0
 8004636:	460b      	mov	r3, r1
 8004638:	4bad      	ldr	r3, [pc, #692]	; (80048f0 <UART_SetConfig+0x3dc>)
 800463a:	fba3 2302 	umull	r2, r3, r3, r2
 800463e:	095b      	lsrs	r3, r3, #5
 8004640:	011e      	lsls	r6, r3, #4
 8004642:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004646:	461c      	mov	r4, r3
 8004648:	f04f 0500 	mov.w	r5, #0
 800464c:	4622      	mov	r2, r4
 800464e:	462b      	mov	r3, r5
 8004650:	1891      	adds	r1, r2, r2
 8004652:	67b9      	str	r1, [r7, #120]	; 0x78
 8004654:	415b      	adcs	r3, r3
 8004656:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004658:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800465c:	1912      	adds	r2, r2, r4
 800465e:	eb45 0303 	adc.w	r3, r5, r3
 8004662:	f04f 0000 	mov.w	r0, #0
 8004666:	f04f 0100 	mov.w	r1, #0
 800466a:	00d9      	lsls	r1, r3, #3
 800466c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004670:	00d0      	lsls	r0, r2, #3
 8004672:	4602      	mov	r2, r0
 8004674:	460b      	mov	r3, r1
 8004676:	1911      	adds	r1, r2, r4
 8004678:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 800467c:	416b      	adcs	r3, r5
 800467e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004682:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	461a      	mov	r2, r3
 800468a:	f04f 0300 	mov.w	r3, #0
 800468e:	1891      	adds	r1, r2, r2
 8004690:	6739      	str	r1, [r7, #112]	; 0x70
 8004692:	415b      	adcs	r3, r3
 8004694:	677b      	str	r3, [r7, #116]	; 0x74
 8004696:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800469a:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800469e:	f7fb fda5 	bl	80001ec <__aeabi_uldivmod>
 80046a2:	4602      	mov	r2, r0
 80046a4:	460b      	mov	r3, r1
 80046a6:	4b92      	ldr	r3, [pc, #584]	; (80048f0 <UART_SetConfig+0x3dc>)
 80046a8:	fba3 1302 	umull	r1, r3, r3, r2
 80046ac:	095b      	lsrs	r3, r3, #5
 80046ae:	2164      	movs	r1, #100	; 0x64
 80046b0:	fb01 f303 	mul.w	r3, r1, r3
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	00db      	lsls	r3, r3, #3
 80046b8:	3332      	adds	r3, #50	; 0x32
 80046ba:	4a8d      	ldr	r2, [pc, #564]	; (80048f0 <UART_SetConfig+0x3dc>)
 80046bc:	fba2 2303 	umull	r2, r3, r2, r3
 80046c0:	095b      	lsrs	r3, r3, #5
 80046c2:	005b      	lsls	r3, r3, #1
 80046c4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80046c8:	441e      	add	r6, r3
 80046ca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80046ce:	4618      	mov	r0, r3
 80046d0:	f04f 0100 	mov.w	r1, #0
 80046d4:	4602      	mov	r2, r0
 80046d6:	460b      	mov	r3, r1
 80046d8:	1894      	adds	r4, r2, r2
 80046da:	66bc      	str	r4, [r7, #104]	; 0x68
 80046dc:	415b      	adcs	r3, r3
 80046de:	66fb      	str	r3, [r7, #108]	; 0x6c
 80046e0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80046e4:	1812      	adds	r2, r2, r0
 80046e6:	eb41 0303 	adc.w	r3, r1, r3
 80046ea:	f04f 0400 	mov.w	r4, #0
 80046ee:	f04f 0500 	mov.w	r5, #0
 80046f2:	00dd      	lsls	r5, r3, #3
 80046f4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80046f8:	00d4      	lsls	r4, r2, #3
 80046fa:	4622      	mov	r2, r4
 80046fc:	462b      	mov	r3, r5
 80046fe:	1814      	adds	r4, r2, r0
 8004700:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8004704:	414b      	adcs	r3, r1
 8004706:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800470a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	461a      	mov	r2, r3
 8004712:	f04f 0300 	mov.w	r3, #0
 8004716:	1891      	adds	r1, r2, r2
 8004718:	6639      	str	r1, [r7, #96]	; 0x60
 800471a:	415b      	adcs	r3, r3
 800471c:	667b      	str	r3, [r7, #100]	; 0x64
 800471e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8004722:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004726:	f7fb fd61 	bl	80001ec <__aeabi_uldivmod>
 800472a:	4602      	mov	r2, r0
 800472c:	460b      	mov	r3, r1
 800472e:	4b70      	ldr	r3, [pc, #448]	; (80048f0 <UART_SetConfig+0x3dc>)
 8004730:	fba3 1302 	umull	r1, r3, r3, r2
 8004734:	095b      	lsrs	r3, r3, #5
 8004736:	2164      	movs	r1, #100	; 0x64
 8004738:	fb01 f303 	mul.w	r3, r1, r3
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	00db      	lsls	r3, r3, #3
 8004740:	3332      	adds	r3, #50	; 0x32
 8004742:	4a6b      	ldr	r2, [pc, #428]	; (80048f0 <UART_SetConfig+0x3dc>)
 8004744:	fba2 2303 	umull	r2, r3, r2, r3
 8004748:	095b      	lsrs	r3, r3, #5
 800474a:	f003 0207 	and.w	r2, r3, #7
 800474e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4432      	add	r2, r6
 8004756:	609a      	str	r2, [r3, #8]
 8004758:	e26d      	b.n	8004c36 <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800475a:	f7ff f803 	bl	8003764 <HAL_RCC_GetPCLK1Freq>
 800475e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004762:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004766:	461c      	mov	r4, r3
 8004768:	f04f 0500 	mov.w	r5, #0
 800476c:	4622      	mov	r2, r4
 800476e:	462b      	mov	r3, r5
 8004770:	1891      	adds	r1, r2, r2
 8004772:	65b9      	str	r1, [r7, #88]	; 0x58
 8004774:	415b      	adcs	r3, r3
 8004776:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004778:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800477c:	1912      	adds	r2, r2, r4
 800477e:	eb45 0303 	adc.w	r3, r5, r3
 8004782:	f04f 0000 	mov.w	r0, #0
 8004786:	f04f 0100 	mov.w	r1, #0
 800478a:	00d9      	lsls	r1, r3, #3
 800478c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004790:	00d0      	lsls	r0, r2, #3
 8004792:	4602      	mov	r2, r0
 8004794:	460b      	mov	r3, r1
 8004796:	1911      	adds	r1, r2, r4
 8004798:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 800479c:	416b      	adcs	r3, r5
 800479e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80047a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	461a      	mov	r2, r3
 80047aa:	f04f 0300 	mov.w	r3, #0
 80047ae:	1891      	adds	r1, r2, r2
 80047b0:	6539      	str	r1, [r7, #80]	; 0x50
 80047b2:	415b      	adcs	r3, r3
 80047b4:	657b      	str	r3, [r7, #84]	; 0x54
 80047b6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80047ba:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80047be:	f7fb fd15 	bl	80001ec <__aeabi_uldivmod>
 80047c2:	4602      	mov	r2, r0
 80047c4:	460b      	mov	r3, r1
 80047c6:	4b4a      	ldr	r3, [pc, #296]	; (80048f0 <UART_SetConfig+0x3dc>)
 80047c8:	fba3 2302 	umull	r2, r3, r3, r2
 80047cc:	095b      	lsrs	r3, r3, #5
 80047ce:	011e      	lsls	r6, r3, #4
 80047d0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80047d4:	461c      	mov	r4, r3
 80047d6:	f04f 0500 	mov.w	r5, #0
 80047da:	4622      	mov	r2, r4
 80047dc:	462b      	mov	r3, r5
 80047de:	1891      	adds	r1, r2, r2
 80047e0:	64b9      	str	r1, [r7, #72]	; 0x48
 80047e2:	415b      	adcs	r3, r3
 80047e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047e6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80047ea:	1912      	adds	r2, r2, r4
 80047ec:	eb45 0303 	adc.w	r3, r5, r3
 80047f0:	f04f 0000 	mov.w	r0, #0
 80047f4:	f04f 0100 	mov.w	r1, #0
 80047f8:	00d9      	lsls	r1, r3, #3
 80047fa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80047fe:	00d0      	lsls	r0, r2, #3
 8004800:	4602      	mov	r2, r0
 8004802:	460b      	mov	r3, r1
 8004804:	1911      	adds	r1, r2, r4
 8004806:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 800480a:	416b      	adcs	r3, r5
 800480c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004810:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	461a      	mov	r2, r3
 8004818:	f04f 0300 	mov.w	r3, #0
 800481c:	1891      	adds	r1, r2, r2
 800481e:	6439      	str	r1, [r7, #64]	; 0x40
 8004820:	415b      	adcs	r3, r3
 8004822:	647b      	str	r3, [r7, #68]	; 0x44
 8004824:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004828:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800482c:	f7fb fcde 	bl	80001ec <__aeabi_uldivmod>
 8004830:	4602      	mov	r2, r0
 8004832:	460b      	mov	r3, r1
 8004834:	4b2e      	ldr	r3, [pc, #184]	; (80048f0 <UART_SetConfig+0x3dc>)
 8004836:	fba3 1302 	umull	r1, r3, r3, r2
 800483a:	095b      	lsrs	r3, r3, #5
 800483c:	2164      	movs	r1, #100	; 0x64
 800483e:	fb01 f303 	mul.w	r3, r1, r3
 8004842:	1ad3      	subs	r3, r2, r3
 8004844:	00db      	lsls	r3, r3, #3
 8004846:	3332      	adds	r3, #50	; 0x32
 8004848:	4a29      	ldr	r2, [pc, #164]	; (80048f0 <UART_SetConfig+0x3dc>)
 800484a:	fba2 2303 	umull	r2, r3, r2, r3
 800484e:	095b      	lsrs	r3, r3, #5
 8004850:	005b      	lsls	r3, r3, #1
 8004852:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004856:	441e      	add	r6, r3
 8004858:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800485c:	4618      	mov	r0, r3
 800485e:	f04f 0100 	mov.w	r1, #0
 8004862:	4602      	mov	r2, r0
 8004864:	460b      	mov	r3, r1
 8004866:	1894      	adds	r4, r2, r2
 8004868:	63bc      	str	r4, [r7, #56]	; 0x38
 800486a:	415b      	adcs	r3, r3
 800486c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800486e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004872:	1812      	adds	r2, r2, r0
 8004874:	eb41 0303 	adc.w	r3, r1, r3
 8004878:	f04f 0400 	mov.w	r4, #0
 800487c:	f04f 0500 	mov.w	r5, #0
 8004880:	00dd      	lsls	r5, r3, #3
 8004882:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004886:	00d4      	lsls	r4, r2, #3
 8004888:	4622      	mov	r2, r4
 800488a:	462b      	mov	r3, r5
 800488c:	1814      	adds	r4, r2, r0
 800488e:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8004892:	414b      	adcs	r3, r1
 8004894:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004898:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	461a      	mov	r2, r3
 80048a0:	f04f 0300 	mov.w	r3, #0
 80048a4:	1891      	adds	r1, r2, r2
 80048a6:	6339      	str	r1, [r7, #48]	; 0x30
 80048a8:	415b      	adcs	r3, r3
 80048aa:	637b      	str	r3, [r7, #52]	; 0x34
 80048ac:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80048b0:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80048b4:	f7fb fc9a 	bl	80001ec <__aeabi_uldivmod>
 80048b8:	4602      	mov	r2, r0
 80048ba:	460b      	mov	r3, r1
 80048bc:	4b0c      	ldr	r3, [pc, #48]	; (80048f0 <UART_SetConfig+0x3dc>)
 80048be:	fba3 1302 	umull	r1, r3, r3, r2
 80048c2:	095b      	lsrs	r3, r3, #5
 80048c4:	2164      	movs	r1, #100	; 0x64
 80048c6:	fb01 f303 	mul.w	r3, r1, r3
 80048ca:	1ad3      	subs	r3, r2, r3
 80048cc:	00db      	lsls	r3, r3, #3
 80048ce:	3332      	adds	r3, #50	; 0x32
 80048d0:	4a07      	ldr	r2, [pc, #28]	; (80048f0 <UART_SetConfig+0x3dc>)
 80048d2:	fba2 2303 	umull	r2, r3, r2, r3
 80048d6:	095b      	lsrs	r3, r3, #5
 80048d8:	f003 0207 	and.w	r2, r3, #7
 80048dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4432      	add	r2, r6
 80048e4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80048e6:	e1a6      	b.n	8004c36 <UART_SetConfig+0x722>
 80048e8:	40011000 	.word	0x40011000
 80048ec:	40011400 	.word	0x40011400
 80048f0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80048f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	4bd1      	ldr	r3, [pc, #836]	; (8004c40 <UART_SetConfig+0x72c>)
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d006      	beq.n	800490e <UART_SetConfig+0x3fa>
 8004900:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	4bcf      	ldr	r3, [pc, #828]	; (8004c44 <UART_SetConfig+0x730>)
 8004908:	429a      	cmp	r2, r3
 800490a:	f040 80ca 	bne.w	8004aa2 <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 800490e:	f7fe ff3d 	bl	800378c <HAL_RCC_GetPCLK2Freq>
 8004912:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004916:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800491a:	461c      	mov	r4, r3
 800491c:	f04f 0500 	mov.w	r5, #0
 8004920:	4622      	mov	r2, r4
 8004922:	462b      	mov	r3, r5
 8004924:	1891      	adds	r1, r2, r2
 8004926:	62b9      	str	r1, [r7, #40]	; 0x28
 8004928:	415b      	adcs	r3, r3
 800492a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800492c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004930:	1912      	adds	r2, r2, r4
 8004932:	eb45 0303 	adc.w	r3, r5, r3
 8004936:	f04f 0000 	mov.w	r0, #0
 800493a:	f04f 0100 	mov.w	r1, #0
 800493e:	00d9      	lsls	r1, r3, #3
 8004940:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004944:	00d0      	lsls	r0, r2, #3
 8004946:	4602      	mov	r2, r0
 8004948:	460b      	mov	r3, r1
 800494a:	eb12 0a04 	adds.w	sl, r2, r4
 800494e:	eb43 0b05 	adc.w	fp, r3, r5
 8004952:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	4618      	mov	r0, r3
 800495a:	f04f 0100 	mov.w	r1, #0
 800495e:	f04f 0200 	mov.w	r2, #0
 8004962:	f04f 0300 	mov.w	r3, #0
 8004966:	008b      	lsls	r3, r1, #2
 8004968:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800496c:	0082      	lsls	r2, r0, #2
 800496e:	4650      	mov	r0, sl
 8004970:	4659      	mov	r1, fp
 8004972:	f7fb fc3b 	bl	80001ec <__aeabi_uldivmod>
 8004976:	4602      	mov	r2, r0
 8004978:	460b      	mov	r3, r1
 800497a:	4bb3      	ldr	r3, [pc, #716]	; (8004c48 <UART_SetConfig+0x734>)
 800497c:	fba3 2302 	umull	r2, r3, r3, r2
 8004980:	095b      	lsrs	r3, r3, #5
 8004982:	011e      	lsls	r6, r3, #4
 8004984:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004988:	4618      	mov	r0, r3
 800498a:	f04f 0100 	mov.w	r1, #0
 800498e:	4602      	mov	r2, r0
 8004990:	460b      	mov	r3, r1
 8004992:	1894      	adds	r4, r2, r2
 8004994:	623c      	str	r4, [r7, #32]
 8004996:	415b      	adcs	r3, r3
 8004998:	627b      	str	r3, [r7, #36]	; 0x24
 800499a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800499e:	1812      	adds	r2, r2, r0
 80049a0:	eb41 0303 	adc.w	r3, r1, r3
 80049a4:	f04f 0400 	mov.w	r4, #0
 80049a8:	f04f 0500 	mov.w	r5, #0
 80049ac:	00dd      	lsls	r5, r3, #3
 80049ae:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80049b2:	00d4      	lsls	r4, r2, #3
 80049b4:	4622      	mov	r2, r4
 80049b6:	462b      	mov	r3, r5
 80049b8:	1814      	adds	r4, r2, r0
 80049ba:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 80049be:	414b      	adcs	r3, r1
 80049c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80049c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	4618      	mov	r0, r3
 80049cc:	f04f 0100 	mov.w	r1, #0
 80049d0:	f04f 0200 	mov.w	r2, #0
 80049d4:	f04f 0300 	mov.w	r3, #0
 80049d8:	008b      	lsls	r3, r1, #2
 80049da:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80049de:	0082      	lsls	r2, r0, #2
 80049e0:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80049e4:	f7fb fc02 	bl	80001ec <__aeabi_uldivmod>
 80049e8:	4602      	mov	r2, r0
 80049ea:	460b      	mov	r3, r1
 80049ec:	4b96      	ldr	r3, [pc, #600]	; (8004c48 <UART_SetConfig+0x734>)
 80049ee:	fba3 1302 	umull	r1, r3, r3, r2
 80049f2:	095b      	lsrs	r3, r3, #5
 80049f4:	2164      	movs	r1, #100	; 0x64
 80049f6:	fb01 f303 	mul.w	r3, r1, r3
 80049fa:	1ad3      	subs	r3, r2, r3
 80049fc:	011b      	lsls	r3, r3, #4
 80049fe:	3332      	adds	r3, #50	; 0x32
 8004a00:	4a91      	ldr	r2, [pc, #580]	; (8004c48 <UART_SetConfig+0x734>)
 8004a02:	fba2 2303 	umull	r2, r3, r2, r3
 8004a06:	095b      	lsrs	r3, r3, #5
 8004a08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a0c:	441e      	add	r6, r3
 8004a0e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004a12:	4618      	mov	r0, r3
 8004a14:	f04f 0100 	mov.w	r1, #0
 8004a18:	4602      	mov	r2, r0
 8004a1a:	460b      	mov	r3, r1
 8004a1c:	1894      	adds	r4, r2, r2
 8004a1e:	61bc      	str	r4, [r7, #24]
 8004a20:	415b      	adcs	r3, r3
 8004a22:	61fb      	str	r3, [r7, #28]
 8004a24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a28:	1812      	adds	r2, r2, r0
 8004a2a:	eb41 0303 	adc.w	r3, r1, r3
 8004a2e:	f04f 0400 	mov.w	r4, #0
 8004a32:	f04f 0500 	mov.w	r5, #0
 8004a36:	00dd      	lsls	r5, r3, #3
 8004a38:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004a3c:	00d4      	lsls	r4, r2, #3
 8004a3e:	4622      	mov	r2, r4
 8004a40:	462b      	mov	r3, r5
 8004a42:	1814      	adds	r4, r2, r0
 8004a44:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8004a48:	414b      	adcs	r3, r1
 8004a4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004a4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	4618      	mov	r0, r3
 8004a56:	f04f 0100 	mov.w	r1, #0
 8004a5a:	f04f 0200 	mov.w	r2, #0
 8004a5e:	f04f 0300 	mov.w	r3, #0
 8004a62:	008b      	lsls	r3, r1, #2
 8004a64:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004a68:	0082      	lsls	r2, r0, #2
 8004a6a:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8004a6e:	f7fb fbbd 	bl	80001ec <__aeabi_uldivmod>
 8004a72:	4602      	mov	r2, r0
 8004a74:	460b      	mov	r3, r1
 8004a76:	4b74      	ldr	r3, [pc, #464]	; (8004c48 <UART_SetConfig+0x734>)
 8004a78:	fba3 1302 	umull	r1, r3, r3, r2
 8004a7c:	095b      	lsrs	r3, r3, #5
 8004a7e:	2164      	movs	r1, #100	; 0x64
 8004a80:	fb01 f303 	mul.w	r3, r1, r3
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	011b      	lsls	r3, r3, #4
 8004a88:	3332      	adds	r3, #50	; 0x32
 8004a8a:	4a6f      	ldr	r2, [pc, #444]	; (8004c48 <UART_SetConfig+0x734>)
 8004a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a90:	095b      	lsrs	r3, r3, #5
 8004a92:	f003 020f 	and.w	r2, r3, #15
 8004a96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4432      	add	r2, r6
 8004a9e:	609a      	str	r2, [r3, #8]
 8004aa0:	e0c9      	b.n	8004c36 <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004aa2:	f7fe fe5f 	bl	8003764 <HAL_RCC_GetPCLK1Freq>
 8004aa6:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004aaa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004aae:	461c      	mov	r4, r3
 8004ab0:	f04f 0500 	mov.w	r5, #0
 8004ab4:	4622      	mov	r2, r4
 8004ab6:	462b      	mov	r3, r5
 8004ab8:	1891      	adds	r1, r2, r2
 8004aba:	6139      	str	r1, [r7, #16]
 8004abc:	415b      	adcs	r3, r3
 8004abe:	617b      	str	r3, [r7, #20]
 8004ac0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004ac4:	1912      	adds	r2, r2, r4
 8004ac6:	eb45 0303 	adc.w	r3, r5, r3
 8004aca:	f04f 0000 	mov.w	r0, #0
 8004ace:	f04f 0100 	mov.w	r1, #0
 8004ad2:	00d9      	lsls	r1, r3, #3
 8004ad4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004ad8:	00d0      	lsls	r0, r2, #3
 8004ada:	4602      	mov	r2, r0
 8004adc:	460b      	mov	r3, r1
 8004ade:	eb12 0804 	adds.w	r8, r2, r4
 8004ae2:	eb43 0905 	adc.w	r9, r3, r5
 8004ae6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	4618      	mov	r0, r3
 8004aee:	f04f 0100 	mov.w	r1, #0
 8004af2:	f04f 0200 	mov.w	r2, #0
 8004af6:	f04f 0300 	mov.w	r3, #0
 8004afa:	008b      	lsls	r3, r1, #2
 8004afc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004b00:	0082      	lsls	r2, r0, #2
 8004b02:	4640      	mov	r0, r8
 8004b04:	4649      	mov	r1, r9
 8004b06:	f7fb fb71 	bl	80001ec <__aeabi_uldivmod>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	460b      	mov	r3, r1
 8004b0e:	4b4e      	ldr	r3, [pc, #312]	; (8004c48 <UART_SetConfig+0x734>)
 8004b10:	fba3 2302 	umull	r2, r3, r3, r2
 8004b14:	095b      	lsrs	r3, r3, #5
 8004b16:	011e      	lsls	r6, r3, #4
 8004b18:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f04f 0100 	mov.w	r1, #0
 8004b22:	4602      	mov	r2, r0
 8004b24:	460b      	mov	r3, r1
 8004b26:	1894      	adds	r4, r2, r2
 8004b28:	60bc      	str	r4, [r7, #8]
 8004b2a:	415b      	adcs	r3, r3
 8004b2c:	60fb      	str	r3, [r7, #12]
 8004b2e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b32:	1812      	adds	r2, r2, r0
 8004b34:	eb41 0303 	adc.w	r3, r1, r3
 8004b38:	f04f 0400 	mov.w	r4, #0
 8004b3c:	f04f 0500 	mov.w	r5, #0
 8004b40:	00dd      	lsls	r5, r3, #3
 8004b42:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004b46:	00d4      	lsls	r4, r2, #3
 8004b48:	4622      	mov	r2, r4
 8004b4a:	462b      	mov	r3, r5
 8004b4c:	1814      	adds	r4, r2, r0
 8004b4e:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8004b52:	414b      	adcs	r3, r1
 8004b54:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004b58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f04f 0100 	mov.w	r1, #0
 8004b64:	f04f 0200 	mov.w	r2, #0
 8004b68:	f04f 0300 	mov.w	r3, #0
 8004b6c:	008b      	lsls	r3, r1, #2
 8004b6e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004b72:	0082      	lsls	r2, r0, #2
 8004b74:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004b78:	f7fb fb38 	bl	80001ec <__aeabi_uldivmod>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	460b      	mov	r3, r1
 8004b80:	4b31      	ldr	r3, [pc, #196]	; (8004c48 <UART_SetConfig+0x734>)
 8004b82:	fba3 1302 	umull	r1, r3, r3, r2
 8004b86:	095b      	lsrs	r3, r3, #5
 8004b88:	2164      	movs	r1, #100	; 0x64
 8004b8a:	fb01 f303 	mul.w	r3, r1, r3
 8004b8e:	1ad3      	subs	r3, r2, r3
 8004b90:	011b      	lsls	r3, r3, #4
 8004b92:	3332      	adds	r3, #50	; 0x32
 8004b94:	4a2c      	ldr	r2, [pc, #176]	; (8004c48 <UART_SetConfig+0x734>)
 8004b96:	fba2 2303 	umull	r2, r3, r2, r3
 8004b9a:	095b      	lsrs	r3, r3, #5
 8004b9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ba0:	441e      	add	r6, r3
 8004ba2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f04f 0100 	mov.w	r1, #0
 8004bac:	4602      	mov	r2, r0
 8004bae:	460b      	mov	r3, r1
 8004bb0:	1894      	adds	r4, r2, r2
 8004bb2:	603c      	str	r4, [r7, #0]
 8004bb4:	415b      	adcs	r3, r3
 8004bb6:	607b      	str	r3, [r7, #4]
 8004bb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004bbc:	1812      	adds	r2, r2, r0
 8004bbe:	eb41 0303 	adc.w	r3, r1, r3
 8004bc2:	f04f 0400 	mov.w	r4, #0
 8004bc6:	f04f 0500 	mov.w	r5, #0
 8004bca:	00dd      	lsls	r5, r3, #3
 8004bcc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004bd0:	00d4      	lsls	r4, r2, #3
 8004bd2:	4622      	mov	r2, r4
 8004bd4:	462b      	mov	r3, r5
 8004bd6:	1814      	adds	r4, r2, r0
 8004bd8:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8004bdc:	414b      	adcs	r3, r1
 8004bde:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004be2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	4618      	mov	r0, r3
 8004bea:	f04f 0100 	mov.w	r1, #0
 8004bee:	f04f 0200 	mov.w	r2, #0
 8004bf2:	f04f 0300 	mov.w	r3, #0
 8004bf6:	008b      	lsls	r3, r1, #2
 8004bf8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004bfc:	0082      	lsls	r2, r0, #2
 8004bfe:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8004c02:	f7fb faf3 	bl	80001ec <__aeabi_uldivmod>
 8004c06:	4602      	mov	r2, r0
 8004c08:	460b      	mov	r3, r1
 8004c0a:	4b0f      	ldr	r3, [pc, #60]	; (8004c48 <UART_SetConfig+0x734>)
 8004c0c:	fba3 1302 	umull	r1, r3, r3, r2
 8004c10:	095b      	lsrs	r3, r3, #5
 8004c12:	2164      	movs	r1, #100	; 0x64
 8004c14:	fb01 f303 	mul.w	r3, r1, r3
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	011b      	lsls	r3, r3, #4
 8004c1c:	3332      	adds	r3, #50	; 0x32
 8004c1e:	4a0a      	ldr	r2, [pc, #40]	; (8004c48 <UART_SetConfig+0x734>)
 8004c20:	fba2 2303 	umull	r2, r3, r2, r3
 8004c24:	095b      	lsrs	r3, r3, #5
 8004c26:	f003 020f 	and.w	r2, r3, #15
 8004c2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4432      	add	r2, r6
 8004c32:	609a      	str	r2, [r3, #8]
}
 8004c34:	e7ff      	b.n	8004c36 <UART_SetConfig+0x722>
 8004c36:	bf00      	nop
 8004c38:	37f4      	adds	r7, #244	; 0xf4
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c40:	40011000 	.word	0x40011000
 8004c44:	40011400 	.word	0x40011400
 8004c48:	51eb851f 	.word	0x51eb851f

08004c4c <__libc_init_array>:
 8004c4c:	b570      	push	{r4, r5, r6, lr}
 8004c4e:	4d0d      	ldr	r5, [pc, #52]	; (8004c84 <__libc_init_array+0x38>)
 8004c50:	4c0d      	ldr	r4, [pc, #52]	; (8004c88 <__libc_init_array+0x3c>)
 8004c52:	1b64      	subs	r4, r4, r5
 8004c54:	10a4      	asrs	r4, r4, #2
 8004c56:	2600      	movs	r6, #0
 8004c58:	42a6      	cmp	r6, r4
 8004c5a:	d109      	bne.n	8004c70 <__libc_init_array+0x24>
 8004c5c:	4d0b      	ldr	r5, [pc, #44]	; (8004c8c <__libc_init_array+0x40>)
 8004c5e:	4c0c      	ldr	r4, [pc, #48]	; (8004c90 <__libc_init_array+0x44>)
 8004c60:	f000 f820 	bl	8004ca4 <_init>
 8004c64:	1b64      	subs	r4, r4, r5
 8004c66:	10a4      	asrs	r4, r4, #2
 8004c68:	2600      	movs	r6, #0
 8004c6a:	42a6      	cmp	r6, r4
 8004c6c:	d105      	bne.n	8004c7a <__libc_init_array+0x2e>
 8004c6e:	bd70      	pop	{r4, r5, r6, pc}
 8004c70:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c74:	4798      	blx	r3
 8004c76:	3601      	adds	r6, #1
 8004c78:	e7ee      	b.n	8004c58 <__libc_init_array+0xc>
 8004c7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c7e:	4798      	blx	r3
 8004c80:	3601      	adds	r6, #1
 8004c82:	e7f2      	b.n	8004c6a <__libc_init_array+0x1e>
 8004c84:	08004ce4 	.word	0x08004ce4
 8004c88:	08004ce4 	.word	0x08004ce4
 8004c8c:	08004ce4 	.word	0x08004ce4
 8004c90:	08004ce8 	.word	0x08004ce8

08004c94 <memset>:
 8004c94:	4402      	add	r2, r0
 8004c96:	4603      	mov	r3, r0
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d100      	bne.n	8004c9e <memset+0xa>
 8004c9c:	4770      	bx	lr
 8004c9e:	f803 1b01 	strb.w	r1, [r3], #1
 8004ca2:	e7f9      	b.n	8004c98 <memset+0x4>

08004ca4 <_init>:
 8004ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ca6:	bf00      	nop
 8004ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004caa:	bc08      	pop	{r3}
 8004cac:	469e      	mov	lr, r3
 8004cae:	4770      	bx	lr

08004cb0 <_fini>:
 8004cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cb2:	bf00      	nop
 8004cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cb6:	bc08      	pop	{r3}
 8004cb8:	469e      	mov	lr, r3
 8004cba:	4770      	bx	lr
