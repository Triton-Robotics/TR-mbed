#include "main.h"
// #include "Infantry.h"
// #include <jetson.h>
#include <cstdlib>

#include <iostream>
#include "subsystems/ChassisSubsystem.h"

#define PI 3.14159265

#define UPPERBOUND 50.0 // Bound of how high turret can point in degrees
#define LOWERBOUND -30.0 // Bound of how low turret can point in degrees

#define UPPERBOUND_TICKS (UPPERBOUND/360.0) * 8192 // Upperbound ticks relative to 0 (4250) ticks: 1137 ticks CCW to 4250, ie 4250-1137 = 3112 absolute pos
#define LOWERBOUND_TICKS (LOWERBOUND/360.0) * 8192 // 682 ticks below/CW to 4250. ie 4932

#define PITCH_LEVEL_TICKS 4160 // The tick value of level turret pitch. Also used for initial offset


#define PITCH_SPEED_JOYSTICK_SENSE 10.0/330
// [8129/360] = ticks per deg

// add radius measurement here
#define RADIUS 0.5
#define RUNSPIN 1.0

#define JOYSTICK_SENSE_YAW 1.0/90
#define JOYSTICK_SENSE_PITCH 1.0/150
#define MOUSE_SENSE_YAW 1.0/5
#define MOUSE_SENSE_PITCH 1.0/5
#define MOUSE_KB_MULT 0.2

I2C i2c(I2C_SDA, I2C_SCL);

BNO055 imu(i2c, IMU_RESET, MODE_IMU);
ChassisSubsystem Chassis(1, 2, 3, 4, imu, 0.2286); // radius is 9 in
DJIMotor yaw(7, CANHandler::CANBUS_1, GIMBLY,"Yeah");
DJIMotor pitch(7, CANHandler::CANBUS_2, GIMBLY,"Peach"); // right
DJIMotor pitch2(6, CANHandler::CANBUS_2, GIMBLY,"useless"); // left, not functioning

DJIMotor indexer(7, CANHandler::CANBUS_2, C610,"Indexer");
DJIMotor RFLYWHEEL(8, CANHandler::CANBUS_2, M3508,"RightFly");
DJIMotor LFLYWHEEL(5, CANHandler::CANBUS_2, M3508,"LeftFly");

DigitalOut led(L26);
DigitalOut led2(L27);
DigitalOut led3(L25);
DigitalOut led4(LED1);
DigitalIn button(BUTTON1);
DigitalIn jumper(PC_9);

BNO055_ANGULAR_POSITION_typedef imuAngles;

#define PID_POS 1 // Use pitch speed PID
#define PID_SPD 0 // Use pitch position PID

int calculateDeltaYaw(int ref_yaw, int beforeBeybladeYaw)
{
    int deltaYaw = beforeBeybladeYaw - ref_yaw;

    if (abs(deltaYaw) > 180)
    {
        if (deltaYaw > 0)
            deltaYaw -= 360;
        else
            deltaYaw += 360;
    }
    return deltaYaw;
}

int main()
{

    DJIMotor::s_setCANHandlers(&canHandler1, &canHandler2, false, false);

    /*
    * MOTORS SETUP AND PIDS
    */

    pitch.setPositionPID(18, 0.01, 850); //12.3 0.03 2.5 //mid is 13.3, 0.03, 7.5
    pitch.setPositionIntegralCap(6000);
  //   merge difference:
//     pitch.setPositionPID(17.3, 0.03, 8.5); // 12.3 0.03 2.5 //mid is 13.3, 0.03, 7.5
//     pitch.setPositionIntegralCap(60000);
//    pitch.setPositionOutputCap(100000);
    pitch.pidPosition.feedForward = 0;
    pitch.outputCap = 32760;
    pitch.useAbsEncoder = true;


    pitch.useAbsEncoder = true;
    pitch.setPositionPID(15, 0, 1700); //15, 0 1700
    pitch.setPositionOutputCap(32000);
    float currentPitch = 0;
    float desiredPitchPos = 0; // Desired pitch relative to level pitch
    float desiredYaw = 0;

    float desiredPitchSpeed = 0;
    
    int des_pitch_ticks_rel = 0; // Desired pitch relative to level pitch in ticks

    float pitch_phase = 33 / 180.0 * PI; // 5.69 theoretical
    float InitialOffset_Ticks = 4250; // Tick value of level pitch
    float K = 0.38; // 0.38

    LFLYWHEEL.setSpeedPID(7.5, 0, 0.04);
    RFLYWHEEL.setSpeedPID(7.5, 0, 0.04);

    //     merge difference
    //     PID yawIMU(200.0, 0.1, 150, 20000, 8000); // 7.0,0.02,15.0,20000,8000
    Chassis.setYawReference(&yaw, 4098); // "5604" is the number of ticks of yawOne considered to be robot-front
    Chassis.setSpeedFF_Ks(0.065);
    
    yaw.setSpeedPID(3.5, 0, 200);
    PID yawBeyblade(0.32, 0, 550);
    PID yawNonBeyblade(0.15, 0, 550);

    yaw.setSpeedIntegralCap(1000);
    yaw.useAbsEncoder = false;

    indexer.setSpeedPID(1, 0, 1);
    indexer.setSpeedIntegralCap(8000);
    //PID for indexer angle position control. Surely there are better names then "sure"...
    PID sure(0.5,0,0.4);
    sure.setOutputCap(4000);
    unsigned long timeSure;
    unsigned long prevTimeSure;
    //  merge difference
    //   chassis.setBrakeMode(ChassisSubsystem::BrakeMode::COAST);

    // command.initialize();

    /*
    * OPERATIONAL VARIABLES
    */
    unsigned long loopTimer = us_ticker_read();

    int refLoop = 0;
    int ref_yaw;

    int yawSetPoint = imuAngles.yaw;
    double rotationalPower = 0;

    jumper.mode(PullDown);

    DJIMotor::s_getFeedback();
    double beybladeSpeed = 2;
    bool beybladeIncreasing = true;

    float chassis_power;
    uint16_t chassis_power_limit;
    uint16_t ref_chassis_temp1;
    uint16_t ref_chassis_temp2;
    uint16_t heatMax1;
    uint16_t heatMax2;

    int counter = 0;

    unsigned long lastTime = 0;
    unsigned long yawTime = us_ticker_read();

    //Variables & PID for burst fire
    bool shoot = false;
    //int shootPosition;
    int shootTargetPosition = 36*8190 ;
    bool shootReady = false;

    char drive = 'o';
    char shot = 'o';

    bool userButton;
    bool prev_userButton;
    char driveMode = 'j';

    int yawVelo = 0;

    pitch.setPositionPID(29, 0.17, 6200); // think about D-cap and potentially raising FF. if the setpoint is always higher than actual,
    // then could try to up FF to get there
    // pitch.setSpeedPID(0,0,0);
    pitch.setPositionIntegralCap(3000);

    // TRY SPEEDPID, much easier to tune anshal said

    while (true)
    {
        unsigned long timeStart = us_ticker_read();

        if ((timeStart - loopTimer) / 1000 > 25){
            led3 = !led3;

            loopTimer = timeStart;
            remoteRead();

            if(jumper){
                driveMode = 'm';
                // led = 1;
            }else{
                driveMode = 'j';
                // led = 0;
            }
            if(remote.keyPressed(Remote::Key::R)){
                drive = 'm';
            }else if(remote.keyPressed(Remote::Key::E)){
                drive = 'u';
            }else if(remote.keyPressed(Remote::Key::Q)){
                drive = 'd';        
            }
            if(remote.keyPressed(Remote::Key::C)){
                shot = 'm';
            }else if(remote.keyPressed(Remote::Key::V)){
                shot = 'u';
            }else if(remote.keyPressed(Remote::Key::B)){
                shot = 'd';        
            }

            refLoop++;
            if (refLoop >= 5){
                refereeThread(&referee);
                refLoop = 0;
                led2 = !led2;
            }

            // remote.Read values are given in range
            double scalar = 1;
            double jx = remote.leftX() / 660.0 * scalar;
            double jy = remote.leftY() / 660.0 * scalar;
            double jr = remote.rightX() / 660.0 * scalar;


            // Default to 0 if less than a certain value
            double tolerance = 0.05;
            jx = (abs(jx) < tolerance) ? 0 : jx;
            jy = (abs(jy) < tolerance) ? 0 : jy;
            jr = (abs(jr) < tolerance) ? 0 : jr;

            int rightStickY = remote.rightY(); // Remote values for testing
            int rightStickX = remote.rightX();

            float mult = 1;

            jx += mult * ((remote.keyPressed(Remote::Key::D) ? 1 : 0) + (remote.keyPressed(Remote::Key::A) ? -1 : 0));
            jy += mult * ((remote.keyPressed(Remote::Key::W) ? 1 : 0) + (remote.keyPressed(Remote::Key::S) ? -1 : 0));
            jr += mult * ((remote.keyPressed(Remote::Key::E) ? 1 : 0) + (remote.keyPressed(Remote::Key::Q) ? -1 : 0));

            jr *= 1000;

            currentPitch = (double(pitch.getData(ANGLE) - PITCH_LEVEL_TICKS) / TICKS_REVOLUTION) * 360; // degrees

            /* Yaw */
            if (remote.rightSwitch() == Remote::SwitchState::UP) {
                unsigned long time = us_ticker_read();
                lastTime = time;

                timeSure = us_ticker_read();
                
                // yaw.pidSpeed.feedForward = dir * (874 + (73.7 * abs(yawVelo)) + (0.0948 * yawVelo * yawVelo)); // saturation of gimbly power to velocity
                desiredYaw += rightStickX * (1.0/300);

                // printff("jr: %f, PO: %d, angle: %d\n", jr, yaw>>POWEROUT, yaw>>ANGLE);
                yaw.setPower(0);

                prevTimeSure = timeSure;
            }
            else if (drive == 'm' || (drive =='o' && remote.rightSwitch() == Remote::SwitchState::MID || remote.rightSwitch() == Remote::SwitchState::UNKNOWN)){ // disable all the non-serializer components
                Chassis.setSpeedFF_Ks(0.065);
                Chassis.setWheelPower({0,0,0,0});
                yaw.setPower(0);

                yawSetPoint = (imuAngles.yaw + 180) ;
                yawSetPoint = yawSetPoint % 360;
            }
            else if (drive == 'd' || (drive =='o' && remote.rightSwitch() == Remote::SwitchState::DOWN)){           // beyblade mode
                unsigned long time = us_ticker_read(); //time for pid
                pitch.setPower(0);
                Chassis.setSpeedFF_Ks(0.065);
                Chassis.setChassisSpeeds({jx * Chassis.m_OmniKinematicsLimits.max_Vel,
                                          jy * Chassis.m_OmniKinematicsLimits.max_Vel,
                                          -RUNSPIN },ChassisSubsystem::YAW_ORIENTED);

                // if(driveMode == 'm'){
                //     yawSetPoint -= remote.getMouseX() * MOUSE_SENSE_YAW;
                // }else{
                //     yawSetPoint -= remote.rightX() * JOYSTICK_SENSE_YAW;
                // }

                yawSetPoint -= remote.getMouseX() * MOUSE_SENSE_YAW;
                if(remote.rightX() > 10 || remote.rightX() < -10){
                    yawSetPoint -= remote.rightX() * JOYSTICK_SENSE_YAW;
                }

                yawSetPoint = (yawSetPoint+360) % 360;
                
                timeSure = us_ticker_read();

                yawVelo = -Chassis.getChassisSpeeds().vOmega / 3.14 * 30 + yawBeyblade.calculatePeriodic(DJIMotor::s_calculateDeltaPhase(yawSetPoint,imuAngles.yaw+180, 360), timeSure - prevTimeSure);

                int dir = 0;
                if(yawVelo > 0){
                    dir = 1;
                }else if(yawVelo < 0){
                    dir = -1;
                }
                yaw.pidSpeed.feedForward = 2 * dir * (874 + (73.7 * abs(yawVelo)) + (0.0948 * yawVelo * yawVelo));
                
                yaw.setSpeed(yawVelo);
                imu.get_angular_position_quat(&imuAngles);

                prevTimeSure = timeSure;
            }
            yawTime = us_ticker_read();


            // burst fire, turn the indexer to shoot 3-5 balls a time and stop indexer
            // only shoot when left switch changes from down/unknown/mid to up
            // if left switch remains at up state, indexer stops after 3-5 balls
            if (shoot){
                if (indexer>>MULTITURNANGLE >= shootTargetPosition){
                    indexer.setSpeed(0);
                    shoot = false;
                } else {
                    timeSure = us_ticker_read();
                    indexer.setSpeed(sure.calculate(shootTargetPosition, indexer>>MULTITURNANGLE, timeSure - prevTimeSure)); //
                    prevTimeSure = timeSure;
                }
            } else {
                indexer.setSpeed(0);
            }

            // joystick down raises ticks, joystick up lessens ticks
            // joystick down, -660 so desired pitch -= (-660) * 1/300 = += 2 deg at a time full
            // so motors are like look at it from outwards turns clockwise from the outside ticks increasing

            // more negative deg translates to less ticks (wrong way). neg should translate to more ticks


            /* Pitch */
            //PITCH CODE, if remote is UP or DOWN, run pitch code, else off
            if (drive == 'u' || drive == 'd' || (drive == 'o' && (remote.rightSwitch() == Remote::SwitchState::UP ||
                remote.rightSwitch() == Remote::SwitchState::DOWN))){
                /**
                 * change_in_angle_deg - the input desired change in angle in degrees
                 * des_pitch_deg - desired pitch relative to the level pitch
                 * des_pitch_ticks - desired pitch relative to the level in 
                 */
                // rightStickY is like [-660, 660]. This should map to some amount of angle above and below the equilibrium
                float pitch_pos_joystick_sense = 1.0/300;

                float change_in_angle_deg = remote.getMouseY() * MOUSE_SENSE_PITCH - rightStickY * pitch_pos_joystick_sense;

                desiredPitchPos += change_in_angle_deg;
#if PID_POS                
                


                des_pitch_ticks_rel += (int)( (change_in_angle_deg/360) * 8192 );
                
                
                if (desiredPitchPos <= LOWERBOUND) {
                    desiredPitchPos = LOWERBOUND;
                    des_pitch_ticks_rel = LOWERBOUND_TICKS;
                }
                else if (desiredPitchPos >= UPPERBOUND) {
                    desiredPitchPos = UPPERBOUND;
                    des_pitch_ticks_rel = UPPERBOUND_TICKS;
                }

                // float FF = K * sin((desiredPitchPos / 180 * PI) - pitch_phase); // output: [-1,1]
                float FF = -8500 * cos(desiredPitchPos * PI/180);


                // pitch.pidPosition.feedForward = int((INT16_T_MAX) * FF); // 
                pitch.pidPosition.feedForward = FF;
                // pitch.setPosition(int((desiredPitchPos / 360) * TICKS_REVOLUTION + PITCH_LEVEL_TICKS)); // desiredPitchPos (deg) to ticks
                printff("%d %d %d %d\n", PITCH_LEVEL_TICKS - des_pitch_ticks_rel, pitch>>ANGLE, (int)pitch.pidPosition.dC, (int)pitch.pidPosition.iC); // des, angle, atual
                // printff("%d %d %d %d\n", PITCH_LEVEL_TICKS - des_pitch_ticks_rel, pitch>>ANGLE, (int)pitch.pidPosition.pC, (int)pitch.pidPosition.iC);
                // printff("%d %d %d\n", pitch>>POWEROUT, pitch.pidPosition.pC, pitch.pidPosition.iC);
                pitch.setPosition(PITCH_LEVEL_TICKS - des_pitch_ticks_rel);
#endif

#if PID_SPD // [-175RPM, 175RPM] maps to like [-16k, 16k] which is as much as you should really give GIMBLYs
                
                desiredPitchPos += remote.getMouseY() * MOUSE_SENSE_PITCH - rightStickY * pitch_pos_joystick_sense;
                
                desiredPitchSpeed = remote.getMouseY() * MOUSE_SENSE_PITCH - rightStickY * PITCH_SPEED_JOYSTICK_SENSE; // desiredSpeed in RPM

                if (desiredPitchPos <= LOWERBOUND) {
                    desiredPitchPos = LOWERBOUND;
                }
                else if (desiredPitchPos >= UPPERBOUND) {
                    desiredPitchPos = UPPERBOUND;
                }

                int dir = 0;
                if (rightStickY > 0) {
                    dir = 1;
                }
                else {
                    dir = -1;
                }

                float FF_gravity = -8500 * cos(desiredPitchPos * PI/180);
                int pitchVelo = desiredPitchSpeed;

                float FF_speed = dir * (874 + (73.7 * abs(pitchVelo)) + (0.0948 * pitchVelo * pitchVelo)); // saturation of gimbly power to velocity

                pitch.pidSpeed.feedForward = FF_gravity + FF_speed;
                // pitch.setPosition(int((desiredPitchPos / 360) * TICKS_REVOLUTION + PITCH_LEVEL_TICKS)); // desiredPitchPos (deg) to ticks
                printff("%d %d %d %d\n", rightStickY, ((int)desiredPitchSpeed), pitch>>VELOCITY, pitch>>POWEROUT); // des, angle, atual
                pitch.setSpeed(desiredPitchSpeed);
#endif

                // pitch.setPower(-8500);
            } else{
                pitch.setPower(0);
            }


            /**
             * left switch controls burst fire: indexer and flywheels
             * state down or unknown: no motion
             * state mid: flywheels running, resetting shoot state
             * state up: flywheels continues running, turn indexer if state set by state mid
             */
            if (remote.leftSwitch() == Remote::SwitchState::UP || remote.getMouseL()){
                // Monitors state of left switch at previous loop and determine whether to turn indexer on
                // if left switch was at other states, turn indexer on
                // otherwise, continue the burstfire and stop after 3-5 shots
                // $shootReady local to if block, $shoot variable used above
                if (shootReady){
                    shootReady = false;
                    // shoot = true;
                    shootTargetPosition = 8192 * 12 + (indexer>>MULTITURNANGLE);

                    //shoot limit
                    if(robot_status.shooter_barrel_heat_limit < 10 || power_heat_data.shooter_17mm_1_barrel_heat < robot_status.shooter_barrel_heat_limit - 40) {
                        shoot = true;
                    }
                    
                }
            } else {
                //SwitchState state set to mid/down/unknown
                shootReady = true;
            }

            if (remote.leftSwitch() != Remote::SwitchState::DOWN &&
                remote.leftSwitch() != Remote::SwitchState::UNKNOWN){
                RFLYWHEEL.setSpeed(7000);
                LFLYWHEEL.setSpeed(-7000);
            } else{
                // left SwitchState set to up/mid/unknown
                RFLYWHEEL.setSpeed(0);
                LFLYWHEEL.setSpeed(0);

            }

            DJIMotor::s_sendValues();
        }
        unsigned long timeEnd = us_ticker_read() / 1000;
        DJIMotor::s_getFeedback();
        prev_userButton = userButton;
        ThisThread::sleep_for(1ms);
        userButton = button;
    }
}